[{"content":"FreeBSDのOSアップグレードは再起動が2回 FreeBSDのアップグレードはfreebsd-updateコマンドが生まれたことでかなり楽になった。\nが、面倒臭さにはキリがないもので、それさえも面倒になってきた。\nというのも。\nまずfreebsd-updateは、アップグレード先バージョンのファイルと今のバージョンのファイルの差分を確認し、必要なファイルをダウンロードする。\n次に新しいカーネルをインストールし、一回再起動。\nそれで問題がなければ、今度はユーザランドを新しくし、再起動という流れ。\nOS自体のアップグレードは何が起こるかわからないので、上記のように着実に進めているというわけ。\nただ、サーバ用途のマシンならともかく、デスクトップ用途とか、すぐにロールバックできる仮想マシンなら、さっさとアップグレードしてしまいたい。\n何より各ステップで発生する人間の操作を極力少なくしたい。\nZFS上にインストールされているFreeBSDなら、無人とは言わないまでも再起動は一度で済む。\nbeadmを使った無人アップグレード 条件は\n ZFSにインストールされたFreeBSDであること beadm1.3.5以上がインストールされていること  である。\nbeadmとは、ZFSのブート環境を管理するツール。\npkgまたはportsからインストールできる。\nこのツールと、chrootを使って実現する。\n具体的にはchroot環境でアップグレードをしたのち、その環境と原環境を差し替える。\nbeadmのインストール さっそくインストール。\npkgにもあるが、バージョンが1.3.5以上であることを確認すること。\n2022/5/8時点ではpkgには1.3.2しかないようなので、portsからインストールした。\n~\u0026gt; pkg search beadm beadm-1.3.2 Solaris-like utility to manage Boot Environments on ZFS ~\u0026gt; sudo portsnap fetch update #\u0026lt;-- portsのアップデート) \u0026lt;snip\u0026gt; \u0026gt; psearch beadm #\u0026lt;-- portsの検索) sysutils/beadm Solaris-like utility to manage Boot Environments on ZFS sysutils/beadm-devel Solaris-like utility to manage Boot Environments on ZFS ~\u0026gt; cd /usr/ports/sysutils/beadm ~\u0026gt; make install clean \u0026lt;snip\u0026gt;  ~\u0026gt; beadm --version  ___ ___ __ ____ __  / / / / / // \\\\ \\  / / ____ ____ ___/ /___ ___ / // / / \\ \\  / \\ / _ \\ / \\ / // \\ \\/ / \\ \\ / /  / / // ___// / // / // / / /\\ \\ / / // /  \\____/ \\____/ \\_____\\\\____//__/__/__/ \\_\\\\____//_/ beadm 1.3.5 2022/05/06 ~\u0026gt; beadmの基本 以下、beadmの基本。\nBEとはブート環境の意味。\nbeadm list : BEの一覧を表示する。Active欄でNは現在有効なBEを指し、Rは次回起動時に有効になるBEを指す。\nbeadm create \u0026lt;name\u0026gt; : nameというBEを作る。\nbeadm destory \u0026lt;name\u0026gt; : nameというBEを削除する。\nbeadm rename \u0026lt;nameA\u0026gt; \u0026lt;nameB\u0026gt; : nameAをnameBに変える。\nbeadm chroot \u0026lt;name\u0026gt; : nameというBEにchrootする。\n作業 実際の作業スタート。\n基本、管理者権限で。\n以下では13.1-RC6にアップグレードする場合のサンプル。\n()で注釈をつける。\n随時beadm listで内容を確認すること。\n(beadmで一時環境作成)  ~\u0026gt; sudo beadm create 13.1-RC6 Created successfully (beadm chrootでその環境へ移る)  ~\u0026gt; sudo beadm chroot 13.1-RC6 Entered chroot(8) for \u0026#39;13.1-RC6\u0026#39; boot environment root@temp:/ # (freebsd-update upgrade実行) root@temp:/ # yes | freebsd-update upgrade -r 13.1-RC6 (インストールされたファイルの確認があるのでq連打) (再起動2回実行) root@temp:/ # sh -c \u0026#39;for I in 1 2 3; do freebsd-updte install; done\u0026#39; src component not installed, skipped Installing updates... Kernel updates have been installed. Please reboot and run \u0026#34;/usr/sbin/freebsd-update install\u0026#34; again to finish installing updates. Installing updates...Scanning //usr/share/certs/blacklisted for certificates... Scanning //usr/share/certs/trusted for certificates... Scanning //usr/local/share/certs for certificates...  done. No updates are available to install. Run \u0026#39;/usr/sbin/freebsd-update fetch\u0026#39; first. (環境から抜ける) root@temp:/ # exit exit Leaved from chroot(8) for \u0026#39;13.1-RC6\u0026#39; boot environment (beadm activateで次回のブート環境をスイッチする)  ~\u0026gt; sudo beadm activate 13.1-RC6 パスワード: Activated successfully  ~\u0026gt; (再起動) ~\u0026gt; reboot 以上の通り再起動すればバージョンも上がっているはず。\n(バージョン確認) ~\u0026gt; uname -a FreeBSD xanadu 13.1-RC6 FreeBSD 13.1-RC6 releng/13.1-n250146-cd651fcc491 GENERIC amd64 もしもうまく行かない場合には、おそらくシングルモード起動-\u0026gt;マウント-\u0026gt;旧環境にbeadm activate-\u0026gt;再起動でなんとかなるはず。。\n古い環境はbeadm destoryで消しておく。\n ~\u0026gt; beadm list BE Active Mountpoint Space Created default - - 8.0M 2021-11-09 23:44 13.1-BETA1_2022-04-29_092431 - - 1.1G 2022-04-29 09:24 13.1-RC4_2022-05-01_204553 - - 602.0M 2022-05-01 20:45 13.1-RC6 NR / 21.7G 2022-05-08 20:53  ~\u0026gt; sudo beadm destroy 13.1-BETA1_2022-04-29_092431 パスワード: Are you sure you want to destroy \u0026#39;13.1-BETA1_2022-04-29_092431\u0026#39;? This action cannot be undone (y/[n]): y Boot environment \u0026#39;13.1-BETA1_2022-04-29_092431\u0026#39; was created from existing snapshot Destroy \u0026#39;13.1-RC6@2022-04-29-09:24:31-0\u0026#39; snapshot? (y/[n]): Origin snapshot \u0026#39;13.1-RC6@2022-04-29-09:24:31-0\u0026#39; will be preserved Destroyed successfully 以上\n","permalink":"https://nobwak.github.io/posts/2022/2022-05-08-freebsd%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89%E6%99%82%E9%96%93%E7%9F%AD%E7%B8%AE/","summary":"FreeBSDのOSアップグレードは再起動が2回 FreeBSDのアップグレードはfreebsd-updateコマンドが生まれたことでかなり楽","title":"2022-05-08-FreeBSDアップグレード時間短縮"},{"content":"過去のバージョンの記録から抹殺する。\n晴天の霹靂 gitで管理している過去のバージョンファイルに脆弱性あり webサーバに置く内容をgitでバージョン管理をしているのだが、githubから「深刻なセキュリティ上の問題があるから対応しなさい」と警告が来るようになった。\n警告対象はRuby関連のファイル。\nJekyllでコンテンツを作成していたせいか、Ruby関連のファイルもリポジトリに登録されているからのようだ。\nとはいっても、過去のファイルであるし、そもそも今はJekyllでコンテンツを作成していない。\nとなれば本当に危険なのかどうか、よく分からないがリポジトリからそういった過去のバージョンをまるまる削除することにする。\ngit rebase そういったバージョンの操作にはgit rebaseを使うようだ。\n以下、手順を記す。\nコミットの特定 git log --onelineとし、コミットの一覧を表示させて、削除するコミットを特定する。\n$ git log --oneline f4f4d170 (HEAD, origin/master, origin/HEAD) remove some tags 0154f932 remove some tags 0212779a add some articles 4a38e31c completely rewrited 35594523 rebuilding site Fri Apr 17 18:41:34 JST 2020 上記の355..より後、最新のf4f4より前のコミットを操作したい場合とする。\nrebaseの実行 git rebase -i 35594523と実行する。\nすると後述のような画面になる。\nviと同じ操作ができる。\nなお、一番古いコミットから操作をしたい場合には、git rebase -i --rootとする。\nコミットの操作 さてgit rebase -iで表示させた画面で作業を行う。\npick 4a38e31c completely rewrited pick 0212779a add some articles pick 0154f932 remove some tags pick f4f4d170 remove some tags # Rebase 0f54f922..f3f4d160 onto 0f54f922 (2 commands) # # Commands: # p, pick \u0026lt;commit\u0026gt; = use commit # r, reword \u0026lt;commit\u0026gt; = use commit, but edit the commit message # e, edit \u0026lt;commit\u0026gt; = use commit, but stop for amending # s, squash \u0026lt;commit\u0026gt; = use commit, but meld into previous commit # f, fixup [-C | -c] \u0026lt;commit\u0026gt; = like \u0026#34;squash\u0026#34; but keep only the previous # commit\u0026#39;s log message, unless -C is used, in which case # keep only this commit\u0026#39;s message; -c is same as -C but # opens the editor # x, exec \u0026lt;command\u0026gt; = run command (the rest of the line) using shell # b, break = stop here (continue rebase later with \u0026#39;git rebase --continue\u0026#39;) # d, drop \u0026lt;commit\u0026gt; = remove commit # l, label \u0026lt;label\u0026gt; = label current HEAD with a name # t, reset \u0026lt;label\u0026gt; = reset HEAD to a label # m, merge [-C \u0026lt;commit\u0026gt; | -c \u0026lt;commit\u0026gt;] \u0026lt;label\u0026gt; [# \u0026lt;oneline\u0026gt;] # . create a merge commit using the original merge commit\u0026#39;s # . message (or the oneline, if no original merge commit was # . specified); use -c \u0026lt;commit\u0026gt; to reword the commit message # # These lines can be re-ordered; they are executed from top to bottom. # # If you remove a line here THAT COMMIT WILL BE LOST. # # However, if you remove everything, the rebase will be aborted. 説明に書いてあるとおり、操作はpickと書かれているコマンドを書き換えたり、あるいは行自体を書き換えることで行う。\nこの記事で挙げた用途で使うコマンドは、squash、fixupの２つ。\nsquashの場合、コミットメッセージを編集する。\nfixupはコミットメッセージも削る。\nもし行自体を削除すると、そのコミット自体が無くなる。\ngit commitやりなおし :wqでエディタを終了すると、各コミットごとにgit commitのやり直しが始まる。\n基本的にはgit add .とし、git commit、コミットメッセージ編集、git rebase --continueを繰り返せばよい。\n結構複雑な処理なので、もし途中でやってしもうた場合にはgit rebase --abortでもとに戻せる。\n最初のcommitも削除した場合 最初のcommitも削除すると、参照すべきファイルがまったくなくなってしまうので以下のような警告が表示される。\n好きな方を選ぶ.\n$ git rebase --continue The previous cherry-pick is now empty, possibly due to conflict resolution. If you wish to commit it anyway, use:  git commit --allow-empty Otherwise, please use \u0026#39;git rebase --skip\u0026#39; interactive rebase in progress; onto 6749affd git pushでリモートに反映 作業が終わったらリモートに反映させる。\ngit pushするわけだが、ブランチを指定すること。\nしかし大工事をしたせいかそのままでは受け付けてもらえない。\nそこで--forceオプションで強制的に反映させる。\n$ git push origin HEAD:master Username for \u0026#39;https://github.com\u0026#39;: Password for \u0026#39;https://xxxxx@github.com\u0026#39;: To https://github.com/xxx/xxx.git  ! [rejected] HEAD -\u0026gt; master (non-fast-forward) error: failed to push some refs to \u0026#39;https://github.com/xxx/xxxx.git\u0026#39; hint: Updates were rejected because a pushed branch tip is behind its remote hint: counterpart. Check out this branch and integrate the remote changes hint: (e.g. \u0026#39;git pull ...\u0026#39;) before pushing again. hint: See the \u0026#39;Note about fast-forwards\u0026#39; in \u0026#39;git push --help\u0026#39; for details. $ git push origin HEAD:master --force 以上\n","permalink":"https://nobwak.github.io/posts/2022/2022-05-01-git%E9%81%8E%E5%8E%BB%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%AE%E8%A8%98%E9%8C%B2%E3%81%8B%E3%82%89%E6%8A%B9%E6%AE%BA%E3%81%99%E3%82%8B/","summary":"過去のバージョンの記録から抹殺する。 晴天の霹靂 gitで管理している過去のバージョンファイルに脆弱性あり webサーバに置く内容をgitでバージ","title":"2022-05-01-【git】過去のバージョンの記録から抹殺する"},{"content":"git tag git tagの使い方は、日曜プログラマだとたまにしか使わないので備忘メモ。\n一覧を表示する git tagとするだけでよい。\n表示順はアルファベット順。\n特定のタグを表示することもできる。\nそれには-lに続けてワイルドカード指定すればよい。\n-lは--listの略。\n$ git tag -l \u0026#34;v1.8.5*\u0026#34; v1.8.5 v1.8.5-rc1 . . tag操作 さあ本題。\ntagの種類 タグには簡易タグ(lightweight)と、注釈タグ（annotated)の二種類がある。\n簡易タグは特定のコミットへのポインタなだけ。\n一方、注釈タグはGitデータベースにガッチリとデータの保存される本格的なもの。\nチェックサム、タグを作った人等々のデータが保存される。\n注釈付きタグの作り方 tagに-aを添えて実行すればいいだけ。\nまた、この際に-mでメッセージを追加できる。\n指定しなければエディタが立ち上がる。\n$ git tag -a v2.0 -m \u0026#34;new versoin\u0026#34; $ git tag （略） 注釈付きタグの詳細確認 git tag show v2.0などとすると確認できる。\n思ってたよりも大量のデータが出てきて驚く。\n簡易タグの作り方 単にタグ名を添えてgit tagを実行すればいいだけ。\n$ git tag v2.0-2 $ git tag （略） あとから特定のコミットにタグを作る コミットチェックサムを指定してタグを作れば良い。\n$ git log --pretty=online （としてコミットを特定） $ git tag -a v2.1 6d55a $ git show v2.1 （略） タグ削除（ローカルのみ） -dオプションでタグ名を指定すればOK。\n特定のタグをチェックアウトする git checkout \u0026lt;タグ名\u0026gt;でできる。\nもしもそこで更新を加えコミットしたいなら、新しいブランチを作る。\n$ git checkout v2.0.0 （更新） $ git checkout -b version2 v2.0.0 （略） ","permalink":"https://nobwak.github.io/posts/2022/2022-01-31-git_tag%E3%81%AE%E3%81%A4%E3%81%8B%E3%81%84%E3%81%8B%E3%81%9F/","summary":"git tag git tagの使い方は、日曜プログラマだとたまにしか使わないので備忘メモ。 一覧を表示する git tagとするだけでよい。 表示順はアルファベット順。","title":"2022-01-31-git_tagのつかいかた"},{"content":"HUGOのテーマをPaperModに HUGOのテーマをPaperModに変えた。\nAnankeよりいろいろと機能が揃っているので、導入までは大変だったが、いまは満足しているので、備忘のために記す。\nPaperMod 以下の通り。\nデモサイトもあるよ。\nhugo PaperMod\nインストール 以下サイトに沿って実行。\nInstallatoin\nまずgit clone。hugoのトップディレクトリで実施。\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 PaperModを更新するときは以下のように。\ncd themes/PaperMod git pull 設定 なんかPaperModの作者さん、tomlよりもymlがお好きなようで、サンプルもymlで書かれている。\nそれに合わせてもいいけど、Hugoのデフォルトに合わせてtomlで書く。\nサンプルはconvertsimple.comなど、野良の変換サイトを使えばいいんじゃないかな。\n以下、tomlに変換したサンプルを示す。\n長くなるので特に重要な箇所のみに限る。\nbaseURL = \u0026#34;https://nobwak.github.io\u0026#34; title = \u0026#34;nobwak\u0026#39;s Lair\u0026#34; paginate = 50 theme = \u0026#34;PaperMod\u0026#34; enableRobotsTXT = true buildDrafts = false buildFuture = false buildExpired = false googleAnalytics = \u0026#34;UA-123-45\u0026#34; \u0026lt;snip\u0026gt;  [params.homeInfoParams]  Title = \u0026#34;nobwak\u0026#39;s Lair\u0026#34;  Content = \u0026#34;Where nobwak lives\u0026#34;   [[params.socialIcons]]  name = \u0026#34;twitter\u0026#34;  url = \u0026#34;https://twitter.com/nobwak\u0026#34;   # [[params.socialIcons]]  # name = \u0026#34;github\u0026#34;  # url = \u0026#34;https://github.com/\u0026#34;  [params.analytics.google] SiteVerificationTag = \u0026#34;XYZabc\u0026#34; \u0026lt;snip\u0026gt; [[menu.main]] identifier = \u0026#34;posts\u0026#34; name = \u0026#34;posts\u0026#34; url = \u0026#34;/posts/\u0026#34; weight = 10  [[menu.main]] identifier = \u0026#34;search\u0026#34; name = \u0026#34;search\u0026#34; url = \u0026#34;/search/\u0026#34; weight = 12  [[menu.main]] identifier = \u0026#34;categories\u0026#34; name = \u0026#34;categories\u0026#34; url = \u0026#34;/categories/\u0026#34; weight = 15  [[menu.main]] identifier = \u0026#34;tags\u0026#34; name = \u0026#34;tags\u0026#34; url = \u0026#34;/tags/\u0026#34; weight = 20  [[menu.main]] identifier = \u0026#34;nobwaklair\u0026#34; name = \u0026#34;nobwak lair\u0026#34; url = \u0026#34;https://nobwak.github.io\u0026#34; weight = 30  [outputs] ## 後述の検索ページにはこれが必要。 home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] searchページの用意 PageModはこれが楽。\nディレクトリ中、content直下に以下の内容でsearch.mdというファイルを置くだけで検索ページを作ってくれる。\n具体的には./content/search.mdですね。\nなんと楽ちん。\n--- title: \u0026#34;Search\u0026#34; layout: \u0026#34;search\u0026#34; summary: \u0026#34;search\u0026#34; --- ","permalink":"https://nobwak.github.io/posts/2022/2022-01-21-hugo%E3%81%AE%E3%83%86%E3%83%BC%E3%83%9E%E3%82%92papermod%E3%81%AB/","summary":"HUGOのテーマをPaperModに HUGOのテーマをPaperModに変えた。 Anankeよりいろいろと機能が揃っているので、導入までは大","title":"2022-01-21-HUGOのテーマをPaperModに"},{"content":"PythonでSQLite3を扱うときのメモ Pythonで日付、時間を操作する際のメモ。\nすーぐ忘れるので。\n以下、コードスニペットのように関数を書いて行くが、以下の通りimportしてあることが前提。\nimport sqlite3 SQLite3基本のキ 接続してハンドラ、カーソルの初期化等。\nクラスの中での処理を想定するので頭にself.がついてます。\nsqlfile = \u0026#34;:memory:\u0026#34; # こうするとメモリ上に作成  # 接続し、コネクタハンドラを記憶 self.con = sqlite3.connect(sqlfile) # カーソルも記憶 self.cur = self.con.cursor()  # コミット方法。データベースを更新したら忘れずに self.con.commit() すでにテーブルがあれば消す テーブル名決め打ちにしているとテーブル名がかぶる。\nそこで同名のテーブルがあれば問答無用で消す。\nself.cur.execute(\u0026#34;DROP TABLE IF EXISTS tablename\u0026#34;) self.con.commit() CREATE文の部品 リストに入れた要素でカラムを作る。\n細かいことはいい、ぜんぶtextで突っ込め、というときに便利\nculmn_list = [\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, ] _db_col = list(map(lambda s: s+\u0026#34; text\u0026#34;, culmn_list)) _db_col = \u0026#34;,\u0026#34;.join(_db_col) # 以下のようになる # A text,B text,C text,D text,E text  # これを以下のようにする # \u0026#34;CREATE TABLE dbtable(\u0026#34; + _db_col + \u0026#34;);\u0026#34; リストをSQL文で使えるよう、便利な文字列を作る ['A', 'B', 'C', ]というリストから、以下の２つの文字列を作る。\nあとでINSERTするとき想定。\n 'A', 'B', 'C' ?, ?, ?  def list_to_quoted_strings(_vallist):  return_str = \u0026#39;\u0026#39;  vals_str = \u0026#39;\u0026#39;  for i in range(len(_vallist)):  return_str += \u0026#34;\u0026#39;\u0026#34; + _vallist[i] + \u0026#34;\u0026#39;,\u0026#34;  vals_str += \u0026#34;?,\u0026#34;  # 最後の\u0026#34;\u0026#39;,\u0026#34;を消す  return return_str[:-2], vals_str[:-2] INSERTのとき 上記メモを踏まえてINSERT\nvals_strは上記メモ参照\n_cols_dataには入力データのリストが入る。\n_insert_sql = \u0026#39;INSERT INTO table VALUES(\u0026#39; + vals_str + \u0026#39;);\u0026#39;) self.cur.execute(_insert_sql, _cols_data) SELECTの結果をyield 何も難しいことない。\ndef tiny_select_yielder(self, _select_sql):  self.cur.execute(_select_sql)  for record in self.cur:  yield record SQL文の評価される順番 いつも混乱する。\nFROM ON JOIN WHERE GROUP BY HAVING SELECT DISTINCT ORDER BY TOP(LIMIT) たとえば以下のようなSQL文の場合;\nSELECT A, COUNT(B) AS C FROM (  SELECT DISTINCT A, B FROM table  WHERE A\u0026lt;\u0026gt;\u0026#34;N/A\u0026#34; ) GROUP BY A HAVING C \u0026gt; 1  以下の結果から（外側のFROM）  tableから（FROM） AがN/Aではないレコードの（WHERE） A, Bを抜き出し（SELECT） A, Bのペアが一意なものをまとめる（DISTINCT）   Aでまとめ（GROUP BY） そのうちBの出現数が1より大きいもの（HAVING）の AとB出現回数を抜き出す  という順番になる\n注意すべきはASでの別名定義はSELECTが評価されて初めて参照できるようになること。\nWHERE, GROUP BY等々、SELECTの前に評価される命令では別名を扱えない。\nSQL結果を一個だけ抜き出す よくわからないけど、最大値とか行数とか、返ってくる結果がひとつだけと分かっているものに使っている。\nself.cur.execute(\u0026#39;SELECT COUNT(*) from table\u0026#39;) return(self.cur.fetchone()) self.cur.execute(\u0026#39;SELECT max(columnA) from table\u0026#39;) return(self.cur.fetchone()) Last Update: 2021-12-28\n","permalink":"https://nobwak.github.io/posts/2021-12-24-python_sqlite3%E9%96%A2%E9%80%A3%E3%83%A1%E3%83%A2/","summary":"PythonでSQLite3を扱うときのメモ Pythonで日付、時間を操作する際のメモ。 すーぐ忘れるので。 以下、コードスニペットのように関数","title":"2021-12-24-Python_SQLite3関連メモ"},{"content":"Python日付時間関連メモ Pythonで日付、時間を操作する際のメモ。\nすーぐ忘れるので。\n以下、コードスニペットのように関数を書いて行くが、以下の通りimportしてあることが前提。\nfrom datetime import datetime as dt from datetime import timedelta また、日付フォーマットは断りの無い限りすべてYYYYMMDD。\n日付から曜日を得る localeを使う方法がスマートだが、文字コードの都合で採用せず。\n私のメインの使用方法がWindows上の面倒な仕事を効率化することなのだが、Windows上で動かすならいまだに文字コードはcp932（Shift-JIS）にしておくのが無難。\nそういったわけで自作リストでなんとかする。\ndef get_jpn_weekday(_date):  # 日付を受け取り、以下のリストから一つを返す  wday_list = [\u0026#39;月\u0026#39;, \u0026#39;火\u0026#39;, \u0026#39;水\u0026#39;, \u0026#39;木\u0026#39;, \u0026#39;金\u0026#39;, \u0026#39;土\u0026#39;, \u0026#39;日\u0026#39;, ]  _tempdate = dt.strptime(_date, \u0026#39;%Y%m%d)  return wday_list[_tempdate.weekday()] ２つの日付の間の日をすべて返す 開始日、終了日を渡して、その期間のすべての日付に対して処理をする場合に使う。\ndef get_days_btwn_two(_startday, endday):  # ふたつの日付を受け取り、あいだの日付リストを返す   # datetimeに変換  _startday_dt = dt.strptime(_startday, \u0026#39;%Y%m%d\u0026#39;)  _untilday_dt = dt.strptime(_untilday, \u0026#39;%Y%m%d\u0026#39;)   # 日付数の算出  # 最終日も含めるため+1  _num_days = (_untilday_dt - _startday_dt).days + 1   _datelist = []  for i in range(_num_days):  _temp_day = _startday_dt + timedelta(days=i)  _datelist.append(_temp_day.strftime(\u0026#39;%Y%m%d\u0026#39;))   return _datelist ２つの時間を足す [H]H:MMフォーマットの時間を２つ受け取り、足し合わせた時間を返す。\ndef add_hour(timeA, timeB):  # 時間を２つ取り、足して返す。  hourA, minA = timeA.split(\u0026#39;:\u0026#39;)  hourB, minB = timeB.split(\u0026#39;:\u0026#39;)   # 分を足し合わせ、60を超えた分を除いて記憶  shour, min = divmod(int(minA) + int(mnB), 60)  # 時間を足し合わせる  hour = int(hourA) + int(hourB) + shour   # 分の方は0埋め  return(\u0026#39;%s:%s\u0026#39; % (str(hour), str(min).zfill(2))) 今日の日付を得る ファイル名に日付を入れたいときなどに。\n# 日付のみ return(format(dt.today(), \u0026#39;%Y%m%d\u0026#39;)) # 時刻を秒まで return(format(dt.today(), \u0026#39;%Y%m%d%H%M%S\u0026#39;)) 日付シリアルにスラッシュを入れる なんてことはない、YYYYMMDDをYYYY/MM/DDにするだけの関数\nしかしいざ作ろうとするとスライスの勘定がめんどうくさい。\ndef get_slashed_date(dirty_date):  sanity_date = (  dirty_date[0:4] + \u0026#34;/\u0026#34; +  dirty_date[4:6] + \u0026#34;/\u0026#34; +  dirty_date[6:]  )  return sanity_date Last Update: 2021-12-28\n","permalink":"https://nobwak.github.io/posts/2021-12-25-python%E6%97%A5%E4%BB%98%E6%99%82%E9%96%93%E9%96%A2%E9%80%A3%E3%83%A1%E3%83%A2/","summary":"Python日付時間関連メモ Pythonで日付、時間を操作する際のメモ。 すーぐ忘れるので。 以下、コードスニペットのように関数を書いて行くが、","title":"2021-12-25-Python日付時間関連メモ"},{"content":"VisualStudioCodeで入れる拡張機能一覧 すぐ忘れるので。\nFormatter Better Comments コメント色分け。コメントでTODOとかできる。\nBetter comments\nOther GitLens GitをベースにVSC上で変更箇所を明らかにしてくれたりする。\nGitLens\nindent-rainbow インデントごとに色分けしてくれる。Python書くなら必須。\nindent-rainbow\nMarkdown PDF Markdownで書いたファイルをPDF等に変換してくれる。\nMarkdown PDF\nPath Intellisense ファイルパスのオートコンプリートをしてくれる。\nPath Intellisense\nProject Manager プロジェクトごとに環境をまとめておける。\nProject Manager\nLinters markdownlint markdownlint\nBracket Pair Colorizer VSCの基本機能になったので不要\nSettingsからBracketで検索する。\nLast Update: 2021-12-28\n","permalink":"https://nobwak.github.io/posts/2021-12-24-visualstudiocode%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD/","summary":"VisualStudioCodeで入れる拡張機能一覧 すぐ忘れるので。 Formatter Better Comments コメント色分け。コメントでTODOとかできる。 Better comments Other GitLens Gitをベー","title":"2021-12-24-VisualStudioCode拡張機能"},{"content":"FreeBSDの無線LANクライアントを設定する FreeBSDを無線LANクライアントとして設定する場合、有線と異なり一発で設定OKという訳に行かず、いろいろと設定ファイルを準備する必要がある。\nFreeBSD Handbookを読みながら進めば問題ないが、備忘のために残す。\n要件 無線LANクライアントとして使うということはDHCPでIPアドレスを取得するので、その前提で。\nFreeBSD Handbook ここ。\n以下、Handbookに沿って進める。\n無線LANインタフェースの特定 sysctlで特定。\nご覧の通りiwm0である。\n良かった。ここで出てこないと自分でカーネルモジュールをインストールする必要がある。\n$ sysctl net.wlan.devices net.wlan.devices: iwm0 kldstatを実行すれば、確かにif_iwm.koが読み込まれている。\n$ kldstat Id Refs Address Size Name  1 69 0xffffffff80200000 1f11f28 kernel  2 1 0xffffffff82112000 67feb0 zfs.ko  3 1 0xffffffff82792000 ae38 cryptodev.ko  4 1 0xffffffff830f9000 3378 acpi_wmi.ko  5 1 0xffffffff830fd000 3250 ichsmb.ko  6 1 0xffffffff83101000 2180 smbus.ko  7 1 0xffffffff83104000 17310 if_iwm.ko  8 1 0xffffffff8311c000 2110 pchtherm.ko  9 1 0xffffffff8311f000 1bc6e8 iwm8265fw.ko 10 1 0xffffffff832dc000 158458 i915kms.ko 11 1 0xffffffff83435000 7f548 drm.ko 12 2 0xffffffff834b5000 cbc8 linuxkpi_gplv2.ko 13 2 0xffffffff834c2000 2328 lindebugfs.ko 14 1 0xffffffff834c5000 2340 uhid.ko 15 1 0xffffffff834c8000 4350 ums.ko 16 1 0xffffffff834cd000 3380 usbhid.ko 17 1 0xffffffff834d1000 31f8 hidbus.ko 無線LANインタフェースの有効化 インタフェース事前確認 次に無線LANインタフェースを有効化する。\nOSに認識はされているが、有効にはなっていないから。\n実際にifconfigすればわかる。\n以下の通り無線LANインタフェースが見えていない。\n$ ifconfig em0: flags=8863\u0026lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST\u0026gt; metric 0 mtu 1500  options=481249b\u0026lt;RXCSUM,TXCSUM,VLAN_MTU,VLAN_HWTAGGING,VLAN_HWCSUM,LRO,WOL_MAGIC,VLAN_HWFILTER,NOMAP\u0026gt;  ether  inet 10.0.0.11 netmask 0xffffff00 broadcast 10.0.0.255  media: Ethernet autoselect (1000baseT \u0026lt;full-duplex\u0026gt;)  status: active  nd6 options=29\u0026lt;PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL\u0026gt; lo0: flags=8049\u0026lt;UP,LOOPBACK,RUNNING,MULTICAST\u0026gt; metric 0 mtu 16384  options=680003\u0026lt;RXCSUM,TXCSUM,LINKSTATE,RXCSUM_IPV6,TXCSUM_IPV6\u0026gt;  inet6 ::1 prefixlen 128  inet6 fe80::1%lo0 prefixlen 64 scopeid 0x2  inet 127.0.0.1 netmask 0xff000000  groups: lo  nd6 options=21\u0026lt;PERFORMNUD,AUTO_LINKLOCAL\u0026gt; 無線LANインタフェースの設定（基礎） 有効化には/etc/rc.confを変更する。\n以下の通り記述する。\n# Wireless LAN wlans_iwm0=\u0026#34;wlan0\u0026#34; # 扱いやすいようwlan0と名前をつける ifconfig_wlan0=\u0026#34;WPA SYNCDHCP\u0026#34; # WPAで暗号化。SYNCDHCPは後述 create_args_wlan0=\u0026#34;country JP regdomain ETSI\u0026#34; # 国の設定。後述 SYNCDHCPを設定すると、起動時にIPアドレス取得が完了するまで待つ。\nDHCPだけだと待たない。\n国の設定は/etc/regdomain.xmlから読み取る。\nHandbookに沿って上記の通り設定しておけばOK。\nそうしたらいったん再起動。\n起動時にwpa_supplicant.confが無いと怒られ、DHCPでIPアドレスが取得できないと怒られるが無視。\n無線LANインタフェースの確認（基礎） あらためてifconfigする。\n確かにwlan0が表示されていますね（不要なインタフェースは省略）。\n$ ifconfig wlan0: flags=8802\u0026lt;BROADCAST,SIMPLEX,MULTICAST\u0026gt; metric 0 mtu 1500  ether xxxxxxx  groups: wlan  ssid \u0026#34;\u0026#34; channel 1 (2412 MHz 11b)  regdomain ETSI country JP authmode OPEN privacy OFF txpower 30  bmiss 10 scanvalid 60 wme bintval 0  parent interface: iwm0  media: IEEE 802.11 Wireless Ethernet autoselect (autoselect)  status: no carrier  nd6 options=29\u0026lt;PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL\u0026gt; とりあえずiwm0改めwlan0をupさせてみる。\nwlan0のステータスにUPが追加されていることに注目。\n$ sudo ifconfig wlan0 up $ ifconfig wlan0 wlan0: flags=8843\u0026lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST\u0026gt; metric 0 mtu 1500  ether xxxxxx  groups: wlan  ssid \u0026#34;\u0026#34; channel 1 (2412 MHz 11g)  regdomain ETSI country JP authmode OPEN privacy OFF txpower 30  bmiss 10 scanvalid 60 protmode CTS wme bintval 0  parent interface: iwm0  media: IEEE 802.11 Wireless Ethernet autoselect (autoselect)  status: no carrier  nd6 options=29\u0026lt;PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL\u0026gt; 続いてscanすると見えている無線LANが表示される。\nもしここで狙いのAPが見えないのなら、それは隠しAPだと言うこと。後述。\n$ sudo ifconfig wlan0 scan SSID/MESH ID BSSID CHAN RATE S:N INT CAPS xxxxxx 0x:xx:xx:xx:xx:xx 1 54M -69:-96 102 EPS BSSLOAD HTCAP RSN WME （略） ここまで来て初めて無線LANアクセスポイント接続の設定をする。\nwpa_supplicant.confの設定(基礎) 無線LAN設定のキモである/etc/wpa_supplicant.confの設定に取り掛かる。\nexampleは/usr/share/examples/etc/wpa_supplicant.confにある。\nこれを/etc下にコピーして修正する。\nのだが、このファイルはとんでもなく巨大である。\nそのままではさすがに全体像を掴めないので、# EAP fast re-authenticationセクションまでを残し、それより下は削除する。\n後述するが、このファイルには無線LANアクセスポイントのパスワードを記載する。\n所有はroot、パーミッションは400にしておくこと。\nまず冒頭までで以下のようにする。\nctrl_interface=/var/run/wpa_supplicant # デフォルト eapol_version=2 # 1でよい。2にして動くなら2で。 ap_scan=1 # FreeBSDにおいては1だけ。 fast_reauth=1 # デフォルト wpa_supplicant.confの設定(本番) パスワードの難読化 で、問題はここから先である。\nSSIDとパスワードを平分で記述するである。\nこれはさすがに気持ち悪い。\nそこで/usr/sbin/wpa_passphraseを使う。\nこのツールは、SSIDとパスワード（パスフレーズ）から256bitのpskを生成してくれるものである。\n要するに難読化っぽいことをするわけ。\nmanすればわかるとおり、wpa_passphrase SSID パスワードと続けて引数を与えればよい。\n便利なのは、そのままwpa_supplicant.confに貼り付けられる書式で出力してくれる点である。\n以下は実施例。\n$ wpa_passphrase SSIDexample SSIDpassword network={  ssid=\u0026#34;SSIDexample\u0026#34;  #psk=\u0026#34;SSIDpassword\u0026#34;  psk=6d7b3e5128969e9dd66ffa26d8ba503ff4b43f021f114a5f5bc9dadb8488ee1f } wpa_supplicant.confへの書き込み そうしたら、パスワードが平分で記載されている行を削除したうえで、wpa_supplicant.confに貼り付ければよい。\nただし注意点があり、APがステルスの場合にはscan_ssid=1を追加しておくこと。\n要するにさっきscanした結果、狙いのAPが表示されていなければ、それは隠しAPということ。\n以下の通り。\nctrl_interface=/var/run/wpa_supplicant # デフォルト eapol_version=2 # 1でよい。2にして動くなら2で。 ap_scan=1 # FreeBSDにおいては1だけ。 fast_reauth=1 # デフォルト network={  scan_ssid=1  ssid=\u0026#34;SSIDexample\u0026#34;  psk=6d7b3e5128969e9dd66ffa26d8ba503ff4b43f021f114a5f5bc9dadb8488ee1f } DHCP clientとしての設定 さて。\n本気はDHCPクライアントとして動作させる。\nそのためには、デフォルトルータについてもDHCPで払い出してもらう必要がある。\nそれには/etc/dhclient.confに以下の記載をしておく必要がある。\n# $FreeBSD$ # # This file is required by the ISC DHCP client. # See ``man 5 dhclient.conf\u0026#39;\u0026#39; for details. # # In most cases an empty file is sufficient for most people as the # defaults are usually fine. # interface \u0026#34;wlan0\u0026#34; {  request routers; } これをしておくとデフォルトルートを設定してくれる。\n※以下は後述の無線LANを起動したあとの話。\n$ netstat -rn Routing tables Internet: Destination Gateway Flags Netif Expire default 192.168.10.1 UGS wlan0 127.0.0.1 link#2 UH lo0 192.168.10.0/24 link#3 U wlan0 192.168.10.3 link#3 UHS lo0 また、resolv.confについても同様。\n※以下は後述の無線LANを起動したあとの話。\n# Generated by resolvconf nameserver 192.168.10.1 無線LANインタフェースの起動 service netif restartとすればよい。\n$ sudo service netif restart Created wlan(4) interfaces: wlan0. Starting wpa_supplicant. Starting dhclient. wlan0: no link ..... got link DHCPREQUEST on wlan0 to 255.255.255.255 port 67 DHCPNAK from 192.168.10.1 DHCPDISCOVER on wlan0 to 255.255.255.255 port 67 interval 4 DHCPOFFER from 192.168.10.1 DHCPREQUEST on wlan0 to 255.255.255.255 port 67 DHCPACK from 192.168.10.1 bound to 192.168.10.3 -- renewal in 43200 seconds. Starting Network: lo0 em0 wlan0. (略) wlan0: flags=8843\u0026lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST\u0026gt; metric 0 mtu 1500  ether xxxxxx  inet 192.168.10.3 netmask 0xffffff00 broadcast 192.168.10.255  groups: wlan  ssid xxxxxx channel 4 (2427 MHz 11g) bssid xxxxxx  regdomain ETSI country JP authmode WPA2/802.11i privacy ON  deftxkey UNDEF AES-CCM 3:128-bit txpower 30 bmiss 10 scanvalid 60  protmode CTS wme roaming MANUAL  parent interface: iwm0  media: IEEE 802.11 Wireless Ethernet OFDM/36Mbps mode 11g  status: associated  nd6 options=29\u0026lt;PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL\u0026gt; 以上\n","permalink":"https://nobwak.github.io/posts/2021-12-13-freebsd%E3%81%AE%E7%84%A1%E7%B7%9Alan%E8%A8%AD%E5%AE%9A/","summary":"FreeBSDの無線LANクライアントを設定する FreeBSDを無線LANクライアントとして設定する場合、有線と異なり一発で設定OKという訳","title":"2021-12-13-FreeBSDの無線LAN設定"},{"content":"FreeBSDをルータに いまどき、ルータといえば、自宅なら無線WiFiルータ、業務でも専用のハードウェアを置くのが当たり前である。\nFreeBSDをルータにするのは流行らない。\nしかしだからこそ、もしものときのために記録に残す。\n方針 FreeBSDをルータにするにはいろいろと種類がある。\n特にそういったことは概観せず、もういきなり決め打ちするが、pfを使う。\n本稿での構成 構成は以下のとおりである。\nセキュリティ要件は一切、設定しない。\nただ、単にFreeBSD Routerを通してLAN内のクライアントが外に出ていければよい。\nセキュリティはあとでゆっくり、ご自由にどうぞ。\nGateway to The Net \u0026lt;-- WLAN --\u0026gt; (wlan0) FreeBSD Router (em0) \u0026lt;-- Ethernet --\u0026gt; LAN 192.168.10.1 192.168.10.x 10.0.0.1 10.0.0.x DHCP Server DHCP Client pf DHCP Server DHCP Client 本稿で扱う部分 上記構成図で言う、FreeBSD Routerのpf設定をメインにする。\nただし、FreeBSDのインタフェースが、片方がDHCP Client、他方がDHCP Serverになっているので、影響しそうなところは触れる。\nまた、以下、特に断りのない限り、FreeBSD Routerのことを「ルータ」と記す。\nデフォルトルータの設定 兎にも角にもまずデフォルトルートを設定する。\nこれは言わずもがな、FreeBSDルータから見てインターネット側へのデフォルトルート。\n/etc/rc.confに以下を書き込む。\ndefaultrouter=\u0026#34;192.168.0.1\u0026#34; 再起動したあと、/etc/resolv.confに以下の記載があることを確認する。\nこれはLAN向けのネームサーバですね。\n# Generated by resolvconf nameserver 192.168.10.1 pfの有効化 pfを有効にします。有効にするには/etc/pf.confに以下を書き込む。\npf_enable=\u0026#34;YES\u0026#34; もちろん、以下を実行してもOK。\nsudo sysrc pf_enable=YES pf基本設定 pfのログはデフォルトで/var/log/pflogに記録される。\n実際の記録にはrc.confでpflog_enable=yesを記載する必要がある。\n前後するが、私の/etc/rc.confは以下の通り。\n# For router pf_enable=yes pflog_enable=yes gateway_enable=\u0026#34;YES\u0026#34; # set to YES if this host will be a gateway defaultrouter=\u0026#34;192.168.10.1\u0026#34; FreeBSDのルータ化 上記で少し書いたが、ルータにするには、/etc/rc.confでgateway_enable=yesを記載しておく必要がある。\npfルールの設定 exampleがあるので、/etcの下にコピーする。\nsudo cp /usr/share/examples/pf/pf.conf /etc/pf.conf といいつつ、いったん全部コメントアウトして、必要最低限のものだけ有効化していく。\npf.confにおける記載順序 pf.confには記載順序にルールがある。\n具体的には、以下の順番であることが求められる。\nもっとハッキリ言うと、この順番でないとpfは起動しません。\n Options normalization queueing translation filtering  本稿では2, 4, 5が該当。\n2はルータを通過するトラフィックの正常化のこと。\n4は例えばNATのこと。\n5はフィルタのこと。\nこのほか、記述を簡単にするためのマクロ定義がある。これはその性質上、冒頭で扱う。（だって文末でマクロ定義したって仕方ないもんね）\nではさっそくマクロ定義から。\n定義（マクロ）の宣言 インターネット側IFをext_ifとして、LAN側IFをint_ifに設定する。\n外側向けIFはwlan0、内側はem0なのでそのとおりに。\next_if=\u0026#34;wlan0\u0026#34; int_if=\u0026#34;em0\u0026#34; LAN側ネットワークとしてlocalnetを定義。\nこうすると、以降のルールでLAN側ネットワークを$localnetとして扱うことができる。\n:networkとは、ネットワークインタフェースに続けて記載し、そのインタフェースに接続されたネットワークのことを表す。\nこの場合、LAN側インタフェースにつながっているネットワーク全部を指し示す。\nlocalnet = $int_if:network トラフィック正常化 いたずらパケットを正常化するためのルール。\n要件に示したように、特にセキュリティのためのルール設定はしないが、これは難しいこともなく一行追加するだけでよいので記述。\nこうするとpfは断片化されたパケットを再構築したり、ありえない組み合わせのTCPフラグが立ったパケットを蹴飛ばすとかしてくれる。\nやっておいて損はない。\nscrub in all NAT設定 目玉であるNATの設定。\nnat onに続けて、NATを有効にするインタフェースを指定する。\nここでは$ext_if。\n起点はLAN側IFのすべての通信なので、from $localhostを指定。\n宛先は特に制限しないのでto anyとする。\nそれら通信のソースアドレスを$ext_ifに変換して外側へ送り出す。\nなお、$ext_ifはダイナミックなので($ext_if)と記述する。\nこうすることで、IPアドレスが変わったとしても通信が継続されるようになる、と書いてある。\n# ext_if IP address could be dynamic, hence ($ext_if) nat on $ext_if from $localnet to any -\u0026gt; ($ext_if) フィルタリング設定 まず全部の通信をブロック。\nblock in all Keep state設定。\nこれ複雑なので図示する。\nルータの入り口である$int_ifに入るときと、\nルータからの出口である$ext_ifから出るときの双方に設定が必要。\nLAN ---\u0026gt; em0 ---\u0026gt; wlan0 ---\u0026gt; the Net --\u0026gt; rule 1 --\u0026gt; rule 2 上記をpfルールとして記述すると以下の通り。\nrule1が1行目に、rule2が2行目に対応。\npass in on $int_if from $localnet to $ext_if:network keep state pass out on $ext_if from $localnet to $ext_if:network keep state 設定確認 ここまでできたら設定確認をする。\n確認はpfctl -vnf /etc/pf.confとすればよい。\n実行してみると、各種ルールが具体的に展開されて表示されるので、自分で作ったルールを検証するとよい。\n$ sudo pfctl -vnf /etc/pf.conf ext_if = \u0026#34;wlan0\u0026#34; int_if = \u0026#34;em0\u0026#34; localnet = \u0026#34;em0:network\u0026#34; scrub in all fragment reassemble nat on wlan0 inet from 10.0.0.0/24 to any -\u0026gt; (wlan0) round-robin block drop in all pass inet from 127.0.0.1 to any flags S/SA keep state pass inet from 10.0.0.0/24 to any flags S/SA keep state pfの実行 pfの実行にはpfctl -eと、停止にはpfctl -dとすればよい。\nまた、実行中の通信についてはpfctl -s statesとすればよい。\n設定読み込み 設定変更をした場合、それを有効化するには以下のようにすればよい。\npfの有効化はルータマシンでやりましょうね（戒め）。\n$ sudo pfctl -F all -f /etc/pf.conf rules cleared nat cleared 0 tables deleted. 7 states cleared source tracking entries cleared pf: statistics cleared pf: interface flags reset 以上\n","permalink":"https://nobwak.github.io/posts/2021-12-12-freebsd%E3%82%92%E3%83%AB%E3%83%BC%E3%82%BF%E3%83%BC%E3%81%AB/","summary":"FreeBSDをルータに いまどき、ルータといえば、自宅なら無線WiFiルータ、業務でも専用のハードウェアを置くのが当たり前である。 FreeB","title":"2021-12-12-FreeBSDをルーターに"},{"content":"はじめに youtube動画をダウンロードするyoutube-dlについてのメモ。\nこれってなに そのまま。 Youtubeの動画をダウンロードできる、オープンソースのツール。 youtube-dl\nPythonで書かれているので、PythonさえあればWindowsを除くどのOSでも動く。 Windowsについては専用のバイナリが用意されている。 実は他OS向けファイルもPythonのバイナリだけど。\nインストール 手順はこちら。 実体はpythonのバイナリなので、インストールは何も難しいことはなく、ダウンロードして実行権限を与え、好きなところに置くだけ。\n以下は私の場合の例。\ncurl -L https://yt-dl.org/downloads/latest/youtube-dl -o ~/bin/youtube-dl chmod 755 ~/bin/youtube-dl 使い方 URLを渡して実行するだけ。\nyoutube-dl [OPTION] URL 詳しい使い方 オプションについては、githubにあるreadme.mdを見る。\nちょっと驚くのは、youtube-dl -Uでyoutube-dl自体のアップデートができること。 楽ちんでいいね。\nさておき、上記のreadme.mdを見ると、オプションがたくさんあって、かなり使いでがある。 私の好きなのは、Post-processing Optionsである。\n例えば動画から音声のみを抜き出すとか。: -xオプション。ただしffmpeg等が必要。 音声の形式を指定することもできる。: --audio-format FORMATで指定。\n動画の変換も可能。： --recode-video FORMATで指定。 形式はmp4, flv, ogg, webm, mkv, aviを現状でサポート。やはりffmpegとかが必要。\n~/.config/youtube-dl/configでは、proxyの設定だったり、デフォルトの保存先を指定することもできる。\n","permalink":"https://nobwak.github.io/posts/2021-11-14-youtube-dl_%E3%81%9D%E3%82%8C%E3%81%A0%E3%81%91/","summary":"はじめに youtube動画をダウンロードするyoutube-dlについてのメモ。 これってなに そのまま。 Youtubeの動画をダウンロードでき","title":"2021-11-14-youtube-dl_それだけ"},{"content":"FreeBSDにインストールされたpkgの一覧がほしい そんなものpkg info一発ですよねという話ですが、そういう話ではない。\nどういうことか。\nFreeBSDのメジャーバージョンアップや、メジャーバージョンアップでなくても、pkg quarterlyのタイミングなど、pkgをまるまる再インストールしたいことはよくあるわね。\nじゃあpkg upgrade -fyですかね、と言うとさにあらず、上記のようなケースでは、orphanになったpkgも生まれていることがあるので、「今インストールされているpkgをまるまる再インストール」では駄目なんである。\nいちばんいいのは、ほんとうに必要なpkgとそれが依存しているpkgを再インストールできることだ。\nつまり、ここでのキモは「ほんとうに必要なpkg」を特定することにある。\n非automatic packagesのリストにはpkg prime-list 明示的にインストールしたpkgを非automatic packagesと呼ぶ。\n非automatic packagesの依存でインストールされたpackagesをautomatic packagesと呼ぶ。\n非automatic packagesをリストするにはpkg prime-listを使う。\n以下は実行例。\njd@xanadu ~\u0026gt; pkg prime-list bash chromium clamav cpufetch darktable doas drm-kmod fcitx-qt5 firefox fish git ja-fcitx-mozc ja-font-std ja-font-vlgothic ja-libreoffice kde5 neofetch obs-studio pkg psearch py38-virtualenv python sudo tmux vscode xorg zh-fcitx-configtool あとはこれをテキストファイルに書き出しておき、pkg delete -afyでpkg全削除したら、テキストファイルに書き出しておいたpkgをxargsを使うなどしてインストールすればよい。\npkg prime-origins 実はこのpkg prime-list、manで調べても出てこない。\n不思議に思っていたが、実はこれはエイリアスなんだと。\n/usr/local/etc/pkg.confにその記載がある。\n中身を見ると、prime-originsというのもあるね。\nprime-list: \u0026#34;query -e \u0026#39;%a = 0\u0026#39; \u0026#39;%n\u0026#39;\u0026#34;, prime-origins: \u0026#34;query -e \u0026#39;%a = 0\u0026#39; \u0026#39;%o\u0026#39;\u0026#34;, prime-originsのほうはその名の通りoriginsをつけてくれる。\n実行例。\njd@xanadu ~\u0026gt; pkg prime-origins shells/bash www/chromium security/clamav sysutils/cpufetch graphics/darktable security/doas graphics/drm-kmod textproc/fcitx-qt5 www/firefox shells/fish devel/git japanese/fcitx-mozc japanese/font-std japanese/font-vlgothic japanese/libreoffice x11/kde5 sysutils/neofetch multimedia/obs-studio ports-mgmt/pkg ports-mgmt/psearch devel/py-virtualenv lang/python security/sudo sysutils/tmux editors/vscode x11/xorg chinese/fcitx-configtool 以上\n","permalink":"https://nobwak.github.io/posts/2021-11-15-freebsd_%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%B8%88%E3%81%BFpkg%E3%83%AA%E3%82%B9%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B/","summary":"FreeBSDにインストールされたpkgの一覧がほしい そんなものpkg info一発ですよねという話ですが、そういう話ではない。 どういうことか","title":"2021-11-15-FreeBSD_インストール済みpkgリストを作る"},{"content":"はじめに デジカメで撮った動画は拡張子がMTSである。\nこれはAVCHDという規格だそうだが、内容は映像にH.264/MPEG-4、音声にAC3であって、なじみのあるもの。\n内容物にはなじみはあるのに、機器、OSによっては再生できないことがある。\n動画編集ソフトであれば読み込めるのだが、編集自体も手間だし時間もかかるから、もう編集とかしないから、さっさと再生したいというときには邪魔な規格である。\nそれには、ファイルコンテナをAVCHDからmp4にしてしまえばよい。\nmp4ならたいていの機器、OSでそのまま再生できるから。\nただ、うかつに動画形式変換ソフトに突っ込むのはいけない。\n再エンコードを始めてしまうからである。\n再エンコードしてしまったら、時間もかかるし劣化もするんでは意味がない。\nそこで、再エンコードをさせず、形式だけを変換する方法をメモする。\nXmedia　Recodeを使う。\n本当ならXmedia Recodeを使う、だけで済むのだが、使い方にクセがあるので。\n動画変換ソフトXmedia Recode Xmedia Recodeは動画変換ソフトである。\nポータブル版もあるのがうれしい。\nポータブル版はここを下のほうにスクロールすると見つかる。\n変換手順 MTSをドラッグアンドドロップする。\n画像の例ではファイル一つだけど。\n形式にmp4に。\n映像タブでモードをコピーに。\n音声トラックでも同様に。\nここが重要。\nリストに追加をクリック。\nこれをしないとエンコードをクリックできないのだ。\nただ、まだクリックしないこと\nリストタブで追加したファイルの映像、音声が「すべて」コピーになっているかを確認。\n複数ファイルの場合、1つしかコピーになっていないことがあるから。\nエンコードをクリック。\nうまく行けば、変換はすぐに終わる。\n以上\n","permalink":"https://nobwak.github.io/posts/2020-10-24-%E3%83%A1%E3%83%A2-xmediarecode%E3%81%A7mts%E3%82%92mp4%E3%81%AB%E7%84%A1%E5%8A%A3%E5%8C%96%E5%A4%89%E6%8F%9B%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E5%A4%89%E6%8F%9B/","summary":"はじめに デジカメで撮った動画は拡張子がMTSである。 これはAVCHDという規格だそうだが、内容は映像にH.264/MPEG-4、音声にAC3","title":"2020-10-24-メモ-XmediaRecodeでMTSをmp4に無劣化変換（コンテナ変換）"},{"content":"FreeBSDでfcitx-mozcの設定をする FreeBSDにおける日本語入力 FreeBSDをデスクトップとして使うにあたり難関である日本語入力についてまとめる。\nなぜ難関かというと;\nFreeBSDのようなどマイナーなOSは、そもそもユーザ母数が少ないので、情報収集にあたっては海外の、特に英語圏のサイトを参照する必要がある。\nしかし日本語入力となればその手が使えず、やたら情報が少ない。マニュアルも整っていないことが多い。\nそれとは別に、仮にソフトウェアに不具合があっても修正される可能性が格段に低くなる。\n結論として言えば、言語は違っても、インプットメソッドを必要としている、ちうごくユーザーに依存するしかない（戦いは数だよ兄貴）。\nソフトウェアの選択 日本語入力にあたって必要なソフトウェアは２つで、一つはインプットメソッドと呼ばれる、欧文キーボード上で日本語や中国語を入力するためのソフトウェアと、日本語変換エンジンソフトウェアである。\nしたがって、「日本語入力になんのソフトウェアを使っているか？」と聞かれたときには、uim-anthyというように、ソフトウェアをハイフンで連結して並べる。\nこの場合では、インプットメソッドにuim、日本語変換エンジンにanthyを使っているという意味になる。\n以前は、上記の例で示したuim-anthyを使っていた。\nが、anthyははるか昔に開発が止まってしまったようである。\n結局、インプットメソッドに中国圏でユーザが多そうなfcitxを、日本語変換エンジンにgoogleが面倒を見ているmozcを選択した。\nfcitx-mozcのインストール インストールするのは、ja-fcitx-mozc, zh-fcitx。\nsudo pkg install ja-fcitx-mozc zh-fcitxとすれば、必要なものは入るはず。\nその他、設定用のzh-fcitx-configtoolと、私はKDE Plasmaを使っているので、fcitx-qt5をインストールした。\n結果、以下のようなソフトウェアがインストールされている。\nja-fcitx-mozc-2.23.2815.102.00_5 Mozc engine for Fcitx ja-mozc-server-2.23.2815.102.00_5 Mozc Japanese Input Method, Server ja-mozc-tool-2.23.2815.102.00_5 Mozc tool for IBus, SCIM, and others fcitx-qt5-1.2.4 Fcitx support for Qt5 zh-fcitx-4.2.9.6_3 Flexible Input Method Framework zh-fcitx-configtool-0.4.9 Fcitx IM framework configuration tool fcitx設定方法 zh-fcitx-configtoolで設定する。\nGUIから起動するか、ターミナルから実行すればいいけど、コマンドがzh-fcitx-configtoolではないので注意。\nこういうときはpkg listでインストールされたファイルの一覧を調べればだいたい分かる。\nfcitx-config-gtkですね。\njd@dyna ~/.c/fish\u0026gt; pkg list zh-fcitx-configtool /usr/local/bin/fcitx-config-gtk /usr/local/share/licenses/zh-fcitx-configtool-0.4.9/GPLv2 /usr/local/share/licenses/zh-fcitx-configtool-0.4.9/LICENSE /usr/local/share/licenses/zh-fcitx-configtool-0.4.9/catalog.mk /usr/local/share/locale/de/LC_MESSAGES/fcitx-configtool.mo /usr/local/share/locale/ja/LC_MESSAGES/fcitx-configtool.mo /usr/local/share/locale/zh_CN/LC_MESSAGES/fcitx-configtool.mo /usr/local/share/locale/zh_TW/LC_MESSAGES/fcitx-configtool.mo 実際の設定では;\n「現在の入力メソッド」に「キーボード-日本語」と「Mozc」を。\n「全体の設定」で「入力メソッドのオンオフ」などを。\nZENKAKUHANKAKUってすげーな。\nいったん閉じる。\n個人設定 私の場合、startxでXを起動しているので、以下を.xinitrcに書く。\nexport GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=@im=fcitx /usr/local/bin/mozc start fcitx -r -d 結果、私の.xinitrcは以下のとおりに。\njd@dyna ~\u0026gt; cat ./.xinitrc export LANG=ja_JP.UTF-8 export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=@im=fcitx /usr/local/bin/mozc start fcitx -r -d exec ck-launch-session startplasma-x11 Xに入りなおしてZENKAKUHANKAKUを押せば以下の通り。\nちょっとアイコンがダサすぎやしませんか。\n","permalink":"https://nobwak.github.io/posts/2020-04-15-freebsd_fcitx-mozc%E3%81%AE%E8%A8%AD%E5%AE%9A/","summary":"FreeBSDでfcitx-mozcの設定をする FreeBSDにおける日本語入力 FreeBSDをデスクトップとして使うにあたり難関である日本","title":"FreeBSD_fcitx-mozcの設定"},{"content":"ひっさしぶりにFreeBSDにデスクトップ環境をインストールしたら、かんたんに2画面表示できるようになってて驚いた。\n方法は簡単。\nxrandrコマンドを使うだけ。\nマニュアルはここ\n以下、ワイのノートPCでの例を示す。\nまずは引数なし、追加のモニタ接続も無しでxrandr。\nディスプレイ用ポートの一覧が表示される。\nこの例ではノートPCなので、メインディスプレイと、そのほかにポートが2つ認識された。\n加えて、「メインディスプレイであるeDP-1には1366x768ドットのモニタが繋がっている」というようにも認識されている。\n jd@dyna /u/h/jd\u0026gt; xrandr Screen 0: minimum 320 x 200, current 1366 x 768, maximum 8192 x 8192 eDP-1 connected primary 1366x768+0+0 (normal left inverted right x axis y axis) 293mm x 164mm  1366x768 60.00*+  1024x768 60.04 60.00  960x720 60.00  928x696 60.05  896x672 60.01  800x600 60.00 60.32 56.25  700x525 59.98  640x512 60.02  640x480 60.00 59.94  512x384 60.00  400x300 60.32 56.34  320x240 60.05 DP-1 disconnected (normal left inverted right x axis y axis) HDMI-1 disconnected (normal left inverted right x axis y axis) DP-2 disconnected (normal left inverted right x axis y axis) HDMI-2 disconnected (normal left inverted right x axis y axis) 次に外部モニタを繋いでもう一回xrandr。\nすると結果が変わり、HDMI-2に1920x1080ドットのモニタが繋がったと認識された。\njd@dyna /u/h/jd\u0026gt; xrandr Screen 0: minimum 320 x 200, current 1366 x 768, maximum 8192 x 8192 eDP-1 connected primary 1366x768+0+0 (normal left inverted right x axis y axis) 293mm x 164mm  1366x768 60.00*+  1024x768 60.04 60.00  960x720 60.00  928x696 60.05  896x672 60.01  800x600 60.00 60.32 56.25  700x525 59.98  640x512 60.02  640x480 60.00 59.94  512x384 60.00  400x300 60.32 56.34  320x240 60.05 DP-1 disconnected (normal left inverted right x axis y axis) HDMI-1 disconnected (normal left inverted right x axis y axis) DP-2 disconnected (normal left inverted right x axis y axis) HDMI-2 connected (normal left inverted right x axis y axis)  1920x1080 60.00 + 50.00 59.94  1920x1080i 60.00 50.00 59.94  1600x900 60.00  1280x1024 60.02  1280x720 60.00 50.00 59.94  1024x768 60.00  800x600 60.32  720x576 50.00  720x480 60.00 59.94  640x480 60.00 59.94 あとは簡単で、xrandrに出力先を--output \u0026lt;ポート\u0026gt;で指定し、解像度は--autoで指定。\nさらに、外部モニタ表示位置を相対位置で示す。\n上記の通りワイの場合eDP-1がメイン画面なので、外部モニタをメイン画面の;\n 右なら: --right-of eDP-1 左なら: --left-of eDP-1 上なら: --above-of eDP-1 下なら: --below-of eDP-1  と指定する\njd@dyna /u/h/jd\u0026gt; xrandr --output HDMI-2 --auto --right-of eDP-1 jd@dyna /u/h/jd\u0026gt; これで冒頭の通り表示される。\n","permalink":"https://nobwak.github.io/posts/2020-04-11-freebsd%E3%81%A7%E3%81%AB%E7%94%BB%E9%9D%A2%E8%A1%A8%E7%A4%BA/","summary":"ひっさしぶりにFreeBSDにデスクトップ環境をインストールしたら、かんたんに2画面表示できるようになってて驚いた。 方法は簡単。 xrandr","title":"2020-04-11-FreeBSDで2画面表示"},{"content":"virtualenvで作った環境を持ち運びやすいように（ポータブルに）するためのメモ。\n具体的には、その環境でインストールしたライブラリを、移行した先でも一発で入れるための備え。\n以下はWindowsでやってるけど、LinuxとかFreeBSDでも同じ。\n準備:インストールしたライブラリの記録を作る 環境hogehoge内でpyperclipというライブラリのみをインストールした状態でpip listすると;\n(hogehoge) C:\\Users\\nobwak\\Downloads\\py\\test\u0026gt;pip list Package Version ---------- ------- pip 20.0.2 pyperclip 1.7.0 setuptools 45.3.0 wheel 0.34.2 (hogehoge) C:\\Users\\nobwak\\Downloads\\py\\test\u0026gt; こういう状態である。\nしかし、pip, setuptools, wheelは、おおもとの環境でインストールされたもので、hogehogeでインストールされたものではない。\n移行先でも、わざわざ環境内でpip等をインストールする必要はない。\nそこで--localというスイッチを付ける。\nまた、移行先でライブラリをインストールする目的で、現環境のライブラリ一覧を取得する場合pip listの結果では用をなさない。\npip freezeを使う。\n最終的には以下のようにする。\n(hogehoge) C:\\Users\\nobwak\\Downloads\\py\\test\u0026gt;pip freeze --local pyperclip==1.7.0 (hogehoge) C:\\Users\\nobwak\\Downloads\\py\\test\u0026gt; 狙い通り、pyperclipだけになった。\nまた、形式も文句なし。\nではこれを書き出す。\n(hogehoge) C:\\Users\\nobwak\\Downloads\\py\\test\u0026gt;pip freeze --local \u0026gt; requirements.txt (hogehoge) C:\\Users\\nobwak\\Downloads\\py\\test\u0026gt; (hogehoge) C:\\Users\\nobwak\\Downloads\\py\\test\u0026gt;deactivate C:\\Users\\nobwak\\Downloads\\py\\test\u0026gt; さて、新しくfugafugaという環境を作る。\nC:\\Users\\nobwak\\Downloads\\py\\test\u0026gt;virtualenv fugafuga created virtual environment CPython3.8.1.final.0-32 in 7200ms  creator CPython3Windows(dest=C:\\Users\\nobwak\\Downloads\\py\\test\\fugafuga, clear=False, global=False)  seeder FromAppData(download=False, pip=latest, setuptools=latest, wheel=latest, via=copy, app_data_dir=C:\\Users\\nobwak\\AppData\\Local\\Temp\\tmp2yu7x_rm\\seed-app-data\\v1)  activators BashActivator,BatchActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator C:\\Users\\nobwak\\Downloads\\py\\test\u0026gt;fugafuga\\Scripts\\activate.bat (fugafuga) C:\\Users\\nobwak\\Downloads\\py\\test\u0026gt; 出来立ての環境なので、当然、pyperclipはインストールされていない。\nそこで、pip installに先ほど書き出したライブラリリストを渡す。\n書式はpip install -r （さっきのテキスト）である。\n(fugafuga) C:\\Users\\nobwak\\Downloads\\py\\test\u0026gt;pip install -r requirements.txt Processing c:\\users\\nobwak\\appdata\\local\\pip\\cache\\wheels\\76\\ce\\1d\\b18ba37ad8d4e115814119ad2b5c6eec1bb680ac298e23405c\\pyperclip-1.7.0-py3-none-any.whl Installing collected packages: pyperclip Successfully installed pyperclip-1.7.0 (fugafuga) C:\\Users\\nobwak\\Downloads\\py\\test\u0026gt; 以上のように、インストールされる。\n今回はライブラリ一個だけだけど、これが複数のライブラリでもOK。\nむしろそういう時のため。\n以上\n","permalink":"https://nobwak.github.io/posts/2020-03-09-virtualenv%E3%81%A7%E3%83%9D%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E3%81%AA%E7%92%B0%E5%A2%83%E3%82%92%E4%BD%9C%E3%82%8B/","summary":"virtualenvで作った環境を持ち運びやすいように（ポータブルに）するためのメモ。 具体的には、その環境でインストールしたライブラリを、移","title":"2020-03-09-virtualenvでポータブルな環境を作る"},{"content":"PythonのvirtualenvをVisual Code Studio（以降、VSC）に認識させるには、のメモ。\n一言でいえば、virtualenvをしたフォルダをVSCで開き、virtualenvを選ぶだけ。 以下、Windowsでの作業例。\n準備：virtualenvを作る まずvirtualenvを作る。\nここではC:\\Users\\nobwak\\Downloads\\py\\testにvirtualenv hogehoge を作る。\nC:\\Users\\nobwak\\Downloads\\py\\test\u0026gt;virtualenv hogehoge created virtual environment CPython3.8.1.final.0-32 in 4110ms  creator CPython3Windows(dest=C:\\Users\\nobwak\\Downloads\\py\\test\\hogehoge, clear=False, global=False)  seeder FromAppData(download=False, pip=latest, setuptools=latest, wheel=latest, via=copy, app_data_dir=C:\\Users\\nobwak\\AppData\\Local\\Temp\\tmpo0qu8vwp\\seed-app-data\\v1)  activators BashActivator,BatchActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator 通常ならactivateしてライブラリをインストールしますね。\nWindowsではactivateの仕方がちょっと変わってて、環境がhogehogeならhogehoge\\Scripts\\activate.batになる。\nC:\\Users\\nobwak\\Downloads\\py\\test\u0026gt;hogehoge\\Scripts\\activate.bat (hogehoge) C:\\Users\\nobwak\\Downloads\\py\\test\u0026gt; お好みでライブラリをインストール。\nここではpyperclipを。\n(hogehoge) C:\\Users\\nobwak\\Downloads\\py\\test\u0026gt;pip install pyperclip Processing c:\\users\\nobwak\\appdata\\local\\pip\\cache\\wheels\\76\\ce\\1d\\b18ba37ad8d4e115814119ad2b5c6eec1bb680ac298e23405c\\pyperclip-1.7.0-py3-none-any.whl Installing collected packages: pyperclip Successfully installed pyperclip-1.7.0 (hogehoge) C:\\Users\\nobwak\\Downloads\\py\\test\u0026gt; VSCでの操作 作ったフォルダを開く。\nおもむろにimport pyperclipと書き出す。\npyperclipは無いので、当然ながらVSCは文句を言う（赤波下線）\n画面左下のPython 3.8.1 32-bit\u0026hellip;をクリックすると、画面中央上部に環境の選択肢が出てくるので、そこで選ぶ。\nさっきのhogehogeを選ぶ\nいちいちマウスクリックが面倒ならばSHIFT + Ctrl + Pから、Python Interくらいまでタイプすればインタプリターの選択が出てくるので、そこから環境を選ぶ。\nさっきの赤波線が消える。\n以上\n","permalink":"https://nobwak.github.io/posts/2020-03-10-visualcodestudio%E3%81%A7virtualenv%E3%82%92%E4%BD%BF%E3%81%86/","summary":"PythonのvirtualenvをVisual Code Studio（以降、VSC）に認識させるには、のメモ。 一言でいえば、virtualenvを","title":"2020-03-10-VisualCodeStudioでvirtualenvを使う"},{"content":"はじめに : PGPはオワコン ファイルをどう暗号化するか。\nそもそも、暗号化は意図しない他人に内容を覗かれないするためのものである。\n内容を覗かれないようにする目的を考えてみると、データが盗まれたときのため、安全でない経路を通して特定の人にデータを渡すため、である。\nこのうち、後者の「安全なデータ授受」についてだが、今時いろんな方法はあるものの、そもそも仕事場がモダンな通信手段を許可しておらず、メールだけ、あるいは会社製のファイル授受糞システムくらいしかない。\n仕方なくパスワード付きzipをメールで送ることになるんだけど、これはいわば共通鍵方式でありリスクはある。\n「パスワードは後のメールで送ります」なんてね。\nほんとに秘密のファイルを送るなら、公開鍵暗号を使いたい。\nそうすると候補に挙がるのはPGPであるが、PGPは2020年時点でかれこれ30歳(1991年生まれ)でいろいろと古く、セキュリティ強度に不安があるうえに、使い方の理解が非常に難しく、そもそも鍵が長すぎるんだよ。\n試しに「まあ安全」と言われるレベルの2048bitのPGP鍵を作ったらこんな感じである。\n本来なら（略）とかするが、この場合PGP鍵の長さを示すのが目的なのでそのまま示す。\nぜひマウスホイールを狂ったようにカリカリしてスクロールしてほしい。\nクレイジーである。\n-----BEGIN PGP PUBLIC KEY BLOCK----- Version: Keybase OpenPGP v1.0.0 Comment: https://keybase.io/crypto xsBNBF5jFb4BCADbM7Eaq4ZptR/WioR8OF/LyM8vWCYbyv/MfPBCXWc0Ig5UU1Pk eyUY9w2yyYb7alZ5g5lkcc8hJKA2Ca6mLLDEK3nv5ItfEOXBdqIeu6kcHIpfhqh0 FZtt2dsvrnrl12DRYzsPzzNViaGdksSo8k267Ye6WjkgRUn1e7ab4bT0HSuFzRnx kdutVyYe2NisSA9nN8MmO/VG0lGrmkKRlLubJAx0GQl3u0BUvJHnQeogQvfAKPWb EoEVITKML+7M0HZQ63lRuefM3NBdkuEvdXeJOzzR3rtuV910EUDt1rq9QooYheGH J7t6rk2+C2cPn61oKM81Vai9OUNzKZHXrcTRABEBAAHNGW5vYndhayA8d2FrYWJh QGdtYWlsLmNvbT7CwG0EEwEKABcFAl5jFb4CGy8DCwkHAxUKCAIeAQIXgAAKCRDo IZqnxT16IZ4kB/9h+/VJRFxIQQ9G4UHyl0uOsGriC5lPh5d/zDcndis2i+ulZYmv ZS9urmUpPvws3dU3p8guiG+PbclhZp3NAmz+Y8wvyTorFHpHI5qldXTchgzDBFIf G4yMawmUPmAbLV3xPwzxu6Pf/VPnU5v30o8zP7vEyS7VNUqvELPbpkWGQcgL2GoZ qPo/rcMv5kbFX/up8df6Y3bLz9v5ylLjrUmObsQ7ojWcpDAO8t6+jOyJaqc3QAWy 6lwHqxoyfBU8SDkQs7Ar/w5UIPNeMlRoteXcU3Iy7jv9ngMTcVyRB/CnoYMtL3vU MGw43P40mNB40JMpo1pDw+xFJ71TNY1R8oa6zsBNBF5jFb4BCADM9PYESLc2u9qz rFFG5mdLElSpJA5otkEV1CoRENOgY33HDZI4N4hOJM0DBbQtiHMX7PPw+BvicgME 7mbYcR/pjKXoE8SGVhFrHuZe8DA/zadHeFfvckweWpHWEAQ+uwwIiAKMpctaFtfP U/jju4EwQr+oci4IPSss4JWNm83qJQ7+EGEu0zILWcmEUiQpBjh4ChGgZQknLpgx h+luYusKueTPSImtB9CrTlVLlVQjQV93HkOAyCRpVaxc+OdPb06LJeDS1xkHeYyE OBrnFNeBCWBI5FS0wd/Fp4O3xmH7BVvDB/bt6JHUxxMLoIJouAvGHoNVo5okvTHJ uPffNzLDABEBAAHCwYQEGAEKAA8FAl5jFb4FCQ8JnAACGy4BKQkQ6CGap8U9eiHA XSAEGQEKAAYFAl5jFb4ACgkQlSfe26CnUVBJMgf8Cr9kLrk0bwvAohOrpmFOKRsu VMNxkiUvvxXVXR6vUaq+vmiQb0Pql0RMiuIPQe+5fdZGIjZuPpQVPUBjJC7/1o5s 86U3CdpjhNccL0NyoIm4XlVbSB2J7dojnwwv3AdobMJhbXKlncYd1f4Y3tsAp4pl AuhLLsow/eyN5yr2bl6L50mq/oaRcZvtRMXeICol3SsOsdQ5+FYBWZ55bWh1hlWp YUcSykllsG0BXbbiRGexWVdfg6pDVJrXqUSk9oRox9iaU3Q6iPdw45//56vLbzAm z1FZ2BOinzjYiZUXcNPunmjX1RjLPJkUjE7w3ePy9v7xPCexw1e7upd4mSoIgCGd B/9lbn7XYfV32EcJc5HdlNF7Bwe8IF96PkN4k+kMyOg2/mkVYx4os0731WQ7PN1S V0aLu3xKbJpvAjz3MdGXPnwcmqEB+Gbt0hLj3ttTeaImobGSGYNEIGWfcZzdc7Fr KDVUrzf8DVWRN28La4gLIOAnmPdszOp08gD7ulrXa5GIedUzQllhb4xcxUlUse3Y NO7wF7n2e3jSBKx7L2Y6sgpwcxN7jZtMTwgJZIAqpYdwIAkR0NpRPz5pfKPNGInu ffj5eBqNHc7WQETmmflNiXAxSmY2ucLJNu0I149m+fQDviER3rSBEz0Rw1x5uUh2 iRDd7aTubGvfXvbveTV6mV8kzsBNBF5jFb4BCADIcrA2BwC0Pc0iRFIZKF9zxa2g tJwZjKpFKzyY1phRs30pXVH3BGufXKMU49g5E6nvHn3aF64b5EiGMCrNGpWsTOJn fWRyMGjicBqO1N7INXMP0tGcZwIHTE4AVFfJGZlGG2yP8JLfKTE+zwWO+Elb7JoV 9ZWf9pTddShUM4HzpCFNd8ZYpiIMeV2XBcsZhGdXesByATyhfcK7eNgV8ddmf+6+ k/03s9aJWOCgbQh2IY2qgxFIm6QCD1ML3iHs3icnfPTlnM+j1MevJNSAiB23FyFt twtoqtQoyKcqhHGDpLlkEHMdyPes5XrQ9QX9yxWSY7OvBsQ2+PooiNVXEh8dABEB AAHCwYQEGAEKAA8FAl5jFb4FCQ8JnAACGy4BKQkQ6CGap829eiHAXSAEGQEKAAYF Al5jFb4ACgkQVnHg3HosoRC2PwgAgKXlZRpCJVULLltUQG7t5kcJF1jBh7LcnwH/ 8eSvALtqxwaJ4s6SfyAhKE+o5nXlBWEPmNUqVmfOHitY/dg7ALdUgF3pq2gikSf+ S2sXHueJUZYGh8OKcrpakdiXNa67s89o6g3PEVgGXlwn7a3To0ZXo3vhiZk7SnNj onk0SQf/7SMJQ87rhATkqpnr8q54XJi2MmzvmIz7Xgh9MaUaL1tSLbwkacgicXqx EwAqBDysoOQdxavSiNuzG4F8zXojTJ/oT6HofyZej7+SsjKwllL3RgYaKKTir8iY 2BYRcLxaXwhysGMvfiy8E3J8cizJUkvKCCN40ZCWPRseVjpQk4DMB/4w9h6ElYaD wenOzXzQmKlGSO4ewmo8a6MAjFrFOSLDW6EPNIZvrC8TZRWkC1bYNz8+KG0tPp2Q bDXbRqNDG+mXky4hp3YacgZfRTMASo9KivmSmG5S/fPJCG0UoxjOwm94b/LK1tDz XLQdJfSW6JukujDf+8C/dtkaOJxrsyrM6GXVcB4OvNbI0NZKp4qgm9OcxWtPBod3 p0nCnHSQ2DetKcxPivVmXcY7FL4sVlJ7c4KShXkgdJB0U9UoErfQFT+PCekMM8kT CMJcniqFMjOGnQwruTrYGwIzV9vjvhVQ0qIzlXtwbsiLvzGQWe/QY9jLdxT0Ru5a 6ceBrKxYJQvD =DVAW -----END PGP PUBLIC KEY BLOCK----- こんなもん日常使いできるか。\n世の中の皆さんもそう思っているようで、PGPのオワコンについてはPGP(Wikipedia)英語に怒涛の記載がある。\nWe\u0026rsquo;re calling it: PGP is dead (WIRED)は文字通りの記事。\nPGPは捨ててage（アゲ）を使う。（他に道がないならば） そんなわけでageである。\nageとは、「簡易でモダンで安全な暗号化ツール」だそうである。(https://github.com/FiloSottile/age)\nActually Good Encryptionの略。\n読み方は「アゲ」。エイジではない。\nPGPに比べれば、鍵は短いし、パイプで繋げられるし、簡単だしで確かにいい。\n特に鍵の短さは特筆すべきものがある。\nPGP鍵は話にならないが、sshの鍵と比べても短い。\nsshの鍵は以下の通り。\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDkldIB4qJ2iLN7OChd4DnTNlyYdbnYFVQh+nAC5EscgyQJ9cYjXXk+iKz0Ot7fb5+UYZsKzGwe6bri15ts+gl1rX7AlE1QORxUZUAM5bx4VXK3MDKIz6WHpjCRsYHD6gFiw0MTTQCPfrznLMFryfM6njhEqtetCUCJeCOrJtUPYJGKw4GJ7l3hlBfPxgwViVaGT55X3FcuwaAHPR54lS/MahMfF7FuhZDxrJj+azaISNup8w19QedWm7O26f0IyxzR6MJG+5KWxSn8DtI5a3RJ5s0CCEAgZiXmZG3Rlegbq7Vgmd9cjiM5mPjUrC0voJq4UOSydi92OGpAvIVpD7UL 一方、ageの鍵は以下の通りで、短いねえ。\nage1rvvg4xt2f9rvkc0dthy5au7kg42jec355ayd24lmath0euzetsfs8czjff ageはWindows, Mac, Linux, FreeBSDで使える。\nただ、現時点では単なるコマンドなんで、一般人とのファイル授受にはまだ使えないねえ。\nでは以下、インストールと使い方\nインストール githubの通り。\nWindows, Mac, Linux向けにはバイナリもある。\nFreeBSDならpkg install security/ageで。\nFreeBSDでのageインストール（不要な人は飛ばせ） とはいってもpkgでインストールするだけ。\n取得サイズは1MiB。けっこう大きいね。\n$ sudo pkg install security/age パスワード: Updating FreeBSD repository catalogue... FreeBSD repository is up to date. All repositories are up to date. The following 1 package(s) will be affected (of 0 checked): New packages to be INSTALLED:  age: 1.0.0 Number of packages to be installed: 1 The process will require 6 MiB more space. 1 MiB to be downloaded. Proceed with this action? [y/N]: y [1/1] Fetching age-1.0.0.txz: 100% 1 MiB 1.3MB/s 00:01 Checking integrity... done (0 conflicting) [1/1] Installing age-1.0.0... [1/1] Extracting age-1.0.0: 100% $ $ pkg info age # infoは以下の通り。 age-1.0.0 Name : age Version : 1.0.0 Installed on : Sat Mar 7 10:37:01 2020 JST Origin : security/age Architecture : FreeBSD:12:amd64 Prefix : /usr/local Categories : security Licenses : BSD3CLAUSE Maintainer : dmgk@FreeBSD.org WWW : https://github.com/FiloSottile/age Comment : Simple, modern and secure file encryption tool Annotations :  FreeBSD_version: 1200086  repo_type : binary  repository : FreeBSD Flat size : 5.87MiB Description : age is a simple, modern and secure encryption tool with small explicit keys, no config options, and UNIX-style composability. WWW: https://github.com/FiloSottile/age $ pkg list age # インストールされたファイル一覧。manは無い。 /usr/local/bin/age /usr/local/bin/age-keygen /usr/local/share/licenses/age-1.0.0/BSD3CLAUSE /usr/local/share/licenses/age-1.0.0/LICENSE /usr/local/share/licenses/age-1.0.0/catalog.mk $ 使い方(まずは-hを確認) 実行ファイルはageとage-keygenである。\n文字通りage-keygenは鍵を作る。\nageが実際の暗号化、復号を受け持つ。\n前節で少し書いたけど、manはないので-hを付けて使い方を表示させること。\n以下が実行結果であるが、-hを与えたときのage-keygenの素っ気なさとageの熱量の差を感じていただきたい。\n$ age-keygen --help # -hでも--helpでも同じ。 Usage of age-keygen:  -o FILE  output to FILE (default stdout) $ $ age --help Usage:  age -r RECIPIENT [-a] [-o OUTPUT] [INPUT]  age --decrypt [-i KEY] [-o OUTPUT] [INPUT] Options:  -o OUTPUT Write the result to the file at path OUTPUT.  -a, --armor Encrypt to a PEM encoded format.  -p, --passphrase Encrypt with a passphrase.  -r, --recipient RECIPIENT Encrypt to the specified RECIPIENT. Can be repeated.  -d, --decrypt Decrypt the input to the output.  -i, --identity KEY Use the private key file at path KEY. Can be repeated. INPUT defaults to standard input, and OUTPUT defaults to standard output. RECIPIENT can be an age public key, as generated by age-keygen, (\u0026#34;age1...\u0026#34;) or an SSH public key (\u0026#34;ssh-ed25519 AAAA...\u0026#34;, \u0026#34;ssh-rsa AAAA...\u0026#34;). KEY is a path to a file with age secret keys, one per line (ignoring \u0026#34;#\u0026#34; prefixed comments and empty lines), or to an SSH key file. Multiple keys can be provided, and any unused ones will be ignored. Example:  $ age-keygen -o key.txt  Public key: age1ql3z7hjy54pw3hyww5ayyfgxzqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p  $ tar cvz ~/data | age -r age1ql3z7hjy54pw3hyww5ayffg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p \u0026gt; data.tar.gz.age  $ age -d -i key.txt -o data.tar.gz data.tar.gz.age $ ご覧の通り、age-keygenで鍵を作り、その鍵を使ってageで暗号化・復号するのが基本だが、ageは単なるコマンドなんで、パイプで繋げられるのがポイント。\n実行例 鍵を作る 鍵を作るのはage-keygen。\nなお、ageでは、ssh鍵も使えるが、それは後ほど。\nともかく、-oに続いて書き出すファイルを指定すれば鍵が書き込まれる。\n$ age-keygen -o ~/.config/age/keys.txt Public key: age1rvvg4xtywl4ceeaqj5auhkg4qjec315ayd24lmath0euzetsfs8czjff $ 鍵を作ると問答無用で公開鍵を表示してくれる。\n公開鍵は暗号化するときに使う鍵ですな。\n復号するときに使う秘密鍵については、鍵を書き込んだファイルを表示してみると;\n$ cat ~/.config/age/keys.txt # created: 2020-03-07T10:49:42+09:00 # public key: age1rvvg4xtywl0cxeaqj5auhkg4qjec355ayd24lmath0euzetsfs8czjff AGE-SECRET-KEY-1G9NKY3MA92270K8FWXXXXQQ7ZHPLS3VDTASUGQ9AWG6AD8ZT4SLUM3PM $ ご覧の通りAGE-SECRET-KEYから続くものが秘密鍵ですな。\nなお、鍵の書き込まれたファイルのパーミッションは600で、他人からは見られないようになっている。\n秘密鍵だからね。このファイルの管理は厳重に。言わずもがな。\n暗号化 基本的な使い方はcatやらしたファイルをパイプで繋ぐ。\n以下の例ではplane.txtの内容をageに渡す。\n-rで公開鍵を指定。\nそのままだと標準出力に暗号化データが吐き出されるので、-oで出力先ファイルを指定。\n以下の例だとplane.ageに。\n$ cat ./plane.txt ほげほげ $ file ./plane.txt ./plane.txt: UTF-8 Unicode text # UTF-8のプレインテキスト $ $ cat ./plane.txt |age -o plane.age -r age1rvvg4xtywl0ceeaqj5auhkg4qjec355ayd24lmrth0euzetsfs8czjff $ file ./plane.age ./plane.age: data # 出来上がりはバイナリデータの模様 $ $ du -h ./plane* # やっぱりサイズは増えるよね 4.5K ./plane.age 512B ./plane.txt 復号 復号する場合には、--decryptあるいは-dをオプションに与える。\n鍵は--identityあるいは-iで指定する。\n結果は標準出力に吐き出されるので、必要に応じてファイルにリダイレクトする。\n$ age -i ~/.config/age/keys.txt --decrypt ./plane.age ほげほげ $ $ age -i ~/.config/age/keys.txt --decrypt ./plane.age \u0026gt; plane.decrypt.txt $ cat plane.decrypt.txt ほげほげ $ 暗号化のバリエーション 公開鍵入力のテクニック いかなageといえど、いちいち公開鍵をコピペするの面倒なので、以下のようにする。\n$ cat ./rcpt.txt age12d2x0gquwpuywl0ceeaqjsXXXXXxvp9j8ae6l04xfh5d85n44qaj8e4r $ cat ./plane.txt |age -r `cat rcpt.txt` -o plane.age 複数の宛先へ 暗号化のとき、公開鍵は複数、設定することができる。\nこの場合、いずれの秘密鍵でも復号できる。\n以下の例では、できたファイルはage1AAA, age1BBBの秘密鍵の持ち主それぞれで復号できる\n$ cat ./plane.txt |age -r age1AAA.... -r age1BBB... -o plane.age $ tarなどのアーカイバと組み合わせる ディレクトリをtar, gzで固めたものを暗号化\nzfsのスナップショットと組み合わせるのもいいね。\n$ ls -R ./dir a.txt b.txt  tar cvzf - ./dir |age -r age12d.... -o dir.tgz.age a ./dir a ./dir/a.txt a ./dir/b.txt $ sshの鍵 sshの公開鍵も使える。\n$ cat plane.txt ほげほげ $ cat ~/.ssh/id_rsa.pub # ssh公開鍵 ssh-rsa AAAA（略） $ cat plane.txt|age -o plane.age -r \u0026#34;`cat ~/.ssh/id_rsa.pub`\u0026#34; # ダブルクオーテーションで括らないといけないことに注意 $ $ age -d -i ~/.ssh/id_rsa ./plane.age Enter passphrase for \u0026#34;/home/nobwak/.ssh/id_rsa\u0026#34;: # ssh鍵のパスフレーズ入力 ほげほげ $ パスフレーズ -pを与えるとパスフレーズが使える。\n$ cat plane.txt ほげほげ $ age -p ./plane.txt \u0026gt; plane.age Enter passphrase: # パスフレーズを入れる $ $ age -d ./plane.age # 復号のときは-dオプション不要 Enter passphrase: ほげほげ $ ","permalink":"https://nobwak.github.io/posts/2020-03-07-%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E7%B0%A1%E5%8D%98%E9%89%84%E5%A3%81%E6%9A%97%E5%8F%B7%E5%BE%A9%E5%8F%B7%E3%83%84%E3%83%BC%E3%83%ABage%E3%82%A2%E3%82%B2/","summary":"はじめに : PGPはオワコン ファイルをどう暗号化するか。 そもそも、暗号化は意図しない他人に内容を覗かれないするためのものである。 内容を覗かれな","title":"2020-03-07-シンプル簡単鉄壁暗号復号ツールage（アゲ）"},{"content":"「みんなが知りたいシステム情報表示ツール」neofetchがカックイイのでメモ。\nFreeBSDの皆さんはbsdinfoも。\nneofetch neofetchとは以下の特徴を備えたシステム情報表示ツールである。\n 「みんなの知りたい情報」を表示する 表示する情報はカスタマイズ可能 原則、ASCIIベースなので、ターミナルで表示できる 中身はbashスクリプトなので軽い インストールにあたって依存がほとんどない  画面はこちら。\nインストール neofetchのサイトを見る。\nたいていのOSでコマンド一発でインストールできる。\nFreeBSDならpkg install neofetch。\nインストールしたらneofetchとタイプするだけでよろし。\n設定ファイル 取って出しでも困らないが、細かい設定をしたければ設定ファイルを変える。\n~/.config/neofetch/config.confがそう。\n中を見ればいい。\nいろんな情報を表示させたり、させなかったりできる。\nすごい量があるよ。\nbsdinfo neofetchに似たようなものに、bsdinfoがある。\n設定はできないけど、入魂のAA（アスキーアート）がかっこいいね。\ngithubで公開されている。\npkgにはないので、自分でコンパイルする必要がある。\n以下、メモ。\ngit clone。\n$ git clone https://github.com/samupl/bsdinfo.git Cloning into \u0026#39;bsdinfo\u0026#39;... remote: Enumerating objects: 101, done. remote: Total 101 (delta 0), reused 0 (delta 0), pack-reused 101 Receiving objects: 100% (101/101), 326.64 KiB | 507.00 KiB/s, done. Resolving deltas: 100% (47/47), done. $ で、githubにある手順の通りmake。\n$ cd bsdinfo $ make NSTALL_EXEC bsdinfo /bin/bsdinfo make: exec(NSTALL_EXEC) failed (No such file or directory) *** Error code 1 Stop. make: stopped in /usr/home/doe/files/bsdinfo/bsdinfo $ オーノー。失敗。\n同じディレクトリにあるconfigureの中身を見ると、以下の行がある。\nこのせいだね。\n_cc=\u0026#39;gcc\u0026#39;; そこでCC=ccとし、ついでに--x256も付けてconfigure。\n--256は、xterm-256（つまり色がきれいな）版にするためね。\n$ CC=cc ./configure --x256 $ make clang -lkvm -lc -O2 -pipe bsdinfo-xterm-256.c -o bsdinfo \u0026lt;snip\u0026gt; 7 warnings generated. $ Warningがいくつか出たけど、bsdinfoが同じディレクトリに出来る。\nmake installとすれば/usr/local/binに置いてくれる。\nワイの場合は~/binでいいかな。そこにコピーしておしまい。\nneofetchみたいには設定できないようね。\n以上。\n","permalink":"https://nobwak.github.io/posts/2020-03-01-%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E3%81%A7%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E6%83%85%E5%A0%B1%E8%A1%A8%E7%A4%BA%E3%83%84%E3%83%BC%E3%83%ABneofetch/","summary":"「みんなが知りたいシステム情報表示ツール」neofetchがカックイイのでメモ。 FreeBSDの皆さんはbsdinfoも。 neofetch neofetch","title":"2020-03-01-ターミナルで使えるシステム情報表示ツールneofetch"},{"content":"はじめに 端的に言えば、本稿では、ある特定のwebページから、必要な情報を取り出す方法をまとめる。\n具体的にはpythonを使って、京急のwebサイトから運行状況を取得する。\n狙いのwebページ上で、必要な情報を特定する方法ですな。\n大まかな手順  狙いのwebページ上で狙いのデータの住所を特定する pythonの対話モードで読めるかどうか実験 スクリプト化  使うもの pythonとそのライブラリ、lxmlとrequestsを使う。\nrequestsはいわばブラウザ。htmlをダウンロードする。\nlxmlはXMLやhtmlを扱うライブラリ。\npip listで調べて、なければpip installしておく。\n$ pip list Package Version ----------------- ---------- lxml 4.5.0 requests 2.22.0 ブラウザ。\n本稿ではFirefoxを使う。\nデータの場所の特定方法について 狙いのデータが含まれるHTMLの中の、どこにそのデータがあるか。\nいわばデータの住所を知る必要があるのだが、住所の記載方法にはCSSセレクターとXPathという2種類がある。\nどちらがよいかは、どうも議論を呼ぶ話題のようだ。\n特に主義主張がなければ、データに合わせて、使いやすい、あるいは、特定しやすい方法を選べばよいと思う。\n実際のスクリプト上でも命令が少し違うだけだし。\nいずれにしても住所はブラウザを使って調べることになるから、両方を調べて後で決めればよい。\nデータの場所の特定 本稿では京急の運行状況を例として進める。\nまず、京急のページを開く。\nここではFirefoxを使っているが、Chromeにも同様の機能はある。\nさておき、2020/02/23 00:03付で「京急線は平常通り運転しています。」とある。\nこの文がターゲットである。\nそこでおもむろに右上のメニュー(横棒三本の「三」)から、ウェブ開発、インスペクターを選ぶ。\nすると画面下のほうになにやらウィンドウが開く。\n慌てず騒がず、「京急線は平常通り運転しています。」をクリックする。\nすると画面下にある三つのウインドウのうち、左端の「HTMLを検索」ウインドウでハイライトされる行がある。\nそこを右クリックする。\nコピー、CSSセレクターを選ぶ。\nXpathでもよい。\nコピーした内容はメモしておく。\ncssセレクター .index_unit \u0026gt; dd:nth-child(2) xpath /html/body/main/div[2]/div[2]/div/div[1]/div/div/div/dl/dd xpathのが長くて見にくいので、CSSセレクターの方を使う。\n実験 きちんとしたスクリプトにするのは後にして、まずは実験。\nコマンドプロンプトでpythonと叩くか、idleを立ち上げるか、Visual Code Studioのターミナルでpythonと叩くか、好きにしなさい。\nまずはrequests, lxmlをimportする。\nlxmlは、このうちlxml.htmlしか使わない。\n\u0026gt;\u0026gt;\u0026gt; import requests \u0026gt;\u0026gt;\u0026gt; from lxml import html \u0026gt;\u0026gt;\u0026gt; urlに京急のwebページアドレスを代入。\n代入したらurlリターンで中身がきちんと入っているか確認しようね。\n\u0026gt;\u0026gt;\u0026gt; url = \u0026#39;https://unkou.keikyu.co.jp/\u0026#39; \u0026gt;\u0026gt;\u0026gt; url \u0026#39;https://unkou.keikyu.co.jp/\u0026#39; \u0026gt;\u0026gt;\u0026gt; requests.get()でhtmlをダウンロード。\nHTTPステータスコードが返る。\n200なので成功だね。\n\u0026gt;\u0026gt;\u0026gt; r = requests.get(url) \u0026gt;\u0026gt;\u0026gt; r \u0026lt;Response [200]\u0026gt; \u0026gt;\u0026gt;\u0026gt; 返り値に.textを付けると中身を教えてくれる。\n\u0026gt;\u0026gt;\u0026gt; r.text \u0026#39;\u0026lt;!DOCTYPE HTML\u0026gt;\\n\u0026lt;html lang=ja\u0026gt;\\n\u0026lt;head prefix=\u0026#34;og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#\u0026#34;\u0026gt;\\n\u0026lt;script async src=\u0026#34;https://www.googletagmanager.com/gtag/js?id=G-F2TJL9C6RN\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\\n\u0026lt;script\u0026gt;\\r\\nwindow.dataLayer = window.dataLayer || [];\\r\\nfunction gtag(){dataLayer.push(arguments);}\\r\\ngtag(\\\u0026#39;js\\\u0026#39;, new Date());\\r\\ngtag(\\\u0026#39;config\\\u0026#39;, \\\u0026#39;G-F2TJL9C6RN\\\u0026#39;);\\r\\n\u0026lt;/script\u0026gt;\\n\u0026lt;script\u0026gt;\\r\\n(function(i,s,o,g,r,a,m){i[\\\u0026#39;GoogleAnalyticsObject\\\u0026#39;]=r;i[r]=i[r]||function(){\\r\\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\\r\\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\\r\\n})(window,document,\\\u0026#39;script\\\u0026#39;,\\\u0026#39;//www.google-analytics.com/analytics.js\\\u0026#39;,\\\u0026#39;ga\\\u0026#39;);\\r\\n\\r\\nga(\\\u0026#39;create\\\u0026#39;, \\\u0026#39;UA-61218678-1\\\u0026#39;, \\\u0026#39;auto\\\u0026#39;);\\r\\nga(\\\u0026#39;send\\\u0026#39;, \\\u0026#39;pageview\\\u0026#39;);\\r\\n\u0026lt;/script\u0026gt;\\n\u0026lt;meta charset=utf-8\u0026gt;\\n\u0026lt;meta http-equiv=X-UA-Compatible content=\u0026#34;IE=edge\u0026#34;\u0026gt;\\n\u0026lt;title\u0026gt;鉄道運行情報 | 乗る | 京浜急行電鉄(KEIKYU)\u0026lt;/title\u0026gt;\\n\u0026lt;meta name=description content=\u0026#34;鉄道運行情報のご紹介。京浜急行電鉄のオフィシャルサイトでは運行状況やご利用案内の他、周辺地域の観光情 ごちゃごちゃしている。\nここでlxmlの出番。\nlxml.html.fromstring()で、HTMLをパース、解析してくれる(以下の例では事前にfrom lxml import htmlとしているので、html.fromstring())。\n返り値はHTML Elementと呼ばれるもの。\n詳しくはlxmlのページを。\n以下の例では返り値をelemに入れた。\nこれにtext_content()を付けると中身を教えてくれる。\nだいぶ読みやすくなった。\nあとはここから運行状況を読み取ればよい。\n\u0026gt;\u0026gt;\u0026gt; elem = html.fromstring(r.text) \u0026gt;\u0026gt;\u0026gt; elem \u0026lt;Element html at 0x3e3de38\u0026gt; \u0026gt;\u0026gt;\u0026gt; elem.text_content() \u0026#34;\\n\\n\\n\\r\\nwindow.dataLayer = window.dataLayer || [];\\r\\nfunction gtag(){dataLayer.push(arguments);}\\r\\ngtag(\u0026#39;js\u0026#39;, new Date());\\r\\ngtag(\u0026#39;config\u0026#39;, \u0026#39;G-F2TJL9C6RN\u0026#39;);\\r\\n  \\n\\r\\n (function(i,s,o,g,r,a,m){i[\u0026#39;GoogleAnalyticsObject\u0026#39;]=r;i[r]=i[r]||function(){\\r\\n (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\\r\\n m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\\r\\n })(window,document,\u0026#39;script\u0026#39;,\u0026#39;//www.google-analytics.com/analytics.js\u0026#39;,\u0026#39;ga\u0026#39;);\\r\\n\\r\\n ga(\u0026#39;create\u0026#39;, \u0026#39;UA-61218678-1\u0026#39;, \u0026#39;auto\u0026#39;);\\r\\n ga(\u0026#39;send\u0026#39;, \u0026#39;pageview\u0026#39;);\\r\\n \\n\\n\\n鉄道運行情報 | 乗る | 京浜急行電鉄(KEIKYU)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n乗る\\n\\n\\n閉 じる\\n乗る TOP\\n\\n路線図・各駅情報\\nきっぷ・定期券\\nPASMO\\n京急線アプリ\\nウィング号指定券（KQuick）\\nKQスタんぽ\\n振替輸送のご案内\\n鉄道運行情報\\n京急線遅延証明書の発行\\n京急の電車紹介\\n電車内・駅構内に おける禁煙の取り組みについて\\n\\n\\n\\n\\n遊ぶ・出かける\\n\\n\\n閉じる\\n遊ぶ・出かける TOP\\n\\nおトクなきっぷ\\n羽田空港アクセスガイド\\n京急沿線マガジン\\nけいきゅうキッズチャレンジ！\\nよこすか京急沿線ウォーク\\n三浦半島の小さな旅\\nもっと楽しむ羽田\\n\\n\\n\\n\\n暮らす\\n\\n\\n閉じる\\n暮らす TOP\\n\\n京急沿線で暮らす\\n\\n\\n平和島\\n大鳥居\\n京急川崎\\n日ノ出町\\n弘明寺\\n杉田\\n上大岡\\n金沢文庫\\n追浜\\n横須賀中央\\n京急久里浜\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n企業情報\\n\\n\\n閉じる\\n企業情報 TOP\\n\\nトップメッセージ\\n会社概要\\n沿革・歴史\\n役員一覧\\n組織図\\nグループ事業のご案内\\n不動産の取引に関するお客様の個人情報のお取扱いについて\\n各種申込 書や証明書などの個人情報のお取り扱いについて\\nニュ ではここで住所の出番。\nさきほどのHTML Elementを.cssselect(住所)すれば、マッチしたところを返してくれる（XPathの場合は.xpath(住所)）。\nただし注意しないといけないのは、返り値はリストであること。\nいきなり.text_content()を与えても結果は表示されない。\n実際に例を示す。\nメモしておいた住所をいったんselectorに入れる。\nそれで.cssselect。\n返り値をtemplistに入れて、.text_content()で中身を見ようとしても「リストだからダメ」と怒られる。\n\u0026gt;\u0026gt;\u0026gt; selector = \u0026#39;.index_unit \u0026gt; dd:nth-child(2)\u0026#39; \u0026gt;\u0026gt;\u0026gt; selector \u0026#39;.index_unit \u0026gt; dd:nth-child(2)\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; templist = elem.cssselect(selector) \u0026gt;\u0026gt;\u0026gt; templist.text_content() Traceback (most recent call last):  File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; AttributeError: \u0026#39;list\u0026#39; object has no attribute \u0026#39;text_content\u0026#39; \u0026gt;\u0026gt;\u0026gt; templist [\u0026lt;Element dd at 0x41219b0\u0026gt;] 気を取り直して、長さを調べると1。\nなので、ピッタリ見つけたようだ。\n\u0026gt;\u0026gt;\u0026gt; len(templist) 1 \u0026gt;\u0026gt;\u0026gt; じゃさっそく[0]を添えて中身を見る。\n.text_content()を使う。\n\u0026gt;\u0026gt;\u0026gt; templist[0] \u0026lt;Element dd at 0x41219b0\u0026gt; \u0026gt;\u0026gt;\u0026gt; templist[0].text_content() \u0026#39;京急線は平常通り運転しています。\\n\u0026#39; \u0026gt;\u0026gt;\u0026gt; 見えた。\n無駄な改行コードが入っているので.strip()しよう。\n\u0026gt;\u0026gt;\u0026gt; templist[0].text_content().strip() \u0026#39;京急線は平常通り運転しています。\u0026#39; \u0026gt;\u0026gt;\u0026gt; オッケー\nスクリプトに 以上の実験結果をもとに、以下の通りスクリプトにした。\nついでに最終更新日時も取得するようにした。\nimport requests from lxml import html   def get_keikyu_status(  url = \u0026#39;http://unkou.keikyu.co.jp/\u0026#39;,  status_selector = \u0026#39;.index_unit \u0026gt; dd:nth-child(2)\u0026#39;,  update_selector = \u0026#39;.index_unit \u0026gt; dt:nth-child(1)\u0026#39; ):  \u0026#34;\u0026#34;\u0026#34; 京急のwebページから運行状況、運行状況最終更新日時を取得し、返す。 引数は無しでもよいが、京急運行状況URL、運行状況を特定するCSSセレクター 最終更新日時を特定するCSSセレクターを引数に取る。 返り値は京急webページそのままのstring。 \u0026#34;\u0026#34;\u0026#34;  r = requests.get(url)  elem = html.fromstring(r.text)  status = elem.cssselect(status_selector)[0].text_content().strip()  last_update = elem.cssselect(update_selector)[0].text_content().strip()  return status, last_update  if __name__ == \u0026#39;__main__\u0026#39;:  (status, last_update) = get_keikyu_status()  print(status)  print(last_update) 実行結果\nWindows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. 新しいクロスプラットフォームの PowerShell をお試しください https://aka.ms/pscore6 PS C:\\Users\\J\\Downloads\\py\\keikyu\u0026gt; \u0026amp; \u0026#34;C:/Program Files (x86)/Python38-32/python.exe\u0026#34; \u0026#34;c:/Users/J/Downloads/py/keikyu/keikyustatus.py\u0026#34; 京急線は平常通り運転しています。 2020/02/23 00:03更新 PS C:\\Users\\J\\Downloads\\py\\keikyu\u0026gt; このスクリプトで取得したデータをSlackでもLINEでも送って、スマホに通知したりすればよい。\n","permalink":"https://nobwak.github.io/posts/2020-02-22-%E4%BA%AC%E6%80%A5%E3%81%AE%E9%81%8B%E8%A1%8C%E7%8A%B6%E6%B3%81%E3%82%92python%E3%81%A7%E5%8F%96%E5%BE%97%E3%81%97%E3%82%88%E3%81%86/","summary":"はじめに 端的に言えば、本稿では、ある特定のwebページから、必要な情報を取り出す方法をまとめる。 具体的にはpythonを使って、京急のweb","title":"2020-02-22-京急の運行状況をpythonで取得しよう"},{"content":"Visual Code Studioでgitを使おう グレイトなコードエディタVisual Code Studio（以降、VSC）でgitを使う設定のメモ。それだけ。\ngit、VSCのインストールは終わっている前提。\nサマリ git initしたフォルダをVSCで開く。\nそれだけ。\nなにはともあれ、git init gitで管理したいフォルダを開く。\nアドレスバーにcmdと入れてEnterすればそのフォルダでコマンドプロンプトが開く。\nご覧の通り。\nあとはそのフォルダをSHIFT+右クリックしてPowerShellウインドウをここで開く(S)をしてもよい。\nPoweshellでもコマンドプロンプトのどちらでも構わないが、以降、コマンドプロンプトの方で。\nで、git init。\nVSCでの操作 以上でフォルダの準備は整ったので、VSCでそのフォルダを開く。\nVSC状の見た目は何も変わらない。\nしかしファイルを置くと\u0026hellip;。\nファイルtest.pyのファイル名が緑になり、右端にUが付いた。\nこのUとはUntrackedという意味で、gitで捕捉されていないファイルという意味。\nそして一番左、虫眼鏡アイコンの下のアイコンに「1」が表示される。\nマウスオーバーすると分かるが、Source Controlのアイコンである。\nSource Controlでファイルを1つ検知したという意味。\nさっそくクリックすると。\nCHANGESの下にファイルがリストされている。\nここでファイル名の右にある+を押すとファイルはステージングに移る。\nMessageにコミットメッセージを入れて、上のチェックマークをクリックすればコミット完了。\nターミナルでも操作可 VSCのターミナルでもgitの操作が可能。\nこれを利用してtag打ちとかができる。\n","permalink":"https://nobwak.github.io/posts/2020-02-21-visualcodestudio%E3%81%A7git%E3%82%92%E4%BD%BF%E3%81%86/","summary":"Visual Code Studioでgitを使おう グレイトなコードエディタVisual Code Studio（以降、VSC）でgitを使う設定のメモ。それだけ。\ngit、VSCのインストールは終わっている前提。\nサマリ git initしたフォルダをVSCで開く。\nそれだけ。\nなにはともあれ、git init gitで管理したいフォルダを開く。\nアドレスバーにcmdと入れてEnterすればそのフォルダでコマンドプロンプトが開く。\nご覧の通り。\nあとはそのフォルダをSHIFT+右クリックしてPowerShellウインドウをここで開く(S)をしてもよい。\nPoweshellでもコマンドプロンプトのどちらでも構わないが、以降、コマンドプロンプトの方で。\nで、git init。\nVSCでの操作 以上でフォルダの準備は整ったので、VSCでそのフォルダを開く。\nVSC状の見た目は何も変わらない。\nしかしファイルを置くと\u0026hellip;。\nファイルtest.pyのファイル名が緑になり、右端にUが付いた。\nこのUとはUntrackedという意味で、gitで捕捉されていないファイルという意味。\nそして一番左、虫眼鏡アイコンの下のアイコンに「1」が表示される。\nマウスオーバーすると分かるが、Source Controlのアイコンである。\nSource Controlでファイルを1つ検知したという意味。\nさっそくクリックすると。\nCHANGESの下にファイルがリストされている。\nここでファイル名の右にある+を押すとファイルはステージングに移る。\nMessageにコミットメッセージを入れて、上のチェックマークをクリックすればコミット完了。\nターミナルでも操作可 VSCのターミナルでもgitの操作が可能。\nこれを利用してtag打ちとかができる。","title":"2020-02-21-VisualCodeStudioでgitを使う"},{"content":"はじめに gitのセットアップメモ。\nただしポータブルバージョン。\nレジストリに手を触れないのは何かにつけて重宝するからね。\nただのメモだから手順だけ淡々と記す。\nポータブルバージョンのダウンロード git公式のここから。\nいきなりダウンロードが始まるかもしれないけどキャンセルして64-bit Git for Windows Portable.をクリック。\n伸張、インストール ファイルはexe形式の自己解凍。お好きなところへ展開。あとでパスを通す。\n環境変数の設定（パスを通す） 先に書いておくと、通すパスはgitをインストールした先の「cmd」ディレクトリ。\nトップディレクトリではないことに注意。\n例えば上記の例の通りc:\\local\\gitにインストールしたならc:\\local\\git\\cmdが狙いのディレクトリになる。\nさて早速作業に入る。\nWindowsタスクバーにある「ここに入力して検索」に「環境変数」とタイプし、画面から「環境変数を編集」を選ぶ。\n「path」を選んで「編集」をクリック\n新規(N)から、先ほどgitをインストールした先の「cmd」ディレクトリを指定するが、そのディレクトリのアドレスを右クリック→アドレスをテキストとしてコピー（C）し、環境変数のところへ貼り付ければよい。\n設定確認 OKを押してって環境変数設定ウインドウを閉じてから、コマンドプロンプトを開き、git --versionとタイプして、以下のような応答があれば完了\n","permalink":"https://nobwak.github.io/posts/2020-02-11-portablegit%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97_windows/","summary":"はじめに gitのセットアップメモ。 ただしポータブルバージョン。 レジストリに手を触れないのは何かにつけて重宝するからね。 ただのメモだから手順だ","title":"2020-02-11-PortableGitセットアップ（Windows）"},{"content":"はじめに マイナンバーカードを使った確定申告を済ませた。\n確定申告期間はまだ先だが、還付だけなら今でもできる。\nつまり勤め先の会社で年末調整が済んでおり、そのうえで医療費控除等により還付が必要な場合には期間前でもできる。\n年度末で忙しくなる前に済ませたわけである。\nそれはともかく、申請のための事前準備がやたら大変で、来年には忘れてそうなので備忘のために記す。\n備忘のためとは言いつつ、あんまり大変だったので、実はもう一回やれと言われてもできるかどうか分からない。\nだから「おそらくこうだろう」という推測で書き残し、次回のために残す。\nリンクは記事執筆時点のものだから、来年になると変わっているかもしれない。\nなお以下は「確定申告」で検索すると国税庁でなくfreeeのサイトを一番に表示するbingさん。\n申請方法について 確定申告（還付）の申請方法には3種類ある。\n 投入したデータを印刷し、税務署に提出する マイナンバーカードを使って電子申請する。 あらかじめ決めたIDとパスワードを使って電子申請する。  いずれもWindowsでしか申請できない。\nまた、上記の2については、ブラウザに制限がある。\nInternet ExplorerかEdgeだけ。\n本稿は2で実施。\n確定申告のサイトへ 確定申告のサイトはこちら\n医療費控除の場合は、画面右から医療費集計フォームをダウンロードし、記入しておくこと。\n「作成開始」をクリックして進む。\ne-Taxで提出 マイナンバーカード方式 を選ぶ\ne-Tax Edge用APのダウンロードを選び、拡張機能をダウンロード。\n拡張機能を有効にすること。\n確定申告のページだとツールバー（みたいなの）が表示されないので注意\nまた確定申告のページに戻り、「事前準備セットアップを行ってない場合はこちら」の「こちら」をクリック\nファイルをダウンロードし、実行\nこれで行けるはず。\nあとは、国税庁の証明書をインストールする必要があるかもしれない。\n2020 2 9時点でのリンクはこちら\nダメなら「国税庁　証明書　インストール」でググるか。\n以上\n","permalink":"https://nobwak.github.io/posts/2020-02-09-%E7%A2%BA%E5%AE%9A%E7%94%B3%E5%91%8A%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97/","summary":"はじめに マイナンバーカードを使った確定申告を済ませた。 確定申告期間はまだ先だが、還付だけなら今でもできる。 つまり勤め先の会社で年末調整が済ん","title":"2020-02-09-確定申告セットアップ"},{"content":"Visual Stuido CodeでPythonセットアップ Visual Code Studioをインストールする。\nここから。\n.zipを選べばポータブルバージョンが落ちてくる。\nPythonダウンロード たぶんまだ32 bitがいいんだろうな\npythonインストール pathには入れるようにしよう。\nCustomize Installationで。\n次へ。\nInstall for all usersがすき。\nインストール先パスが複雑にならないから。\nこれでOK\nインストールが終わったらコマンドプロンプトでpythonとタイプし、パスが通っているか確認する。\n\u0026gt;\u0026gt;\u0026gt;というプロンプトになればOK。\nexit()で抜ける。\nVSCのpythonセットアップ Python extension for Visual Studio Code\nここ から。\n「install」をクリッククリックすると、VSCで開くか聞いてくれるんで、お言葉に甘える。\nもう一回「install」をクリック\n(たぶん)適当に.pyを開くと「Linterがない」と怒られるので、「install」。\n画面の下の方でインストールが進む。\n以上。\n","permalink":"https://nobwak.github.io/posts/2020-01-18-visualstudiocode_python_windows%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97/","summary":"Visual Stuido CodeでPythonセットアップ Visual Code Studioをインストールする。 ここから。 .zipを選べばポータブルバージョンが落ちてくる。 Pyt","title":"2020-01-18-VisualStudioCode_python_Windowsセットアップ"},{"content":"はじめに scansnapはEvernoteと連携しておくと、スキャンしたそばからEvernoteにデータを送ってくれる。\nしかしscansnap～evernote連携は、1年毎に追加認証する必要がある。\n1年も経ったら方法を忘れるので、備忘のために書いておく。\n作業にはScansnap Homeというアプリを使うが、UIが私にはとてもつらいせいもある。\n分かりにくいんだよ\n事前準備 scansnap homeをインストールし、scansnapとPCを接続しておく。\nscansnap homeはここからダウンロード。\n実際 まずScanボタンを押す。\n設定を変えたいだけなのになぜなのか。\n 右上の謎のアイコンをクリック。\n初回設定は左。編集は右。\nこれが設定追加、編集とは思わないだろ。\n編集をクリック\n ScanSnap Cloudに送る　をクリック\n サービス名Evernoteの選択をクリック\nなおここで保存先の参照で、Evernoteのどのノートに保存するかを選べる（後述）\n Evernoteを選択、再許可\nこれでOK。\n Evernoteの保存先は以上の通り。\n以上\n","permalink":"https://nobwak.github.io/posts/2020-01-05-scansnap_evernote%E9%80%A3%E6%90%BA/","summary":"はじめに scansnapはEvernoteと連携しておくと、スキャンしたそばからEvernoteにデータを送ってくれる。 しかしscansna","title":"2020-01-05-scansnap_evernote連携"},{"content":"いわゆる宅鯖を運用していると、外からアクセスしたいこと、させたいことがよくある。\n当然ながらその場合には自宅ルータのWAN側IPアドレスでアクセスするわけだが、悲しいかな庶民には固定のグローバルIPアドレスは所有できない。\nつまりちょくちょく変わるんである。\nそこでDDNSを使いますよね。\n私が使っているDDNSは後述するとして、DDNSを使うには、IPアドレスが変わる都度、DDNSに伝えてやる必要がある。\nしかしこの作業はいちいち手作業でやりたくない。\nそれで今回の記事。\nDDNS何使ってますか ちょっと前まではブロードバンドルータにおまけで付いてたりしたけど、最近なくなっちゃったよね。\n私はここ使ってます。\n dynu.com  おすすめ。\ndynuにIPアドレスを通知するには dynuにIP update protocolという説明があるのでそれを読む。\n曰く、以下のようにすればよいと。\nhttp://username:password@api.dynu.com/nic/update?myip=198.144.117.32\u0026amp;myipv6=2604:4400:a:8a::f4 ここで、パスワードはmd5ハッシュしたものでよい。\nしがたって、必要なものはグローバルIPアドレスとハッシュ化されたパスワード。\nわたしのグローバルIPアドレスはなんですか 結論\nそういうサービスがあるから使う。\n以下二つともシェルスクリプト等でIPアドレスを得られるので便利。\n What Is My IP Address? - ifconfig.me WTF is my IP address  WTFisMyIPは愉快である。ぜひブラウザで覗いてみてほしい。\nそれはともかく、ifconfig.meを使う。\nwget -qO - http://ifconfig.me/ipでIPアドレスが返る。\nパスワードのハッシュを得る これはmd5を使うだけ。\n$ md5 -s hogehoge MD5 (\u0026#34;hogehoge\u0026#34;) = 329435e5e66be809a656af105f42401e シェルスクリプトに #!/bin/sh  GETIP=\u0026#39;http://ifconfig.me/ip\u0026#39; MYHASH=\u0026#39;329435e5e66be809a656af105f42401e\u0026#39;  WGET=\u0026#39;/usr/local/bin/wget\u0026#39; WGET_OPT=\u0026#39;-qO -\u0026#39;  echo \u0026#39;Getting my IP address...\u0026#39; MYIP=`${WGET} ${WGET_OPT} ${GETIP}` echo \u0026#34;My IP address is ${MYIP}\u0026#34;  URL=\u0026#34;http://api.dynu.com/nic/update?myip=${MYIP}\u0026amp;username=user\u0026amp;password=${MYHASH}\u0026#34;  # echo ${URL}  echo \u0026#34;Registering my IP address to DDNS service...\u0026#34; ${WGET} ${WGET_OPT} ${URL} echo echo \u0026#39;Done.\u0026#39; 実行結果\nIPアドレスが変わった瞬間の結果を記録し忘れた。\n$ dyn.sh Getting my IP address... My IP address is 198.144.117.32 Registering my IP address to DDNS service... nochg Done. あとはこれをcronでもなんでも仕込めばよい。\nFreeBSDのみなさま用。periodicファイル 以下のファイルを/usr/local/etc/periodic/dailyに置いて、毎日、実行させている。\ncronでもいいんだけど、cronは目に付きにくくて、バックアップなどを忘れてしまうから。\nよければどうぞ。\n#!/bin/sh   GETIP=\u0026#39;http://ifconfig.me/ip\u0026#39; MYHASH=\u0026#39;329435e5e66be809a656af105f42401e\u0026#39;  WGET=\u0026#39;/usr/local/bin/wget\u0026#39; WGET_OPT=\u0026#39;-qO -\u0026#39;   rc=0 if [ -x $WGET ]; then  echo \u0026#39;Getting my IP address...\u0026#39;  MYIP=`${WGET} ${WGET_OPT} ${GETIP}`  echo \u0026#34;My IP address is ${MYIP}\u0026#34;  URL=\u0026#34;http://api.dynu.com/nic/update?myip=${MYIP}\u0026amp;username=user\u0026amp;password=${MYHASH}\u0026#34;  echo \u0026#34;Registering my IP address to DDNS service...\u0026#34;  ${WGET} ${WGET_OPT} ${URL}  echo  echo \u0026#39;Done.\u0026#39; else  echo \u0026#34;${WGET}is not installed and I gave up.\u0026#34;  rc=2 fi  exit \u0026#34;$rc\u0026#34; 以上\n","permalink":"https://nobwak.github.io/posts/2019-10-13-my-fxxxing-ip%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%A8ddns/","summary":"いわゆる宅鯖を運用していると、外からアクセスしたいこと、させたいことがよくある。 当然ながらその場合には自宅ルータのWAN側IPアドレスでアク","title":"2019-10-13-my-fxxxing-IPアドレスとDDNS"},{"content":"blogをhugoで作るとき、記事の中で画像を表示させたいことがある。 その時の方法について。\nstaticディレクトリに置けばよい ある特殊なフォルダに画像を入れると、例えば/images/hoge.jpgのように参照できるようになる。\nそれがstaticディレクトリ。\n. |-- archetypes |-- config.toml |-- content |-- data |-- layouts |-- public |-- resources |-- static # ここ `-- themes staticディレクトリの下にimagesというディレクトリを作り、そこにhoge.jpgというファイルを作れば、記事からは/images/hoge.jpgとして参照できる。\nstatic以外にもそういうディレクトリを作りたい なお、staticディレクトリ以外にもこういったディレクトリを作ることができる。\nconfig.tomlでstaticDirとして指定すればよい。\n複数指定できる。以下は例。\nstaticDir = [\u0026#34;static\u0026#34;, \u0026#34;images\u0026#34;, \u0026#34;wp-content\u0026#34;] 画像のインライン表示 ![title](/images/hoge.jpg) 以上のようにすればよい。\n","permalink":"https://nobwak.github.io/posts/2019-09-24-hugo%E3%81%A7static%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E7%94%BB%E5%83%8F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%BD%AE%E3%81%8F/","summary":"blogをhugoで作るとき、記事の中で画像を表示させたいことがある。 その時の方法について。 staticディレクトリに置けばよい ある特殊なフ","title":"2019-09-24-hugoでstaticディレクトリに画像ファイルを置く"},{"content":"リモートデスクトップ先のWindowsにUSBメモリを読み込ませたいとき。\nリモートデスクトップの設定で、ローカルデバイスとリソース、後で接続するデバイスにチェックを入れる。\n","permalink":"https://nobwak.github.io/posts/2019-09-23-%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97%E3%81%A7%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AEusb%E3%82%92%E4%BD%BF%E3%81%86/","summary":"リモートデスクトップ先のWindowsにUSBメモリを読み込ませたいとき。 リモートデスクトップの設定で、ローカルデバイスとリソース、後で接続","title":"2019-09-23-リモートデスクトップでローカルのUSBを使う"},{"content":"はじめに Windows10にデフォルトで用意されているアンチウイルスソフトWindows Defenderをコマンドラインで操作する。\nコマンドラインで操作することの良い点はバッチ化できることである。\nあるいは、他人への指示がしやすいことである。\n講釈はいいから、定義ファイルの更新＞クイックスキャンをするバッチファイルをよこせ、という方は文末へどうぞ。\nWindows Defenderの本体 以下が本体\n%ProgramFiles%\\Windows Defender\\MpCmdRun.exe mpcmdrunなんてWindows Defenderをまったく想像できない名前だな。\n-hを与えればいろいろと情報を得られる。割愛。\nなお、パスは通ってないので、コマンド実行時にはフルパスで指定するか、cdでディレクトリを移ってから。\nスキャンする -hを参照すると;\n -Scan [-ScanType value]  0 Default, according to your configuration  1 Quick scan  2 Full system scan とのことである。\nつまりQuick scanならmpcmdrun -scan -scantype 1とすればよい。\n以下、実行例.\nC:\\Users\\nobwak\u0026gt;\u0026#34;%ProgramFiles%\\Windows Defender\\MpCmdRun.exe\u0026#34; -scan -scantype 1 Scan starting... Scan finished. 定義ファイルのアップデート -SignatureUpdateを与えればよい。\n以下、実行例。\nC:\\Users\\nobwak\u0026gt;\u0026#34;%ProgramFiles%\\Windows Defender\\MpCmdRun.exe\u0026#34; -signatureupdate Signature update started . . . Signature update finished. No updates needed どうも定義ファイルのバージョンを表示するオプションはないようだ。\n定義ファイルのバージョンはGUIで確認するしかないが、それはさておき強制的にダウンロードさせるなら以下のように一度定義ファイルを削除してから更新する。\nただし、定義ファイルの削除には管理者権限が必要。\ncd %ProgramFiles%\\Windows Defender MpCmdRun.exe -removedefinitions -dynamicsignatures MpCmdRun.exe -SignatureUpdate オフライン用定義ファイル インターネット接続されていないPCへUSBメモリ等で定義ファイルをコピーするなど、オフラインPC用に定義ファイルだけをダウンロードするには、以下の場所から。\nダウンロードしたファイルのプロパティを見るとバージョンを確認できる。\nhttps://www.microsoft.com/en-us/wdsi/definitions\nWindows10, 64bitなら以下から。\nhttps://go.microsoft.com/fwlink/?LinkID=121721\u0026amp;arch=x64\nWindows Defenderをコマンドラインから開く 電話、メールで他人にWindows Defenderを開かせるときのストレスたるや。\n 「画面右下のタスクバーのところに、カタカナの『へ』みたいなのがあるでしょう。それをクリックして盾のアイコンをクリックしてください。」\n「え？たて？」\n あるいは\n 「画面左下の田マークをクリックし、歯車アイコンをクリック、そこで『セキュリティ』とタイプ」\n「え？歯車？」\n という具合である。\nWindows Defenderは以下のコマンドで一発で開く。\nms-settings:windowsdefender\n 田+Rで「ファイル名を指定して実行」が開くので、そこにms-settings:windowsdefenderとタイプし、実行してください。\n とメールに書けばよい。\n定義ファイルの更新、スキャンバッチファイル 以下の内容をテキストファイルにコピーし、拡張子.batで保存する。\n定義ファイルをいったん削除して更新し、そのあとクイックスキャンである。\n定義ファイルを削除して更新するには管理者権限が必要だが、管理者権限なく実行しても削除がエラーになるだけで、更新はできる。気にせず実行。\nフルスキャンしたい場合には-scantypeを2に変えること。\npauseコマンドにより、処理が終了しても何かのキーを押すまで画面が閉じないようにしている。\n@echo off  cd %ProgramFiles%\\Windows Defender MpCmdRun.exe -removedefinitions -dynamicsignatures MpCmdRun.exe -SignatureUpdate mpcmdrun -scan -scantype 1  pause 以上\n","permalink":"https://nobwak.github.io/posts/windows-defender%E3%82%92%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E6%93%8D%E4%BD%9C%E3%81%97%E3%82%88%E3%81%86/","summary":"はじめに Windows10にデフォルトで用意されているアンチウイルスソフトWindows Defenderをコマンドラインで操作する。 コマンド","title":"Windows Defenderをコマンド操作しよう"},{"content":"なんどもgit pushするときにいちいちパスワードをタイプしたくない blogをgithub pagesにpushしたあとにすぐ間違いに気づく法則がある。\nそれはともかくとして、要するに短い時間になんどもgit pushすることがよくある。 当然ながら、git pushでリモートサーバにファイルをアップロードするわけだから、都度、IDとパスワードを聞かれることになる。\nこれがとても面倒なので、なんとかしたい。\ncredential helperを使う https://help.github.com/en/articles/caching-your-github-password-in-git\n上記に書いてある通りで、git config --global credential.helper cacheとすればよいだけ。\nデフォルトで15分間はパスワードをキャッシュしてくれる。\n$ git config --global credential.helper cache $ 特に応答は返らないが、こうすると~/.gitconfigに以下が追加される。\n[credential]  helper = cache キャッシュする時間を変えるなら、以下の通り指定する。単位は秒。\ngit config --global credential.helper \u0026#39;cache --timeout=3600\u0026#39; この場合の.gitconfigはこのようになる。\n[credential]  helper = cache --timeout=3600 これで問題なく動いた。\nとても楽。\n","permalink":"https://nobwak.github.io/posts/2019-07-20-git%E3%81%A7commit%E3%81%AE%E3%81%9F%E3%81%B3%E3%81%AB%E3%81%84%E3%81%A1%E3%81%84%E3%81%A1%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E5%85%A5%E3%82%8C%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84/","summary":"なんどもgit pushするときにいちいちパスワードをタイプしたくない blogをgithub pagesにpushしたあとにすぐ間違いに気づく法","title":"git pushのたびにいちいちパスワードをタイプしないようにするには"},{"content":"HUGOデプロイの効率化 HUGOのおかげで、気軽にメモを書いてgithub pagesに載せられるようになったのだが、こうなってくるとgithub pagesへのアップロード自体が面倒になる。\n具体的には;\n HUGOでビルド publicフォルダに降り git addし git commitし（コメントも入れて） git pushする  という手順で、意外に手間が多い。\nということなら、スクリプトに書いてしまいましょう。\n元ネタ HUGOもそのへん手抜かりはなく、元ネタを用意してくれている。\nHOSTING AND DEPLOYMENTのページにあるput into a scriptね。\nスクリプト HUGOのサイトにあるスクリプトでは、プロダクション用のビルドになっていないので、そこだけ変更している。\nこれをdeploy.shとでも名前を付けて保存する。\ndeploy.sh \u0026quot;add articles\u0026quot;というように引数を与えればそれがコミットメッセージになる。\n引数に無ければrebuilding site 20190713というようなメッセージになる。\n転用する場合には1行目のShebangだけ書き換えること。\n#!/usr/local/bin/bash  echo -e \u0026#34;\\033[0;32mDeploying updates to GitHub...\\033[0m\u0026#34;  # Build the project. HUGO_ENV=production hugo # if using a theme, replace with `hugo -t \u0026lt;YOURTHEME\u0026gt;`  # Go To Public folder cd public # Add changes to git. git add .  # Commit changes. msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ]  then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34;  # Push source and build repos. git push origin master  # Come Back up to the Project Root cd .. 以上\n","permalink":"https://nobwak.github.io/posts/2019-07-12-github_pages%E3%81%B8%E3%81%AEhugo_%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8D%E3%81%86/","summary":"HUGOデプロイの効率化 HUGOのおかげで、気軽にメモを書いてgithub pagesに載せられるようになったのだが、こうなってくるとgith","title":"HUGOで作ったマークダウンをgithub pagesへデプロイするスクリプトを作ろう"},{"content":"jailでwebサーバやSambaを動かすとき、ホストの特定ディレクトリを参照するのはよくあること。 たとえば以下のようなディレクトリ構成で、ホストのpicturesディレクトリを、jailである \u0026ldquo;jail_samba\u0026rdquo; のshared_folderで見られるようにしたい。\n. |-- jails | `-- jail_samba | `-- shared_folder `-- pictures こういう場合には、nullfsで/picturesを/jails/jail_samba/shared_folderにマウントするのが定石。\nただこの問題点は、jailが増えていくと、ホストでmountコマンドを実行したときにズラズラと表示が増えて見にくくなること。\nしょうがないと言えばしょうがないのだが、もうちょっとなんとかならんか。\njailのfstab jailには専用のfstabがあるのでそれを使う。\n使うと、jailが実行されたときにマウントされ、停止したときにはアンマウントされる。 ファイルは/etc/fstab.\u0026lt;jailname\u0026gt;。 ただこの仕組みを使うと今度は/etcディレクトリの下が取っ散らかるのでjailのサポートツールを使う。\nここではqjailを使う。\nqjailでjailごとのfstabを設定する。 /usr/local/etc/qjail.fstab/\u0026lt;jailname\u0026gt;で決める。\nデフォルトの状態では以下の通り。\nここではplexという名前のjailである。\n$ cat ./plex /usr/jails/sharedfs /usr/jails/plex/sharedfs nullfs ro 0 0 mountの状態を見てみる。\n$ sudo qjail start plex Jail successfully started plex [doe@camazotz /usr/local/etc/qjail.fstab]$ mount zroot/ROOT/default on / (zfs, local, noatime, nfsv4acls) devfs on /dev (devfs, local, multilabel) (略) /usr/jails/sharedfs on /usr/jails/plex/sharedfs (nullfs, local, read-only) devfs on /usr/jails/plex/dev (devfs, local, multilabel) では、以下のように参照させる。\n   Hostディレクトリ jail側のディレクトリ     /itunes/pictures /usr/jails/plex/pictures   /itunes/music /usr/jails/plex/music   /itunes/homevideo /usr/jails/plex/homevideo    まずjail側に、対応するディレクトリを作る。\nもちろん作業前にjailは停止させましょう。\n$ sudo qjail list STATUS JID NIC IP Jailname ------ ---- ------ --------------- -------------------------------------------- DS N/A re0 192.168.1.15 plex $ $ cd /usr/jails/plex/ $ sudo mkdir pictures music homevideo Password: $ ls COPYRIGHT etc lib mnt pictures sbin tmp bin home libexec music proc sharedfs usr dev homevideo media net root sys var 次にfstabの書き換え。\n$ cd /usr/local/etc/qjail.fstab/ $ sudo vi ./plex $ cat ./plex /usr/jails/sharedfs /usr/jails/plex/sharedfs nullfs ro 0 0 /itunes/pictures /usr/jails/plex/pictures nullfs ro 0 0 /itunes/music /usr/jails/plex/music nullfs ro 0 0 /itunes/homevideo /usr/jails/plex/homevideo nullfs ro 0 0 で、jail plexをスタート。\n$ sudo qjail start plex Jail successfully started plex $ mount zroot/ROOT/default on / (zfs, local, noatime, nfsv4acls) devfs on /dev (devfs, local, multilabel) (略) zroot on /zroot (zfs, local, noatime, nfsv4acls) /usr/jails/sharedfs on /usr/jails/plex/sharedfs (nullfs, local, read-only) /itunes/pictures on /usr/jails/plex/pictures (nullfs, local, read-only) /itunes/music on /usr/jails/plex/music (nullfs, local, read-only) /itunes/homevideo on /usr/jails/plex/homevideo (nullfs, local, read-only) devfs on /usr/jails/plex/dev (devfs, local, multilabel) 無事にマウントされた。\njail plexを止めて見てみよう。\n$ sudo qjail stop plex Jail successfully stopped plex $ mount zroot/ROOT/default on / (zfs, local, noatime, nfsv4acls) devfs on /dev (devfs, local, multilabel) (略) zroot on /zroot (zfs, local, noatime, nfsv4acls) 狙い通りmountが外れている。\n以上。\n","permalink":"https://nobwak.github.io/posts/2019-06-07-freebsd_jail%E3%81%A7%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%82%92%E3%82%AA%E3%83%BC%E3%83%88%E3%83%9E%E3%82%A6%E3%83%B3%E3%83%88%E3%81%97%E3%82%88%E3%81%86/","summary":"jailでwebサーバやSambaを動かすとき、ホストの特定ディレクトリを参照するのはよくあること。 たとえば以下のようなディレクトリ構成で、","title":"【FreeBSD】jailでホストのディレクトリをオートマウント"},{"content":"GNU sedを前提。\npkgではgsed。\nマッチさせた文字列を再利用したい たとえば、以下のようなファイル中の文字列を;\naaaabbb bbb こうしたい;\naaaa bbb bbb ここで、行末のbbbを探して\\nbbbで変換しようとするとこうなってしまう;\naaaabbb # ここと bbb # ここにマッチ ↓\naaaa bbb bbb # 余計な空行が増える そこで後方参照を使う。\nまず、通常通り表現を作る。\n前に任意の一文字があり、行末がbbbで終わるものを書き換える。\nつまり正規表現でいうところの.bbb\\nを\\nbbb\\nに。\ns/.bbb\\n/\\nbbb\\n/ これをそのまま使うとこうなってしまう;\naaa # aが一文字削れてしまう bbb bbb で、後方参照。\n使いまわしたい個所をかっこでくくり、1つめなら$1として参照する。\nつまり(.)bbb\\nを$1\\nbbb\\nに差し替える。\ns/(.)bbb\\n/$1\\nbbb\\n/ 無事にこうなる\naaaa bbb bbb ファイルの特定行に文字列を挿入する 以下のようなファイルの1行目と2行目の間に文字列を挿入したい場合;\naaa ccc ddd 以下のようにする。\n$ sed \u0026#39;2ibbb\u0026#39; sample.txt aaa bbb ccc ddd $ 2iとは2行目にInsert(挿入）するという意味\n注意すべきは、挿入したい文字列をコマンドのあとにすぐ続けること。\n2i bbbなどとしてはいけない。そのせいで見にくいけど。\n出力を別ファイルに。\n$ sed \u0026#39;2ibbb\u0026#39; sample.txt \u0026gt; modified.txt $ 複数ファイルの場合には以下のようにする。\n$ for i in *; do sed \u0026#39;2ibbb\u0026#34;\u0026#39; $i \u0026gt; /tmp/$i ; done $ 以上\n","permalink":"https://nobwak.github.io/posts/2019-06-04-%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE%E3%83%A1%E3%83%A2%E5%BE%8C%E6%96%B9%E5%8F%82%E7%85%A7%E8%A1%8C%E6%8C%BF%E5%85%A5/","summary":"GNU sedを前提。 pkgではgsed。 マッチさせた文字列を再利用したい たとえば、以下のようなファイル中の文字列を; aaaabbb bbb こうしたい; aaaa bbb bbb ここで","title":"正規表現メモ（マッチした文字の使いまわし、行挿入）"},{"content":"しょうがないので、sambaのgitに行き\nインストールしたバージョンのstableを見て、今回の場合は4.8.\nexamplesの下にあるsmb.conf.defaultからダウンロードした。\n以上\n","permalink":"https://nobwak.github.io/posts/2019-06-03-freebsd%E3%81%A7samba4%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%9F%E3%82%89smb.conf%E3%81%AEexample%E3%81%8C%E3%81%AA%E3%81%84/","summary":"しょうがないので、sambaのgitに行き インストールしたバージョンのstableを見て、今回の場合は4.8. examplesの下にあるsm","title":" [メモ]FreeBSDでSamba4をインストールしたらsmb.confのexampleがなかった。"},{"content":"markdownファイルにアスキーアートを書きたい場合、スペース4つでインデントすればよい。\n以下はslコマンドの出力である。\n ( ) (@@) ( ) (@) () @@ O @ O @ O (@@@) ( ) (@@@@) ( ) ==== ________ ___________ _D _| |_______/ \\__I_I_____===__|_________| |(_)--- | H\\________/ | | =|___ ___| _________________ / | | H | | | | ||_| |_|| _| \\_____A | | | H |__--------------------| [___] | =| | | ________|___H__/__|_____/[][]~\\_______| | -| | |/ | |-----------I_____I [][] [] D |=======|____|________________________|_ __/ =| o |=-~~\\ /~~\\ /~~\\ /~~\\ ____Y___________|__|__________________________|_ |/-=|___|= O=====O=====O=====O|_____/~\\___/ |_D__D__D_| |_D__D__D_| \\_/ \\__/ \\__/ \\__/ \\__/ \\_/ \\_/ \\_/ \\_/ \\_/  以上\n","permalink":"https://nobwak.github.io/posts/2019-06-02-markdown%E3%81%A7ascii_art%E3%82%92%E6%9B%B8%E3%81%8D%E3%81%9F%E3%81%84/","summary":"markdownファイルにアスキーアートを書きたい場合、スペース4つでインデントすればよい。 以下はslコマンドの出力である。 ( ) (@@) ( ) (@) () @@","title":"markdownでASCII Artを書きたい"},{"content":"zfsのスナップショットはzfs send, zfs recvで、pool間をまたいでコピーができる。 もちろん、同一ホストでもネットワーク越しでも同じ。\nまた、send, recvで送受するデータの実体はストリームなので、sendとrecvをパイプラインで繋ぐ。\nパイプラインで繋ぐということは、ストリームを操作、制御するコマンドをsend, recvの間に挟んでも構わないということになる。\nこういった特性を活かして、ネットワーク越しにzfsデータを送受するときには、間にバッファツールを挟む。\nバッファツールはその名の通りデータをバッファするツールで、今回のケースで言えば、受け側ホストか経路ネットワークの問題か、要するにデータを受け取れないときにはデータをためておき、受け取れるときには限界までデータを流し込む。\nこうすることでzfs send recvの転送速度向上を期待できる。\nなお、「ネットワーク越し」という場合、その「ネットワーク」がプライベート網かインターネットなどの公衆網のどちらなのか、で要件が大きく変わる。\nそれについては後述の「データの流れとコマンド実行方法」を参照のこと。\nバッファツールの定番mbuffer バッファツールには定番mbufferを使う。\n 公式 freshports(FreeBSDの方)  pkgでインストール(FreeBSDの方) 送受それぞれのホストでインストールしましょうね。\n$ sudo pkg install mbuffer Password: Updating FreeBSD repository catalogue... Fetching meta.txz: 100% 944 B 0.9kB/s 00:01 Fetching packagesite.txz: 100% 6 MiB 2.2MB/s 00:03 Processing entries: 100% FreeBSD repository update completed. 31778 packages processed. All repositories are up to date. The following 2 package(s) will be affected (of 0 checked):  New packages to be INSTALLED:  mbuffer: 20190127  mhash: 0.9.9.9_5  Number of packages to be installed: 2  177 KiB to be downloaded.  Proceed with this action? [y/N]: y [1/2] Fetching mbuffer-20190127.txz: 100% 47 KiB 48.1kB/s 00:01 [2/2] Fetching mhash-0.9.9.9_5.txz: 100% 130 KiB 132.8kB/s 00:01 Checking integrity... done (0 conflicting) [1/2] Installing mhash-0.9.9.9_5... [1/2] Extracting mhash-0.9.9.9_5: 100% [2/2] Installing mbuffer-20190127... [2/2] Extracting mbuffer-20190127: 100% Message from mhash-0.9.9.9_5:  ===\u0026gt; NOTICE:  The mhash port currently does not have a maintainer. As a result, it is more likely to have unresolved issues, not be up-to-date, or even be removed in the future. To volunteer to maintain this port, please create an issue at:  https://bugs.freebsd.org/bugzilla  More information about port maintainership is available at:  https://www.freebsd.org/doc/en/articles/contributing/ports-contributing.html#maintain-port FreeBSDの悲哀を感じるログです（メンテナがいない）。\nmbufferのオプション よく使うのだけ\n   Options 説明     -i \u0026lt;filename\u0026gt; 標準入力の代わりにファイルを指定。   -o \u0026lt;filename\u0026gt; 標準出力の代わりにファイルを指定。   -I \u0026lt;port\u0026gt; 標準入力の代わりにポートを指定。   -O \u0026lt;host:port\u0026gt; 標準出力の代わりにポートを指定。   -s \u0026lt;size\u0026gt; データを扱う単位。バイト指定だがB,K,M,Gなどの単位指定可   -m \u0026lt;size\u0026gt; バッファサイズ。バイト指定だがB,K,M,Gなどの単位指定可   -4 強制的にIPv4にする。IPv4の場合は必須。かつ前の方で指定すること   -6 強制的にIPv6にする   -v \u0026lt;level\u0026gt; verboseレベル。0～6で指定    -sには、zfsのrecordsizeを指定するとよい。デフォルトでは128k。zfs get recordsizeで分かる。\nバッファサイズはお好きに。メモリを使います。1Gくらいかな。\nデータの流れとコマンド実行方法 さて、バッファツールを使うとしてデータはどう流すべきか。 データの流れとコマンド実行方法について、要件の観点で示す。\nデータを流すのはどういう経路か ひとまずは以下が一番素直な構成である。\nzfs send --\u0026gt; mbuffer --(network)--\u0026gt; mbuffer --\u0026gt; zfs recv 受け側の方でmbufferとzfs recvを実行して待ち受け状態にしておき、そのあとに送り側でzfs sendとmbufferを実行する、というもの。\nしかし上記の構成は、プライベート網だけに限るべき。\nというのも、mbufferはデータストリームをそのままネットワークにリダイレクトしているだけなので、データは丸見えだからである。\nまた、この構成の場合、受け側は特定のポートで口を開けて待っているだけで、受け取るデータが適正なものであるかについては一切、関知しない。それどころか認証すらしない。\n来るもの拒まずのガバガバであるからして、非セキュアな網では使ってはいけない。\n経路が信用できないときは、sshを経由すること。認証もあるし、データも暗号化してくれるからね。\nこの場合のデータの流れは以下の通り。\nzfs send --\u0026gt; mbuffer --\u0026gt; ssh --\u0026gt; (network) --\u0026gt; sshd --\u0026gt; mbuffer --\u0026gt; zfs recv 受け側のmbuffer, zfs recvは送り側からのsshによるリモート実行。 ssh リモートサーバ コマンド ってやるやつな。\n定期的に実行するか また別の観点で言えば、zfs send, recvを定期的に実行するかどうかである。\n定期的にバックアップデータをリモートのサーバに送るということなら、経由する網がセキュアであってもsshを使ったほうがよい。\n理由は、コマンドの実行が片方だけのホストで完結するからである。sshを使う場合、例えば送り側でzfs sendし、sshによるリモートコマンド実行で受け側のzfs recvもやってしまう。\nつまりコマンド実行は送り側だけでよい。ということは、cronによる定期的な実行も楽にできる。\nしかしsshを使わない場合だと、受け側でmbuffer, zfs recvを実行したあとに送り側でzfs send, mbufferを実行する必要がある。これを自動でやるのは非常に面倒だ。\nしたがって、定期的にバックアップをリモートへ送信するなら、やはりsshを使ったほうがよい。\nじゃあsshでいいじゃないか そうなんだけど、sshの場合はちょっと設定が面倒である。\nこの先を読んでほしい。\nともあれ、この記事ではプライベート網、一回限りのデータ送信として、sshを使わない方法を採る。\nどのユーザで実行するか。 zfsの操作は基本、rootしかできないので、送受それぞれのサーバでrootで実行すること。\nしかし、定期的にバックアップしたデータを流すのなら、さすがにrootにやらすのは危険だ。\nくわえてパスワードなしで相手先ホストにログインできる設定をしておかないといけない。\nそういう場合には以下のようにして特定ユーザにzfs操作を許可しておき、そのユーザを使う。\n(ユーザhousekeeperに、vault/chamberへのcreate, recv, mount, sendを許可)\n# zfs allow -u housekeeper create,receive,mount,send vault/chamber もちろん鍵認証等、パスワードなしでコマンド実行できるようにしておく。\n実行 繰り返すが受け側-\u0026gt;送り側の順で実行すること。\n受け側 受け側で以下を実行。\n受け口の指定はポートだけでよい。\nなお。-4オプションを与えて強制的にIPv4にする。そうしないとmbufferはIPv6で延々と待ち続ける。また、-4は最初に指定しないと読んでくれない（末尾に付けたら無視される）\n怪しいなと思ったらsockstat -l4, sockstat -l6として確認すること。\n(えらい時間を無駄にした)\n# mbuffer -4 -s 128k -m 1G -I 8000 | zfs recv vaults/itunes 送り側 送り側で以下を実行。\nこちらではIPアドレス、ポートを指定する。送り側はボロサーバなのでメモリを確保できず500MBにした。\n# zfs send -R vault/itunes@monthly-2019-06-01_05.30.00--1y1d | mbuffer -O 192.168.1.7:8000 -s 128k -m 500m mbuffer: warning: allocating more than half of available memory in @ 28.0 MiB/s, out @ 28.0 MiB/s, 10.9 GiB total, buffer 100% full 送り側からデータが来ると受け側では以下の通り画面表示が変化する。\n# mbuffer -4 -s 128k -m 1G -I 8000 | zfs recv vaults/itunes in @ 28.4 MiB/s, out @ 28.4 MiB/s, 14.4 GiB total, buffer 100% fulll 【参考】ssh経由時のコマンド例 参考までに。ただし未検証。\n直接sshに流し込むので、mbufferに-O, -Iなどの出力先、入力元を指定するオプションは不要。\n# zfs send -R \u0026lt;スナップショット\u0026gt; | mbuffer -s 128k -m 1G | ssh \u0026lt;ユーザ\u0026gt;@\u0026lt;リモートホスト\u0026gt; \u0026#39;mbuffer -s 128k -m 1G | zfs receive \u0026lt;展開先ディレクトリ\u0026gt;\u0026#39; 脱線 USB3.0のUSB-HDDケース（GW3.5AX2-SU3/REV2.0）に書き込んだところ、112 MiB/sなんてスピードが出て興奮したのだが、ものの数分もするとOSを巻き込んで固まるという事象が発生。\nやむなくUSB2.0の口に繋いでみると今度は問題なく動作し安心するがスピードは28 MiB/s。これはダメかもわからんね。\n結果 受け側\n$ mbuffer -4 -s 128k -m 1G -I 8000 | zfs recv vaults/itunes in @ 0.0 kiB/s, out @ 0.0 kiB/s, 1121 GiB total, buffer 0% fulll summary: 1121 GiByte in 11h 09min 48.8sec - average of 28.6 MiB/s 送り側\n$ zfs send -R vault/itunes@monthly-2019-06-01_05.30.00--1y1d | mbuffer -O 192.168.1.7:8000 -s 128k -m 500m mbuffer: warning: allocating more than half of available memory in @ 0.0 kiB/s, out @ 28.6 MiB/s, 1121 GiB total, buffer 1% fulll summary: 1121 GiByte in 11h 08min 49.5sec - average of 28.6 MiB/s ","permalink":"https://nobwak.github.io/posts/2019-06-01-%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E8%B6%8A%E3%81%97%E3%81%AEzfs_send_recv/","summary":"zfsのスナップショットはzfs send, zfs recvで、pool間をまたいでコピーができる。 もちろん、同一ホストでもネットワーク越しでも同じ。 また、","title":"ネットワーク越しのzfs send recvをmbufferでスピードアップしよう"},{"content":"GitHub pagesに記事を投稿するためにJekyllをセットアップした。 その記録。\nFreeBSD上で実施しているが、記事中、FreeBSD依存なところはほとんどない。\nJekyllとは 公式サイトにあるように、Jekyllはプレーンテキストをウェブサイトやブログに変換してくれるツール。Rubyで書かれている。\n突然だが。リッチだけど巨大で、しかも動かすにはXAMPPが必要なブログはもう疲れた。\nJekyllはマークダウン形式で記事を作っておけば、コマンド一発でhtmlに変換し、サイトのディレクトリ構造まで作ってくれる。 あとは出来上がったものをwebサーバに丸々アップロードすればよい。\ngithubにアップロードすれば＜ユーザ名＞.github.ioとしてブログを運営できる。相手はgithubだから「アップロード」というよりもgit pushでできる。プログラムをレポジトリにpushするのと同じ感覚でブログができるのである。\n今回はgithub pagesで使う前提のJekyllのセットアップまでを扱うが、そのまえにJekyllの仕組みを確認する。\nJekyllによるブログ作成の流れ Jekyllは前項で書いた通り、マークダウン形式のテキストファイルをhtmlに変換し、ディレクトリ構成を作る。 具体的には;\n Jekyllの作業ディレクトリを作る そこにマークダウン形式のテキストファイルを入れていく。 変換コマンドを実行 変換後ファイルの入ったディレクトリが作られる ディレクトリをそのままアップロードしてもよいが; 確認コマンドを実行すると、ローカルホストでウェブサーバが立ち上がり見た目を確認できる。  というものである。 ではさっそく。\njekyll, bundlerのインストール jekyllはRubyで動く。また、記事中にもあるとおりjekyllの構成を変えるのでbundlerも必要。\nインストールはpkgでどうぞ。 Rubyやらなにやら、いっぱい友達を連れてくるので、コンテナ等、隔離した環境で作るのオススメ。私はJail上に作った。\n記事を置く作業フォルダを作る。 jekyll new \u0026lt;path\u0026gt; でJekyllのフォルダを作る。\n$ jekyll new article/ Running bundle install in /usr/home/bot/article...  Bundler: Don\u0026#39;t run Bundler as root. Bundler can ask for sudo if it is needed, and  Bundler: installing your bundle as root will break this application for all non-root  Bundler: users on this machine.  Bundler: The dependency tzinfo-data (\u0026gt;= 0) will be unused by any of the platforms Bundler is installing for. Bundler is installing for ruby but the dependency is only for x86-mingw32, x86-mswin32, x64-mingw32, java. To add those platforms to the bundle, run `bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java`.  Bundler: Fetching gem metadata from https://rubygems.org/...........  Bundler: Fetching gem metadata from https://rubygems.org/.  Bundler: Resolving dependencies...  Bundler: Using public_suffix 3.0.3  Bundler: Using addressable 2.6.0  Bundler: Using bundler 1.17.1  Bundler: Using colorator 1.1.0  Bundler: Using concurrent-ruby 1.1.5  Bundler: Using eventmachine 1.2.7  Bundler: Using http_parser.rb 0.6.0  Bundler: Using em-websocket 0.5.1  Bundler: Fetching ffi 1.11.1  Bundler: Installing ffi 1.11.1 with native extensions  Bundler: Using forwardable-extended 2.6.0  Bundler: Using i18n 1.6.0  Bundler: Using rb-fsevent 0.10.3  Bundler: Using rb-inotify 0.10.0  Bundler: Using sass-listen 4.0.0  Bundler: Using sass 3.7.4  Bundler: Using jekyll-sass-converter 1.5.2  Bundler: Using ruby_dep 1.5.0  Bundler: Using listen 3.1.5  Bundler: Using jekyll-watch 2.2.1  Bundler: Using kramdown 1.17.0  Bundler: Using liquid 4.0.3  Bundler: Using mercenary 0.3.6  Bundler: Using pathutil 0.16.2  Bundler: Using rouge 3.3.0  Bundler: Using safe_yaml 1.0.5  Bundler: Using jekyll 3.8.5  Bundler: Using jekyll-feed 0.12.1  Bundler: Using jekyll-seo-tag 2.6.1  Bundler: Using minima 2.5.0  Bundler: Bundle complete! 4 Gemfile dependencies, 29 gems now installed.  Bundler: Use `bundle info [gemname]` to see where a bundled gem is installed. New jekyll site installed in /usr/home/bot/article. できあがったディレクトリ構成は以下の通り。\n. ├── _config.yml ├── _posts ├── 404.html ├── about.md ├── Gemfile ├── Gemfile.lock └── index.md _config.ymlは設定ファイル。記事を入れていくのは_posts。\n_postsの中を眺めれば2019-05-22-welcome-to-jekyll.markdownというような名前でサンプルファイルが一つ入っているはずである。 記事を作る場合には、このサンプルのようなファイル名の形式でファイルを置く。 ファイルの内容についてはまた後で。\n初期設定 _config.ymlを更新 最後の4行以外を適当に。基本情報を決める。\ntitle: \u0026#34;nobwak\u0026#39;s Lair\u0026#34; email: your-email@example.com description: \u0026gt;- # this means to ignore newlines until \u0026#34;baseurl:\u0026#34;  nobwakの七転八倒log baseurl: \u0026#34;\u0026#34; # the subpath of your site, e.g. /blog url: \u0026#34;https://nobwak.github.io\u0026#34; # the base hostname \u0026amp; protocol for your site, e.g. http://example.com twitter_username: nobwak github_username: nobwak  markdown: kramdown theme: minima plugins:  - jekyll-feed Gemfileを更新し、bundle update 「GitHub pageを使いたいなら」との指示通りに更新。\ngem jekyllの行をコメントアウト、github-pagesの行をアンコメント。\n# This will help ensure the proper Jekyll version is running. # Happy Jekylling! # gem \u0026#34;jekyll\u0026#34;, \u0026#34;~\u0026gt; 3.8.5\u0026#34; (この行をコメントアウト) \u0026lt;略\u0026gt; # If you want to use GitHub Pages, remove the \u0026#34;gem \u0026#34;jekyll\u0026#34;\u0026#34; above and # uncomment the line below. To upgrade, run `bundle update github-pages`. gem \u0026#34;github-pages\u0026#34;, group: :jekyll_plugins # この行を生かす 更新したらこちらも指示通りにbundle update\n$ bundle update The dependency tzinfo-data (\u0026gt;= 0) will be unused by any of the platforms Bundler is installing for. Bundler is installing for ruby but the dependency is only for x86-mingw32, x86-mswin32, x64-mingw32, java. To add those platforms to the bundle, run `bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java`. Fetching gem metadata from https://rubygems.org/........... Fetching gem metadata from https://rubygems.org/. Resolving dependencies................................ Using concurrent-ruby 1.1.5 Using i18n 0.9.5 (was 1.6.0) (略) Using github-pages 198 Bundle updated! 準備完了。\nビルド（変換）のテスト ではビルド。 bundle exec jekyll buildとする。これでhtmlに変換する。\n注意: 日本語を扱うなら文字コードはja_JP-UTF8にしておくこと。\n$ bundle exec jekyll build Configuration file: /usr/home/bot/files/temp/tryout/_config.yml  Source: /usr/home/bot/files/temp/tryout  Destination: /usr/home/bot/files/temp/tryout/_site  Incremental build: disabled. Enable with --incremental  Generating...  Jekyll Feed: Generating feed for posts  done in 1.344 seconds.  Auto-regeneration: disabled. Use --watch to enable. メッセージの通り新しく_siteというディレクトリができる。これが変換後の公開用ディレクトリ。\n. ├── _config.yml ├── _posts ├── _site ├── 404.html ├── about.md ├── Gemfile ├── Gemfile.lock └── index.md _siteの中身はこうなっている。\n. ├── 404.html ├── about │ └── index.html ├── assets │ ├── main.css │ └── minima-social-icons.svg ├── feed.xml ├── index.html └── jekyll  └── update  └── 2019  └── 05  └── 22  └── welcome-to-jekyll.html _postsの中にあったサンプルファイルがhtmlに変換され、年・月・日のディレクトリに置かれているのが分かる。\nさらにindex.htmlの中身を見ると、以下のようにサンプルファイルへのリンクも書かれている。\n \u0026lt;ul class=\u0026#34;post-list\u0026#34;\u0026gt;\u0026lt;li\u0026gt;May 22, 2019  \u0026lt;h3\u0026gt;  \u0026lt;a class=\u0026#34;post-link\u0026#34; href=\u0026#34;/jekyll/update/2019/05/22/welcome-to-jekyll.html\u0026#34;\u0026gt;  Welcome to Jekyll!  \u0026lt;/a\u0026gt;  \u0026lt;/h3\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt; つまりJekyllは、_postsの中にあるファイルをhtmlに変換し、インデックスページとリンク構造も作ったうえで_site下に配置してくれる、ということ。 GitHub Pagesにアップロードするときには、ここの_siteから下をgit pushすれば良い。\nただ、git pushするといきなり公開されるので、その前に実際の見た目を確認したいということなら、そのための仕組みも用意されている。 Jekyllのトップディレクトリでjekyll serveとすればよい。\n$ bundle exec jekyll serve Configuration file: /usr/home/bot/files/temp/tryout/_config.yml  Source: /usr/home/bot/files/temp/tryout  Destination: /usr/home/bot/files/temp/tryout/_site  Incremental build: disabled. Enable with --incremental  Generating...  Jekyll Feed: Generating feed for posts  done in 1.435 seconds.  Please add the following to your Gemfile to avoid polling for changes:  require \u0026#39;rbconfig\u0026#39;  if RbConfig::CONFIG[\u0026#39;target_os\u0026#39;] =~ /(?i-mx:bsd|dragonfly)/  gem \u0026#39;rb-kqueue\u0026#39;, \u0026#39;\u0026gt;= 0.2\u0026#39;  end  Auto-regeneration: enabled for \u0026#39;/usr/home/bot/files/temp/tryout\u0026#39;  Server address: http://127.0.0.1:4000/  Server running... press ctrl-c to stop. この状態でローカルホストの4000に繋げば、見た目を確認できる。 画像あり　36 画像あり　37\nこれでJekyllのセットアップはおしまい。\n","permalink":"https://nobwak.github.io/posts/2019-05-22-jekyll%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97/","summary":"GitHub pagesに記事を投稿するためにJekyllをセットアップした。 その記録。 FreeBSD上で実施しているが、記事中、FreeBSD依存なと","title":"Jekyllのセットアップ"},{"content":"レンタルサーバにさよならを ブログをあるレンタルサーバに置いていた。 値段もそこそこで、Wordpressも一発で構築できるので重宝していたのだが、SSL対応をすると素の時とは違うアドレスでアクセスしないとダメ、という不条理な仕様のせいで引っ越しをする。\n引っ越しはgithub pagesに決めているのだが、その経緯は別の項に譲り、本稿ではWordpressからJekyllに移行\u0026ndash;正しくはJekyllへインポートできるデータの作成について備忘のため記す。\nプラグインのWordPress to Jekyll Exporterを使う これはもう定番で、WordpressのプラグインであるWordPress to Jekyll Exporterを使う。あとはJekyllで読めばよい。\nそれだけで終了といえば終了なのだが、いろいろと苦労があったのでこの記事を書いている。\nJekyll Exporterとは このプラグインを使うと、Wordpressのデータを根こそぎzipファイルにまとめてくれる。\nWordpress自体にもエクスポート機能はあるが、こちらは記事をマークダウン形式に変換してくれるし、画像もまとめてくれるのが大きな違い。\nインストールするとダッシュボードの「ツール」に「Export to Jekyll」というメニューが生まれるので、これをクリックするだけ、なのだが。\nいくつか注意点がある。みんなあまりこの辺のことを書かないんだよな。\nExport to Jekyllするときの注意   データが多いと失敗する\nwordpress（あるいはそれを動かしているphp）では、プロセスの実行にタイムアウト時間を設けている。データがあまりに多いと作業がこのタイムアウト時間を超えてしまい、強制終了されてしまう。エクスポートが失敗し、エラーメッセージが\u0026quot;Maximum execution time of 30 seconds exceeded\u0026quot;であるなら、まさにこれ。（もちろん、数字は設定によって異なる）\n対処方法としては、wordpressのwp-config.phpで以下の一行を加える。\nset_time_limit(300); 値は秒なので心ゆくまで延ばせ。\nあるいは以下にあるように、.htaccessやphp.iniで対応する手もある。 https://codex.wordpress.org/Common_WordPress_Errors#Maximum_execution_time_exceeded\n  プラグインは無効化を\nプラグインを使って記事内に「いいね」ボタン等を自動挿入している場合。 そのままにしていると、Jekyllに書き出したときに以下のようなタグが大量に含まれる。\n\u0026lt;div class=\u0026#34;wsbl_facebook_like\u0026#34;\u0026gt; 私の場合、このほかにも記事内の目次を自動生成するプラグインを使っている。 エクスポートするのは記事内容なので、こういった付加情報は無いほうがいいだろう。\nというわけで、エクスポートにあたっては、Export to Jekyll以外のプラグインは無効化する。\n  permalinkは「基本」がいいでしょう（未検証）\nSEO目的等でpermalinkに投稿名を含める設定にしていると、Jekyllがうまく処理できない。\n日本語permalinkのままJekyllでhtml化すると、なぜかhtmlリンクが働かない記事がいくつか発生した。いろいろ調べたものの原因が分からず、後の工程でpermalinkを無視して進めた。「基本」、つまり記事のアドレスが「?p=記事番号」になる設定にすれば、あるいは道が見つかるかもしれないが\u0026hellip;未検証。もうやりとうない。\n  作成したzipファイルは7-zip等で伸張を\nExport to Jekyllで作成したzipファイルは、なぜかWindows10で伸張できない。7-zip等のアーカイバを使うこと。FreeBSDのunzipでも伸張できた。\n  Export to Jekyllで得たデータの整形 前述のような注意点を踏まえても、出力したデータにはさらに手を加える必要がある。\n画像リンク修正 Export to Jekyllで出力したzipを展開するとおおよそ以下のようなディレクトリ構成になる。\n. ├── _config.yml ├── _drafts ├── _posts └── wp-content  └── uploads  ├── 2017  ├── 2018  └── 2019 Wordpressでせっせと書きためた記事は_postsの直下に置かれる（なお拡張子はすべて\u0026quot;.md\u0026quot;（markdown）になっている）\nwp-content/uploadsの下には、年に加え、さらに月ごとにディレクトリがあって、そこに画像が格納されている。\nWordpressの設定によるかもしれないが、画像リンクは絶対アドレスで書かれているので、そのまま使うと画像だけは引っ越し元から読み込むことになってしまう。これはマズいのでリンクを書き換える必要がある。\n手っ取り早いのは相対パスにしてしまうことだ。\nJekyllで処理をすると最終的なディレクトリ構成は以下のようになる。\n_site ├── 2019 │ ├── 01 (記事がある) │ └── 05 (記事がある) ├── about ├── assets │ ├── main.css │ └── minima-social-icons.svg ├── feed.xml └── wp-content  └── uploads  └── 2019  ├── 01 (画像がある)  └── 05 (画像がある) 記事はたとえば2019/05の下に置かれ、画像はwp-content/uploadsの下に置かれるわけだから、以下の通りリンクを書き換えればよい。\n 変更前: http://hogehoge.hoge/blogs/wp-content/uploads/2019/05/hoge.jpg  変更後: ../../wp-content/uploads/2019/05/hoge.jpg ということで、_postsディレクトリに降りてsedすればよい。\n$ sed -i.bak -e \u0026#39;s#http\\://hogehoge.hoge/blogs/#\\.\\./\\.\\./#g\u0026#39; *.md $ そのままだとスラッシュ、コロン、ドットすべてをエスケープしないといけないので、デリミタを#にして、せめてスラッシュくらいは使えるようにしている\nfront matterにあるpermalinkの削除 Jekyllで記事を書く時には、冒頭にfront matterというエリアを設け、そこに設定を書き込むようになっている。 例えば以下のようなものだ。\n--- id: 3201 title: FreeBSD 12のbhyveにWindows10をインストールする：その2（vm-bhyve使用） date: 2019-05-12T20:30:48+09:00 author: nobwak layout: post guid: ../../?p=3201 permalink: /?p=3201 image: /wp-content/uploads/2019/05/18-620x483.jpg categories:  - bhyve --- ここに「permalink」という行がある。 これはJekyllがhtmlのリンク構成を作るときに、どうpermalinkを設定するかを制御する。 参考:https://jekyllrb.com/docs/front-matter/\nデフォルトだと年/月/日/タイトル.htmlだが、front matterにこう書かれてしまうとpermalinkが滅茶苦茶になる。 （記事名で作ればよいが先述の通り日本語記事だとどうもうまくいかない）\nそこでfront matterから一律でpermalinkを削る。\nとんでもない荒療治だが、いい手が思い浮かばないのでこうする。 ただ、こうするとJekyllはデフォルト設定に従って、構成を/カテゴリ/年/月/日/タイトル.htmlとする。もしこれが気に入らないのなら、Jekyllの設定ファイルである_config.ymlで指定を行う。これは後述。\nさて削除。前項と同様、_postsでsed。permalinkは8行目だから;\n$ sed -i.bak2 -e \u0026#39;8d\u0026#39; *.md $ 無事に削除された。\n--- id: 3201 title: FreeBSD 12のbhyveにWindows10をインストールする：その2（vm-bhyve使用） date: 2019-05-12T20:30:48+09:00 author: nobwak layout: post guid: ../../?p=3201 image: /wp-content/uploads/2019/05/18-620x483.jpg categories:  - bhyve --- Jekyllのディレクトリ構成を変えたい Jekyllの設定ファイルである_config.ymlに以下の行を追加すればよいだけ。\npermalink: /:year/:month/:day-:slug:output_ext 書式はJekyll公式サイトの説明を見ればよろしい。\n以上。\n","permalink":"https://nobwak.github.io/posts/2019-05-20-wordpress%E3%81%8B%E3%82%89jekyll%E3%81%B8%E3%81%AE%E7%A7%BB%E8%A1%8C%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E4%BD%9C%E6%88%90/","summary":"レンタルサーバにさよならを ブログをあるレンタルサーバに置いていた。 値段もそこそこで、Wordpressも一発で構築できるので重宝していたのだ","title":"WordpressからJekyllへ移行するためのデータ作成"},{"content":"Windows再インストール時にすることをまとめる。 まず各種ソフトウェアをインストールしたのち、Windowsの設定を行う。\nインストールするソフト 方針  レジストリを汚したくないので、なるべくportable版を選び、それらは特定のフォルダ、例えばc:\\localなどに入れる。設定については後述  システム、ユーティリティ  ランチャー  インストールしない。後述のWindows設定を参照。   IME, FEP  Google IME https://www.google.co.jp/ime/   等幅フォント  VLGothic https://ja.osdn.net/projects/vlgothic/ コードを書くには必須。 結局VLGothicが見やすいような   クリップボード管理  clibor https://chigusa-web.com/clibor/feature/ クリップボード履歴等を管理。   スクリーンショット  screenshoter https://www.inspire-soft.net/software/screenshoter PrintScreenを押すと指定のフォルダに画像として保存してくれる   PC内検索  everything https://www.voidtools.com/ 速いうえにインクリメンタルサーチしてくれるから好き   ファイル名一括変更  LiName http://snca.net/ 窓の杜の記事 https://forest.watch.impress.co.jp/library/software/liname/ 複数ファイルのファイル名を、好みのエディタ上で操作できる。超便利。   ハッシュ確認  wMD5sum http://kkkon.sakura.ne.jp/software/wMD5sum/index_x64.shtml このくらいシンプルなほうが使いやすい   差分確認  WinMerge http://winmerge.org/?lang=en   アーカイバ  7-zipかなあ。満足できるアーカイバがまだない。 Peazip https://peazip.github.io/peazip-64bit.html   仮想化  VirtualBox  Oracleなのでいつ何があるかわからないよね。     バージョン管理  git https://git-scm.com/download/win    UNIXツール  cmdexを入れれば大抵のUNIXコマンドがついてくるので便利。インストールも不要。Full版を入れる必要はない。  cmdex https://cmder.net/    ネットワーク系  ファイル転送  WinSCP  https://winscp.net/eng/downloads.php もちろん、脆弱性のあるSCPは使わずにSFTPを使う     ターミナル  rloginかPutty  putty https://www.putty.org/ rlogin https://kmiya-culti.github.io/RLogin/     同期関連、つまりrsync相当  realsync  http://www.takenet.or.jp/~ryuuji/realsync/     VNC  TigerVNC  https://github.com/TigerVNC/tigervnc/releases Viewerだけならvncviewer64-X.X.X.exeでよい FreeBSDのbhyveで使うならこれ。   UltraVNC  http://www.uvnc.com/home.html      ブラウザと拡張機能  メモリ食いのChromeよりはFirefoxかとも思うがシェア的  Firefox https://www.mozilla.org/ja/firefox/new/ Chrome https://www.google.com/intl/ja_ALL/chrome/ 頻繁に更新があるのでPortable版にはせずインストール。   拡張機能  パスワードマネジャー  Bitwarden  chrome https://chrome.google.com/webstore/detail/bitwarden-free-password-m/nngceckbapebfimnlniiiahkandclblb Firefox https://addons.mozilla.org/firefox/addon/bitwarden-password-manager/   Lastpass  Firefox https://addons.mozilla.org/ja/firefox/addon/lastpass-password-manager/ Chrome https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=ja     広告ブロック  uBlockが好き  Firefox https://addons.mozilla.org/ja/firefox/addon/ublock-origin/ Chrome https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm?hl=ja     アマゾン価格トラッカー  Keepa https://keepa.com/      エディタ  テキストエディタ  EmEditor https://jp.emeditor.com/text-editor-features/history/emeditor-free/ EmEditorが好き。Free版を使わせてもらってます。ポータブル版で。 Free版にするには「[ツール] メニューの [クイック起動] (Ctrl+Q) を選択し、[ダウングレード] と入力して Enter を 2 回押してください。」 どうもデフォルトだと文字コードがShift-JISになってることに注意 フォントは等幅フォントに変更。   コードエディタ  Visual Studio Code　https://code.visualstudio.com/download  マークダウンエディタとしても使用  markdownlintを入れておく。 マークダウンエディタとしてはTyporaも気になるがportable版がないのでなあ。。   ポータブル版はzip版をダウンロードすればよい。File-\u0026gt;Preference-\u0026gt;Extensionsと進むか、Ctrl+Shift+X。Japaneseで検索してJapanese Language Pack for Visual Studio Codeをインストール 「Ctrl+Shift+P を押してコマンド パレットを表示させ、\u0026ldquo;config\u0026rdquo; と入力し、利用できるコマンドのリストをフィルター処理してから Configure Language コマンドを選択します。」とあるが、configで検索したあとConfigure Display Languageを選択し、jaを選ぶ      フォトレタッチ  JTrim  JTrimが軽くてシンプルで好き https://forest.watch.impress.co.jp/library/software/jtrim/ https://www.vector.co.jp/soft/win95/art/se108932.html   Paint . Net  レイヤー操作が必要なときはpaint dot net https://www.getpaint.net/ 一回はインストールが必要だが、設定を変えればポータブルバージョンに変更できる。  https://blog.getpaint.net/2017/07/21/portable-mode-in-paint-net-4-0-17/ PaintDotNet.exe.configの\u0026lt;appSettings\u0026gt;に以下の行を加える。あとはフォルダごとUSBメモリにコピーするなり、他のPCにコピーするなりしてもOK      動画編集  動画切り出し  LosslessCut https://github.com/mifi/lossless-cut    その他  年賀状ソフト  aprint（ポータブル版あり） http://hp.vector.co.jp/authors/VA018451/aprint.htm    Windows設定   タスクバー\n People関連をすべてOFF    スタートメニュー\n 不要なものをOFFまたは右クリックでアンインストール    設定で「色」を検索\n 既定のアプリモードを黒にするとダークモード。    設定で「マルチタスク」を検索\n Windowsキー＋矢印キーで画面スナップするための設定 「ウインドウを画面の横または隅にドラッグしたときに自動的に整列する」は オンのままにしておくこと 「ウィンドウをスナップしたときに横に配置できるものを表示する」をオフ  これをしないとスナップしたときに「隣にどのウインドウを表示しますか」と毎回、聞かれることになる。   タイムライン  オフ      エクスプローラ\n 拡張子の表示  エクスプローラー画面でAlt→V→HF   詳細表示、一覧表示はCtrl+Shift+5, Ctrl+Shift+6で切り替え    右クリックの「送る」\n Win+Rで\u0026quot;shell:sendto\u0026quot;とタイプ 開いたフォルダに、「右クリック→送る」で渡したいアプリのショートカットを登録する。EmEditorとか。    Caps LockをCtrlキーに\n テキストファイルに以下を書き込み、拡張子.regで保存。ダブルクリックで実行、再起動でOK http://capm-network.com/?tag=Windows7-CapsLock%E3%82%92Ctrl%E3%81%AB%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B    =================== Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout] \u0026#34;Scancode Map\u0026#34;=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00 ===================  ランチャー（相当）の設定  pathを通すために環境変数を編集する   c:\\binを作り（どこでもよい）、環境変数Pathに追加する。 設定→「環境変数の編集」で検索 Pathを選択、編集→新規、c:\\binを追加   ここまでしたら、binフォルダにたとえばFirefoxのショートカットを置き、\u0026ldquo;firefox\u0026quot;とリネームする。 この状態で、Win+R→firefoxとタイプ、Enterキーを押せばfirefoxを起動できる。 ショートカットは実行ファイルだけでなく、フォルダのショートカットでも可。 ダウンロードフォルダのショートカットをコピーし、\u0026ldquo;dl\u0026quot;とリネームしておくとか。    最終更新: 2022-05-01\n","permalink":"https://nobwak.github.io/posts/2019-05-19-%E5%82%99%E5%BF%98windows%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97/","summary":"Windows再インストール時にすることをまとめる。 まず各種ソフトウェアをインストールしたのち、Windowsの設定を行う。 インストールする","title":"【備忘】Windowsセットアップ"},{"content":"前回までで仮想マシンをインストールする準備が整った。\nさっそくWindows10のインストールに取り掛かるが、準備すべきものがある。\n Windows10インストールイメージ TigerVNC（Viewer）  一つ目は言わずもがな。\nhttps://www.microsoft.com/ja-jp/software-download/windows10\n二つ目は、GUI操作のため。\nWindowsのような、GUI操作が必須のOSをbhyve上の仮想マシンとして動かす場合には、VNCでその画面を見ることになる。\nただ、bhyveのVNCは癖があるようで、VNC viewerによっては途中で切れてしまうんである。\nWindowsでもProであればリモートデスクトップという手もあるが、それにしたってインストールの時にはVNCで繋ぐほかない。\nTigerVNCなら問題なく接続できるのでこれを準備しておくこと。\nhttps://tigervnc.org/\nhttps://github.com/TigerVNC/tigervnc/releases\n2019/5/12時点では1.9.0が最新だからしてバイナリはこちら。Viewerでよい。\nhttps://bintray.com/tigervnc/stable/tigervnc/1.9.0\n初回には少し混乱したので記しておくが、VNCで接続する先のIPアドレスは、bhyveホストのIPアドレスである。\n仮想マシンが自立して起動すると、そっちはそっちで独自のIPアドレスを取得する。\nVNCはbhyveが用意する仮想マシンへのGUIアクセスなのでbhyveホストに接続する必要があるわけ。\n一方で、仮想マシンそのものでリモートデスクトップやら、VNC Serverを用意すれば、そのときは当然、仮想マシンのIPアドレスを接続先として指定することになる。\nではISOの準備から。\n仮想マシンインストール準備（インストーラ = ISO） インストーラの準備。\nISOイメージを登録する。VirtualBoxでもそういう操作あるよね。\nISOイメージがあるなら$vm_dir/.isoに移す\nsudo vmとして確認する\nsudo vm とすれば、ダウンロードしてそこに置いてくれる。ちょっと驚き。\n$ sudo mv ./files/Windows10_18090.iso /vm/.iso/ $ sudo vm iso DATASTORE FILENAME default Windows10_18090.iso $ sudo vm iso https://download.freebsd.org/ftp/releases/ISO-IMAGES/11.2/FreeBSD-11.2-RELEASE-amd64-bootonly.iso /vm/.iso/FreeBSD-11.2-RELEASE-amd64-bootonly.iso 308 MB 2228 kBps 02m22s $ sudo vm iso DATASTORE FILENAME default FreeBSD-11.2-RELEASE-amd64-bootonly.iso default Windows10_18090.iso 仮想マシンインストール準備（仮想マシン設定） 前提。\n仮想マシンは$vm_dir/（仮想マシン名）/に置かれる。\n設定ファイルは$vm_dir/（仮想マシン名）/（仮想マシン名）.confである。\nなお仮想マシンのログは$vm_dir/（仮想マシン名）/vm-bhyve.log。\n仮想マシン置き場が/vmで、仮想マシン名がwin10だと、\n/vm/win10/win10.confなどとなる。\nで、vm createでまず仮想マシンの枠を作る。\nこのとき、-tでテンプレートを指定し、-sでディスクイメージのサイズを指定できる。\nデフォルトだと20Gなので余程のことがない限り指定は必須。\n作った仮想マシンはvm listで確認。\n$ sudo vm create -t windows -s 64G win10 $ sudo vm list NAME DATASTORE LOADER CPU MEMORY VNC AUTOSTART STATE win10home default uefi 2 2G - No Stopped $ ls -lah /vm/win10/ total 13366199 drwxr-xr-x 2 root wheel 6B May 11 14:10 . drwxr-xr-x 6 root wheel 6B May 4 20:34 .. -rw------- 1 root wheel 64G May 11 14:10 disk0.img -rw-r--r-- 1 root wheel 299B May 5 21:35 win10.conf vm configureで設定（win10.conf）を変更。\nvi操作で書き換える。\n以下のように。\nuefi=\u0026#34;yes\u0026#34; graphics=\u0026#34;yes\u0026#34; graphics_wait=\u0026#34;yes\u0026#34; cpu=1 memory=4G network0_type=\u0026#34;e1000\u0026#34; network0_switch=\u0026#34;public\u0026#34; disk0_type=\u0026#34;ahci-hd\u0026#34; disk0_name=\u0026#34;disk0.img\u0026#34; uuid=\u0026#34;ff31650b-6ef0-11f9-963c-6cfffff61323\u0026#34; utctime=\u0026#34;no\u0026#34; xhci_mouse=\u0026#34;yes\u0026#34; WindowsなのでBIOSはuefi。\ngraphicsをYesにするとVNCで接続できる。\nデフォルトではbhyveホストのIPアドレス:5900で待ち受け。\n変更したければそれぞれgraphics_listen、graphics_portで指定する。\nまた、解像度は800x600。graphics_res=\u0026ldquo;WxH\u0026quot;で変更できる。\ngraphics_waitを設定しておくと、VNC接続するまでゲストの起動を待ってくれる。\n設定しなくても、仮想マシンをインストールモードで立ち上げたときには待ってくれるが、それは初回だけ。\nWindowsのようにインストール時に複数回再起動するものはwaitしてもらったほうがいいだろうと。\nWindows10homeの場合はcpuを1。（後述）\nnetwork0_typeにはe1000を指定。\nインストールが無事に済んだらvirtioに変更するが、まずはe1000で。\nnetwork0_switchで本仮想マシンを繋ぐ仮想スイッチを指定する。\nvm-bhyveのデフォルト、publicにしておく。\nなお、起動した暁には、仮想マシンにはtapX（Xは数字）インタフェースが割り当てられ、publicに接続される。\ndisk0_type=\u0026quot;ahci-hd\u0026quot;としていて、本来ならディスクイメージをzfsのボリュームにしてvirtio-blkと指定したいが、以下の通りahci-hdしかダメ。\nhttps://github.com/churchers/vm-bhyve/wiki/Supported-Guest-Examples\n the disk emulation needs to be ahci-hd.\n vm-bhyveは標準で仮想マシンの時刻をUTCに設定するので、utctime=\u0026quot;no\u0026quot;とする。\nxhci_mouse=\u0026quot;yes\u0026quot;にしておかないと、後々VNCで接続したときにまともにマウスが動かない。\n仮想マシンインストール さあインストール。vmにinstallサブコマンドを与えて起動。\n状態はvm listで確認。\nbhyveホスト側では$vm_dirにあるvm-bhyve.logをtailして状況を確認しつつ進めるがよいだろう。\n$ sudo vm install win10home Windows10_18090.iso Starting win10home  * found guest in /vm/win10home  * booting... $ sudo vm list NAME DATASTORE LOADER CPU MEMORY VNC AUTOSTART STATE win10home default uefi 1 2G 0.0.0.0:5900 No Locked (camazotz) lockedの通り、VNC待ち。\nTigerVNCで接続し、インストールを進める。\n繰り返すがこのときの接続先はbhyveホスト。\n$ sudo tail -f ./vm-bhyve.log Password: May 12 17:44:20: dynamically allocated port 5900 for vnc connections May 12 17:44:20: booting May 12 17:44:20: [bhyve options: -c 1 -m 4G -Hwl bootrom,/usr/local/share/uefi-firmware/BHYVE_UEFI.fd -U 9e31650b-6e60-11e9-963c-6c4b90a61323] May 12 17:44:20: [bhyve devices: -s 0,hostbridge -s 31,lpc -s 4:0,ahci-hd,/vm/win10/disk0.img -s 5:0,virtio-net,tap0,mac=58:9c:fc:02:b6:f3 -s 6:0,fbuf,tcp=0.0.0.0:5900 -s 7:0,xhci,tablet] May 12 17:44:20: [bhyve console: -l com1,/dev/nmdm-win10.1A] May 12 17:44:20: [bhyve iso device: -s 3:0,ahci-cd,/vm/.config/null.iso] May 12 17:44:20: starting bhyve (run 1) インストール後（ネットワークドライバの変更他） 無事にインストールが済んだら、ネットワークドライバを変更する。\nネットワークドライバの変更なのでVNCから接続しておく。\nドライバの配布先には、仮想マシンから直接、行ってしまってよい。\n場所はここだが、「virtio-win fedora」あたりで検索すれば辿り着けるはず。\nhttps://fedorapeople.org/groups/virt/virtio-win/direct-downloads/latest-virtio/\n5/12時点では0.1.164が最新。\nhttps://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.164-2/virtio-win-0.1.164.iso\nDにマウントしたら、以下のパスがドライバの場所。パスの通りWindows10, 64bitね。\nこちらに強制的に変更する。ネットワークが切断されるがお構いなしで。\nD:\\NetKVM\\w10\\amd64\n実行イメージ02 実行イメージ03\nシャットダウンしたら、bhyve側の設定ファイルでネットワークタイプをe1000からvirtio-netに変更する。\ngraphics_waitも忘れずに削除。\nuefi=\u0026#34;yes\u0026#34; graphics=\u0026#34;yes\u0026#34; # graphics_wait=\u0026#34;yes\u0026#34; cpu=1 memory=4G network0_type=\u0026#34;virtio-net\u0026#34; network0_switch=\u0026#34;public\u0026#34; disk0_type=\u0026#34;ahci-hd\u0026#34; disk0_name=\u0026#34;disk0.img\u0026#34; uuid=\u0026#34;ff31650b-6ef0-11f9-963c-6cfffff61323\u0026#34; utctime=\u0026#34;no\u0026#34; xhci_mouse=\u0026#34;yes\u0026#34; ゲストWindowsに与えるCPU数 Windows10の場合、割り当てられるCPUは、Homeだと1つ、Proだと2つまで。\nコア/スレッドはHomeだと32、Proだと256。\nコアを二つ以上与えようとしても、vm-bhyveでの指定はCPU数でのみ可能。\n1.3からはより細かい設定ができるようになるそうだが、pkgからインストールするvm-bhyveは1.2なので1のままにしておく。\nhttps://github.com/churchers/vm-bhyve/wiki/Guest-Example:-Windows\nなお/boot/loader.confに以下の設定をすることで、CPU一つあたりのコア数を指定できるが、手元ではうまく動かないので特に説明はしない。\nhw.vmm.topology.cores_per_package=4 上記パラメータの詳しい説明はこちら。\nhttps://forums.freebsd.org/threads/bhyve-cpu-vcpu-cores-nad-threads.60169/\nホスト起動時に仮想マシンも起動させるには。 /etc/rc.confに以下の行を追加。\n複数ある場合にはスペースを置いて起動させたい順に記載。\nvm_delayは、複数の仮想マシンを起動する場合のインターバルを秒で指定。\nvm_list=\u0026#34;win10\u0026#34; vm_delay=\u0026#34;5\u0026#34; ","permalink":"https://nobwak.github.io/posts/2019-05-12-freebsd_12%E3%81%AEbhyve%E3%81%ABwindows10%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E3%81%9D%E3%81%AE2vm-bhyve%E4%BD%BF%E7%94%A8/","summary":"前回までで仮想マシンをインストールする準備が整った。 さっそくWindows10のインストールに取り掛かるが、準備すべきものがある。 Windo","title":"FreeBSD 12のbhyveにWindows10をインストールする：その2（vm-bhyve使用）"},{"content":"bhyveはFreeBSDで動く、つまりType 2のハイパーバイザ。\nFreeBSDにはjailがある。\njailのいいところは、カーネルを共有しつつユーザランドだけ分けることで、オーバーヘッドを抑えられるところ。\n悪いところはOSに制限が発生するところ。要するにLinuxやWindows、FreeBSDでも他のバージョンを動かせないところ。\n仮想化は何かの目的、たとえばアプリケーションを動かすためのもので、いまどきOS依存のアプリケーションは少ない。\nとはいうものの、FreeBSDは年々、本体はともかく裾野のリソースが先細りで、ports/packageがなくなったり、あったとしても情報は少なくて、まるっとLinuxごと動かしたいなと感じることがある。\nもちろんWindowsについては当然FreeBSDでは動かないアプリなんて山ほどある。\nそういった点では、用途に合わせて最適なOS（とアプリケーション）を使い慣れたFreeBSD上で動かせるのはかなりのメリット。\nというのも、バックアップが簡単にできるからである。\nZFS上にイメージを作れば、スナップショットにロールバックはお手の物である。\n壊し放題である。\nESXiなどのType 1ハイパーバイザでは、これができない。できるかもしれないけど知らない。\nWindowsを物理PC上で使っていて、壊れたとする。バックアップがあったとしても、復旧が面倒。\nLinuxについてはバックアップからの復旧は比較的簡単だが、俺様なんか滅多にLinuxを使わなくて操作をすぐ忘れるという点でやはり復旧が面倒。\n以上のような背景があったところに、このたび宅鯖をハードウェア仮想化対応のCPUに変えたので、遅まきながらbhyveを導入する。\n以下ではWindows10をインストールする。\nまずはvm-bhyveを bhyveの導入には、まず公式のFreeBSD handbookを参照するが、いろいろと面倒くさそうである。\nhttps://www.freebsd.org/doc/handbook/virtualization-host-bhyve.html\n遅れて導入すると、いろいろと環境が整っているものである。\nbhyveの場合には、vm-bhyveというツールがあればこのへんは一挙解決。\nvirtualboxを使ったことがあれば、それをイメージしながら進めると理解しやすい。\nただ後述するが、Windowsのイメージそのものにはzfsボリュームを使えない。（ZFS上にイメージを置くことはできる）\nhttps://github.com/churchers/vm-bhyve\nhttps://github.com/churchers/vm-bhyve/wiki/Running-Windows\n大きな流れ  vm-bhyveのインストール 初期設定 初期設定（ネットワーク） 仮想マシンインストール準備（インストーラ = ISO） 仮想マシンインストール準備（仮想マシン設定）【次回】 仮想マシンインストール【次回】  vm-bhyveのインストール pkgでインストールできる。\nvm-bhyveのほか、仮想OS用のfirmwareもインストールしておく。\n$ sudo pkg install vm-bhyve FreeBSD repository update completed. 31790 packages processed. All repositories are up to date. The following 1 package(s) will be affected (of 0 checked): New packages to be INSTALLED:  vm-bhyve: 1.2.3 Number of packages to be installed: 1 55 KiB to be downloaded. [ex01] [1/1] Fetching vm-bhyve-1.2.3.txz: 100% 55 KiB 56.3kB/s 00:01 Checking integrity... done (0 conflicting) [ex01] [1/1] Installing vm-bhyve-1.2.3... [ex01] [1/1] Extracting vm-bhyve-1.2.3: 100% Message from vm-bhyve-1.2.3: To enable vm-bhyve, please add the following lines to rc.conf, depending on whether you are using ZFS storage or not. Please note that the directory or dataset specified should already exist.  vm_enable=\u0026#34;YES\u0026#34;  vm_dir=\u0026#34;zfs:pool/dataset\u0026#34; OR  vm_enable=\u0026#34;YES\u0026#34;  vm_dir=\u0026#34;/directory/path\u0026#34; Then run \u0026#39;vm init\u0026#39;. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Please note, if upgrading from version 1.1, it is advised to shutdown guests and restart the host in order to re-create all virtual switches using new identifiers. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! どんなファイルがインストールされたかは、pkg listで確認できる。\nコマンドとしては/usr/local/sbin/vmを使う。\n実行にはroot権限が必要。\nservice -lで表示されるサービス名もvm。\n$ pkg list vm-bhyve /usr/local/etc/rc.d/vm /usr/local/lib/vm-bhyve/vm-cmd /usr/local/lib/vm-bhyve/vm-config /usr/local/lib/vm-bhyve/vm-core /usr/local/lib/vm-bhyve/vm-datastore /usr/local/lib/vm-bhyve/vm-guest /usr/local/lib/vm-bhyve/vm-info /usr/local/lib/vm-bhyve/vm-migration /usr/local/lib/vm-bhyve/vm-rctl /usr/local/lib/vm-bhyve/vm-run /usr/local/lib/vm-bhyve/vm-switch /usr/local/lib/vm-bhyve/vm-switch-manual /usr/local/lib/vm-bhyve/vm-switch-standard /usr/local/lib/vm-bhyve/vm-switch-vale /usr/local/lib/vm-bhyve/vm-switch-vxlan /usr/local/lib/vm-bhyve/vm-util /usr/local/lib/vm-bhyve/vm-zfs /usr/local/man/man8/vm.8.gz /usr/local/sbin/vm /usr/local/share/examples/vm-bhyve/alpine.conf /usr/local/share/examples/vm-bhyve/arch.conf /usr/local/share/examples/vm-bhyve/centos6.conf /usr/local/share/examples/vm-bhyve/centos7.conf /usr/local/share/examples/vm-bhyve/config.sample /usr/local/share/examples/vm-bhyve/coreos.conf /usr/local/share/examples/vm-bhyve/debian.conf /usr/local/share/examples/vm-bhyve/default.conf /usr/local/share/examples/vm-bhyve/dragonfly.conf /usr/local/share/examples/vm-bhyve/freebsd-zvol.conf /usr/local/share/examples/vm-bhyve/freepbx.conf /usr/local/share/examples/vm-bhyve/netbsd.conf /usr/local/share/examples/vm-bhyve/openbsd.conf /usr/local/share/examples/vm-bhyve/resflash.conf /usr/local/share/examples/vm-bhyve/ubuntu.conf /usr/local/share/examples/vm-bhyve/windows.conf /usr/local/share/licenses/vm-bhyve-1.2.3/BSD2CLAUSE /usr/local/share/licenses/vm-bhyve-1.2.3/LICENSE /usr/local/share/licenses/vm-bhyve-1.2.3/catalog.mk $ sudo pkg install bhyve-firmware Updating FreeBSD repository catalogue... FreeBSD repository is up to date. All repositories are up to date. The following 3 package(s) will be affected (of 0 checked): New packages to be INSTALLED:  bhyve-firmware: 1.0_1  uefi-edk2-bhyve-csm: 0.2_1,1  uefi-edk2-bhyve: 0.2_1,1 Number of packages to be installed: 3 The process will require 4 MiB more space. 1 MiB to be downloaded. [ex01] [1/3] Fetching bhyve-firmware-1.0_1.txz: 100% 496 B 0.5kB/s 00:01 [ex01] [2/3] Fetching uefi-edk2-bhyve-csm-0.2_1,1.txz: 2% 16 KiB 16.4kB/s [ex01] [2/3] Fetching uefi-edk2-bhyve-csm-0.2_1,1.txz: 100% 760 KiB 778.7kB/s 00:01 [ex01] [3/3] Fetching uefi-edk2-bhyve-0.2_1,1.txz: 59% 440 KiB 450.6kB/s 00[ex01] [3/3] Fetching uefi-edk2-bhyve-0.2_1,1.txz: 100% 740 KiB 757.6kB/s 00:01 Checking integrity... done (0 conflicting) [ex01] [1/3] Installing uefi-edk2-bhyve-csm-0.2_1,1... [ex01] [1/3] Extracting uefi-edk2-bhyve-csm-0.2_1,1: 100% [ex01] [2/3] Installing uefi-edk2-bhyve-0.2_1,1... [ex01] [2/3] Extracting uefi-edk2-bhyve-0.2_1,1: 100% [ex01] [3/3] Installing bhyve-firmware-1.0_1... 仮想マシン他置き場を作る もちろんZFSで作るよな。\nここで作った置き場には、仮想マシンのほか、ISOイメージ、テンプレート、すべての仮想マシンに共通の設定ファイルが置かれる。\nルート直下に/vmを作った。\nなお本記事で\u0026quot;$vm_dir\u0026quot;と記載をする場合にはこの仮想マシン置き場を指す。\n$ sudo zfs create zroot/vm $ sudo mkdir /vm $ sudo zfs set mountpoint=/vm zroot/vm $ zfs list NAME USED AVAIL REFER MOUNTPOINT zroot 6.73G 216G 88K /zroot （略） zroot/vm 88K 216G 88K /zroot/vm vm-bhyveの初期設定 まず/etc/rc.confへの書き込み。\nホスト起動時にvm-bhyveも起動するように。\nまた、先に作った仮想マシン置き場をvm-bhyveに知らせるために。\n$ sudo sysrc vm_enable=\u0026#34;YES\u0026#34; vm_enable: -\u0026gt; YES $ sudo sysrc vm_dir=\u0026#34;zfs:zroot/vm\u0026#34; vm_dir: -\u0026gt; zfs:zroot/vm 次にvm init。仮想マシン置き場にいろいろとファイル/ディレクトリが作られるとともに、必要なカーネルモジュールがロードされる。\nvm initはホストが起動する都度、実行される必要がある。\nこの場合、vm initはカーネルモジュールのロードと、ネットワーク設定(tap）を行う。\n/etc/rc.confにvm_enableをしてあれば、気にする必要なない。\n$ sudo vm init $  $ ls -la /vm total 35 drwxr-xr-x 6 root wheel 6 May 4 20:34 . drwxr-xr-x 20 root wheel 26 May 6 15:03 .. drwxr-xr-x 2 root wheel 4 May 3 18:40 .config drwxr-xr-x 2 root wheel 5 May 4 22:48 .iso drwxr-xr-x 2 root wheel 18 May 3 18:46 .templates $ kldstat Id Refs Address Size Name  1 28 0xffffffff80200000 243cd00 kernel  2 1 0xffffffff8263e000 3a9a10 zfs.ko  3 2 0xffffffff829e8000 a4f0 opensolaris.ko  4 1 0xffffffff82c21000 2678 intpm.ko  5 1 0xffffffff82c24000 b10 smbus.ko  6 1 0xffffffff82c25000 537460 vmm.ko  7 1 0xffffffff8315d000 b30 nmdm.ko  8 1 0xffffffff8315e000 6fb3 if_bridge.ko  9 1 0xffffffff83165000 4410 bridgestp.ko 10 1 0xffffffff8316a000 2e77 if_tap.ko 仮想マシン置き場に、OSごとのテンプレートファイルもコピーする。\n/usr/local/share/examples/vm-bhyve/にあるやつね。（さきほどpkg infoでも出てきた）\n$ sudo cp /usr/local/share/examples/vm-bhyve/* /vm/.templates/ $ ls /vm/.templates/ alpine.conf config.sample dragonfly.conf openbsd.conf arch.conf coreos.conf freebsd-zvol.conf resflash.conf centos6.conf debian.conf freepbx.conf ubuntu.conf centos7.conf default.conf netbsd.conf windows.conf 以上で初期設定終わり。\nつぎは初期設定（ネットワーク）\n初期設定（ネットワーク） 仮想マシン用ネットワークの結線を行う。\nまず、仮想マシンの繋がる仮想スイッチを作り、仮想スイッチとホストマシンのネットワークインタフェースを繋ぐ。\n外界 \u0026lt;--\u0026gt; ホストのインタフェース \u0026lt;--\u0026gt; 仮想スイッチ\nというネットワークを作る。\n先々、仮想マシンを作ると\n外界 \u0026lt;--\u0026gt; ホストのインタフェース \u0026lt;--\u0026gt; 仮想スイッチ \u0026lt;--\u0026gt; 仮想マシン\nというネットワークになる。\n仕組み的なことをいうと、仮想スイッチはbridgeで、仮想マシンのインタフェースはtapになる。\n以下の例では、publicという名前の仮想スイッチ（オプションなしでのcreateなのでbridgeインタフェース）を作成している。\n名前は、vm-bhyveのテンプレートで仮想スイッチを\u0026quot;public\u0026quot;にしているからで、気に入らなければ別の名前でもよい。\n# その場合は$vm_dir/.templatesにあるファイルを書き換えておくとよい。\naddで仮想スイッチに物理インタフェースを追加。\n物理インタフェースは、もちろんのことホストマシンのインタフェースに合わせること。 また、これも当たり前だけど、追加するインタフェースはインターネットに向いている方にしような。\n試しにやってみたら、wlan0でも行けたわ。\n$ sudo vm switch create public $ sudo vm switch add public re0 $ ifconfig re0: flags=8943\u0026lt;UP,BROADCAST,RUNNING,PROMISC,SIMPLEX,MULTICAST\u0026gt; metric 0 mtu 1500  options=8209b\u0026lt;RXCSUM,TXCSUM,VLAN_MTU,VLAN_HWTAGGING,VLAN_HWCSUM,WOL_MAGIC,LINKSTATE\u0026gt;  ether 6c:4b:90:a6:13:23  inet 192.168.1.7 netmask 0xffffff00 broadcast 192.168.1.255  media: Ethernet autoselect (1000baseT )  status: active  nd6 options=29\u0026lt;PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL\u0026gt; lo0: flags=8049\u0026lt;UP,LOOPBACK,RUNNING,MULTICAST\u0026gt; metric 0 mtu 16384  options=680003\u0026lt;RXCSUM,TXCSUM,LINKSTATE,RXCSUM_IPV6,TXCSUM_IPV6\u0026gt;  inet6 ::1 prefixlen 128  inet6 fe80::1%lo0 prefixlen 64 scopeid 0x2  inet 127.0.0.1 netmask 0xff000000  groups: lo  nd6 options=21\u0026lt;PERFORMNUD,AUTO_LINKLOCAL\u0026gt; vm-public: flags=8843\u0026lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST\u0026gt; metric 0 mtu 1500  ether 26:ad:45:ea:0c:c3  id 00:00:00:00:00:00 priority 32768 hellotime 2 fwddelay 15  maxage 20 holdcnt 6 proto rstp maxaddr 2000 timeout 1200  root id 00:00:00:00:00:00 priority 32768 ifcost 0 port 0  member: re0 flags=143\u0026lt;LEARNING,DISCOVER,AUTOEDGE,AUTOPTP\u0026gt;  ifmaxaddr 0 port 1 priority 128 path cost 20000  groups: bridge vm-switch viid-4c918@  nd6 options=1 これで以下のようなネットワーク構成になった。\n外界 \u0026lt;--\u0026gt; ホストのインタフェース（re0） \u0026lt;--\u0026gt; 仮想スイッチ（vm-public）\nこれですべての初期設定が完了。\n","permalink":"https://nobwak.github.io/posts/2019-05-12-freebsd_12%E3%81%AEbhyve%E3%81%ABwindows10%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E3%81%9D%E3%81%AE1vm-bhyve%E4%BD%BF%E7%94%A8/","summary":"bhyveはFreeBSDで動く、つまりType 2のハイパーバイザ。 FreeBSDにはjailがある。 jailのいいところは、カーネルを共有","title":"FreeBSD 12のbhyveにWindows10をインストールする：その1（vm-bhyve使用）"},{"content":"いまさらVisual Studio Code（以降、VSC）をインストールしたのでメモ\nWindows10。Python。\n以下の手順に沿う。\nPython in Visual Studio Code\nhttps://code.visualstudio.com/docs/languages/python\nVSCのインストール 以下からダウンロード、インストール。\nDownload Visual Studio Code\nhttps://code.visualstudio.com/Download\n私はzip版。\n任意のフォルダに展開し、PATHを通す。\n私の場合はPATHの通っているところにcode.exeのショートカットを置いただけ。\nPythonのインストール https://www.python.org/downloads/\npythoninstall01\npythoninstall02 pythoninstall03\nコマンドプロンプトでpythonにPATHが通っていることを確認\npythoninstall04\nVSCへのpython extensionインストール Python extension for Visual Studio Code\nhttps://marketplace.visualstudio.com/items?itemName=ms-python.python\npythoninstall05\npythoninstall06  pythoninstall07\nVSCでのpython interpreterの指定 VSCを起動し、pythonを使う旨、VSCに明示する。\nCtrl + Shift + Pを押し、現れたウインドウに「Python」とタイプ、「インタープリターを選択」を選ぶ\npythoninstall08\nPyLintのインストール 拡張子.pyのファイルを作ると、Linterが無いと怒られる。\nインストールを選ぶ。\npythoninstall09\npythoninstall20\nライブラリのインストール なんか画面が開いたのでpipで必要なライブラリのインストールを進める\npythoninstall21\n\u0026ldquo;Microsoft Visual C++ 14.0\u0026quot;のインストール 「Microsoft Visual C++ 14.0」が無いと怒られたら。\ncopying cx_Freeze\\samples\\wx\\wxapp.py -\u0026gt; build\\lib.win32-3.7\\cx\\_Freeze\\samples\\wx creating build\\lib.win32-3.7\\cx_Freeze\\samples\\zope copying cx_Freeze\\samples\\zope\\qotd.py -\u0026gt; build\\lib.win32-3.7\\cx\\_Freeze\\samples\\zope copying cx_Freeze\\samples\\zope\\setup.py -\u0026gt; build\\lib.win32-3.7\\cx_Freeze\\samples\\zope running build_ext building \u0026#39;cx_Freeze.util\u0026#39; extension error: Microsoft Visual C++ 14.0 is required. Get it with \u0026#34;Microsoft Visual C++ Build Tools\u0026#34;: https://visualstudio.microsoft.com/downloads/ このあたりから入手してインストール\nhttps://visualstudio.microsoft.com/visual-cpp-build-tools/\nhttps://download.microsoft.com/download/5/f/7/5f7acaeb-8363-451f-9425-68a90f98b238/visualcppbuildtools_full.exe\nMD5ハッシュは 8d4afd3b226babecaa4effb10d69eb2e\n以上\n","permalink":"https://nobwak.github.io/posts/2019-01-05-%E3%83%A1%E3%83%A2visual_studio_code_+_python%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97/","summary":"いまさらVisual Studio Code（以降、VSC）をインストールしたのでメモ Windows10。Python。 以下の手順に沿う。 Python in Visual Studio Code https://code.visualstudio.com/docs/languages/python VS","title":"【メモ】Visual Studio Code + Pythonのセットアップ"},{"content":"zfsnap2（以降、zfsnap）をperiodicで自動取得する方法はこちらで触れた。\n同期時でも触れた通り、zfsnapには自動削除するperiodic scriptもある。\nが、実はそのままでは動かない。\n変更内容を本記事で示す。\n結論 付属のスクリプトではdestroyするfsの指定がないので補う。\n具体的には以下の個所。\n\u0026lt; xPREFIXx/zfsnap destroy $OPTIONS -p \u0026#34;hourly- daily- weekly- monthly- reboot- $xPERIODICx_zfsnap_delete_prefixes\u0026#34; $xPERIODICx_zfsnap_delete_fs -r $xPERIODICx_zfsnap_delete_recursive_fs --- \u0026gt; xPREFIXx/zfsnap destroy $OPTIONS -p \u0026#34;hourly- daily- weekly- monthly- reboot- $xPERIODICx_zfsnap_delete_prefixes\u0026#34; 同時に、/etc/periodic.confで$xPERIODICx_zfsnap_delete_fs、$xPERIODICx_zfsnap_delete_recursive_fsの指定も行うこと。\n結果 dailyの削除スクリプト例（dailyのみ）\n#!/bin/sh # This file is licensed under the BSD-3-Clause license. # See the AUTHORS and LICENSE files for more information. # If there is a global system configuration file, suck it in. if [ -r /etc/defaults/periodic.conf ]; then  . /etc/defaults/periodic.conf  source_periodic_confs fi # daily_zfsnap_delete_enable - Delete old snapshots periodicaly (values: YES | NO) # daily_zfsnap_delete_flags - `zfsnap destroy` flags # daily_zfsnap_delete_verbose - Verbose output (values: YES | NO) # daily_zfsnap_delete_prefixes - Space-separated list of prefixes of expired zfsnap snapshots to delete # \u0026#39;hourly-\u0026#39;, \u0026#39;daily-\u0026#39;, \u0026#39;weekly-\u0026#39;, \u0026#39;monthly-\u0026#39;, and \u0026#39;reboot-\u0026#39; prefixes are hardcode d case \u0026#34;${daily_zfsnap_delete_enable-\u0026#34;NO\u0026#34;}\u0026#34; in  [Yy][Ee][Ss])  OPTIONS=\u0026#34;$daily_zfsnap_delete_flags\u0026#34;  case \u0026#34;${daily_zfsnap_delete_verbose-\u0026#34;NO\u0026#34;}\u0026#34; in  [Yy][Ee][Ss]) OPTIONS=\u0026#34;$OPTIONS -v\u0026#34; ;;  esac  /usr/local/sbin/zfsnap destroy $OPTIONS -p \u0026#34;hourly- daily- weekly- monthly- reboot- $daily_zfsnap_delete_pref ixes\u0026#34; $daily_zfsnap_delete_fs -r $daily_zfsnap_delete_recursive_fs  exit $?  ;;  *)  exit 0  ;; esac # vim: set ts=4 sw=4: /etc/periodic.confの例（dailyのみ）\n# zfsnap_daily daily_zfsnap_enable=\u0026#34;YES\u0026#34; daily_zfsnap_recursive_fs=\u0026#34;vault\u0026#34; daily_zfsnap_verbose=\u0026#34;YES\u0026#34; daily_zfsnap_flags=\u0026#34;-s -S -z\u0026#34; daily_zfsnap_ttl=\u0026#34;1w1d\u0026#34; daily_zfsnap_delete_enable=\u0026#34;YES\u0026#34; daily_zfsnap_delete_flags=\u0026#34;-s -S\u0026#34; daily_zfsnap_delete_verbose=\u0026#34;YES\u0026#34; daily_zfsnap_delete_recursive_fs=\u0026#34;vault\u0026#34; 上手くいけばdaily outputで以下のような内容が通知される。\n/sbin/zfs destroy vault/chamber@daily-2018-12-21_04.00.00-1w1d ... DONE /sbin/zfs destroy vault/itunes@daily-2018-12-21_04.00.00-1w1d ... DONE /sbin/zfs destroy vault@daily-2018-12-21_04.00.00-1w1d ... DONE ","permalink":"https://nobwak.github.io/posts/2018-12-29-zfs_zfsnap2%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E6%97%A5%E3%80%85%E3%81%AEzfs_snapshot%E5%89%8A%E9%99%A4%E7%B7%A8/","summary":"zfsnap2（以降、zfsnap）をperiodicで自動取得する方法はこちらで触れた。 同期時でも触れた通り、zfsnapには自動削除する","title":"[zfs] zfsnap2を使った日々のzfs snapshot（削除編）"},{"content":"HDDがいっぱいになってきたので容量の大きい別のHDDに移した。\nzfsなのでmirrorをしつつ入れ替えができる。\nその時のメモ。\n端的に言えばディスク交換後zpool online -eをすればよい。\n以下、経緯。\nディスク追加 2.5TのHDD, ada1上に作られたzpool、vaultがあり、残容量は150Gである。\nもともとzfsは残容量が少なくなると格段にパフォーマンスが落ちると言われていて、これはちょっと危険な状態である。\nada1 at ahcich1 bus 0 scbus1 target 0 lun 0 ada1: \u0026lt;WDC WD25EZRX-00MMMB0 80.00A80\u0026gt; ATA8-ACS SATA 3.x device ada1: Serial Number WD-WMAWZ0230443 ada1: 300.000MB/s transfers (SATA 2.x, UDMA6, PIO 8192bytes) ada1: Command Queueing enabled ada1: 2384658MB (4883781168 512 byte sectors) ada1: quirks=0x1\u0026lt;4K\u0026gt; # zpool status pool: vault state: ONLINE scan: none requested config: NAME STATE READ WRITE CKSUM vault ONLINE 0 0 0 gpt/disk_01 ONLINE 0 0 0 # zfs list NAME USED AVAIL REFER MOUNTPOINT vault 2.05T 150G 88K /vault vault/chamber 1017G 150G 1017G /chamber vault/itunes 1.06T 150G 1.05T /itunes そこで、zpoolにmirrorとして容量の大きいディスクを追加し、その後オリジナルのディスクを外す、という手順。\n追加するのは以下のディスク。3T。\n2.5Tから3Tじゃ焼け石に水ですがね\u0026hellip;。\nada2 at ahcich2 bus 0 scbus2 target 0 lun 0 ada2: \u0026lt;WDC WD30EZRX-00D8PB0 80.00A80\u0026gt; ACS-2 ATA SATA 3.x device ada2: Serial Number WD-WMC4N0765033 ada2: 300.000MB/s transfers (SATA 2.x, UDMA6, PIO 8192bytes) ada2: Command Queueing enabled ada2: 2861588MB (5860533168 512 byte sectors) ada2: quirks=0x1\u0026lt;4K\u0026gt; 既存のzpoolにmirrorとしてディスクを追加するには、zpool attachを使う。\nzpool attachに続けてzpool名、既存ディスク、追加ディスクの順で指定。\n以下の例では、ディスクの指定をada2などのデバイス名ではなくGPT名で行っている。\n# zpool attach vault gpt/disk_01 gpt/disk_02 以下のようにzpoolがmirror構成になり、resilveringが始まる。\n # zpool status  pool: vault status: One or more devices is currently being resilvered. The pool will continue to function, possibly in a degraded state. action: Wait for the resilver to complete. scrub: resilver in progress for 0h0m, 0.01% done, 7h1m to go config:  NAME STATE READ WRITE CKSUM vault ONLINE 0 0 0 mirror-0 ONLINE 0 0 0 gpt/disk_01 ONLINE 0 0 0 gpt/disk_02 ONLINE 0 0 0 しばらく待つと;\npool: vault state: ONLINE scan: resilvered 2.04T in 6h48m with 0 errors on Sun Dec 16 19:15:11 2018 config: NAME STATE READ WRITE CKSUM vault ONLINE 0 0 0 mirror-0 ONLINE 0 0 0 gpt/disk_01 ONLINE 0 0 0 gpt/disk_02 ONLINE 0 0 0 resilvering終了。\n旧ディスクの除去 2.5Tと3Tのディスクでmirrorを構成しているので、当然ながら残容量に変化はない。\nNAME USED AVAIL REFER MOUNTPOINT vault 2.05T 150G 88K /vault vault/chamber 1017G 150G 1017G /chamber vault/itunes 1.06T 150G 1.05T /itunes では旧ディスクを外す。\nmirrorからディスクを外すにはdetachを使う。\nzpool detachに続けてzpool名、ディスク名を指定。\n # zpool detach vault gpt/disk_01  # zpool status  pool: vault state: ONLINE scan: resilvered 2.04T in 6h48m with 0 errors on Sun Dec 16 19:15:11 2018 config:  NAME STATE READ WRITE CKSUM vault ONLINE 0 0 0 gpt/disk_02 ONLINE 0 0 0  errors: No known data errors ご覧の通りmirror構成が解除される。\n容量の拡張 さてこの状態ではまだ残容量が増えない。\n NAME USED AVAIL REFER MOUNTPOINT vault 2.05T 150G 88K /vault vault/chamber 1017G 150G 1017G /chamber vault/itunes 1.06T 150G 1.05T /itunes ただ物理ディスクは3Tなので、zpoolに「安心して容量を増やしたまえ」と通知する。\n通知にはzpool online -eを使う。\nzpool onlineは物理ディスクを有効にするコマンドだが、-eを付ければ、使用可能な領域をすべて使うようにできる。\nmanを以下に引用する。\n zpool online [-e] pool device ... Brings the specified physical device online. This command is not applicable to spares or cache devices. -e Expand the device to use all available space. If the device is part of a mirror or raidz then all devices must be expanded before the new space will become available to the pool. ご覧の通り残容量が増えた。\nたったの450Gだけど。\n# zpool online -e vault gpt/disk_02 $ zfs list NAME USED AVAIL REFER MOUNTPOINT vault 2.05T 599G 88K /vault vault/chamber 1017G 599G 1017G /chamber vault/itunes 1.06T 599G 1.05T /itunes ","permalink":"https://nobwak.github.io/posts/2018-12-22-zfs%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E4%BA%A4%E6%8F%9Bzpool%E5%AE%B9%E9%87%8F%E3%81%AE%E6%8B%A1%E5%BC%B5/","summary":"HDDがいっぱいになってきたので容量の大きい別のHDDに移した。 zfsなのでmirrorをしつつ入れ替えができる。 その時のメモ。 端的に言えば","title":"[zfs]ディスク交換、zpool容量の拡張"},{"content":"zfsnap2（面倒くさいので以降zfsnap）のおかげで気軽にzfs snapshotできるようになった。\nあとはこれをcronに仕込んで日々、snapshotを取得、削除するだけである。\nzfsnapをpkg、あるいはportsからインストールすると、cron用のシェルスクリプトも付いてくる。\nこれを加工してperiodic用のディレクトリに放り込めば、あとは全部、zfsnapがやってくれる。\n基本はここを見ながら。\nhttps://github.com/zfsnap/zfsnap/wiki/zfSnap-periodic.conf\nなお、本稿で扱う周期、契機は日週月次に限る。\n全体の流れ  スナップショットの方針を決める cron用シェルスクリプトを日・週・月ごとのperiodicディレクトリにコピーし、ファイル名を変更する スクリプトの内容を修正する /etc/periodic.confにバックアップ方針に沿った設定を書き加える  では早速。\nスナップショット方針を決める ここでは簡単に、あるzpool丸ごとに対して;\n 毎日のスナップショットは1週間と1日、保存する 毎週のスナップショットは1か月と1日、保存する 毎月のスナップショットは1年と1週間、保存する  とする\n[補足]periodicから実行されるときのsnapname zfsnap付属のスクリプトを使うと、snapnameの頭にdaily, weekly, monthlyと付く。\nもちろん変更可能だが、本稿ではそのまま使う。\nzfsnapのcron用スクリプトはどこにある cron用スクリプトは、zfsnapインストール時にshareにコピーされる。\n例えば以下のようにして探す\n $ pkg list|grep zfsnap /usr/local/etc/bash_completion.d/zfsnap.sh /usr/local/man/man8/zfsnap.8.gz /usr/local/sbin/zfsnap /usr/local/share/doc/zfsnap/AUTHORS /usr/local/share/doc/zfsnap/NEWS /usr/local/share/doc/zfsnap/PORTABILITY /usr/local/share/doc/zfsnap/README.md /usr/local/share/examples/zfsnap/completion/zfsnap-completion.bash /usr/local/share/examples/zfsnap/completion/zfsnap-completion.tcsh /usr/local/share/examples/zfsnap/completion/zfsnap-completion.zsh /usr/local/share/examples/zfsnap/periodic/xPERIODICx_zfsnap.sh /usr/local/share/examples/zfsnap/periodic/xPERIODICx\\_zfsnap\\_delete.sh /usr/local/share/licenses/zfsnap2-2.0.0.b3/BSD3CLAUSE /usr/local/share/licenses/zfsnap2-2.0.0.b3/LICENSE /usr/local/share/licenses/zfsnap2-2.0.0.b3/catalog.mk /usr/local/share/zfsnap/commands/destroy.sh /usr/local/share/zfsnap/commands/recurseback.sh /usr/local/share/zfsnap/commands/snapshot.sh /usr/local/share/zfsnap/core.sh /usr/local/share/zsh/site-functions/_zfsnap 上記のうち以下が狙いのスクリプトである。\nスナップショット取得用、削除用の2種類。\nなお削除用はそのままでは期待する動作にならないので別記事で扱う。\n/usr/local/share/examples/zfsnap/periodic/xPERIODICx_zfsnap.sh /usr/local/share/examples/zfsnap/periodic/xPERIODICx_zfsnap_delete.sh\nスクリプトのコピーとファイル名の変更 さてこれを、日・週・月のperiodicディレクトリにコピーし設定していくが、まずは日次で試す。\n日ごとのperiodicディレクトリは/usr/local/etc/periodic/dailyである。\nここにコピーし、ファイル名を変える。\nファイル名のxPERIODICxを、日次・週次・月次、どの周期用かに合わせて変える。\n具体的にはそれぞれdaily, weekly, monthlyに。\n以下の例では日次のスクリプトなので、dailyに変えている。\nprefixの番号は好きなようにしたまえ。\n$ cd /usr/local/etc/periodic/daily $ sudo cp /usr/local/share/examples/zfsnap/periodic/* . $ sudo mv ./xPERIODICx_zfsnap.sh ./500.daily_zfsnap.sh $ sudo mv ./xPERIODICx_zfsnap_delete.sh ./500.daily_zfsnap_delete.sh $ ls 411.pkg-backup 500.daily_zfsnap_delete.sh 998.ntpdate 490.status-pkg-changes 500.daily_zfsnap.sh smart スクリプトの修正 スクリプト（取得用）の内容は以下の通りである。\n変える場所はxPERIODICxとxPREFIXxである。\nxPERIODICxは周期に合わせて、xPREFIXxはzfsnapの置いてあるパス、つまり/usr/local/sbin/zfsnapに。\n#!/bin/sh # This file is licensed under the BSD-3-Clause license. # See the AUTHORS and LICENSE files for more information. # If there is a global system configuration file, suck it in. if [ -r /etc/defaults/periodic.conf ]; then  . /etc/defaults/periodic.conf  source_periodic_confs fi # xPERIODICx_zfsnap_enable - Enable xPERIODICx snapshots (values: YES | NO) # xPERIODICx_zfsnap_flags - `zfsnap snapshot` flags # xPERIODICx_zfsnap_fs - Space-separated ZFS filesystems to create non-recursive snapshots # xPERIODICx_zfsnap_recursive_fs - Space-separated ZFS filesystems to create recursive snapshots # xPERIODICx_zfsnap_ttl - Explicit TTL value # xPERIODICx_zfsnap_verbose - Verbose output (values: YES | NO) # xPERIODICx_zfsnap_enable_prefix - Create snapshots with prefix (values: YES | NO) (Default = YES) # xPERIODICx_zfsnap_prefix - set prefix for snapshots (Default = xPERIODICx) case \u0026#34;${xPERIODICx_zfsnap_enable-\u0026#34;NO\u0026#34;}\u0026#34; in  [Yy][Ee][Ss])  OPTIONS=\u0026#34;$xPERIODICx_zfsnap_flags\u0026#34;  case \u0026#34;${xPERIODICx_zfsnap_verbose-\u0026#34;NO\u0026#34;}\u0026#34; in  [Yy][Ee][Ss]) OPTIONS=\u0026#34;$OPTIONS -v\u0026#34; ;;  esac  case \u0026#34;${xPERIODICx_zfsnap_enable_prefix-\u0026#34;YES\u0026#34;}\u0026#34; in  [Yy][Ee][Ss]) OPTIONS=\u0026#34;$OPTIONS -p ${xPERIODICx_zfsnap_prefix:-\u0026#34;xPERIODICx-\u0026#34;}\u0026#34; ;;  esac  case \u0026#39;xPERIODICx\u0026#39; in  \u0026#39;hourly\u0026#39;)  default_ttl=\u0026#39;3d\u0026#39;  ;;  \u0026#39;daily\u0026#39;|\u0026#39;reboot\u0026#39;)  default_ttl=\u0026#39;1w\u0026#39;  ;;  \u0026#39;weekly\u0026#39;)  default_ttl=\u0026#39;1m\u0026#39;  ;;  \u0026#39;monthly\u0026#39;)  default_ttl=\u0026#39;6m\u0026#39;  ;;  *)  printf \u0026#39;%s\\n\u0026#39; \u0026#34;ERR: Unexpected error\u0026#34; \u0026gt;\u0026amp;2  exit 1  ;;  esac  xPREFIXx/zfsnap snapshot $OPTIONS -a ${xPERIODICx_zfsnap_ttl:-\u0026#34;$default_ttl\u0026#34;} $xPERIODICx_zfsnap_fs -r $xPERIODICx_zfsnap_recursive_fs  exit $?  ;;  *)  exit 0  ;; esac # vim: set ts=4 sw=4: vimなら:%s/xPERIODICx/daily/g などとコマンド叩いて一括置換する。\n以下が修正後。\n#!/bin/sh # This file is licensed under the BSD-3-Clause license. # See the AUTHORS and LICENSE files for more information. # If there is a global system configuration file, suck it in. if [ -r /etc/defaults/periodic.conf ]; then  . /etc/defaults/periodic.conf  source_periodic_confs fi # daily_zfsnap_enable - Enable daily snapshots (values: YES | NO) # daily_zfsnap_flags - `zfsnap snapshot` flags # daily_zfsnap_fs - Space-separated ZFS filesystems to create non-recursive snapshots # daily_zfsnap_recursive_fs - Space-separated ZFS filesystems to create recursive snapshots # daily_zfsnap_ttl - Explicit TTL value # daily_zfsnap_verbose - Verbose output (values: YES | NO) # daily_zfsnap_enable_prefix - Create snapshots with prefix (values: YES | NO) (Default = YES) # daily_zfsnap_prefix - set prefix for snapshots (Default = daily) case \u0026#34;${daily_zfsnap_enable-\u0026#34;NO\u0026#34;}\u0026#34; in  [Yy][Ee][Ss])  OPTIONS=\u0026#34;$daily_zfsnap_flags\u0026#34;  case \u0026#34;${daily_zfsnap_verbose-\u0026#34;NO\u0026#34;}\u0026#34; in  [Yy][Ee][Ss]) OPTIONS=\u0026#34;$OPTIONS -v\u0026#34; ;;  esac  case \u0026#34;${daily_zfsnap_enable_prefix-\u0026#34;YES\u0026#34;}\u0026#34; in  [Yy][Ee][Ss]) OPTIONS=\u0026#34;$OPTIONS -p ${daily_zfsnap_prefix:-\u0026#34;daily-\u0026#34;}\u0026#34; ;;  esac  case \u0026#39;daily\u0026#39; in  \u0026#39;hourly\u0026#39;)  default_ttl=\u0026#39;3d\u0026#39;  ;;  \u0026#39;daily\u0026#39;|\u0026#39;reboot\u0026#39;)  default_ttl=\u0026#39;1w\u0026#39;  ;;  \u0026#39;weekly\u0026#39;)  default_ttl=\u0026#39;1m\u0026#39;  ;;  \u0026#39;monthly\u0026#39;)  default_ttl=\u0026#39;6m\u0026#39;  ;;  *)  printf \u0026#39;%s\\n\u0026#39; \u0026#34;ERR: Unexpected error\u0026#34; \u0026gt;\u0026amp;2  exit 1  ;;  esac  /usr/local/sbin/zfsnap snapshot $OPTIONS -a ${daily_zfsnap_ttl:-\u0026#34;$default_ttl\u0026#34;} $daily_zfsnap_fs -r $daily_zfsnap_recursive_fs  exit $?  ;;  *)  exit 0  ;; esac # vim: set ts=4 sw=4: 削除用も同じようにしたら、periodic.confに指示を書き入れる。\n/etc/periodic.confにおけるzfsnap設定の書式 /etc/periodic.confは無ければ作る。\nzfsnapのperiodic向け書式は以下の通り。\nhttps://github.com/zfsnap/zfsnap/wiki/zfSnap-periodic.conf\n以下、日次のものとして記す。\n週、月次の場合はdailyをそれぞれweekly, monthlyに変えればよい。\nsnapshot取得の有効化 daily_zfsnap_enable\nYES/NOで指定\n共通オプション（generic option） daily_zfsnap_flags\n例えばscrub, resilver中は避け、日付シリアルの秒を切り捨て、というような設定をここで行う。\n-v, -dを指定しないこと。\n初めて作るときにはテスト実行オプションを付けて試験する。\nzfs, zpoolの指定 daily_zfsnap_fs\ndaily_zfsnap_recursive_fs\nrecursiveとなっているのは、当然ながら子孫も含めて再帰的に取得される\n複数あるなら、スペースを空けて列挙\n冗長アウトプット指定 daily_zfsnap_verbose\nYES/NOで指定\n保存期間指定 daily_zfsnap_ttl\n指定がなければ日次は1週間、週次は1か月、月次は6か月になる。\nスナップショット削除有効化 daily_zfsnap_delete_enable\nYES/NOで指定\nperiodic.conf例 ということで、periodic.confに追加したのは以下の通り。\n# zfsnap_daily daily_zfsnap_enable=\u0026#34;YES\u0026#34; daily_zfsnap_recursive_fs=\u0026#34;vault\u0026#34; daily_zfsnap_verbose=\u0026#34;YES\u0026#34; daily_zfsnap_delete_enable=\u0026#34;YES\u0026#34; daily_zfsnap_flags=\u0026#34;-n -s -S -z\u0026#34; daily_zfsnap_ttl=\u0026#34;1w1d\u0026#34; 試験 zfsnap_flagsに-nを付けた状態で試験。\n$ sudo /usr/local/etc/periodic/daily/500.daily_zfsnap.sh /sbin/zfs snapshot vault/chamber@daily-2018-12-03_02.14.00-1w1d /sbin/zfs snapshot vault/itunes@daily-2018-12-03_02.14.00-1w1d 大丈夫そうなので-nを外す。\n最終的なperiodic.confの結果 週次、月次で同じようにperiodic用のスクリプトを作成する。\n$ pwd /usr/local/etc/periodic $ find ./ -name \u0026#39;*zfsnap*\u0026#39; ./weekly/999.weekly_zfsnap.sh ./weekly/999.weekly_zfsnap_delete.sh ./daily/500.daily_zfsnap.sh ./daily/500.daily_zfsnap_delete.sh ./monthly/910.monthly_zfsnap.sh ./monthly/910.monthly_zfsnap_delete.sh 最終的なperiodic.confの結果は以下の通り。\n# zfsnap_weekly weekly_zfsnap_enable=\u0026#34;YES\u0026#34; weekly_zfsnap_recursive_fs=\u0026#34;vault\u0026#34; weekly_zfsnap_verbose=\u0026#34;YES\u0026#34; weekly_zfsnap_delete_enable=\u0026#34;YES\u0026#34; weekly_zfsnap_flags=\u0026#34;-s -S -z\u0026#34; weekly_zfsnap_ttl=\u0026#34;1m1d\u0026#34; # zfsnap_daily daily_zfsnap_enable=\u0026#34;YES\u0026#34; daily_zfsnap_recursive_fs=\u0026#34;vault\u0026#34; daily_zfsnap_verbose=\u0026#34;YES\u0026#34; daily_zfsnap_delete_enable=\u0026#34;YES\u0026#34; daily_zfsnap_flags=\u0026#34;-s -S -z\u0026#34; daily_zfsnap_ttl=\u0026#34;1w1d\u0026#34; # zfsnap_monthly monthly_zfsnap_enable=\u0026#34;YES\u0026#34; monthly_zfsnap_recursive_fs=\u0026#34;vault\u0026#34; monthly_zfsnap_verbose=\u0026#34;YES\u0026#34; monthly_zfsnap_delete_enable=\u0026#34;YES\u0026#34; monthly_zfsnap_flags=\u0026#34;-s -S -z\u0026#34; monthly_zfsnap_ttl=\u0026#34;1y1d\u0026#34; 翌日以降、root宛には以下のようなメールが届くので、結果はここで確認する。\n/sbin/zfs snapshot -r vault@daily-2018-12-02_04.47.00-1w1d ... DONE ","permalink":"https://nobwak.github.io/posts/2018-12-02-zfs_zfsnap2%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E6%97%A5%E3%80%85%E3%81%AEzfs_snapshot%E5%8F%96%E5%BE%97%E7%B7%A8/","summary":"zfsnap2（面倒くさいので以降zfsnap）のおかげで気軽にzfs snapshotできるようになった。 あとはこれをcronに仕込んで日々","title":"[zfs] zfsnap2を使った日々のzfs snapshot（取得編）"},{"content":"zfsは本当に本当に便利で助かるのだが、それでも面倒なことはある。\n私にとって面倒なのは、スナップショット作成とスナップショットの差分転送である。\nスナップショットの簡素化について。\nスナップショットを作成する際には、ファイルシステムやボリュームに続けてスナップショットの名前、スナップネームを指定する必要がある。\nスナップネームはスナップショットを特定するために必要なものなので文句を言う筋合いはないのだが、いちいち名前を付けるのが面倒なんである。日付でもなんでも自動的に付けてほしい。\nなんとか改善したくていろいろ調べてみた。\nスナップショット取得補助ツール スナップショット関連ではzfstools, zfsnap2, zapの三つを調べた。\n結論から言うと、zfsnap2を選択した。\nzfstools https://github.com/bdrewery/zfstools\nhttps://www.freshports.org/sysutils/zfstools/\nよさそうだけどruby依存なのでその一点で対象外に。\nこのツールのためだけにrubyを入れますか、という話で。\nなるべく依存の少ないツールがよい。\nzap https://www.freshports.org/sysutils/zap\nhttps://github.com/Jehops/zap\nよさそうだけど、zfsに独自のプロパティ（zap:）を設定する必要があるっぽい。\n独自プロパティの設定が、zfsとして許容されている作法であっても、対象のファイルシステムに何らかの手を加えるのは躊躇する\nzfsnap2 https://www.freshports.org/sysutils/zfsnap2\nhttps://github.com/zfsnap/zfsnap\n単純なシェルスクリプト。\nよさそう。\nzfsnap2 お手軽snapshot まず、zfsnap2は、取得すると日付シリアルをsnapnameに付けてくれる。\n例えば。\nvault/chamber@2018-11-11_09.48.00-1y ご覧の通り2018/11/11 09:48:00と日付をsnapnameに付ける\nなお、末尾に1yと書いてあるがこれは1年という意味である。\nこれは何かというと（次項につづく）\nzfsnap2 snapshot削除の仕組みとTTL snapshotは取得するだけでなく、消す方の面倒を見ることも重要。\nzfsnap2は、取得したタイムスタンプとTTL(Time To Live)をsnapnameに含めておくのがアイデア（他みも同じようなツールあるかもしれないけど）。\n先ほどの例でいえば、末尾の1yがそれ。1yだから1 year、1年ですな。\nvault/chamber@2018-11-11_09.48.00-1y 上記の通り、取得日付、保存期間をsnapname自体に持たせるので、ツール側では状態を記憶しておく必要がない。\n削除を指示されたら、zfsnap2はその都度、snapnameだけを見て判断・処理をするということ。\n何より人間もsnapnameから保存期限を判断できる。これはよい。\nとりあえず使う 管理者権限でzfsnap snapshotに続けてzfs/zpoolを指定するだけ。\n日付も付けてくれる。\n # zfsnap snapshot zroot/var/tmp $ zfs list -t snapshot|grep \u0026#39;zroot/var/tmp\u0026#39;; zroot/var/tmp@20181120 56K - 88K - zroot/var/tmp@2018-12-01_22.19.13-1m 0 - 88K - zfsnap書式概要 詳細はman等するとして、概要を示す。\n書式は以下の通り。\nzfsnap コマンド \u0026lt;共通オプション\u0026gt;　\u0026lt;個別オプション\u0026gt; zpool/zfs zfsnapのコマンド コマンドにはsnapshot, destroy, recursebackの三つがある。\nそれらに続けてzpool, zfsを指定する。こちらの指定は複数でもよい。\n共通オプション（generic option）は、その名の通り、共通的なオプション。\n個別オプションはzpool, zfsごとのオプションである。\nコマンドのsnapshot, destroyは当然ながらそれぞれsnapshot作成、削除。\nrecursebackは、zfs rollbackの拡張で、rollbackの際、指定のdataset配下すべてをrollbackするもの。\n本稿では扱わない。\n共通オプション（generic option） 主なものだけ示す\n -s : resilver中は作業しない -S : scrub中は作業しない -z : 日付シリアルの秒切り捨て（18:06:15を18:06:00にする） -n : dry run。テスト実行。ファイルシステムに変更を加えない。 -v : 冗長output  -s, -Sは常時付けておいたほうがいいかな。\n個別オプション 個別オプションなので、これに続けて指定されたzpool/zfsにのみ効果がある。\n主なものだけ示す\n -a : TTL。指定がなければ1m = 1か月 -r : 再帰オプション。再帰的にsnapshotを取得 -R : 非再帰オプション。再帰的なsnapshotを取得「しない」  TTLオプション 以下のうち、必要なものだけをズラズラ書けばよい\n y : 年（365日） m : 月（30日） w : 週（7日） d : 日 h : 時 M : 分 s : 秒  1週間と1日なら-a 1w1d。\n2か月なら-a 2m。\n実行例 以上を踏まえて;\nresilver, scrub中は実行せず、日付シリアルの秒切り捨て、冗長アウトプットでsnapshotをテスト実行。\n対象zfsその1はzroot/usrで、再帰的に取得し、TTLは1週間と1日。その2はzroot/ROOTで、再帰的に取得「せず」、TTLは1分。\nという実行例。\n# zfsnap snapshot -sSvzn -a1w1d -r zroot/usr -R -a1M zroot/ROOT /sbin/zfs snapshot -r zroot/usr@2018-12-01_22.33.00-1w1d /sbin/zfs snapshot zroot/ROOT@2018-12-01_22.33.00-1M よさそうなのでテスト実行オプションを省いて本番実行すると;\n# zfsnap snapshot -sSvz -a1w1d -r zroot/usr -R -a1M zroot/ROOT /sbin/zfs snapshot -r zroot/usr@2018-12-01_22.34.00-1w1d ... DONE /sbin/zfs snapshot zroot/ROOT@2018-12-01_22.34.00-1M ... DONE zfs listで結果を確認。zroot/usrにのみ配下にもスナップショットが出来ている。\n$ zfs list -t snapshot | grep \u0026#39;2018-12-01\u0026#39;; zroot/ROOT@2018-12-01_22.34.00-1M 0 - 88K - zroot/usr@2018-12-01_22.34.00-1w1d 0 - 88K - zroot/usr/home@2018-12-01_22.34.00-1w1d 0 - 5.97M - zroot/usr/ports@2018-12-01_22.34.00-1w1d 0 - 88K - zroot/usr/src@2018-12-01_22.34.00-1w1d 0 - 88K - では削除のほうも。\nzroot/ROOT、zroot/usr配下のTTL切れsnapshotを削除\nただしzroot/ROOTは非再帰的、zroot/usrは再帰的に。\nテスト実行。\n# zfsnap destroy -sSvn -R zroot/ROOT -r zroot/usr /sbin/zfs destroy zroot/ROOT@2018-12-01_22.34.00-1M 期限切れはzroot/ROOT@2018-12-01_22.34.00-1Mのみ。\nじゃ、それで本番実行\n# zfsnap destroy -sSv -R zroot/ROOT -r zroot/usr /sbin/zfs destroy zroot/ROOT@2018-12-01_22.34.00-1M ... DONE 以上。\n","permalink":"https://nobwak.github.io/posts/2018-12-01-zfszpool_%E3%82%89%E3%81%8F%E3%82%89%E3%81%8F%E3%82%B9%E3%83%8A%E3%83%83%E3%83%97%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88zfsnap2/","summary":"zfsは本当に本当に便利で助かるのだが、それでも面倒なことはある。 私にとって面倒なのは、スナップショット作成とスナップショットの差分転送であ","title":"[zfs][zpool] らくらくスナップショットzfsnap2"},{"content":"我が家のNASサーバーはFreeBSDの入ったHP microserverである。\nHP microserverにはHDDを4つ入れることができる。\nたいへん便利なのだが、HDDが4つとも24時間動きっぱなしというのは精神衛生上、よろしくない。\n実は、HDD4つのうちメインで使っているのはOSの入っているものと、Samba共有しているものの2つだけで、残りの2つはバックアップ用である。\n少なくとも、残りの2本はバックアップを取得するときだけ動いてくれればよいので、それ以外の間は、HDD内円盤の回転を止めておきたい（スピンダウン）。\nしかしSamba共有しているもの、バックアップ用のHDD（要するにOSの入っているHDD）以外はすべてzfsのzpoolを構成しているものである。\n気軽にスピンダウンしてしまってよいものだろうか。\nというのが調査を始めたきっかけである。\nああ、それと、頻繁に止めたり動かしたりすることがHDDに悪い、というのは重々承知の上。\n結論（camcontrol standbyしろ） 結論から言うと、camcontrolでディスクを止めろ。\nディスク停止には、\u0026ldquo;standby\u0026quot;で。\u0026ldquo;idle\u0026quot;はやめておけ。\nATAデバイスのモード ATAデバイスには4つのPower Modeがあり、条件によりそれぞれを行き来する。\n Active Idle Standby Sleep  Activeモードは、通常のデータのやり取りができる状態のこと。\nそれ以外は、Idle \u0026gt; Standby \u0026gt; Sleep の順に消費電力が下がり、反応速度も遅くなる。\n詳細は以下書類（PDF注意）の4.18.3 Power modesを参照されたし。\nhttp://www.t13.org/Documents/UploadedDocuments/docs2007/e07163r2-Comments_on_ATA8-ACS_revision_4a.pdf\nこれを踏まえて、任意のタイミング、あるいは、一定時間アクセスがないタイミングでIdle/Standby/Sleepに遷移させられれば目的が達成できる。\nFreeBSDにおいて、Power modeの遷移にはcamcontrolコマンドを使う。\nしかしその前に、zfs/zpoolで使えるPower Modeを調べねばならない。\nzfsにはStandby FreeBSD Forumにあるcamcontrol standby weirdnessというスレッドを見ると、以下のような記述がある。要するにStandbyを使えと。Idleだとzfsは当該ディスクをlost/defect/detachedと判断し、zpoolはdegradedになるか、unavailableになるという。\n First of all: ZFS is fine with disks that go into STANDBY (accessing a zpool with disks in STANDBY will wake them up and ZFS will wait for it). ZFS cannot handle disks that are in IDLE mode (it considers the disks lost/defect/detached and the zpool will go degraded or even unavailable).\nhttps://forums.freebsd.org/threads/camcontrol-standby-weirdness.59296/#post-340121\n 自分で試す気にはならないので、そのまま受け取る。\ncamcontrolによるstabdby操作 再びFreeBSD Forum。[AHCI] Spinning down ada(4) disksというスレッドの以下のポストを参照\nhttps://forums.freebsd.org/threads/ahci-spinning-down-ada-4-disks.8841/page-2#post-98640\ncamcontrol standby adaXとすればよい。\nまたcamcontrol standby adaX -T sssとすれば、ただちにstandbyモードに移行し、その後もsss秒、アクセスがなければstandbyモードに移行することができる。\n以下なら/dev/ada3をすぐにstandbyモードに移行させるとともに、20分の間アクセスがなければやはりstandbyモードに遷移するようタイマー設定している。今すぐはstandbyモードにしなくてもいいけど、タイマーだけ設定したい、という方法はないみたいだ。\n# camcontrol standby ada3 -T 12000 しかし上記のコマンドを実行したとしても、応答はない。なしのつぶてである。\nstandbyモードに移ったのか。かくなる上はHDDの回転数はいかほどか、耳を澄ますほかはない。\nそんなご無体な、とgoogle先生に訴えたところ、FreeNASのフォーラムに以下のポストを発見。\nSpinning Down your Drives and Checking Power States. (New Script)\n上記にあるスクリプトを使えば、power modeを知ることができる。\n本記事の末尾に転載しておく。\nget_drive_status.shとして保存しておいた。\n実行してみると;\n$ sudo drivestatus.sh ada0: FF ada0: Running ada1: FF ada1: Running ada2: FF ada2: Running ada3: FF ada3: Running camcontrolでstandbyにしておいて再実行。\n$ sudo drivestatus.sh ada0: FF ada0: Running ada1: 00 ada1: Standby ada2: 00 ada2: Standby ada3: 00 ada3: Standby /dev/ada0はOSのあるHDDだからActiveですな。\n運用方法（なにかが変） よしこれで解決。\nと思ったのだが、タイマー満了してもpower modeがstandbyに移らないのである。\nその割に、そのディスクのディレクトリにアクセスすると、ファイル一覧の表示に待たされたりするのである。\n先に引用した彼も同じことに悩んでいる。\n But, then, when the disk is idle for \u0026gt; 1800sec (monitor with \u0026lsquo;zpool iostat 60\u0026rsquo;), it will not spin down. Huh?\nhttps://forums.freebsd.org/threads/camcontrol-standby-weirdness.59296/#post-339820\n この彼は、zpool iostat でディスクへの読み書きをモニターできるので、何分かアクセスがなければidleモードに移すスクリプトを書いた、と言っている。\n常駐スクリプトを運用するのが面倒なので、cronジョブでstandbyさせるようにした。\n結果 ワットチェッカーなんてものは持っていないので、単純に温度で確認した。\n以下がそのグラフ。\nある日を境に、（OSのある/dev/ada0を除いて）温度が劇的に下がっていて、現時点ではまあ満足。\ntempereture\npower mode確認スクリプト #!/bin/bash # # Created by: Motorahead # Date: 02/19/2016 # Checks For Running Status of Connected ADA Devices # Look for Connected Devices DEVICELIST=($( camcontrol devlist | grep -o \u0026#39;ada[0-9]\u0026#39; )) # Checks Drive Status, but only outputs relative field $10 STATUS(){ camcontrol cmd ${LIST} -a \u0026#34;E5 00 00 00 00 00 00 00 00 00 00 00\u0026#34; -r - | awk \u0026#39;{print $10}\u0026#39; } # Loop through each device found in ${DEVICELIST} for LIST in ${DEVICELIST[@]}; do  echo -n \u0026#34;${LIST}: \u0026#34;  STATUS # If the Output is 00, then the drive is in Standby. If it\u0026#39;s FF, then it\u0026#39;s active.  if [[ \u0026#34;$(STATUS)\u0026#34; == \u0026#34;FF\u0026#34; ]]; then  echo \u0026#34;${LIST}: Running\u0026#34;  elif [[ \u0026#34;$(STATUS)\u0026#34; -eq \u0026#34;00\u0026#34; ]]; then  echo \u0026#34;${LIST}: Standby\u0026#34;  else  echo \u0026#34;${LIST} is in a unrecognized state.\u0026#34;  fi done ","permalink":"https://nobwak.github.io/posts/2018-11-18-zfszpoolzpool%E3%81%AEhdd%E3%82%92%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%90%E3%82%A4%E3%83%A2%E3%83%BC%E3%83%89%E3%81%AB%E3%81%97%E3%81%A6%E6%B6%88%E8%B2%BB%E9%9B%BB%E5%8A%9B%E3%82%92%E6%B8%9B%E3%82%89%E3%81%9D%E3%81%86/","summary":"我が家のNASサーバーはFreeBSDの入ったHP microserverである。 HP microserverにはHDDを4つ入れることができる。","title":"[ZFS][zpool]zpoolのHDDをスタンバイモードにして消費電力を減らそう"},{"content":"zpoolを容量の多い別HDDに移したのでメモ。\n一度、同じようなことはやっているが、時間も経っているので。\n最初に書いておくが移行元でまずscrubしておくこと。\n流れとしては以下の通り。\n 移行元HDD  scrubしておく snapshot   移行先HDD  GPTでzfsのパーティションを作成 zpool作成   zfs send, recvで丸々コピー  以下、実作業に触れる前に補足。\n方針についての補足 なぜmirrorにしないのか 上記の方法のほかには、追加のディスクをmirrorとしてzpoolに追加し、resilveringが終わったら旧ディスクを外してexpandという手がある。\nが、その手は採らない。\n実は、zpool statusをする都度、以下のメッセージが表示されていた。\n旧ディスクは512Bセクタになっていると文句を言っているのである。\nディスクを交換するか、新Poolに移せ、と。\n pool: vault state: ONLINE status: One or more devices are configured to use a non-native block size. Expect reduced performance. action: Replace affected devices with devices that support the configured block size, or migrate data to a properly configured pool. scan: scrub repaired 0 in 8h3m with 0 errors on Sun Nov 4 04:16:39 2018 config: NAME STATE READ WRITE CKSUM vault ONLINE 0 0 0 ada1 ONLINE 0 0 0 block size: 512B configured, 4096B native 512Bセクタのpoolにmirrorを追加したら、やっぱり512Bになるんではと心配になったので、mirrorではなく新規ディスクの新規Poolに移す。\nなぜディスクをまるっと使わずgptでパーティションを切るのか zpoolは、わざわざgptパーティションにしなくても、ディスクをまるっと使ってzpoolに指定できる。\nできるのだが、/dev/ada2なんて名前よりも、gptラベルでpoolを作成したいのである。\nこれの有利な点は、例えば当該ディスクの物理的な位置で名前を付けることができる点である。\n具体的には、slot_1とか名前を付けておくと、ディスク交換の時に楽。\n幸いにもFreeBSDにおいては、gptパーティションを切ってもディスクをそのまま使っても、いずれもパフォーマンスに違いはない。\nそれならgptにしましょう。\nhttps://www.freebsd.org/doc/handbook/zfs-zpool.html\nThere is no performance penalty on FreeBSD when using a partition rather than a whole disk.\n(2018/11/09)\nではさっそく作業を。\n実作業（移行元ディスクの準備） scrubをしておく。 zpool scrub で。\nかなり時間がかかるので覚悟しておくように。\nなおscrubは最低3か月に一回が推奨\nhttps://www.freebsd.org/doc/handbook/zfs-term.html#zfs-term-scrub\nrecommended at least once every three months\n作業直前にsnapshot。 pool内に複数のディレクトリがある場合、最上階層でsnapshot -r（recursive）すればよい。\nたとえばvaultというpoolにchamber, itunesがある場合に;\nvault vault/chamber vault/chamber@20170503 vault/itunes vault/itunes@20170503 ※zfs list -t allの出力を一部削除したもの\nzfs snapshot vault@20181109とすれば;\nvault vault@20181109 vault/chamber vault/chamber@20180503 vault/chamber@20181109 vault/itunes vault/itunes@20180503 vault/itunes@20181109 ※zfs list -t allの出力を一部削除したもの\nとなる。いちいち各ディレクトリ配下でコマンドを叩かなくてよい。\n移行先作業 GPTパーティションの作成 以下のようなディスク\nada3 at ahcich3 bus 0 scbus3 target 0 lun 0 ada3: ACS-3 ATA SATA 3.x device ada3: Serial Number WD-WCC7K3PU64NE ada3: 300.000MB/s transfers (SATA 2.x, UDMA6, PIO 8192bytes) ada3: Command Queueing enabled ada3: 3815447MB (7814037168 512 byte sectors) GPTスキームをcreateし、全領域をfreebsd-zfsに割り当てる。\nこのとき、-lオプションでラベルを付ける。\n同じくgpart showに-lオプションを付ければ名前を確認できる。\n# gpart create -s GPT ada3 ada3 created # gpart add -l slot_4 -t freebsd-zfs /dev/ada3 ada3p1 added $ gpart show ada3 40 7814037088 ada3 GPT (3.6T) 40 7814037088 1 freebsd-zfs (3.6T) $ gpart show -l /dev/ada3 40 7814037088 ada3 GPT (3.6T) 40 7814037088 1 slot_4 (3.6T) zpoolの作成 /dev/ada3ではなくGPTラベルで指定する。\nGPTラベルで指定するときは、gpt/＜GPTラベル＞というように指定する。\n# zpool create warehouse gpt/slot_4 # zpool status warehouse pool: warehouse state: ONLINE scan: none requested config: NAME STATE READ WRITE CKSUM warehouse ONLINE 0 0 0 gpt/slot_4 ONLINE 0 0 0 プロパティの変更 zfsを作成する前に。\n圧縮モードをlz4にする。lz4はCPU負荷の割には非常に効率が良いので積極的に有効にしたい。\nまた、atime（アクセスタイムの記録）もoffに。これがonだと差分snapshotが失敗するから、というのが一つと、これをoffにするとパフォーマンスが上がる（can result in significant performance gains）から。\nzfs get \u0026lt;プロパティ名\u0026gt; で現在の値を取得。\nzfs set \u0026lt;プロパティ名\u0026gt;=\u0026lt;値\u0026gt; で値のセット。\n圧縮モードのプロパティ名はcompression、atimeはatime。\n$ zfs get compression warehouse NAME PROPERTY VALUE SOURCE warehouse compression off default $ zfs get atime warehouse NAME PROPERTY VALUE SOURCE warehouse atime on default # zfs set compression=lz4 warehouse # zfs set atime=off warehouse $ zfs get compression warehouse NAME PROPERTY VALUE SOURCE warehouse compression lz4 local $ zfs get atime warehouse NAME PROPERTY VALUE SOURCE warehouse atime off local ディレクトリの用意とsend/recv # zfs create warehouse/itunes # zfs create warehouse/chamber このとき、勝手にマウントされないようにすべきだった。-uを付ければよかったかな。\nいずれにせよzfs set mountpointで後から変えられる。\nsendに-Rを付けると、子孫やスナップショットもまとめてsendされる。\n# zfs send -R vault/chamber@20181109 | zfs receive warehouse/chamber # zfs send -R vault/itunes@20181109 | zfs receive warehouse/itunes かかった時間、容量は以下の通り。うーむ。ちょっとかかったかな。\n 991GiB 3:09:00 [89.5MiB/s] 1.10TiB 3:58:24 [80.3MiB/s] このとき適当にhtopを叩いた結果。CPU負荷はそんなんでもないので、ボトルネックは別のところにあるように思われる。\n1 [||||||||||||||||||||| 47.6%] Tasks: 43, 0 thr; 2 running 2 [||||||||||||||||| 37.7%] Load average: 0.91 1.77 1.86 Mem[||||||||||||||||||||||||||||||||642M/1.84G] Uptime: 12:03:30 Swp[||||||||| 176M/907M] なおCPUはAMDのTurionである。\ncompression=lz4の結果は.\nプロパティused（HDD上の容量）とlogicalused（圧縮前容量）で調べられる。\nwarehouse used 2.00T - warehouse logicalused 2.02T - 本来なら2.02Tのところ、2.00Tで済んでる。\nこれで引っ越し完了。\n以上\n","permalink":"https://nobwak.github.io/posts/2018-11-18-zfszpool_zfs%E3%81%AE%E5%88%A5%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E3%81%B8%E3%81%AE%E7%A7%BB%E8%A1%8C/","summary":"zpoolを容量の多い別HDDに移したのでメモ。 一度、同じようなことはやっているが、時間も経っているので。 最初に書いておくが移行元でまずsc","title":"[zfs][zpool] zfsの別ディスクへの移行"},{"content":"Nano Pi Neo2にOpen JTalkでしゃべらせたのでメモ。\nOpen Jtalkは「入力された日本語テキストに基づいて自由な音声を生成するHMMテキスト音声合成システム」とのこと。\nhttp://open-jtalk.sp.nitech.ac.jp/\nopen-jtalk、辞書をインストールする。\nopen-jtalkをインストールすれば辞書もついてくる。\n$ apt search open-jtalk ソート中... 完了 全文検索... 完了 open-jtalk/artful 1.10-1 amd64 日本語音声合成システム open-jtalk-mecab-naist-jdic/artful,artful,now 1.10-1 all NAIST Japanese Dictionary for Open JTalk $ sudo apt-get install open-jtalk パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 提案パッケージ: hts-voice-nitech-jp-atr503-m001 以下のパッケージが新たにインストールされます: open-jtalk　open-jtalk-mecab-naist-jdic (略) 提案パッケージであるhts-voice-nitech-jp-atr503-m001も。\nこれは音声データ。男性の声。\nhts-voice-nitech-jp-atr503-m001 - Japanese male voice data for Open JTalk open-jtalkのコマンドはopen_jtalk（間はアンダースコア）として、open_jtalkの辞書は/var/lib/mecab/dic/open-jtalk/naist-jdicに、音声データは/usr/share/hts-voice/にインストールされる。\n「こんにちは」と書いたvoice.txtを作り、open_jtalkに食わす。\n$ cat ./voice.txt こんにちは $ open_jtalk -m /usr/share/hts-voice/nitech-jp-atr503-m001/nitech_jp_atr503_m001.htsvoice -x /var/lib/mecab/dic/open-jtalk/naist-jdic -ow test.wav ./voice.txt 喋ってくれるはず。\nやはり女性の声のほうが良いので、名工大のMMDAgentを使う。\nhttp://share.udialogue.org/meissen/login.htm\n2018/3/21時点で1.7が最新\nダウンロードして展開し、/usr/share/hts-voice/に格納する。\n使うのは中身の「mei」ディレクトリ配下のみ。\nMeiさんは名工大キャラクターだそうな。\n$ wget https://sourceforge.net/projects/mmdagent/files/MMDAgent\\_Example/MMDAgent\\_Example-1.7/MMDAgent_Example-1.7.zip $ $ unzip ./MMDAgent_Example-1.7.zip $ sudo cp -R ./MMDAgent_Example-1.7/Voice/mei /usr/share/hts-voice/ 声には以下の5種類がある。実際に発声させる際に選ぶ。\nmei_angry.htsvoice mei_happy.htsvoice mei_sad.htsvoice\nmei_bashful.htsvoice mei_normal.htsvoice\n以下のスクリプトを用意する。\nどこかのサイトから持ってきたんですが、どのサイトからだったか忘れてしもうた…。\nこれをjtalk.pyとして保存する。1行目は環境に応じて変えること。\nhtsvoiceは上記の通り喜怒哀通常から選べる。\nspeedも選べる。\nこのあたりは試行錯誤。\nあとはこれをimportして使う。\n#!/usr/bin/python #coding: utf-8 import subprocess from datetime import datetime  def jtalk(t):  open_jtalk=[\u0026#39;/usr/bin/open_jtalk\u0026#39;]  mech=[\u0026#39;-x\u0026#39;,\u0026#39;/var/lib/mecab/dic/open-jtalk/naist-jdic\u0026#39;]  htsvoice=[\u0026#39;-m\u0026#39;,\u0026#39;/usr/share/hts-voice/mei/mei_normal.htsvoice\u0026#39;]  speed=[\u0026#39;-r\u0026#39;,\u0026#39;1.0\u0026#39;]  outwav=[\u0026#39;-ow\u0026#39;,\u0026#39;/tmp/open_jtalk.wav\u0026#39;]  cmd=open_jtalk+mech+htsvoice+speed+outwav  c = subprocess.Popen(cmd,stdin=subprocess.PIPE)  c.stdin.write(t.encode(\u0026#39;utf-8\u0026#39;))  c.stdin.close()  c.wait()  aplay = [\u0026#39;aplay\u0026#39;,\u0026#39;-q\u0026#39;,\u0026#39;/tmp/open_jtalk.wav\u0026#39;]  wr = subprocess.Popen(aplay)  def say_datetime():  d = datetime.now()  text = \u0026#39;%s月%s日、%s時%s分%s秒\u0026#39; % (d.month, d.day, d.hour, d.minute, d.second)  jtalk(text)  if __name__ == \u0026#39;__main__\u0026#39;:  say_datetime() 先ほどのファイルをimportして、jtalk.jtalk(string)で、発話させたい文章を渡せばOK。\n#!/usr/bin/python #coding: utf-8 import jtalk  jtalk.jtalk(\u0026#39;何か話してください\u0026#39;) さあテストである。\n青空文庫「注文の多い料理店」を朗読させてみる。\n「新字新仮名」版をダウンロード。\nhttp://www.aozora.gr.jp/cards/000081/card43754.html\nそのままではOpen Jtalkに渡せないので、以下の変更を加える。\n 文字コードをShift-JISからUTF-8へ ルビを削除（正規表現パターンは\u0026quot;《.*?》\u0026quot;） ルビの個所を示す区切り記号を削除（\u0026quot;｜\u0026quot;） 構成を示す注釈を削る（正規表現パターンは\u0026quot;\\［.*?\\］\u0026quot;） 改行コードをCR+LFをLFのみに。（\\rを削る）  できれば以下も。\n 行頭字下げ、要するに行頭の全角スペースを削除（正規表現パターンは\u0026quot;^　\u0026quot;） セリフのカギかっこを削る。行頭のものだけでよい。（正規表現パターンは\u0026quot;^「\u0026quot;）  以下までできれば完璧\n 改行をいったん全て削り、句点のあとに改行コード（\\n）を挿入  neko.txtとでも保存し、以下のPythonスクリプトを実行。\n#!/usr/bin/python  import jtalk  for line in open(\u0026#39;neko.txt\u0026#39;,\u0026#39;r\u0026#39;):  print(line)  jtalk.jtalk(line) こんな感じ。\n試してみるとわかるが、漢字の読み方が変だったり（山猫軒を「やまねこのき」と読んだり）、読めない漢字があったりする。\nそりゃまあ仕方ないよね。\nそれはさておき。\n十分なスペックがあるときに複数行の文章を読ませると、発話が終わっていないのに次の行の処理を始めてしまって困ることがある。\nそういうときは発話の終了を待つよう、wait()を入れればよい。\n関数jtalk()の最後に一行追加。\ndef jtalk(t):  open_jtalk=[\u0026#39;/usr/bin/open_jtalk\u0026#39;]  mech=[\u0026#39;-x\u0026#39;,\u0026#39;/var/lib/mecab/dic/open-jtalk/naist-jdic\u0026#39;]  htsvoice=[\u0026#39;-m\u0026#39;,\u0026#39;/usr/share/hts-voice/mei/mei_normal.htsvoice\u0026#39;]  speed=[\u0026#39;-r\u0026#39;,\u0026#39;1.0\u0026#39;]  outwav=[\u0026#39;-ow\u0026#39;,\u0026#39;/tmp/open_jtalk.wav\u0026#39;]  cmd=open_jtalk+mech+htsvoice+speed+outwav  c = subprocess.Popen(cmd,stdin=subprocess.PIPE)  c.stdin.write(t.encode(\u0026#39;utf-8\u0026#39;))  c.stdin.close()  c.wait()  aplay = [\u0026#39;aplay\u0026#39;,\u0026#39;-q\u0026#39;,\u0026#39;/tmp/open_jtalk.wav\u0026#39;]  wr = subprocess.Popen(aplay)  wr.wait() 参考サイト\nRaspberry piで日本語音声合成(Open JTalk)を試してみる。 https://qiita.com/lutecia16v/items/8d220885082e40ace252#%E5%A5%B3%E6%80%A7%E3%81%AE%E5%A3%B0%E3%81%AB%E5%A4%89%E3%81%88%E3%81%A6%E3%81%BF%E3%82%8B\n","permalink":"https://nobwak.github.io/posts/2018-03-21-linux%E3%81%AB%E6%B3%A8%E6%96%87%E3%81%AE%E5%A4%9A%E3%81%84%E6%96%99%E7%90%86%E5%BA%97%E3%82%92%E3%81%97%E3%82%83%E3%81%B9%E3%82%89%E3%81%9D%E3%81%86open_jtalk/","summary":"Nano Pi Neo2にOpen JTalkでしゃべらせたのでメモ。 Open Jtalkは「入力された日本語テキストに基づいて自由な音声を生成するHMMテキスト","title":"Linuxに注文の多い料理店をしゃべらそう（Open Jtalk）"},{"content":"Nano Pi Neo2にスピーカーを繋いだのだが、ノイズが入ってたまらない。\nそこでUSBスピーカーから音を出すようにしてみる。\nUSBスピーカーはこれ。USBケーブル一本でいいので重宝している。\nまずalsamixerで音量を確かめておく。\nalsamixer\n次。\naplayコマンドを使って、音声出力のハードウェアデバイスのcardとdevice番号を調べる。\n-helpオプションで使い方を。\n$ aplay -help Usage: aplay [OPTION]... [FILE]... -h, -help help -version print current version -l, -list-devices list all soundcards and digital audio devices -L, -list-pcms list device names （略） -lオプションで一覧を得る。\n$ aplay -l *\\*\\\\*\\* List of PLAYBACK Hardware Devices \\*\\*** card 0: Codec [H3 Audio Codec], device 0: CDC PCM Codec-0 [] Subdevices: 1/1 Subdevice #0: subdevice #0 card 1: allwinnerhdmi [allwinner,hdmi], device 0: 1c22800.i2s-i2s-hifi i2s-hifi-0 [] Subdevices: 1/1 Subdevice #0: subdevice #0 card 2: MicroII [Audio Advantage MicroII], device 0: USB Audio [USB Audio] Subdevices: 1/1 Subdevice #0: subdevice #0 USBスピーカーだから最後のものが該当。\nMicroIIということがわかる。\nspeaker-testコマンドでテストする。\n-helpで確認するのが定石\n$ speaker-test -help speaker-test 1.1.0 Usage: speaker-test [OPTION]... -h,-help help -D,-device playback device -r,-rate stream rate in Hz -c,-channels count of channels in stream -f,-frequency sine wave frequency in Hz -F,-format sample format -b,-buffer ring buffer size in us -p,-period period size in us -P,-nperiods number of periods -t,-test pink=use pink noise, sine=use sine wave, wav=WAV file -l,-nloops specify number of loops to test, 0 = infinite -s,-speaker single speaker test. Values 1=Left, 2=right, etc -w,-wavfile Use the given WAV file as a test sound -W,-wavdir Specify the directory containing WAV files -m,-chmap Specify the channel map to override -X,-force-frequency force frequencies outside the 30-8000hz range -S,-scale Scale of generated test tones in percent (default=80) Recognized sample formats are: S8 S16\\_LE S16\\_BE FLOAT\\_LE S32\\_LE S32_BE -Dオプションで出力先を選ぶ。\n出力先の指定はデバイスネームだからさっきのaplayコマンドで再チェック\n$ aplay -L|grep MicroII sysdefault:CARD=MicroII Audio Advantage MicroII, USB Audio front:CARD=MicroII,DEV=0 Audio Advantage MicroII, USB Audio surround21:CARD=MicroII,DEV=0 Audio Advantage MicroII, USB Audio surround40:CARD=MicroII,DEV=0 Audio Advantage MicroII, USB Audio surround41:CARD=MicroII,DEV=0 Audio Advantage MicroII, USB Audio surround50:CARD=MicroII,DEV=0 Audio Advantage MicroII, USB Audio surround51:CARD=MicroII,DEV=0 Audio Advantage MicroII, USB Audio surround71:CARD=MicroII,DEV=0 Audio Advantage MicroII, USB Audio iec958:CARD=MicroII,DEV=0 Audio Advantage MicroII, USB Audio dmix:CARD=MicroII,DEV=0 Audio Advantage MicroII, USB Audio dsnoop:CARD=MicroII,DEV=0 Audio Advantage MicroII, USB Audio hw:CARD=MicroII,DEV=0 Audio Advantage MicroII, USB Audio plughw:CARD=MicroII,DEV=0 Audio Advantage MicroII, USB Audio ということで、hw:MicroIIで試す。\n$ speaker-test -Dhw:MicroII speaker-test 1.1.0 Playback device is hw:MicroII Stream parameters are 48000Hz, S16_LE, 1 channels Using 16 octaves of pink noise Channels count (1) not available for playbacks: Invalid argument Setting of hwparams failed: Invalid argument 鳴らない。\nこの辺を読み、hwではなくplughwにしてみる。\nhttp://www.volkerschatz.com/noise/alsa.html\n$ speaker-test -Dplughw:MicroII speaker-test 1.1.0 Playback device is plughw:MicroII Stream parameters are 48000Hz, S16_LE, 1 channels Using 16 octaves of pink noise Rate set to 48000Hz (requested 48000Hz) Buffer size range from 96 to 262144 Period size range from 48 to 131072 Using max buffer size 262144 Periods = 4 was set period_size = 65536 was set buffer_size = 262144 0 - Front Left Time per period = 2.769702 0 - Front Left ^CTime per period = 2.426893 鳴った。\nチャンネル2つにしてみると\n$ speaker-test -c2 -Dplughw:MicroII speaker-test 1.1.0 Playback device is plughw:MicroII Stream parameters are 48000Hz, S16_LE, 2 channels Using 16 octaves of pink noise Rate set to 48000Hz (requested 48000Hz) Buffer size range from 96 to 262144 Period size range from 48 to 131072 Using max buffer size 262144 Periods = 4 was set period_size = 65536 was set buffer_size = 262144 0 - Front Left 1 - Front Right ^CTime per period = 3.587277 左右で鳴る。\nさらにaplayで試す。\n$ aplay /usr/share/sounds/alsa/Front_Center.wav -D plughw:MicroII Playing WAVE -/usr/share/sounds/alsa/Front_Center.wav\u0026#39; : Signed 16 bit Little Endian, Rate 48000 Hz, Mono よさそう。\nこれでmpg123などを使えば、mp3ファイルなども鳴らすことができる。\nmpg123でデバイスを指定するには-aオプションで。\nmpg123 -q -a plughw:MicroII XXXX.mp3 ためしにデバイスにdefaultを指定すると文字通り標準設定のデバイスから出力を試みる。\nUSBスピーカーはならないはず。\n$ aplay /usr/share/sounds/alsa/Front_Center.wav -D default $ デフォルトの出力先を変えるには、以下の手順に沿えばよい。\nhttps://www.alsa-project.org/main/index.php/Setting_the_default_device\n","permalink":"https://nobwak.github.io/posts/2018-03-21-linux%E3%81%A7%E9%9F%B3%E5%A3%B0%E3%81%AE%E5%87%BA%E5%8A%9B%E5%85%88%E3%82%92usb%E3%82%B9%E3%83%94%E3%83%BC%E3%82%AB%E3%83%BC%E3%81%AB%E3%81%99%E3%82%8B/","summary":"Nano Pi Neo2にスピーカーを繋いだのだが、ノイズが入ってたまらない。 そこでUSBスピーカーから音を出すようにしてみる。 USBスピーカーはこれ。","title":"Linuxで音声の出力先をUSBスピーカーにする"},{"content":"メモ。\njailのpkg操作は、いちいちそのjailの中に入らなくてもpkg -j ＜jail名 or jail ID＞ \u0026hellip;というように-jオプションを付与すればできる。\nしかしjailの指定は、個々に行う必要がある。\nたとえばpkg -j * upgradeというように、ワイルドカードを使うようなことは、もってのほかのようである。\njailなんてどんどん増えていくのに、いちいち-jで指定していくのもなあ。\n仕方ないんで、やっつけでパイプを繋いで実現。\njls -N|tail -n +2|cut -f2 -d\u0026#34; \u0026#34;|xargs -I{} sudo pkg -j {} upgrade 以上\n","permalink":"https://nobwak.github.io/posts/2016-08-08-%E3%83%A1%E3%83%A2freebsd_%E8%A4%87%E6%95%B0jail%E3%81%AEpkg_upgrade%E3%82%92%E4%B8%80%E6%B0%97%E3%81%AB%E6%B8%88%E3%81%BE%E3%81%9B%E3%81%9F%E3%81%84/","summary":"メモ。 jailのpkg操作は、いちいちそのjailの中に入らなくてもpkg -j ＜jail名 or jail ID＞ \u0026hellip;というように-jオプション","title":"[メモ][FreeBSD] 複数Jailのpkg upgradeを一気に済ませたい"},{"content":"MattermostはSlackのクローンであるが、incomingWebhookへのポストだけは、どうも違いがあるようだ。\n以下にSlack/Mattermostそれぞれでの実例を示す。\nまずmattermost\n# mattermost  import requests  incomWebHook = \u0026#39;http://192.168.10.1/hooks/xxxxx\u0026#39; msg = \u0026#39;test message\u0026#39; icon_url = \u0026#39;http://192.168.10.10/graphix/robot.png\u0026#39; username = \u0026#39;bot\u0026#39;  def sendMsg(incomWebHook, icon_url, username, msg):  payload = {  \u0026#39;text\u0026#39;: msg,  \u0026#39;icon_url\u0026#39;: icon_url,  \u0026#39;username\u0026#39;: username}   r = requests.post(  incomWebHook,  json=payload)   return r  r = sendMsg(incomWebHook, icon_url, username, msg) Slack\n# slack import requests  incomWebHook =\u0026#34;https://slack.com/api/chat.postMessage\u0026#34; msg = \u0026#39;test message\u0026#39; username = \u0026#39;bot\u0026#39; token = \u0026#34;xoxb-xxxx-xxxx\u0026#34;  def sendMsg(incomWebHook, token, username, msg):  payload_dic = {  \u0026#34;token\u0026#34;: token  \u0026#34;type\u0026#34;: \u0026#34;message\u0026#34;,  \u0026#34;channel\u0026#34;: \u0026#34;#general\u0026#34;,  \u0026#34;text\u0026#34;: msg,  \u0026#34;username\u0026#34;: username,  \u0026#34;icon_emoji\u0026#34;: \u0026#34;:bird:\u0026#34;,  }   headers = {  \u0026#39;Content-type\u0026#39;: \u0026#39;application/json\u0026#39;,  \u0026#39;Accept\u0026#39;: \u0026#39;text/plain\u0026#39;  }   r = requests.post(  incomWebHook,  params=payload_dic,  headers=headers)   return r  r = sendMsg(incomWebHook, token, username, msg) ","permalink":"https://nobwak.github.io/posts/2016-06-12-%E3%83%A1%E3%83%A2_slack%E3%81%A8mattermost%E3%81%9D%E3%82%8C%E3%81%9E%E3%82%8C%E3%81%AEincomingwebhook%E3%81%B8%E3%81%AE%E3%83%9D%E3%82%B9%E3%83%88%E6%96%B9%E6%B3%95%E3%81%AE%E9%81%95%E3%81%84/","summary":"MattermostはSlackのクローンであるが、incomingWebhookへのポストだけは、どうも違いがあるようだ。 以下にSlack","title":"[メモ] SlackとMattermostそれぞれのincomingWebhookへのポスト方法の違い"},{"content":"Anacondaは、Pythonのほかに、IPython、Spyder、pandas他便利ライブラリが一式でついてくるお手軽Python環境である。\nしかしAnacondaをWindows xpにインストールしようとすると失敗する。\n具体的には、インストール途中の「メニューを作る」ステップで失敗。\n無視して進めると、C:\\Anaconda3に実行ファイルは揃っているので、「なんだ気のせいか」と安心して起動しようとすると「有効なWin32アプリケーションではありません」という旨のエラーが発生する。\n原因は、最新版がxpに対応していないせい。\n以下から2.2.0をダウンロードし、インストールする。\nhttps://repo.continuum.io/archive/\n念のためファイル名とハッシュ値も残す。\nAnaconda3-2.2.0-Windows-x86.exe\u0026lt;br /\u0026gt; 7c49a4e76e1c383038c4a1e8c4ac506f\nAnaconda-2.2.0-Windows-x86.exe\n32246b48658d4c3faeef425cec64a131\nAnacondaのFAQにしっかり記載がある。\nhttps://docs.continuum.io/anaconda/faq\nHow can I use Anaconda on Windows XP?\nWindows XP is supported on Anaconda versions 2.2 and earlier. Download it from our archive.\n","permalink":"https://nobwak.github.io/posts/2016-06-08-%E3%83%A1%E3%83%A2python_anaconda%E3%82%92windows_xp%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%99%E3%82%8B%E3%81%A8%E5%A4%B1%E6%95%97%E3%81%99%E3%82%8B/","summary":"Anacondaは、Pythonのほかに、IPython、Spyder、pandas他便利ライブラリが一式でついてくるお手軽Python環境","title":"[メモ][Python] AnacondaをWindows xpにインストールしようとすると失敗する"},{"content":"Slack/Mattermost（以降、まとめてSlack）のbotといえばHubotが有名だ。\nHubotはcoffeescriptで書かれているのだが、botのためだけに新しい言語を覚えるのも面倒。\n加えてHubotを動作させるにはnpmが必要。\nちょっとそこまでは…。\nPythonなら普段使いで最初から環境は作ってあるし、楽だし。\nそう思っていろいろと調べてみた。\nSlackのbotに必要なことは？ Slackのbotに必要なのは、端的に以下の二つ。\n Slackからのデータ送信を受ける。 Slackへ何かをする。  1.は、HTTP POSTでやってくるので、POSTを受けることさえできればよい。\n2.は、例えばSlack上で何かの発言をすることだが、こちらはcurl（Pythonならrequests）でも使えば簡単にできる。\nPythonでHTTP POSTを受けるには？ Flaskである。\nFlaskとはごくごく軽量なwebフレームワークである。\n驚くくらい簡単にwebサーバを作ることができる。\nもちろんPOSTを受けるのもすぐにできる。\n以下、説明。\nFlaskのインストール pipでもなんでも、好きなものを使ってインストールせい。\nFlaskのテスト 以下のようなスクリプトを書く。\n適当な名前で保存する。\nflask.pyとかはやめようね。\n#!/usr/local/bin/python  from flask import Flask  app = Flask(__name__)  @app.route(\u0026#39;/\u0026#39;) def welcome():  html = \u0026#39;\u0026lt;html\u0026gt;\u0026lt;title\u0026gt;welcome\u0026lt;/title\u0026gt;\u0026#39;  html = html + \u0026#39;\u0026lt;body\u0026gt;welcome\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;  return html  if __name__ == \u0026#39;__main__\u0026#39;:  app.debug = True  app.run(host=\u0026#39;0.0.0.0\u0026#39;) 上記のapp.route(\u0026rsquo;/\u0026rsquo;)とは、ルーティング。\nルートディレクトリ（\u0026rsquo;/\u0026rsquo;）へのアクセスがあったら、次のdef welcome()が（デコレートによって）呼ばれる、ということである。\n上記の場合、welcomeと表示するhtmlが返る。\napp.debug = Trueについては後述。\napp.run(host=\u0026lsquo;0.0.0.0\u0026rsquo;)のhost=\u0026hellip;の記述により、サーバを外部に公開することになる。\nテストスクリプトの実行 $ python ./flasktest.py  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)  * Restarting with stat  * Debugger is active!  * Debugger pin code: 213-546-048 localhostのポート5000でサーバが立ち上がったと分かる。\nブラウザでアクセスして「welcome」と表示されればよい。\nところで、app.debut = Trueだが、スクリプトを書き換えると、自動的に再読み込みをしてくれる。\n実際のログは以下。\n* Detected change in \u0026#39;/usr/home/doe/py/flasktest.py\u0026#39;, reloading  * Restarting with stat  * Debugger is active! 激烈に便利な機能なので、開発中は有効にしておくこと。\nSlackからのPOSTを受ける。 先ほどのスクリプト冒頭のimportを以下のように変更。\nfrom flask import Flask, request さらに以下を追加。\n@app.route(\u0026#39;/matter\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) def post():  print request.form 上記のようにしておいて、Slack側のOutgoing Webhookで、呼び出すURLにhttp://＜あなたのサーバのアドレス＞:5000/matterを指定する。\nSlack側からwebhookを呼び出してみると、POSTされた内容がログに表示されるはず。\nなお、def post()が何も返さないのでエラーは出るが気にしない。\n以下が例。\nImmutableMultiDict([(\u0026#39;user_id\u0026#39;, u\u0026#39;xxxxx\u0026#39;), (\u0026#39;channel_id\u0026#39;, u\u0026#39;xxxxx\u0026#39;), (\u0026#39;timestamp\u0026#39;, u\u0026#39;1414562326\u0026#39;), (\u0026#39;team_id\u0026#39;, u\u0026#39;xxxx\u0026#39;), (\u0026#39;trigger_word\u0026#39;, u\u0026#39;test\u0026#39;), (\u0026#39;channel_name\u0026#39;, u\u0026#39;off-topic\u0026#39;), (\u0026#39;token\u0026#39;, u\u0026#39;xxxtokenxxx\u0026#39;), (\u0026#39;text\u0026#39;, u\u0026#39;test\u0026#39;), (\u0026#39;team_domain\u0026#39;, u\u0026#39;xxxx\u0026#39;), (\u0026#39;user_name\u0026#39;, u\u0026#39;xxxx\u0026#39;)]) つまりPOSTの内容はディクショナリになっている。\nSlackへ応答を返そう Slackへ応答を返す場合には、POSTでもらった中にあるtokenが必要である。\n応答文、tokenのディクショナリを作っておいて、それをjsonに変換し、返してやればよい。\nMattermostの場合、tokenのキーは\u0026rsquo;MATTERMOST_TOKEN\u0026rsquo;\n先ほどのスクリプトを最終的に以下のようにする。\n（わざわざjsonをimportしているが、Flaskにもそういう機能がある気がしてならない）\nこれでSlackから通知を受けると、「You said ＜トリガーワード＞」という応答がSlackへ帰る。\n#!/usr/local/bin/python from flask import Flask, request import requests import json app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def welcome(): html = \u0026#39;\u0026lt;html\u0026gt;\u0026lt;title\u0026gt;welcome\u0026lt;/title\u0026gt;\u0026#39; html = html + \u0026#39;\u0026lt;body\u0026gt;welcome\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39; return html @app.route(\u0026#39;/matter\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) def post(): postdic = request.form incomeText = postdic[\u0026#39;text\u0026#39;] token = postdic[\u0026#39;token\u0026#39;] text = \u0026#39;You said \u0026#39; + incomeText payload = { \u0026#39;text\u0026#39;: text, \u0026#39;MATTERMOST_TOKEN\u0026#39;: token} json_payload = json.dumps(payload) return json_payload if __name__ == \u0026#39;__main__\u0026#39;: app.debug = True app.run(host=\u0026#39;0.0.0.0\u0026#39;) あとはどんどん膨らませていけばよい。\n【補遺】slackのoutgoing webhooks slackでのwebhooks設定方法を示す。\nwebでいうと、左下のAppsからBrowse Appsを選び、outgoins WebHooksを探す\nAdd Configurationで設定へ。\nwebhooksを投げる条件を設定する。以下の3つ。\n 指定のチャンネルで発言したら 特定のトリガーワードを発言したら 特定のチャンネルで特定のトリガーワードを発言したら  1.はChannelで、2.はTrigger Word(s)で指定する。\n3の場合には1.2.の両方を指定する。\n上記条件に合致したらwebhooksを投げるURLを「URL(s)」で指定。\nそのときのTokenは記載の通り。\nwebhook\nwebhooksで飛んでくるデータは以下の通り。json「ではない」ことに注意。\ntoken=qFosSxxxxxxxxERh1Jfdy5 team_id=T0009 team_domain=example channel_id=C0000000000 channel_name=test timestamp=1355517523.000005 user_id=U0000000000 user_name=Steve text=googlebot: What is the air-speed velocity of an unladen swallow? trigger_word=googlebot: ","permalink":"https://nobwak.github.io/posts/2016-06-02-slack_mattermost%E3%81%AEbot%E3%82%92python%E3%81%AEflask%E3%81%A7%E4%BD%9C%E3%82%8D%E3%81%86/","summary":"Slack/Mattermost（以降、まとめてSlack）のbotといえばHubotが有名だ。 Hubotはcoffeescriptで書かれ","title":"Slack/MattermostのbotをPythonのFlaskで作ろう"},{"content":"Sambaサーバのセットアップをしているとき、動作確認のために、Windowsから接続することがある。\nこのとき、権限も確認するために、ユーザを変えて接続しようとする。\nしかしWindowsは、ファイルサーバの認証を一回してしまうと、再起動するまで記憶する（たぶん）。\nそれはそれで便利なのだが、検証するとなると障害になる。\nnetコマンドを使えば、再起動なく認証をやり直すことができる。\nコマンドなので、バッチ化も可能。\n以下、使用例。\nnet useで現在、記憶している接続を表示\nC:\\\u0026gt; net use 新しい接続は記憶されます。 ステータス ローカル名 リモート名 ネットワーク名 ------------------------------------------------------------------------------- 切断 \\\\192.168.0.200\\share Microsoft Windows Network 切断 \\\\windowsShare\\IPC$ Microsoft Windows Network コマンドは正常に終了しました。 net use /deleteで接続を削除\nC:\\\u0026gt; net use /delete \\\\192.168.0.200\\share \\\\192.168.0.200\\share が削除されました。 以下のようにすれば認証もできる。\nC:\\\u0026gt; net use \\\\192.168.0.200\\share /user:administrator password コマンドは正常に終了しました。 ","permalink":"https://nobwak.github.io/posts/2016-06-02-windows_%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%90%E3%81%B8%E3%81%AE%E6%8E%A5%E7%B6%9A%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%92%E5%A4%89%E3%81%88%E3%82%88%E3%81%86/","summary":"Sambaサーバのセットアップをしているとき、動作確認のために、Windowsから接続することがある。 このとき、権限も確認するために、ユーザ","title":"[Windows] ファイルサーバへの接続ユーザを変えよう"},{"content":"Pythonで、二つのリストの差分を知るには。\nリストのままでは引き算ができない。\nset()でset型にしてから引き算をする。\nただしset()すると、与えられたリストから重複した要素が除かれること、順序も保持されないことに注意\nまた、set()して要素を操作した結果はset型のまま。\nlist()でリストに戻す必要がある。\n以下、サンプル。\n\u0026gt;\u0026gt;\u0026gt; a = [\u0026#34;a\u0026#34;] \u0026gt;\u0026gt;\u0026gt; b = [\u0026#34;b\u0026#34;,\u0026#34;c\u0026#34;,\u0026#34;d\u0026#34;] \u0026gt;\u0026gt;\u0026gt; b - a Traceback (most recent call last):  File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; TypeError: unsupported operand type(s) for -: \u0026#39;list\u0026#39; and \u0026#39;list\u0026#39; \u0026gt;\u0026gt;\u0026gt; c = list(set(b) - set(a)) \u0026gt;\u0026gt;\u0026gt; c [\u0026#39;c\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;d\u0026#39;] \u0026gt;\u0026gt;\u0026gt; c.sort() \u0026gt;\u0026gt;\u0026gt; c [\u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;] ","permalink":"https://nobwak.github.io/posts/2016-05-22-python_list%E3%81%AE%E5%B7%AE%E5%88%86%E3%82%92%E7%9F%A5%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"Pythonで、二つのリストの差分を知るには。 リストのままでは引き算ができない。 set()でset型にしてから引き算をする。 ただしset()","title":"[Python] listの差分を知るには"},{"content":"すぐ忘れるのでメモ。\n文字列としてのタイムスタンプは、datetime.datetime.strptimeで、フォーマットを指定してdatetime.datetime型に変換。\nそうしたら加減算ができる。datetime.timeでは出来ないので注意。\n以下、IPythonでの例。\nIn [1]: from datetime import datetime  In [2]: t1 = datetime.strptime(\u0026#34;14:36:02.0689\u0026#34;, \u0026#34;%H:%M:%S.%f\u0026#34;)  In [3]: t2 = datetime.strptime(\u0026#34;14:36:03.0102\u0026#34;, \u0026#34;%H:%M:%S.%f\u0026#34;)  In [4]: print type(t1) \u0026lt;type \u0026#39;datetime.datetime\u0026#39;\u0026gt;  In [5]: delta = t2 - t1  In [6]: print str(delta) 0:00:00.941300  In [7]: print str(delta)[6:] 0.941300  In [8]: ","permalink":"https://nobwak.github.io/posts/2016-05-19-pythonmemo_%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%97%E3%81%AE%E5%B7%AE%E3%82%92%E6%B1%82%E3%82%81%E3%82%8B/","summary":"すぐ忘れるのでメモ。 文字列としてのタイムスタンプは、datetime.datetime.strptimeで、フォーマットを指定してdatet","title":"[Python][memo] タイムスタンプの差を求める"},{"content":"botに京急の運行情報を調べさせて、Slackで発言させたい。\n使用言語はPython。\nさあどうしようかと思ったら、さいきんは、どんなものでもライブラリが揃っていて、あっという間になんでも出来てしまうのな。\nページの取得はrequests、解析はlxmlを使う。\nWebページの事前解析 ページのソースから、狙いの箇所を特定するようなキーワードを見つける。\nあるいは、たとえばChromeなら、デベロッパーツールで探してもよい。\n京急のページであれば、以下のように。\nkeikyu\n手がかりは\u0026quot;div.unko-panel\u0026quot;。\nこれをもとにコードを書く。\n抽出コード stackoverflowを調べればサンプルコードなんかいくらでもあるよねー。\nimport lxml.html import requests  def getKeikyuStatus():  target_url = \u0026#34;http://unkou.keikyu.co.jp/\u0026#34;  target_html = requests.get(target_url).text  root = lxml.html.fromstring(target_html)   divs = root.xpath(\u0026#34;//div[contains(@class, \u0026#39;unko-panel\u0026#39;)]\u0026#34;)  for div in divs:  unkouinfo = div.text_content().encode(\u0026#34;UTF-8\u0026#34;)   return unkouinfo.strip() requestsでwebページ取得。\nlxmlで読み込んで、class \u0026ldquo;unko-panel\u0026quot;のdivタグを見つければよい。\n[参考]slackへの投稿 ここはサラッと。\n詳細はslackのサイトを見る。\n前章の関数の戻り値を引数に取る関数。\ndef noticeSlack(keikyuStatus):  url =\u0026#34;https://slack.com/api/chat.postMessage\u0026#34;  msg = keikyuStatus + \u0026#34; #keikyu\u0026#34;   payload_dic = {  \u0026#34;token\u0026#34;: \u0026#34;xoxb-xxxx-xxxx\u0026#34;,  \u0026#34;type\u0026#34;: \u0026#34;message\u0026#34;,  \u0026#34;channel\u0026#34;:\u0026#34;#general\u0026#34;,  \u0026#34;text\u0026#34;:msg,  \u0026#34;username\u0026#34;:\u0026#34;keikyubot\u0026#34;,  \u0026#34;icon_emoji\u0026#34;:\u0026#34;:bird:\u0026#34;,  }   headers = {\u0026#39;Content-type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Accept\u0026#39;: \u0026#39;text/plain\u0026#39;}  r = requests.post(url, params=payload_dic, headers=headers)   return r ","permalink":"https://nobwak.github.io/posts/2016-05-08-python_requests%E3%81%A8lxml%E3%81%A7%E4%BA%AC%E6%80%A5%E3%81%AE%E9%81%8B%E8%A1%8C%E6%83%85%E5%A0%B1%E3%82%92%E6%8A%BD%E5%87%BA%E3%81%97%E3%82%88%E3%81%86/","summary":"botに京急の運行情報を調べさせて、Slackで発言させたい。 使用言語はPython。 さあどうしようかと思ったら、さいきんは、どんなものでも","title":"[Python] requestsとlxmlで京急の運行情報を抽出しよう"},{"content":"slackにhubotを住まわせる記事は山のようにあるが、それを「hubotを自前サーバ」「それもFreeBSDに」という条件にすると記事数が激減する。\nそんななか、四苦八苦してなんとか達成したのでここに採録。\nなお、そっけなく不親切に見えるのは、ここまでたどり着くのに疲労困憊したから。\nではどうぞ。\njailの作成 フッツーに。\n以下ではqjailを使っているがezjailでもなんでも、好きなのを使いたまえ。\nsudo qjail create hubot -4 192.168.200.1 npmのインストール まずjailをスタートさせて中に入ろうか。\nそしてnpmのインストール。\nsudo qjail console ex02 pkg install npm node, npmのバージョンを確認しておく。\n問題なくインストールされているかの確認でもある。\nnode -v npm -v generatorのインストール npm install -g yo generator-hubot hubot用ユーザの作成 jailの中でadduserし、お好きなユーザを作る。\n以下では「bot」というユーザ。\nadduser bot hubot用ユーザでhubotレポジトリ作成 su - bot mkdir hubot cd hubot yo hubot --adapter slack botホストの作業はいったんはここまで。\n以降、slack側で。\nslackにhubotのインストール slackのteamメニューからApp\u0026amp;Integrations \u0026gt; Hubotをインストール\n表示されるAPI Tokenを記録する。\nhubotがslackへアクセスするためのトークン。\nbotホストで起動スクリプトの作成 再びbotホスト\n/usr/local/etc/rc.d/hubotとして以下を作成。\n試行錯誤で作ったから雑なスクリプトであることに注意。\nそれから実行権限付けるのを忘れないこと。\n#! /bin/sh # # # PROVIDE: hubot # REQUIRE: DAEMON # KEYWORD: shutdown # $Id: hubot,v 1.3 2016/04/16 12:57:03 root Exp $ . /etc/rc.subr name=hubot rcvar=hubot_enable command=/usr/home/bot/hubot/bin/hubot command_args=\u0026#34;--adapter slack\u0026#34; hubot_user=bot pidfile=\u0026#34;/var/run/${name}.pid\u0026#34; procname=node start_cmd=\u0026#34;${name}_start\u0026#34; hubot_start() {  export HUBOT_SLACK_TOKEN=xoxb-xxxx-xxxxx  export PATH=\u0026#34;$PATH:/usr/home/bot/hubot/bin:/usr/local/bin\u0026#34;  cd /usr/home/bot/hubot  echo \u0026#34;starting hubot\u0026#34;  /usr/sbin/daemon -p ${pidfile} -u ${hubot_user} ${command} ${command_args} } load_rc_config $name run_rc_command \u0026#34;$1\u0026#34; 起動確認 /etc/rc.confにhubot_enable=YESを記載。\nservice -l でhubotがリストされることを確認したら、service hubot startで起動。\n以下のような表示が出ればOK。\n[Sat Apr 16 2016 21:55:52 GMT+0900 (JST)] INFO Connecting... [Sat Apr 16 2016 21:55:53 GMT+0900 (JST)] INFO Logged in as xxx of xxxxxx, but not yet connected [Sat Apr 16 2016 21:55:54 GMT+0900 (JST)] INFO Slack client now connected [Sat Apr 16 2016 21:55:55 GMT+0900 (JST)] ERROR hubot-heroku-alive included, but missing HUBOT_HEROKU_KEEPALIVE_URL. `heroku config:set HUBOT_HEROKU_KEEPALIVE_URL=$(heroku apps:info -s | grep web-url | cut -d= -f2)` [Sat Apr 16 2016 21:55:55 GMT+0900 (JST)] INFO hubot-redis-brain: Using default redis on localhost:6379 ポートフォワーディングの設定。 前章の起動時メッセージ、「INFO hubot-redis-brain: Using default redis on localhost:6379」に注目。\n6379でポート待ち受けている。\nご家庭のサーバで動かしている場合には、ルータでのポートフォワーディング設定を忘れずに。\nなお2016/4/16現在、slackの側でサーバのIPアドレスを指定したりするような設定は不要。\nslack側の確認 slackでbotを住まわせたいchannelにInvite。\nbotの名前の左側に在席マークが点いているのを確認し、「@＜bot名＞ ping」とし、botからPONGと帰ってきたら成功。\nもし起動時メッセージが不要であれば、以下のように/usr/sbin/daemonのオプションに-fを加えるとよい。\n/usr/sbin/daemon -f -p ${pidfile} -u ..... ","permalink":"https://nobwak.github.io/posts/2016-04-16-slackhubotjail%E3%83%A1%E3%83%A2_freebsd_jail%E3%81%A7hubot%E3%82%92%E9%A3%BC%E3%81%86/","summary":"slackにhubotを住まわせる記事は山のようにあるが、それを「hubotを自前サーバ」「それもFreeBSDに」という条件にすると記事数","title":"[slack][hubot][jail][メモ] FreeBSD Jailでhubotを飼う"},{"content":"自分でCoreOSをインストールするときには、初期設定を書き込んだcloud-configを読み込ませる。\nファイル一つでOSの設定を全部、賄えるとは、なんてお手軽なんだろう。\nあれ？\nではインストール後に、そういった設定を変更したい場合にはどうしたらよいのだろう。\nもちろん、CoreOSだってLinuxなんだから、/etc下に設定ファイルが転がっているのは百も承知。\nしかしCoreOSなんだから、一つのファイルで全部、管理したいじゃないか。\nインストール後のcloud-configの場所\n答え:\nインストール時に使用したcloud-configは、/var/lib/coreos-install/user_dataに保存されているので、これを書き換えればよい。\n例。\nインストール後に、CoreOSの更新方法を変える。\n更新方法は/etc/coreos/update.confでも設定できるが、上述の理由から、敢えてuser_dateで操作する。\nでは早速。\n/var/lib/coreos-install/user_dataに以下の行を加えればよい。\n※以下の例ではreboot-strategyにbest-effortを指定している。\ncoreos:  update:  reboot-strategy: best-effort CoreOSをリブートすると、/etc/coreos/update.confに以下の通り、最後の一行が増えている。\n$ cat update.conf GROUP=stable REBOOT_STRATEGY=best-effort なお、CoreOSのバージョンは/etc/os-releaseに記載あり。\n$ cat /etc/os-release NAME=CoreOS ID=coreos VERSION=835.11.0 VERSION_ID=835.11.0 BUILD_ID= PRETTY_NAME=\u0026#34;CoreOS 835.11.0\u0026#34; ANSI_COLOR=\u0026#34;1;32\u0026#34; HOME_URL=\u0026#34;https://coreos.com/\u0026#34; BUG_REPORT_URL=\u0026#34;https://github.com/coreos/bugs/issues\u0026#34; 参考\nhttps://github.com/coreos/coreos-cloudinit/blob/master/Documentation/cloud-config.md#update\nhttps://coreos.com/os/docs/latest/update-strategies.html\nhttps://coreos.com/os/docs/latest/cloud-config-locations.html\nOn every boot, coreos-cloudinit looks for a config file to configure your host. Here is a list of locations which are used by the Cloud-Config utility, depending on your CoreOS platform:\n/var/lib/coreos-install/user_data\nWhen you install CoreOS manually using the coreos-install tool. Usually used in bare metal installations.\n","permalink":"https://nobwak.github.io/posts/2016-02-15-coreoscoreos%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%99%82%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%9Fcloud-config%E3%81%AF%E3%81%A9%E3%81%93%E3%81%AB%E8%A1%8C%E3%81%A3%E3%81%9F%E3%81%AE/","summary":"自分でCoreOSをインストールするときには、初期設定を書き込んだcloud-configを読み込ませる。 ファイル一つでOSの設定を全部、賄","title":"[coreos]CoreOSインストール時に使ったcloud-configはどこに行ったの？"},{"content":"docker pullしてimageを更新し、結果として山ほどできるnoneなimageを削除するのが面倒くさいのでシェルスクリプトにした。\nupimage.sh #!/bin/sh docker images | grep -v REPO | cut -f1 -d\u0026#34; \u0026#34; | uniq | xargs -n1 docker pull docker images -f dangling=true -q | docker rmi ","permalink":"https://nobwak.github.io/posts/2016-01-16-dockerdocker%E3%81%AEimage%E3%82%92%E6%9B%B4%E6%96%B0%E3%81%97%E4%B8%8D%E8%A6%81%E3%81%AAimage%E3%82%92%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B/","summary":"docker pullしてimageを更新し、結果として山ほどできるnoneなimageを削除するのが面倒くさいのでシェルスクリプトにした。 upimage.sh #!/bin/sh docker images | grep","title":"[docker]dockerのimageを更新し、不要なimageを削除する"},{"content":"WekanとはTrelloクローン。\n鉄壁のセキュリティに守られて、インターネッツに出て行けず、世の中のイケてるサービスを使えないせいで、「サービス名」＋「alternative」というキーワードで検索するのが癖になっている今日この頃です。\nTrelloのalternativeで見つけたのがWekan。\nこれをCoreOSにインストールする。\nVirtualBox上のCoreOSにはdockerまでインストール済みの前提。\n以下の手順に沿ってインストールする。\nhttps://github.com/wekan/wekan/wiki/Install-Wekan-Docker-for-testing\nhttps://docs.docker.com/compose/install/\nURLの示す通り、テスト目的。\n大量のユーザを相手にするのでなければ、これでも大丈夫でしょう。\n参考までに書いておくと、テスト目的と、下記の本番用で示される構成の違いは、フロントエンドにApacheがあること。\nテスト目的の方の手順だと、ユーザがいきなりWekanに接続する。\nhttps://github.com/wekan/wekan/wiki/Install-Wekan-Docker-in-production\n繰り返すが、本稿ではWekanに直接、繋げさせる構成でセットアップする。\ndocker-composeのインストール。 まず、docker-composeのインストール。\ndocker-composeはdockerの管理ツール。\nインストール済みならこの章は飛ばしてよい。\n公式サイトの手順だと、/usr/local/bin下にインストールすることになっているが、CoreOSだと読み取り専用なので、そこ以外の、たとえばホームディレクトリのbin下等に置く。\n実行権限の付与も忘れないように。\n$ curl -L https://github.com/docker/compose/releases/download/1.5.2/docker-compose-`uname -s`-`uname -m` \u0026gt; ~/bin/docker-compose  % Total % Received % Xferd Average Speed Time Time Time Current  Dload Upload Total Spent Left Speed 100 600 0 600 0 0 687 0 --:--:-- --:--:-- --:--:-- 697 100 7739k 100 7739k 0 0 1458k 0 0:00:05 0:00:05 --:--:-- 1840k $ chmod +x ./bin/docker-compose $ ls -la ./bin/ total 7760 drwxr-xr-x 2 nobwak nobwak 4096 Jan 1 12:17 . drwxr-xr-x 5 nobwak nobwak 4096 Dec 7 14:05 .. -rwxr-xr-x 1 nobwak nobwak 7925655 Jan 1 12:17 docker-compose docker-compose.ymlの作成。 wekanをインストールするディレクトリにdocker-compose.ymlを作成する。\n以下の例では、ホストOS、つまりCoreOSのポート8081で待ち受ける。\nwekan:  image: mquandalle/wekan  links:  - wekandb  environment:  - MONGO_URL=mongodb://wekandb/wekan  - ROOT_URL=http://localhost:80  ports:  - 8081:80 wekandb:  image: mongo  volumes:  - /home/wekan/data:/data/db もし、ホストOSの起動時に自動的にWekanも起動させたい場合には、冒頭部分を以下のように書き換える。\nwekan:  image: mquandalle/wekan  restart: always Wekanの起動 docker-composeから立ち上げる。\nまずdocker-compose -helpとして使い方を一覧しておこう。\n初回起動時はupだが、二回目以降はstartで良さそうだ。\n$ docker-compose --help Define and run multi-container applications with Docker. Usage:  docker-compose [-f=...] [options] [COMMAND] [ARGS...]  docker-compose -h|--help Options:  -f, --file FILE Specify an alternate compose file (default: docker-compose.yml)  -p, --project-name NAME Specify an alternate project name (default: directory name)  --x-networking (EXPERIMENTAL) Use new Docker networking functionality.  Requires Docker 1.9 or later.  --x-network-driver DRIVER (EXPERIMENTAL) Specify a network driver (default: \u0026#34;bridge\u0026#34;).  Requires Docker 1.9 or later.  --verbose Show more output  -v, --version Print version and exit Commands:  build Build or rebuild services  help Get help on a command  kill Kill containers  logs View output from containers  pause Pause services  port Print the public port for a port binding  ps List containers  pull Pulls service images  restart Restart services  rm Remove stopped containers  run Run a one-off command  scale Set number of containers for a service  start Start services  stop Stop services  unpause Unpause services  up Create and start containers  migrate-to-labels Recreate containers to add labels  version Show the Docker-Compose version information 実際に作成＆起動。\n$ sudo ~/bin/docker-compose up Creating wekan_wekandb_1 Creating wekan_wekan_1 Attaching to wekan_wekandb_1, wekan_wekan_1 wekan_1 | =\u0026gt; Starting meteor app on port:80 （略） もしうまくいかない場合には、imagesをいったん削除してやり直してみよう。\nエラーなど無さそうなら次のステップへ。\nなお、問題なく動作することを確認できたら、Ctrl+Cで停止。\n次回以降は\ndocker-compose -d start でよし。\nVirtualBoxでポートフォワーディングの設定 上記で設定したCoreOSの待ち受けポートへの、VirtualBox上でのフォワーディングを設定する。\n以下の例ではVirtualBoxを動かしているホストの8082が、VirtualBox上CoreOSの8081にフォワーディングされる。\n接続確認 前章で設定したポートにブラウザで繋ぐ。\n本稿の例で言えば、http://127.0.0.1:8082へ繋ぐ。\n以下の画面になればOK\nユーザを新規登録し、もし英語が嫌なら設定を変える。\nボードとリストの設定。 ボードは適当に、リストは http://www.sekai-lab.com/times/?p=473 を参考に作成。\nというか、どういうリストを作ればよいか、って結構なノウハウだと思うのだが、ありがたや。\n　1. Tasks：タスクリスト(アサインと期日が定まっていないタスク) 　2. Todo：やることリスト(アサインと期日が定まったタスク, 優先順位を手動で並べ替える) 　3. Today：今日やることリスト 　4. Doing：作業中のタスク 　5. In review：他人がレビュー中のタスク(アサインをレビュー者に変更！) 　6. Done：完了したタスク 以上\n","permalink":"https://nobwak.github.io/posts/2016-01-02-%E3%82%BF%E3%82%B9%E3%82%AF%E7%AE%A1%E7%90%86%E3%83%84%E3%83%BC%E3%83%ABwekantrello%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%B3+virtualbox+coreos+docker/","summary":"WekanとはTrelloクローン。 鉄壁のセキュリティに守られて、インターネッツに出て行けず、世の中のイケてるサービスを使えないせいで、「サ","title":"タスク管理ツールWekan（Trelloクローン）+VirtualBox+CoreOS+docker"},{"content":"CoreOSを自分でインストールする。\n目的は、VirtualBoxや、VMWarePlayer, vSphere(ESXi)等で動かす自前のCoreOSイメージを作成するため。\nCoreOSの初期設定 CoreOSはユーザアカウント等の初期設定をインストール時に一括で行う。\n「一括で」とわざわざ書いたのには理由がある。\n通常、LinuxやFreeBSDなどのインストールでは、インストール時に対話インタフェースが実行され、質問に答える形で各種設定を行う。\nしかしCoreOSでは、あらかじめ準備した設定ファイルを、インストール時に指定する方法を採る。\nつまり設定ファイルさえ書いておけば、コマンド一発でインストールができるということ。\nその設定ファイルがCloud-Config。\nCloud-Configの書き方 ここに記載がある。\nhttps://coreos.com/os/docs/latest/cloud-config.html\nいきなりここにあるすべての設定を書き込むのは、後述の手順を見てもかなり大変。\nよって、必要最低限のものしか書かない。\n具体的には、CoreOSにターミナルログインするユーザ設定のみ。\nそこから先は、OSインストール後に実施する。\nISOイメージでブート https://coreos.com/os/docs/latest/booting-with-iso.html\n上記からダウンロード。\nVirtualBoxでもなんでも、すきな仮想ソフトウェアに読み込ませて起動する。\nなお、仮想マシン作成時、OSを選ぶ際には64bit Linuxを選んでおけばよい。\nCloud-Configを書く前に 必要なのは、作業用アカウントの設定だけ。\nしたがって、ID、パスワード、作業用アカウントの権限くらいでよい。\n当然のことながらパスワードを平文で保存するわけにはいかないから、mkpasswdを使ってハッシュ化したものを書き込むこと。\nパスワードハッシュの生成 作業用アカウントのパスワードハッシュを生成する。\nもちろん、SSHの公開鍵でもいいのだが、パスワードハッシュの方が楽。\nmkpasswdの使い方はmkpasswd -hで得られる。\n$ mkpasswd -h Usage: mkpasswd [OPTIONS]... [PASSWORD [SALT]] Crypts the PASSWORD using crypt(3).  -m, --method=TYPE select method TYPE  -5 like --method=md5  -S, --salt=SALT use the specified SALT  -R, --rounds=NUMBER use the specified NUMBER of rounds  -P, --password-fd=NUM read the password from file descriptor NUM  instead of /dev/tty  -s, --stdin like --password-fd=0  -h, --help display this help and exit  -V, --version output version information and exit If PASSWORD is missing then it is asked interactively. If no SALT is specified, a random one is generated. If TYPE is \u0026#39;help\u0026#39;, available methods are printed. ハッシュ生成方法についてはmkpasswd -m helpで得られる。\n$ mkpasswd -m help Available methods: des standard 56 bit DES-based crypt(3) md5 MD5 sha-256 SHA-256 sha-512 SHA-512 SHA-512までいけますね。\nでは、ハッシュ生成。\nいったんテストして問題ないようなら、テキストファイルに書き込む。\n$ mkpasswd -m sha-512 avedakedavra $6$hIKFY6fnAE$gfpPpQu3rAcJMCeO3t93/3jUxVKBe7W/hC1.n5kwge3nnqsQngVnnoM8.jyWv/jYKbsJZoBm/6SSO7Ge4Zx/B0 $ mkpasswd -m sha-512 avedakedavra \u0026gt; cloud-config $ 以上でカレントディレクトリのcloud-configが生成された。\nあとはこのcloud-configに必要な設定を書き加えるだけ。\nCloud-configの作成 設定ファイルの書式はYAML。\nYAMLは人間の眼には易しいが、フォーマットが合っているか不安になる。\nその場合はatom等で書いておいてもよい。ハイライトしてくれるパッケージもある。\nそこで先述の通り必要最低限の記載だけする。\nhostnameでホスト名、追加したいユーザと、そのユーザがsudoとdockerを使えるよう、groupに追加する。\n以下のように。\n#cloud-config  hostname: \u0026#34;coreos\u0026#34;  users:  - name: \u0026#34;nobwak\u0026#34;  passwd: $6$hIKFY6fnAE$gfpPpQu3rAcJMC....  groups:  - \u0026#34;sudo\u0026#34;  - \u0026#34;docker\u0026#34; CoreOSのインストール 作成したcloud-configを指定してインストールすればよい。\n-dでインストール先デバイスを、-Cでチャネルを、-cで先ほど作成したcloud-configを指定する。\nsudo coreos-install -d /dev/sda -C stable -c cloud-config 起動したら、作成したユーザでログインすることを確認する。\n","permalink":"https://nobwak.github.io/posts/2015-12-21-memo_coreos%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"CoreOSを自分でインストールする。 目的は、VirtualBoxや、VMWarePlayer, vSphere(ESXi)等で動かす自前のC","title":"[memo] CoreOSのインストール"},{"content":"owncloudは自家製dropboxのようなもの。\n以下、メモ。\nowncloudの構成 owncloudはphpで作られている。\nそしてインタフェースはhttps。\nしたがって、動作にはowncloudのほかに、php, webサーバが必要。\nさらにバックエンド用のデータベースソフトウェアも必要である。\npackageのowncloud owncloudはバックエンドのDBにMySQL, SQLiteなどが選べる。\n個人用ならSQLiteでも大丈夫そうだが、packageに用意されているowncloudはMySQLが有効、SQLiteが無効になっている。\nSQLite版owncloudが欲しければportsからコンパイルする必要がある。\nこれまた面倒なのでpackageのものを使った。\npackageからowncloudをインストールすると、phpは勝手に入るが、webサーバ、MySQLは別にインストールする必要がある。\nここではwebサーバにnginxを選んだ。\nではMySQLは。\nMySQLのバージョン選定 いや、MySQLはMySQLに決まっているんだが、実はpackageを探すと、5.1, 5.5, 5.6の三つがあるのだ。\n$ pkg search \u0026#34;^mysql.*server\u0026#34; mysql51-server-5.1.73_2 mysql55-server-5.5.43 mysql56-server-5.6.24 果たしてどれを選べばよいのであろうか。\n[MySQL 5.1 vs. 5.5 vs. 5.6 Performance Comparison](https://www.liquidweb.com/kb/mysql-5-1-vs-5-5-vs-5-6-performance-comparison/)  以上のURL他を見たところ、最新の5.6で良さそうなのでmysql56-server-5.6.24をインストールしておいた。\nowncloudのインストール packageで入れるだけ。\nいっしょにnginx, mysql5.6も入れる。\n# pkg install owncloud nginx mysql56-server MySQLの設定 owncloudのデータベースを受け持つMySQLの設定\nシステム起動時にMySQLも自動的に起動するように設定。\n# sysrc mysql_enable=YES mysql_enable: -\u0026gt; YES すぐ起動\n# service mysql-server start Starting mysql. mysql_secure_installationでセキュリティを高めておくと同時にスーパーユーザのパスワードも設定。\n# mysql_secure_installation データベースの作成\nUSERはユーザ名に、CHANGE_THIS_PASSWORDはパスワードに書き換えること。\n# mysql -p -e \u0026#34;create user \u0026#39;USER\u0026#39;@\u0026#39;localhost\u0026#39; identified by \u0026#39;CHANGE_THIS_PASSWORD\u0026#39;;\u0026#34; # mysql -p -e \u0026#34;create database if not exists owncloud;\u0026#34; # mysql -p -e \u0026#34;grant all on owncloud.* to \u0026#39;USER\u0026#39;@\u0026#39;localhost\u0026#39; identified by \u0026#39;CHANGE_THIS_PASSWORD\u0026#39;;\u0026#34; # mysql -p -e \u0026#34;flush privileges;\u0026#34; phpの設定 owncloudはphpで書かれている。そのphpの設定。\nとはいえ、特別、何かすることはない。\n/usr/local/etcにあるphp.ini-production を、php.ini としてコピー\n次に/usr/local/etc/php/extensions.ini に以下の記載があることを確認する（デフォルトで記載があるはず）\nextension=pdo.so extension=mysql.so php-fpmの設定 そのままでは静的コンテンツしか扱わないnginxが、phpを実行できるようにするための設定。\nphp-fpmがデーモンとして動作し、nginxからの要求に応じてphpを実行して結果を返す。\nしたがってphp-fpmとnginxがどう通信するかを規定したり、システム起動時にphp-fpmが自動的に起動するような指定が必要。\nまずはphp-fpmの設定。\n/usr/local/etc/php-fpm.confに以下があればよい。\nそれ以外はむしろ冗長だし、見にくくなるので削ってしまってよい。\n[global] pid = run/php-fpm.pid error_log = log/php-fpm.log [owncloud] listen=/var/run/php-fpm.socket listen.owner=www listen.group=www listen.mode=0666 listen.backlog=-1 listen.allowed_clients=127.0.0.1 user=www group=www pm=dynamic pm.max_children=4 pm.start_servers=1 pm.min_spare_servers = 1 pm.max_spare_servers = 2 pm.max_requests = 500 env[HOSTNAME] = $HOSTNAME env[PATH] = /usr/local/bin:/usr/bin:/bin env[TMP] = /tmp env[TMPDIR] = /tmp env[TEMP] = /tmp システム起動時のphp-fpm起動設定\n/etc/rc.conf内ではphp-fpmではなくphp_fpmとなることに注意（ハイフンではなくアンダースコア）\nsysrc php_fpm_enable=YES php_fpm_enable: -\u0026gt; YES nginxの設定…の前に、SSLの準備 SSLのためにはサーバの鍵が必要。\n手前味噌だが、ここにあるスクリプトを使ってくれい。\n秘密鍵、証明書、DHパラメータ、三つのファイルを作成して、/usr/local/etc/sslあたりに入れる。\nnginxの設定 以下、二つのサイトを参考にしつつ作成。\nhttps://mozilla.github.io/server-side-tls/ssl-config-generator/?server=nginx-1.8.0\u0026amp;openssl=1.0.1l\u0026amp;hsts=yes\u0026amp;profile=intermediate\nhttps://doc.owncloud.org/server/7.0/admin_manual/installation/nginx_configuration.html\n出来たのが以下。\n#user nobody; worker_processes 1; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events {  worker_connections 1024; } http {  include mime.types;  default_type application/octet-stream;  #log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39;  # \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39;  # \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;;  #access_log logs/access.log main;  sendfile on;  #tcp_nopush on;  #keepalive_timeout 0;  keepalive_timeout 65;  #gzip on;  server {  listen 80;  server_name localhost;  return 301 https://$server_name$request_uri;  }  upstream php-handler {  #server 127.0.0.1:9000;  #server unix:/var/run/php5-fpm.sock;  server unix:/var/run/php-fpm.socket;  }  server {  listen 443 ssl;  server_name localhost;  #  # Generated with;  # https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=nginx- 1.8.0\u0026amp;openssl=1.0.1l\u0026amp;hsts=yes\u0026amp;profile=intermediate  #  # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate  ssl_certificate /usr/local/etc/ssl/server.crt;  ssl_certificate_key /usr/local/etc/ssl/server.key;  ssl_session_timeout 1d;  ssl_session_cache shared:SSL:50m;  # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits  ssl_dhparam /usr/local/etc/ssl/dhparam.pem;  # intermediate configuration. tweak to your needs.  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  ssl_ciphers \u0026#39;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RS A-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES 128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA- AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECD HE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-D SS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA- DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256 :AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!D ES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA \u0026#39;;  ssl_prefer_server_ciphers on;  # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)  add_header Strict-Transport-Security max-age=15768000;  # OCSP Stapling ---  # fetch OCSP records from URL in ssl_certificate and cache them  ssl_stapling on;  ssl_stapling_verify on;  ## verify chain of trust of OCSP response using Root CA and Intermediate certs  ssl_trusted_certificate /usr/local/etc/ssl/cert.pem;  # end of generated  #  # copyed from https://doc.owncloud.org/server/7.0/admin_manual/installation/ngi nx_configuration.html  #  # Path to the root of your installation  root /usr/local/www/owncloud/;  # set max upload size  client_max_body_size 10G;  fastcgi_buffers 64 4K;  # Disable gzip to avoid the removal of the ETag header  gzip off;  # Uncomment if your server is build with the ngx_pagespeed module  # This module is currently not supported.  #pagespeed off;  rewrite ^/caldav(.*)$ /remote.php/caldav$1 redirect;  rewrite ^/carddav(.*)$ /remote.php/carddav$1 redirect;  rewrite ^/webdav(.*)$ /remote.php/webdav$1 redirect;  index index.php;  error_page 403 /core/templates/403.php;  error_page 404 /core/templates/404.php;  location = /robots.txt {  allow all;  log_not_found off;  access_log off;  }  location ~ ^/(?:\\.htaccess|data|config|db_structure\\.xml|README){  deny all;  }  location / {  # The following 2 rules are only needed with webfinger  rewrite ^/.well-known/host-meta /public.php?service=host-meta last;  rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json  last;  rewrite ^/.well-known/carddav /remote.php/carddav/ redirect;  rewrite ^/.well-known/caldav /remote.php/caldav/ redirect;  rewrite ^(/core/doc/[^\\/]+/)$ $1/index.html;  try_files $uri $uri/ /index.php;  }  location ~ \\.php(?:$|/) {  fastcgi_split_path_info ^(.+\\.php)(/.+)$;  include fastcgi_params;  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;  fastcgi_param PATH_INFO $fastcgi_path_info;  fastcgi_param HTTPS on;  fastcgi_pass php-handler;  }  # Optional: set long EXPIRES header on static assets  location ~* \\.(?:jpg|jpeg|gif|bmp|ico|png|css|js|swf)$ {  expires 30d;  # Optional: Don\u0026#39;t log access to assets  access_log off;  }  } nginxの起動設定とサービススタート # sysrc nginx_enable=YES nginx_enable: -\u0026gt; YES nginx, php-fpmを起動し、https://＜サーバアドレス＞にブラウザで繋げばOK\n# service php-fpm start # service nginx start その他参考\nhttps://doc.owncloud.org/server/7.0/admin_manual/configuration/database_configuration.html\n","permalink":"https://nobwak.github.io/posts/2015-10-05-%E3%83%A1%E3%83%A2freebsd_owncloud_+_nginx_+_php-fpm_+_mysql%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"owncloudは自家製dropboxのようなもの。 以下、メモ。 owncloudの構成 owncloudはphpで作られている。 そしてインタフ","title":"[メモ][FreeBSD] owncloud + nginx + php-fpm + MySQLのインストール"},{"content":"https://dev.mysql.com/doc/refman/5.6/en/mysql-secure-installation.html\nmysql_secure_installationは、perlで書かれたスクリプトで、MySQLのセキュリティを向上させることができる。\n具体的には;\n（MySQLの）rootのパスワード設定\nlocalhost外からアクセス可能なrootアカウントの削除\nanonymousユーザアカウントの削除\nanonymousユーザ含め誰でもアクセス可能な「test」データベースの削除\ntest_から始まるデータベースへの接続権限の削除（デフォルトでは誰でもアクセスできる）\nMySQLが動いている状態で、引数なしで実行すればよい。\nsysrc mysql_enable=YES mysql_enable: -\u0026gt; YES service mysql-server start Starting mysql. 立ち上げておいて。\nmysql_secure_installationを引数なしで実行。\nrootパスワード以外はリターンキー連打でよし。\n# mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL  SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MySQL to secure it, we\u0026#39;ll need the current password for the root user. If you\u0026#39;ve just installed MySQL, and you haven\u0026#39;t set the root password yet, the password will be blank, so you should just press enter here. Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MySQL root user without the proper authorisation. Set root password? [Y/n] Y New password: Re-enter new password: Password updated successfully! Reloading privilege tables..  ... Success! By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] Y  ... Success! Normally, root should only be allowed to connect from \u0026#39;localhost\u0026#39;. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] Y  ... Success! By default, MySQL comes with a database named \u0026#39;test\u0026#39; that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] Y  - Dropping test database...  ... Success!  - Removing privileges on test database...  ... Success! Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] Y  ... Success! All done! If you\u0026#39;ve completed all of the above steps, your MySQL installation should now be secure. Thanks for using MySQL! Cleaning up...``` ","permalink":"https://nobwak.github.io/posts/2015-09-29-%E3%83%A1%E3%83%A2mysql_secure_installtaion%E3%81%AF%E4%BD%95%E3%82%92%E3%82%84%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE/","summary":"https://dev.mysql.com/doc/refman/5.6/en/mysql-secure-installation.html mysql_secure_installationは、perlで書かれたスクリプトで、MySQLのセキュリティを向上させることができる。 具","title":"[メモ]mysql_secure_installtaionは何をやっているの？"},{"content":"さきにメモ。\nportsにおいて、依存も含めた全部のportsでmake cleanをするには以下のようにする。\nfind /usr/ports -name work -mindepth 2 -maxdepth 3 | xargs rm -Rf ネタ元はfreebsd forumから。\n久しぶりにportsを使うと、なんでこんな面倒なものに我慢できていたんだろう？と思う。\nそれは単なる愚痴として。\nVagrantやjailなどの仮想技術がとても便利になってきて、実現したい機能ごとに環境を分けるようになる。\nすると、環境ごとにフレッシュな状態から機能を構築することが多くなり、自然とportsのコンパイル時間の長さが目につくようになったのだと思う。\nたとえばredmineを使いたいとして、pkgでインストールしようとしても、コンパイルオプションが期待通りではないので、やむなくportsでインストールしようとする。\nところが、インストールされたものがない、フレッシュな状態でredmineをportsから入れようとすると、依存の端から端までportsで入れようとするので、とんでもない時間がかかるのである。\n特定のもの以外は全部pkgで入れられるようにならないものか。\n","permalink":"https://nobwak.github.io/posts/2015-09-28-freebsd%E3%83%A1%E3%83%A2_ports%E3%81%A7make_clean%E3%82%92%E4%BE%9D%E5%AD%98ports%E3%82%82%E5%90%AB%E3%82%81%E3%81%A6%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"さきにメモ。 portsにおいて、依存も含めた全部のportsでmake cleanをするには以下のようにする。 find /usr/ports -name work -mindepth 2 -maxdepth 3 | xargs rm -Rf ネタ元は","title":"[FreeBSD][メモ] portsでmake cleanを依存portsも含めて実行するには"},{"content":"すぐに作り方を忘れるので、シェルスクリプトを記録しておく。\n変数OPENSSLにopensslをフルパスで与えること。\nあとはchmod 755して実行すればカレントディレクトリにserver.crtとserver.keyができる。\nおまけでDHパラメータ、dhparam.pemもできる。\n#!/bin/sh # Generates a self-signed certificate. OPENSSL=/usr/bin/openssl KEYFILE=server.key CERTFILE=server.crt SIGNREQ=server.csr DHPARAM=dhparam.pem if [ -f $CERTFILE ]; then  echo \u0026#34;$CERTFILE already exists, won\u0026#39;t overwrite\u0026#34;  exit 1 fi if [ -f $KEYFILE ]; then  echo \u0026#34;$KEYFILE already exists, won\u0026#39;t overwrite\u0026#34;  exit 1 fi if [ -f $SIGNREQ ]; then  echo \u0026#34;$SIGNREQ already exists, won\u0026#39;t overwrite\u0026#34;  exit 1 fi echo echo \u0026#34;Generating key file, $KEYFILE\u0026#34; echo \u0026#34;============================\u0026#34; $OPENSSL genrsa 2048 \u0026gt; $KEYFILE || exit 2 chmod 0600 $KEYFILE echo \u0026#34;============================\u0026#34; echo echo \u0026#34;Generating sign request file, $SIGNREQ\u0026#34; echo \u0026#34;============================\u0026#34; $OPENSSL req -new -key $KEYFILE \u0026gt; $SIGNREQ || exit2 echo \u0026#34;============================\u0026#34; echo echo \u0026#34;Generating cert file, $CERTFILE\u0026#34; echo \u0026#34;============================\u0026#34; $OPENSSL x509 -days 3650 -req -signkey $KEYFILE \u0026lt; $SIGNREQ \u0026gt; $CERTFILE || exit2 echo \u0026#34;============================\u0026#34; echo echo \u0026#34;Generating DH key, $DHPARAM\u0026#34; echo \u0026#34;============================\u0026#34; $OPENSSL dhparam -out $DHPARAM 2048 echo \u0026#34;============================\u0026#34; echo echo \u0026#34;Now you have $CERTFILE, $KEYFILE and $DHPARAM\u0026#34; echo 参考\nhttp://d.hatena.ne.jp/rikunora/20120514/p1\nhttp://qiita.com/kunichiko/items/12cbccaadcbf41c72735\n","permalink":"https://nobwak.github.io/posts/2015-09-25-sh_%E3%82%AA%E3%83%AC%E3%82%AA%E3%83%AC%E8%A8%BC%E6%98%8E%E6%9B%B8%E4%BD%9C%E6%88%90%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/","summary":"すぐに作り方を忘れるので、シェルスクリプトを記録しておく。 変数OPENSSLにopensslをフルパスで与えること。 あとはchmod 755し","title":"[sh] オレオレ証明書作成シェルスクリプト"},{"content":"インストール時設定 容量節約のためにgame, srcはインストールしない。\nrootのパスワードはvagrantに。\nユーザvagrantを追加、パスワードもvagrantに。\nsshdは有効に、dumpdevは無効に。\n/etc/rc.confの中身\nhostname=\u0026#34;freebsd10\u0026#34; keymap=\u0026#34;jp.106.kbd\u0026#34; ifconfig_em0=\u0026#34;DHCP\u0026#34; sshd_enable=\u0026#34;YES\u0026#34; # Set dumpdev to \u0026#34;AUTO\u0026#34; to enable crash dumps, \u0026#34;NO\u0026#34; to disable dumpdev=\u0026#34;NO\u0026#34; インストール後設定 まずはOSの更新。\n# freebsd-update fetch install src component not installed, skipped Looking up update.FreeBSD.org mirrors... none found. Fetching public key from update.FreeBSD.org... done. （略） pkgのインストール pkgをインストールするには、pkg listでもなんでも叩けばインストールしてくれる。\n# pkg list The package management tool is not yet installed on your system. Do you want to fetch install it now? [y/N]: y （略） sudoのインストール vagrant用に。\n# pkg install sudo ユーザvagrantにパスワードなしのsudo権限を与える。\nrequirettyがあればコメントアウト。\n# visudo vagrant ALL=(ALL) NOPASSWD: ALL ユーザvagrantのssh key設定 定番のキーをauthorized_keysとしてダウンロードし、パーミッションを設定する。\n# mkdir -p /home/vagrant/.ssh # cd /home/vagrant/.ssh # fetch --no-verify-peer -o authorized_keys https://github.com/mitchellh/vagrant/blob/master/keys/vagrant.pub fetch: https://github.com/mitchellh/vagrant/blob/master/keys/vagrant.pub: size of remote file is not known authorized_keys 80 kB 225 kBps 00m00s # # chmod 700 ~vagrant/.ssh # chmod 600 ~vagrant/.ssh/authorized_keys # chown -R vagrant:vagrant ~vagrant sshd設定の変更 /etc/ssh/sshd_configに以下を追加。\nPort 22 PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 PermitEmptyPasswords no UseDNS no 空行、コメント行を除くとこんな感じ。\n# egrep -v \u0026#39;^ *#|^ *$\u0026#39; ./sshd_config Port 22 PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2 PermitEmptyPasswords no UseDNS no Subsystem sftp /usr/libexec/sftp-server sshdを再起動\n# service sshd restart Performing sanity check on sshd configuration. Stopping sshd. Performing sanity check on sshd configuration. Starting sshd. VirtualBox Guest Additonsは必要か。 FreeBSDのGuest Additionsで以下が可能になる。\nhttps://wiki.freebsd.org/VirtualBox\nClipboard sharing Mouse pointer integration Host Time synchronization Window scaling Seamless mode 逆に言うと、以上が必要なければわざわざ入れることもない。\nもしXを入れないのであれば、インストールしないほうがよい。\npkgのGuest AdditionsはX11のサポートがOnになっており、そのままインストールすると山ほどpackageを追加されるから。\nではportsからコンパイルする？\nまずportsディレクトリが必要。\nさらに、実はGuest AdditionsのコンパイルにはKernelソースが必要なので、/usr/srcも必要。\nしかもportsからのコンパイルするとperlやらgmakeやら、いろんなもののコンパイルが発生する。\n本当におすすめしない。\nGuest Additionsのインストール インストールする場合には、pkgからvirtualbo-ose-additonsを。\nsearch -fすると分かるが、X11がOnになっている。\n$ pkg search -f virtualbox-ose-additions virtualbox-ose-additions-4.3.30 Name : virtualbox-ose-additions Comment : VirtualBox additions for FreeBSD guests Description : These additions are for installation inside a FreeBSD guest. Options :  DEBUG : off  OPENGL : off  X11 : on $ pkg install virtualbox-ose-additions\u0026lt;\\pre\u0026gt; /etc/rc.confの変更 $ sudo sysrc vboxguest_enbale=YES vboxguest_enbale: -\u0026gt; YES $ sudo sysrc vboxservice_enable=YES vboxservice_enable: -\u0026gt; YES 念のため確認\n$ sudo sysrc vboxservice_enable vboxservice_enable: YES $ sudo sysrc vboxguest_enbale vboxguest_enbale: YES 仮想マシンをパッケージする シャットダウンしたのち、ホストマシンで梱包\n-boxに続けてVirtualBox上の名前を入れる。\nvagrant package --box FreeBSD10 できたpackage.boxは約1Gバイト。うーん。ちょっとでかいなあ。\n","permalink":"https://nobwak.github.io/posts/2015-09-22-%E3%83%A1%E3%83%A2vagrant_freebsd%E3%81%AEbox%E3%82%92%E4%BD%9C%E3%82%8B/","summary":"インストール時設定 容量節約のためにgame, srcはインストールしない。 rootのパスワードはvagrantに。 ユーザvagrantを追加、","title":"[メモ][Vagrant] FreeBSDのboxを作る。"},{"content":"Vagrantは便利だが、boxの初回ダウンロードがウンザリするくらい長い。\ntorrentに流してくれればいいのに…。\nしかたないので自分でUbuntuのboxを作る。\n参照ドキュメントは公式の以下のもの。\nhttps://docs.vagrantup.com/v2/boxes/base.html\nVirtualBox上でUbuntu14.04をインストール後、apt-get update \u0026amp;\u0026amp; apt-get upgrade \u0026amp;\u0026amp; apt-get dist-upgradeまで済ませた前提。\nproviderはVirtualBox。\nまずVirtualBox特有の注意点を先に。\nVirtualBox向けにBoxを作るときの注意点 https://docs.vagrantup.com/v2/virtualbox/boxes.html\n ネットワークインタフェースはNATにしておくこと。 MACアドレスをメモしておくこと。 VirtualBox Guest Additionsをインストールしてあること。  一つ目の理由は、VirtualBoxが決め打ちで接続してくるから。\n二つ目の理由は、Vagrantfileのconfig.vm.base_macに書く必要があるから。\nMACアドレスはVirtualBoxのGUIから確認できる。\n三つめの条件を満たすには、あらかじめlinux kernel headersとbasic developer toolsをインストールしておく必要がある。\n手順は後述。\nではさっそく。\n不要なハードウェアの無効化 USB, オーディオなどを無効化する。\n特にUSBが有効になっていると、無用なバグを引いたりするので、無効化しておくことを強く勧める。\nデフォルトユーザ（vagrant）の作成 Vagrantの作業用アカウントを作る。\nVagrantはデフォルトでユーザ\u0026quot;vagrant\u0026quot;として仮想マシンにSSH接続する。\nvagrantというユーザのいることが明らかだと、それはそれでセキュリティ上のリスクになるのだが、それはVagrantに慣れてから考える。\nvagratを追加し、パスワードもvagrantに。\nパスワードを設定しておくのは、万が一、手動で仮想マシンに接続する必要が生まれたときのため。\n# useradd -m vagrant # passwd vagrant SSH接続用に鍵を作成する。\n鍵はインターネットからダウンロードする。そんな鍵なんて危ないように見えるが、これはあくまでも初回ブート用。Vagrantが自動的に書き換えてくれる。\n# mkdir -p /home/vagrant/.ssh # cd /home/vagrant/.ssh # curl -k -L -o authorized_keys \u0026#39;https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub\u0026#39; # chmod 700 /home/vagrant/.ssh # chmod 600 /home/vagrant/.ssh/authorized_keys # chown -R vagrant:vagrant /home/vagrant/ ユーザvagrant向けsudo設定 ユーザvagrantがパスワードなしでsudoできるように。\nvisudoで以下の行を追加。\n# visudo vagrant ALL=(ALL) NOPASSWD: ALL さらにrequirettyという記述があればコメントアウト\n# requiretty # コメントアウトでttyなくsudoできる。 rootのパスワードも変える。 rootのパスワードも\u0026quot;vagrant\u0026quot;に。\n# passwd sshd設定 sshdがなければインストール。\n# apt-get install openssh-server sshdの設定ファイルを書き換え\n# vi /etc/ssh/sshd_config 以下の行があることを確認。なければ書く。\nPort 22  PubKeyAuthentication yes  AuthorizedKeysFile %h/.ssh/authorized_keys  PermitEmptyPasswords no  UseDNS no VirtualBox Guest Additionsのインストール 再掲だが以下のドキュメントに沿って。\nhttps://docs.vagrantup.com/v2/virtualbox/boxes.html\n# apt-get install dkms # /etc/init.d/vboxadd setup # apt-get install -y build-essential linux-headers-server その後、VirtualBox Guest Additionsのインストール\nVitualBoxのGUIからCDを挿入し、以下を実行。\n# mount /dev/cdrom /media/cdrom # sh /media/cdrom/VBoxLinuxAdditions.run # umount /media/cdrom # apt-get clean 後はこちらの通り。\n","permalink":"https://nobwak.github.io/posts/2015-09-18-%E3%83%A1%E3%83%A2vagrant_ubuntu%E3%81%AEbox%E3%82%92%E4%BD%9C%E3%82%8B/","summary":"Vagrantは便利だが、boxの初回ダウンロードがウンザリするくらい長い。 torrentに流してくれればいいのに…。 しかたないので自分でU","title":"[メモ][Vagrant] Ubuntuのboxを作る"},{"content":"VirtualBox上の仮想マシンをvagrantのboxにする方法はありきたりだが、たいていはLinux、OS Xでの話で、Windowsでのメモはあまりない。そこでメモ。\npackageの作成 VirtualBox上の仮想マシンをパッケージする。\nvagrant packageの-baseオプションにVirtualBox上の仮想マシン名を与える。\nなお、そのまえにUSB、サウンドは無効にしておいたほうがよい。\nC:\\Users\\nobwak\\vagrant\u0026gt;vagrant package --base centos64 ==\u0026gt; centos64: Exporting VM... ==\u0026gt; centos64: Compressing package to: C:/Users/doe/vagrant/package.box カレントディレクトリにpackage.boxができた。\nこの中に仮想マシンが入っている。\nあとはこれをどこに移動してもよい。\nうーん、ポータブル。\n次にこの中の仮想マシンをvagrantから参照する方法。\npackage.boxをvagrantから参照する。 vagrant init ＜新規に作成する仮想マシンの名前＞ ＜package.boxの場所＞と指定してvagrantfileを作る。\nもちろんvagrant initと空撃ちして手で書き換えてもよい。後述。\npackage.boxはローカルに置いてあるので、場所の指定は「file://」に続けてパスを書く。\nwindowsの場合は「/C:/path/to/package.box」のように書く。\n結果、「file:///C:/\u0026hellip;.」となる。\nスラッシュが多くて不安になるけど、これでよい。\nなお、windowsっぽく円マークあるいはバックスラッシュを使ってしまうとエスケープされてしまい、vagrantがpackage.boxを見つけられない。注意。\nC:\\Users\\nobwak\\vagrant\u0026gt;vagrant init centosTest file:///c:/Users/doe/vagrant/package. box A `Vagrantfile` has been placed in this directory. You are now ready to `vagrant up` your first virtual environment! Please read the comments in the Vagrantfile as well as documentation on `vagrantup.com` for more information on using Vagrant. C:\\Users\\nobwak\\vagrant\u0026gt; Vagrantfileが以下のようになっていること。\nvagrant initを空撃ちした場合には、以下の二行を加えること。\nconfig.vm.box = \u0026#34;centosTest\u0026#34;  config.vm.box_url = \u0026#34;file:///c:/Users/nobwak/vagrant/package.box\u0026#34; あとはvagrant upでよい。\nC:\\Users\\nobwak\\vagrant\u0026gt;vagrant up Bringing machine \u0026#39;default\u0026#39; up with \u0026#39;virtualbox\u0026#39; provider... ==\u0026gt; default: Box \u0026#39;centos64\u0026#39; could not be found. Attempting to find and install.. ＜中略＞ ==\u0026gt; default: Booting VM... ＜後略＞ 別の方法:box listに登録する。 package.boxをvagrantのbox listに登録しておけば、いちいちpackage.boxの場所を指定しなくてもいいようになる。\nC:\\Users\\doe\\vagrant\u0026gt;vagrant box add centosSkel package.box ==\u0026gt; box: Box file was not detected as metadata. Adding it directly... ==\u0026gt; box: Adding box \u0026#39;centosSkel\u0026#39; (v0) for provider:  box: Unpacking necessary files from: file://C:/Users/nobwak/vagrant/package.box  box: Progress: 100% (Rate: 9737k/s, Estimated time remaining: --:--:--) ==\u0026gt; box: Successfully added box \u0026#39;centosSkel\u0026#39; (v0) for \u0026#39;virtualbox\u0026#39;! あとは定石で。\nC:\\Users\\nobwak\\vagrant\u0026gt;vagrant init centosSkel ＜略＞ C:\\Users\\nobwak\\vagrant\u0026gt;vagrant up Bringing machine \u0026#39;default\u0026#39; up with \u0026#39;virtualbox\u0026#39; provider... ==\u0026gt; default: Importing base box \u0026#39;centosSkel\u0026#39;... ==\u0026gt; default: Matching MAC address for NAT networking... ==\u0026gt; default: Setting the name of the VM: vagrant_default_1442498300953_28586 ==\u0026gt; default: Clearing any previously set network interfaces... ==\u0026gt; default: Preparing network interfaces based on configuration...  default: Adapter 1: nat ==\u0026gt; default: Forwarding ports...  default: 22 =\u0026gt; 2222 (adapter 1) ==\u0026gt; default: Booting VM...``` ","permalink":"https://nobwak.github.io/posts/2015-09-17-%E3%83%A1%E3%83%A2windows_virtualbox%E3%81%AE%E4%BB%AE%E6%83%B3%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%8B%E3%82%89vagrant%E3%81%AEbox%E3%82%92%E4%BD%9C%E3%82%8B/","summary":"VirtualBox上の仮想マシンをvagrantのboxにする方法はありきたりだが、たいていはLinux、OS Xでの話で、Windowsで","title":"[メモ][Windows] VirtualBoxの仮想マシンからvagrantのboxを作る"},{"content":"ほんとにメモ。\nVirtualBoxで;\n ゲストをホスト外へ露出させず、一方で ゲストから外部へのアクセスを許可し、なおかつ ホストからゲストへのsshをさせたい  場合のメモ。\n上記をかみ砕くと、ゲストのネットワーク設定で「NAT」を選びつつ、作業のためにホストからゲストへsshをしたい場合。\n高度な設定からポートフォワーディングを選び\nホストのポートとゲストのポートを設定する。\n以下の例ではホストの8022に繋ぐとゲストの22、すなわちsshへ繋がれる設定。\n","permalink":"https://nobwak.github.io/posts/2015-09-03-memo_virtualbox%E3%81%AEnat%E3%81%A7%E3%83%9B%E3%82%B9%E3%83%88%E3%81%8B%E3%82%89%E3%82%B2%E3%82%B9%E3%83%88%E3%81%B8%E3%81%AE%E6%8E%A5%E7%B6%9A%E3%82%92%E8%A8%B1%E5%8F%AF%E3%83%9D%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%AF%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0/","summary":"ほんとにメモ。 VirtualBoxで; ゲストをホスト外へ露出させず、一方で ゲストから外部へのアクセスを許可し、なおかつ ホストからゲストへのs","title":"[memo] VirtualBoxのNATでホストからゲストへの接続を許可（ポートフォワーディング）"},{"content":"qjailだと、ここで示したようにqjail update -bでjailのバイナリアップグレードをしてくれる。\nアップグレードといっても、ホストのバイナリをjailのsharedfsにまるまるコピーしているだけである。\nということは、通常のアップグレードで更新されるはずの/etc下ファイルには一切、手を付けないということ。\njailのetc更新にはmergemaster 実はmergemasterは更新するフォルダを-Dオプションで選ぶことができる。\nつまり、ホストのsrcをベースにjailのetcを更新できる。\njailの/etcを更新するには jail ex01を更新する場合は、以下の通り。-D以外のオプションはUPiF。\n$ sudo mergemaster -UPiFD /usr/jails/ex01/ 新しくjailを作る際のテンプレートも更新しておく。\n$ sudo mergemaster -UPiFD /usr/jails/template/ 以上\n","permalink":"https://nobwak.github.io/posts/2015-08-28-freebsd_jail%E3%81%AEetc%E3%82%92%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8Bqjail/","summary":"qjailだと、ここで示したようにqjail update -bでjailのバイナリアップグレードをしてくれる。 アップグレードといっても、ホストのバイナリ","title":"[FreeBSD] jailのetcを更新する(qjail)"},{"content":"PlexConnect https://github.com/iBaa/PlexConnect\n最低限入れておくべきもの（jailを想定）  plexmediaserver（これは当然） ca_root_nss python2.*  スタートアップスクリプト /usr/local/etc/rc.dに設置。\n/etc/rc.confにplexconnect_enable=\u0026ldquo;YES\u0026rdquo;\n#! /bin/sh # # # PROVIDE: plexconnect # REQUIRE: DAEMON # KEYWORD: shutdown . /etc/rc.subr name=\u0026#34;plexconnect\u0026#34; rcvar=plexconnect_enable command=\u0026#34;/usr/local/bin/python\u0026#34; pidfile=\u0026#34;/var/run/${name}.pid\u0026#34; plexconnect_flags=\u0026#34;/usr/local/PlexConnect/PlexConnect_daemon.py --pidfile $pidfile\u0026#34; eval ${name}_flags=\\\u0026#34;${plexconnect_flags}\\\u0026#34; load_rc_config $name run_rc_command \u0026#34;$1\u0026#34; ","permalink":"https://nobwak.github.io/posts/2015-08-27-freebsd%E3%83%A1%E3%83%A2_plexconnect%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E6%83%85%E5%A0%B1/","summary":"PlexConnect https://github.com/iBaa/PlexConnect 最低限入れておくべきもの（jailを想定） plexmediaserver（これは当然） ca_root_nss python2.* スタートアップスクリプト /usr/local/","title":"[FreeBSD][メモ] PlexConnectに関する情報"},{"content":"ここでも触れたが、10.2-RELEASEから、pkgレポジトリのデフォルト参照先がlatestからquarterlyになった。\n具体的には/etc/pkg/FreeBSD.confの内容が変わった。\nだからして、引き続きlatestを参照したい場合には、/etc/pkg/FreeBSD.confを書き換えればいいや、と思っていたものの、どうもこのファイルは「なるべく触るな」ということのようである。\nつまり、もしもの時にlatestを参照する場合には、quarterly（すなわちデフォルト）の他に、latest向けのレポジトリ設定ファイルを作る必要がある。\nそれぞれを、いちいちenable/disableするのも面倒なので、latest、quarterlyの双方を参照するよう、Multi-repositoryの設定をした。\n本記事ではMulti-repositoryの設定方法について示す。\nと同時に、普段はquarterlyを使い、特定のときだけlatestを使うための方法を示す。\nまずデフォルトの/etc/pkg/FreeBSD.confについて\n/etc/pkg/FreeBSD.confは触るな /etc/pkg/FreeBSD.confの中身を見てみると、以下のような記載がある。\n# To disable this repository, instead of modifying or removing this file, # create a /usr/local/etc/pkg/repos/FreeBSD.conf file: # # mkdir -p /usr/local/etc/pkg/repos # echo \u0026#34;FreeBSD: { enabled: no }\u0026#34; \u0026gt; /usr/local/etc/pkg/repos/FreeBSD.conf # すなわち、この設定を無効化したい場合には、/etc/pkg/FreeBSD.confは触らずに、/usr/local/etc/pkg/repos/FreeBSD.confを作ったうえで、無効化の宣言をしろ、ということである。\n/etc/pkg/FreeBSD.confはデフォルト設定として扱いたい雰囲気丸出しであるが、そうならrc.confのデフォルト設定が/etc/defaultsの下にあるように、/etc/pkg/defaults/FreeBSD.conf的なものを作ってくれても良いのではないかと思った。\nしかしそもそも、レポジトリの設定ファイルはどのように読み込まれるのであろうか。\nレポジトリ設定ファイルの読み込まれる順番 /usr/local/etc/pkg.confで指定する。\n上記ファイルの中に、REPOS_DIRがある。\npkgは、ここに記載された順番通りにレポジトリ設定ファイルを読み込む。\n特に変更していないのであれば、内容は下記の通り。\nREPOS_DIR [  \u0026#34;/etc/pkg/\u0026#34;,  \u0026#34;/usr/local/etc/pkg/repos/\u0026#34;, ] 仮に複数のディレクトリに、同じレポジトリに対する設定ファイルがあったならば、後から読み込まれたもので上書きされる。\n同じディレクトリに複数のファイルがあったならば、ファイルはアルファベット順に読み込まれる。\n以下、マニュアルからの引用\nRepositories are processed in the order they are found on the REPOS_DIR search path, with individual repository configuration files in the same directory processed in alphabetical order. Settings from files later in the search path will override those from earlier ones.\nだから、/etc/pkg/FreeBSD.confのコメントに書いてある通り、/usr/local/etc/pkg/repos/FreeBSD.confでFreeBSDレポジトリを無効にする宣言をすると、設定が上書きされ、めでたくFreeBSDレポジトリは無効になる。\nところで、同じディレクトリ内の読み込み順序はアルファベット順、というのがキモで、実はレポジトリの名前と設定ファイルの名前は別々でも構わない。\nだから、読み込ませたい順番に応じて、ファイル名の頭に数字を入れてもよい。\nlatestレポジトリ向けの設定はどこに？またどうやって？ さて。\n仕組みはわかった。\nどうも/etc/pkg/は触ってほしくないようだから、/usr/local/etc/pkg/reposにlatest向けの設定ファイルを置けばよいのだろう。\nしかしちょっと待て。\nlatestとquarterlyを両立させるにはどのようにしたら良いのであろうか。\nレポジトリの優先度について 複数のレポジトリを参照する場合、どちらをどの程度優先するか。\nレポジトリ設定ファイルにpriorityという設定項目があるので、それを使えば優先度の設定ができる、ようだが。\n以下はマニュアル。\nPRIORITY: integer Set the priority of the repository. Higher  values are preferred. Default: 0 レポジトリ設定ファイルにPRIORITYで優先度を指定すればよい。\n数値が高ければ高いほど、優先度が高い。\nふむふむ。\nでは、動作は？\n優先度設定されたときの動作 WORKING WITH MULTIPLE REPOSITORIES  Where several different repositories are configured pkg will search  amongst them all in the order specified by the PRIORITY settings in the  repo.conf files, unless directed to use a single repository by the -r  flag （略） 「複数のレポジトリが与えられた場合、pkgは、-rで参照先レポジトリを明示されない限り、PRIORITYの順番で検索を行う。」\nほほう。なるほど。\n続けて読む。\nWhere several different versions of the same package are available, pkg  will select the one with the highest version (略) 「異なるバージョンのpackageが見つかった場合、最も高いバージョンが選ばれる。」\nアレ!? 話が思わぬ方向に向かってきたよ！\n優先度の高いレポジトリからインストールしてくれるんじゃないの!?\neven if a lower numbered version can be found in a  repository earlier in the list 「低いバージョンが優先度の高いレポジトリにあったとしてもこの動作は変わらない。」\nOh\u0026hellip;。\nThis applies even if an explicit version is stated on  the command line. Thus if packages example-1.0.0 and  example-1.0.1 are available in configured repositories（後略） 「さらにさらに、仮にバージョンを指定してインストールを実行しても、\n動作は変わらない。\n高いバージョンが見つかったら問答無用で新しい方をインストールする。」\nぐぬぬ。\n基本、quarterlyを使い、特定のときだけlatestを使うためには 上記の動作を踏まえ、基本、quarterlyを使い、特定のときだけlatestを使うためには、以下の方法がある。\nA. 都度、レポジトリ設定ファイルを使い分ける。\nB. マルチレポジトリにしつつ、インストール時に考慮をする。\nここでA.を選ぶと芸がないので、B.の方法を示す。\nB.の方法と言っても、以下の通りでOK。\n最初にquarterlyレポジトリからインストールする。\n-rオプションで参照先レポジトリを明示すること。\npkgは、そのpackageをどこからインストールしたかを覚えている。\n後に示す設定を変えない限り、アップグレードの際には同じレポジトリを参照してくれる。\nだから、最初のインストールでquarterlyを選んでおけば、次回アップグレードのときにも、原則としてquarterlyが選ばれるというわけ。\nこれをコンサバティブアップグレード(conservative upgrade)といい、pkg.confでデフォルト有効になっている。\nCONSERVATIVE_UPGRADE: boolean  Ensure in multi repository mode that the priority is given  as much as possible to the repository where a package was  first installed from. Default: YES. 説明を読むと;\nTo override this  behaviour, on first installation of the package select the repository  with the appropriate version:  pkg install -r repo-a example-1.0.0  and then to make updates to that package ``sticky\u0026#39;\u0026#39; to the same reposi-  tory, set the value CONSERVATIVE_UPGRADE to true in pkg.conf. 「（常に高いバージョンを選ぶ）この動作を変更するには、最初のインストールで\n-rオプションによりレポジトリを選ぶ。\nその後のアップグレードで同じレポジトリを使うには、pkg.confの\nCONSERVATIVE_UPGRADEでtrueを選べばよい。」\n以上\n","permalink":"https://nobwak.github.io/posts/2015-08-26-freebsd_pkg_quarterly%E3%81%A8latest%E3%83%AC%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AE%E5%85%B1%E5%AD%98/","summary":"ここでも触れたが、10.2-RELEASEから、pkgレポジトリのデフォルト参照先がlatestからquarterlyになった。 具体的には/","title":"[FreeBSD] pkg quarterlyとlatestレポジトリの共存"},{"content":"件名の通り。\nFreeBSDホストに格納してある写真、動画を各種メディアプレイヤー向けに公開したいが、オリジナルのホストを直接は公開したくないな、というときのため。\njailなら物理的に同じマシンを使いつつ、論理的には別マシンとして振る舞えるので適任である。\njailの作成 jailとくればezjailが定番だが、私はqjailが好き。\nqjailについてはこちらを。\n以下、qjail installまで終わっている前提で勧める。\nflavorにssh-defaultを選んでplexという名前で作成。\n$ sudo qjail create -f ssh-default -4 192.168.200.19 plex Successfully created plex $ sudo qjail list STA JID NIC IP Jailname --- ---- --- --------------- -------------------------------------------------- DS N/A bge0 192.168.200.19 plex jail plexをスタートし、pkgをインストール\nインストールはとにかくpkgコマンドを叩けばOK。\n$ sudo qjail start plex Jail successfully started plex $ sudo qjail console plex FreeBSD 10.2-RELEASE (GENERIC) #0 r286666: Wed Aug 12 15:26:37 UTC 2015 Welcome to your FreeBSD jail. plex /root \u0026gt; plex /root \u0026gt; pkg info Bootstrapping pkg from pkg+http://pkg.FreeBSD.org/freebsd:10:x86:64/latest, please wait... Verifying signature with trusted certificate pkg.freebsd.org.2013102301... done [plex] Installing pkg-1.5.6... [plex] Extracting pkg-1.5.6: 100% Message for pkg-1.5.6: If you are upgrading from the old package format, first run:  # pkg2ng （略） plexmediaserverインストール そのままplexmediaserverをインストール。\nもちろん、マシンは64bitです。\nplex /root \u0026gt;uname -a FreeBSD plex 10.2-RELEASE FreeBSD 10.2-RELEASE #0 r286666: Wed Aug 12 15:26:37 UTC 2015 root@releng1.nyi.freebsd.org:/usr/obj/usr/src/sys/GENERIC amd64 plex /root \u0026gt;pkg install plexmediaserver （略） The following 2 package(s) will be affected (of 0 checked): New packages to be INSTALLED:  plexmediaserver: 0.9.12.8.1362  compat9x-amd64: 9.2.902000.201310 （略） [plex] [1/2] Installing compat9x-amd64-9.2.902000.201310... [plex] [1/2] Extracting compat9x-amd64-9.2.902000.201310: 100% [plex] [2/2] Installing plexmediaserver-0.9.12.8.1362... ===\u0026gt; Creating users and/or groups. Creating group \u0026#39;plex\u0026#39; with gid \u0026#39;972\u0026#39;. Creating user \u0026#39;plex\u0026#39; with uid \u0026#39;972\u0026#39;. [plex] [2/2] Extracting plexmediaserver-0.9.12.8.1362: 100% Message for plexmediaserver-0.9.12.8.1362: * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * multimedia/plexmediaserver includes an RC script: /usr/local/etc/rc.d/plexmediaserver TO START PLEXMEDIASERVER ON BOOT: sysrc plexmediaserver_enable=YES START MANUALLY: service plexmediaserver start Once started, visit the following to configure: http://localhost:32400/web * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * plex /root \u0026gt; plexmediaserver起動 rc.confに一行加えてさっさと起動。\nplex /root \u0026gt;sysrc plexmediaserver_enable=YES plexmediaserver_enable: -\u0026gt; YES plex /root \u0026gt;service plexmediaserver start Starting plexmediaserver. plex /root \u0026gt; ブラウザからhttp://＜IPアドレス＞:32400/webに繋ぐ。\nもし「このサーバに権限（permission）がない」というようなことを言われたなら、以下のファイルを変更するといいかもしれない。\n「かもしれない」というのは、以下の通り変更したら症状が改善したので、確認のために戻してみたら、二度と症状が再現しないから。\nうーん…。\n/usr/local/plexdata/Plex Media Server/Preferences.xml Preferences （略）allowedNetworks=\u0026#34;192.168.1.0/255.255.255.0\u0026#34; いったんそのままにしておく。\nplexmediaserver向けにディレクトリをマウント jailから抜けてホスト側で作業\njailであるplexのファイルシステムは、ホスト側では/usr/jails/plexにある。\n/usr/jails/plex/がjail plexのルートディレクトリ。\nだからホストの/warehouseにデータがあるとして、/usr/jails/plex/mediaにマウントすれば、jail plexでは/mediaとして見える。\nせっかくだからread onlyでね。\n$ sudo mount_nullfs -o ro /warehouse /usr/jails/plex/media jail plexから見えるのを確認したら、ホスト側のfstabに書き込み。\n$ sudo sh -c \u0026#34;mount -p|grep /usr/jails/plex/media \u0026gt;\u0026gt; /etc/fstab\u0026#34; あとはブラウザからplex media serverにつないで、メディアの追加で/mediaを選ぶだけ\n以上\n","permalink":"https://nobwak.github.io/posts/2015-08-25-%E3%83%A1%E3%83%A2_%E5%86%99%E7%9C%9F%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%93%E3%83%87%E3%82%AA%E7%AD%89%E3%82%92%E3%81%9F%E3%82%81%E8%BE%BC%E3%82%93%E3%81%A0freebsd%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AEjail%E3%81%ABplex_media_server%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"件名の通り。 FreeBSDホストに格納してある写真、動画を各種メディアプレイヤー向けに公開したいが、オリジナルのホストを直接は公開したくない","title":"[メモ] 写真、ホームビデオ等をため込んだFreeBSDホストのjailにPlex Media Serverをインストール"},{"content":"atomのpackage管理をproxy越えで行う方法を示す。\natomは1.01、Windows 7である。\natomのpackage管理について atomのpackageはapm（atom package manager）で管理される。\nproxyの背後からapmを使うには、ちょっと面倒な作業が必要だ。\napmはそれ自体で独立しているCUIプログラムである。atomの中の機能ではない。\nだから、proxyの設定をしようとしたら、atomの設定を変更するのではなく、apmの設定を変更しないといけない。\nつまり、atomのシャレオツなインタフェース経由ではなく、apmをコマンド操作したり、テキストファイルを修正することが必要だ。\nなお、apmも実はwrapperなのだが、proxyの設定に限れば無視して構わない。\napmはどこにある？ apmは以下の場所にインストールされている。\n＜インストールディレクトリ＞\\Atom\\resources\\app\\apm\\bin\\apm.cmd 拡張子が.cmdで、中身を見ると、実体は同ディレクトリにあるnode.exeであることが分かるが、ここでは関係ない。\nコマンド操作をするならパスを通さないといけないところだが、面倒くさい。\nどうせ滅多に使わないので、＜インストールディレクトリ＞\\Atom\\resources\\app\\apm\\bin\\ で作業をする。\napm helpで使い方の説明が表示される。\nC:\\Atom\\resources\\app\\apm\\bin\u0026gt;apm help apm - Atom Package Manager powered by https://atom.io Usage: apm \u0026lt;command /\u0026gt; where \u0026lt;command /\u0026gt; is one of:  clean, config, dedupe, deinstall, delete, dev, develop, docs, erase,  featured, home, init, install, link, linked, links, list, ln, lns, login,  ls, open, outdated, publish, rebuild, rebuild-module-cache, remove, rm,  search, show, star, starred, stars, test, uninstall, unlink, unpublish,  unstar, update, upgrade, view. Run `apm help \u0026lt;command /\u0026gt;` to see the more details about a specific command. Options:  --color Enable colored output [boolean] [default: true]  -v, --version Print the apm version  -h, --help Print this usage message  Prefix an option with `no-` to set it to false such as --no-color to disable  colored output. C:\\Atom\\resources\\app\\apm\\bin\u0026gt; apmの設定方法は二通り apmの設定方法には二つの方法がある。\n一つは、apmをコマンド操作する方法\nもう一つは、設定ファイルを直接書き換える方法\n一つ目の、コマンド操作での設定方法だが、結局のところ言われた通りに設定ファイルの書き換えをしている「だけ」なので、実施的な違いはない。\nもう少し踏み込んでいうと、仮にコマンド操作で設定をしても、設定値の妥当性はいっさい、してくれない。\n仮に間違った設定値を指定しても、言われた通りに設定ファイルに加えるだけなので注意。\n【参考】apm設定ファイルのひな形作成 apmの設定は、ユーザごとのテキストファイル.apmrcで変更する。\nところが、インストール直後には、（ユーザごとの）.apmrcは存在しない。\n自分で作っても良いのだが、以下のようにするとひな形が作られる。\nC:\\Atom\\resources\\app\\apm\\bin\u0026gt;apm config edit 上記コマンドを実行すると、メモ帳が開き、.apmrcの内容が表示される。\n何もしないで閉じてもよいし、後述するように、後で同じファイルを開くので、今ここで書き換えてしまってもよい。\n書き換える場合は開きっぱなしにしておく。\nなお、ひな形を作ったとしても、コマンド経由で書き換えた場合、コメント行はバッサリ削られてしまうようだ。\n;;;; ; npm userconfig file ; this is a simple ini-formatted file ; lines that start with semi-colons are comments. ; read `npm help config` for help on the various options ;;;; ;;;; ; all options with default values ;;;; ; access=null ; always-auth=false ; bin-links=true （略） apm設定ファイル.apmrcの保存場所 前章の手順に沿うと、以下の場所に.apmrcが生成される。\nいわゆるホームディレクトリである。\nC:\\Users\\＜ユーザ名＞\\.atom\\.apmrc なお、以下にも同じようなファイルがある。\nが、これはデフォルト設定（global config）なので触ってはいけない。\nC:\\Users\\＜ユーザ名＞\\.atom\\.apm\\.apmrc apm設定ファイルでproxy設定する場合 設定ファイルを直接書き換える場合には、上記のファイルを開き、以下の行を書き込むだけ。\nproxy=http://＜ID＞:＜password＞@＜address＞:＜port＞ https-proxy=http://＜ID＞:＜password＞@＜address＞:＜port＞ httpsの接続で問題の出る場合には、以下も追加する。\nstrict-ssl = false コマンドで設定する場合 apmを実行できる状態で、以下のようにコマンドを叩く\nC:\\Atom\\resources\\app\\apm\\bin\u0026gt;apm config set https-proxy=\u0026#34;http://＜ID＞:＜password＞@＜address＞:＜port＞\u0026#34; C:\\Atom\\resources\\app\\apm\\bin\u0026gt;apm config set proxy=\u0026#34;http://＜ID＞:＜password＞@＜address＞:＜port＞\u0026#34; apm config listで設定内容を確認できる。\nC:\\Atom\\resources\\app\\apm\\bin\u0026gt;apm config list （略） ; userconfig C:\\Users\\avedakedavra\\.atom\\.apmrc https-proxy = \u0026#34;http://＜ID＞:＜password＞@＜address＞:＜port＞\u0026#34; proxy = \u0026#34;http://＜ID＞:＜password＞@＜address＞:＜port＞\u0026#34; もし設定変数を間違えてしまった場合には、以下のようにすれば削除できる。\n（https-proxyとすべきところ、https-proproxyしてしまったと仮定）\nC:\\Atom\\resources\\app\\apm\\bin\u0026gt;apm config del https-proproxy 設定変数名について（https-proxy、proxy） 設定変数名について、webを検索すると、proxyではなくhttp-proxyだったり、https-proxyではなくhttps_proxy（httpsとproxyの間がアンダースコア）になっている情報もある。\n少なくとも1.0.3の時点では、それぞれproxy, https-proxyが正しい。\nソースから確認できる。\nhttps://github.com/atom/apm\n","permalink":"https://nobwak.github.io/posts/2015-08-20-atom%E3%81%AEpackage%E3%82%92proxy%E3%81%AE%E8%83%8C%E5%BE%8C%E3%81%8B%E3%82%89%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AFwindows_7/","summary":"atomのpackage管理をproxy越えで行う方法を示す。 atomは1.01、Windows 7である。 atomのpackage管理につい","title":"atomのpackageをproxyの背後からインストールするには（Windows 7）"},{"content":"10.2-RELEASEから、pkgのデフォルト参照先レポジトリが\u0026quot;quartely\u0026quot;のものになる。\n◎pkg.confの変更\n-# $FreeBSD: releng/10.1/etc/pkg/FreeBSD.conf 263938 2014-03-30 15:29:54Z bdrewery $ +# $FreeBSD: releng/10.2/etc/pkg/FreeBSD.conf 285830 2015-07-23 23:31:40Z gjb $   FreeBSD: { - url: \u0026#34;pkg+http://pkg.FreeBSD.org/${ABI}/latest\u0026#34;, + url: \u0026#34;pkg+http://pkg.FreeBSD.org/${ABI}/quarterly\u0026#34;, } ご覧のとおり、いままでは\u0026quot;latest\u0026quot;。\nこれは言わばpkgのheadのようなもので、最新のpkgは手に入るものの、うっかりインストールすると地雷を踏むことがが多かった。\nquarterlyは上記の問題を解決するために設けられる。\n中の人によれば「意図的に更新速度を控えめにすることで、問題の発生を抑える一方、セキュリティ更新は受け取れるようにする」とのこと。\nもちろん、望ならば今まで通りlatestを参照することもできる。\n \u0026ldquo;In general, the quarterly package set is less prone to having build failures, since the changes in the branch are (by intent) less intrusive, while still receiving security updates. \u0026quot;\n latestからquarterlyに変更してバージョンチェックしてみると、すでにインストール済みのpackageからバージョンの下がるケースも見られた。\npython27-2.7.10 \u0026gt; succeeds remote (remote has 2.7.9_1) 詳細は待て10.2-RELEASEのアナウンス。\n \u0026ldquo;(This will be noted in the final 10.2-RELEASE announcement, as well as\nthe release notes, and will also include instructions on how to switch\nto the -latest\u0026rsquo; branch if that is what is desired.)\u0026rdquo;\n 中の人の発言は以下から引用。\nhttps://lists.freebsd.org/pipermail/freebsd-stable/2015-July/082905.html\n","permalink":"https://nobwak.github.io/posts/2015-08-05-freebsd_10.2-release%E3%81%8B%E3%82%89%E9%81%A9%E7%94%A8%E3%81%95%E3%82%8C%E3%82%8Bpkg_quarterly%E3%81%A6%E3%81%AA%E3%82%93%E3%81%A0/","summary":"10.2-RELEASEから、pkgのデフォルト参照先レポジトリが\u0026quot;quartely\u0026quot;のものになる。 ◎pkg.confの","title":"[FreeBSD] 10.2-RELEASEから適用されるpkg quarterlyてなんだ。"},{"content":"Pythonからpy2exeなどでWindowsアプリケーションを作成したときに、アイコンを設定することができる。\nしかし、作成したアプリケーションがGUI版の場合、GUIタイトルバーのアイコンを設定するには、ちょっとしたテクニックが必要である。\npy2exe等でアイコン設定済み、かつGUIはwxPythonで作成している前提で、その方法を示す。\nサンプル class MyFrame(wx.Frame):  def __init__(self, *args, **kwds): \t（略） \tif os.path.exists(\u0026#34;myWxApp.exe\u0026#34;):  self.SetIcon(wx.Icon(\u0026#34;myWxApp.exe\u0026#34;,wx.BITMAP_TYPE_ICO)) Frameクラスの初期化defの中で、上記のような記載を加える。\nもちろんmyWxApp.exeは最終的なファイル名。\n説明 py2exe等でiconファイルを設定するというのは、つまり実行ファイルに埋め込むということ。\n上記のようにSetIconで自分自身の実行ファイルを参照すると、埋め込んでおいたアイコンファイルを読み取ることができる。\n元ネタ\nHow to use py2exe icon_resources in wxPython application?\n【参考】wxPython\nhttp://ja.wikipedia.org/wiki/WxPython\nwxPythonは、「wxPythonはPythonで記述されたクロスプラットフォームなウィジェット・ツールキットである。」\n要するにPythonをGUIで動かすツールキット。OSをまたがって使用できる。\n","permalink":"https://nobwak.github.io/posts/2015-08-05-python_wxpython%E3%81%A7%E3%82%BF%E3%82%A4%E3%83%88%E3%83%AB%E3%83%90%E3%83%BC%E3%81%AB%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"Pythonからpy2exeなどでWindowsアプリケーションを作成したときに、アイコンを設定することができる。 しかし、作成したアプリケー","title":"[Python] wxPythonで、タイトルバーにアイコンを表示するには"},{"content":"ACLとは、一般的なUNIXのパーミッション制御をさらに拡張したものである。\nFreeBSDのハンドブックは以下の通りであるが、どうも実動作とハンドブックの内容に食い違いがあるようなのでメモ。\nhttps://www.freebsd.org/doc/ja_JP.eucJP/books/handbook/fs-acl.html\nhttps://www.freebsd.org/doc/en/books/handbook/fs-acl.html\nACLはファイルシステムごとに有効/無効を設定できる。\n設定変更は、そのファイルシステムをumountするか、リードオンリーの状態でしかできない。\nしたがって、ルートファイルシステムの設定変更は、通常起動した後ではできない。\nACLの有効/無効化 GENERICカーネルであればACLが使える。\nACLを有効にするには、/etc/fstabの当該ファイルシステムオプションにaclsを追加し、再起動すればよい。\nもちろん、ルートファイルシステム以外なら、再起動しないまでも、いったんumount、mountすればよい。\nmount -uによる再マウントでは有効にならないので注意\nfstab設定例は後述\nACLの有効/無効化のしくみ ファイルシステムヘッダのスーパーブロックにACLの有効/無効フラグがある。tunefsコマンドでフラグを変更できる。\nfstabでaclsが指定されていると、マシン起動時に、tunefsでスーパーブロックを書き換えののち、マウントされる。\n注意点（一度ACLを有効にしたら永続…?） ハンドブックによれば、一度ACLを有効にしたらその設定が永続する、という。\n「スーパブロックフラグを設定すると、fstab に記述されていなかったり、デバイスの順番が変わってしまっても、常に ACLs が有効な状態でマウントされます」\n※英語版も同じ。\nハンドブックとの違い？ ところが手元のマシンの動作を見ると、tunefsによる設定に関わらず、fstabのオプションしか参照していないようだ。\nつまり、fstabでaclsを削ると、ACL無効でマウントされるようだ。\n（fstabにaclsが無い場合、tunefs -a disableが実行される?）\nそれはともかく、上記を踏まえた設定例を示す。\nfstabの設定変更 fstabのOptionsのところ、カンマに続けて「acls」と記載。\nルートファイルシステムなら、再起動。\nルートファイルシステム以外なら、umount,mountでよい。\nACLの設定はハンドブック参照。\n設定前\n# Device Mountpoint FStype Options Dump Pass# /dev/ada0p2 / ufs rw 1 1 設定後\n# Device Mountpoint FStype Options Dump Pass# /dev/ada0p2 / ufs rw,acls 1 1 以上。tunefsは考えなくてよし。\n以下は記録。\ntunefsのうごき tunefs -pでACLの状態を確認できる。\n# tunefs -p /dev/ada0p2 tunefs: POSIX.1e ACLs: (-a) disabled tunefs -a enable/disableでACLの有効、無効を設定できる\n# tunefs -a enable /dev/ada0p2 tunefs: POSIX.1e ACLs set # tunefs -p /dev/ada0p2 tunefs: POSIX.1e ACLs: (-a) enabled /dev/ada0p2 は、ルートファイルシステムなのだが、そのまま起動すると、あるいは再起動するとtunefs -pの結果がdisabledに戻ってしまう。\nさらに分からないのは、fstabにaclsの記載あるなしに関わらずdisabledになること。\n実験（fstabしか見ていない…?） fstabにaclsを記載し、あるファイルにsetfaclでACLを設定する。\nls -laで確認すると以下のように+が付く。\n$ setfacl -m u:nobwak:r,o:: file.txt $ ls -la ./file.txt -rw-r-----+ 1 doe doe 8 4月 23 13:45 ./file.txt $ mount /dev/ada0p2 on / (ufs, local, journaled soft-updates, acls) その後、fstabからaclsを削除し、再起動したのち、ls -laで確認すると+がない。\n$ ls -la ./file.txt -rw-r----- 1 doe doe 8 4月 23 13:45 ./file.txt $ mount /dev/ada0p2 on / (ufs, local, journaled soft-updates) なお、上記の再起動前後を通してtunefs -pの結果はdisabled.\n","permalink":"https://nobwak.github.io/posts/2015-05-09-freebsd%E3%83%A1%E3%83%A2_aclaccess_control_lists%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B/","summary":"ACLとは、一般的なUNIXのパーミッション制御をさらに拡張したものである。 FreeBSDのハンドブックは以下の通りであるが、どうも実動作と","title":"[FreeBSD][メモ] ACL（Access Control Lists）を有効にする"},{"content":"Sambaの4.2.0リリースに伴い、3系列サポートが終了する、とのことなので、4.xに移行した。\n顛末を記す。\nSamba 3系列のサポート終了について 一応はソースを。\n4.2.0のリリースノートに記載されている。\nhttps://www.samba.org/samba/history/samba-4.2.0.html\n With the final release of Samba 4.2, the last series of Samba 3 has been discontinued! People still running 3.6.x or earlier,should consider moving to a more recent and maintained version (4.0 - 4.2).\n Samba 4について（Active DirectoryにしなくてもOK） Samba 4はActive Directoryに対応しているが、従来のドメイン管理（NT4-style）もできる。\nActive Directory対応の追加により、従来機能が差し替わることはないし、テストも続けられる。\nなお、3から4へのアップデートで、自動的にActive Directoryへ変更されることはない。\n移行先の選定（4.1にした） どうせ移行するなら4.2がいいなと思ったんだけど、2015/4/28現在、4.2のports/packageはない。\nしかたなく4.1にした。\n移行にあたっての注意 4へのアップグレードにあたり注意すべきことは以下の三点である。\nうっかりすると、マシン起動時にsambaが起動しなかったり、共有が消えたり、ユーザがアクセスできなくなったりする。あな恐ろし。\n rc.conf（マシン起動時のsamba起動設定）の書き換え samba設定ファイルの移行 sambaユーザデータベースの移行  インストール（アップグレード）の流れ 全体の流れを示す。\n samba3を停める。 samba3の削除 samba4のインストール rc.confの書き換え 設定ファイルの移管 ユーザーデータベースの移管 起動  Samba3の停止 アンインストールの前に。\nなお、serviceコマンドで使うSambaの識別子は、3の\u0026quot;samba\u0026quot;が4では\u0026quot;samba_server\u0026quot;に変わる（後述）。\n$ sudo service samba stop Stopping smbd. Waiting for PIDS: 654. Stopping nmbd. Waiting for PIDS: 651. Samba3の削除とSamba4のインストール pkgならsamba4のインストール時にsamba3を削除してくれる。\nsamba4インストール後のメッセージは超重要。\n$ sudo pkg install samba41 （略） Conflicts with the existing packages have been found. One more solver iteration is needed to resolve them. The following 6 packages will be affected (of 0 checked): （nobwak注 samba3は自動的に削除される） Installed packages to be REMOVED: samba36-3.6.25 New packages to be INSTALLED: cyrus-sasl: 2.1.26_9 libinotify: 20140622 gamin: 0.1.10_8 ldb: 1.1.19_1 samba4: 4.1.17 （略） Message for samba4-4.1.17 :  =============================================================================== How to start: http://wiki.samba.org/index.php/Samba4/HOWTO * Your configuration is: /usr/local/etc/smb4.conf * All the relevant databases are under: /var/db/samba4 * All the logs are under: /var/log/samba4 * Provisioning script is: /usr/local/bin/samba-tool （略） Bug reports should go to the: https://bugzilla.samba.org/ =============================================================================== rc.confの書き換え 本記事の手順上、rc.confの書き換えをここに記載しているが、本来は設定ファイルの正常性確認や検証を済ませてからのほうがよい。\nsambaの3と4では、rc.confの書式が違う。\nここを忘れたままだと、serviceコマンドでのsambaサーバの操作ができないし、次回のマシン再起動時にsambaが自動起動しない。\nsamba3だと;\nsamba_enable=\u0026ldquo;YES\u0026rdquo;\nsamba4だと;\nsamba_server_enable=\u0026ldquo;YES\u0026rdquo;\nしたがって、rc.confは以下のようになる。\nもちろん、samba3の方は、不要なら削除して構わない。\n# samba_enable=\u0026#34;YES\u0026#34; samba_server_enable=\u0026#34;YES\u0026#34; 設定ファイルの移管 sambaの3と4では、設定ファイルの場所は/usr/local/etc/の下で変更ないのだが、ファイル名が異なる。\n気づかずにsamba4を起動すると共有フォルダが消える。\nsamba3だと;\nsmb.conf\nsamba4だと;\nsmb4.conf\nsamba3の書式はsamba4でも有効なので、コピーするかリンクを張る。\n私はリンクにしておいた。\n$ cd /usr/local/etc/ $ sudo ln -s ./smb.conf ./smb4.conf $ ユーザーデータベースの移管 samba向けのユーザデータベースも移管が必要である。\nこれをしないとユーザごとの認証ができない。\nこれには、ほとほと困らされた。\nユーザデータベースの置き場所は以下の通り。\nsamba3だと;\n/usr/local/etc/samba/\nsamba4だと;\n/var/db/samba4/private/\nしたがって、/var/db/samba4/privateとディレクトリを作成し、/usr/local/etc/samba/の下にあるファイルをコピーすればよい。\nなお、samba4のユーザデータベース置き場をどう調べたかというと、ビルドオプションを表示させてPRIVATE_DIRを見た。\n（こんなのすぐ分かるかよ！）\n$ smbd -b|less Build environment:  Built by: root@101i386-default-job-07  Built on: Thu Apr 16 17:40:08 UTC 2015  Built using: cc  Build host: FreeBSD 101i386-default-job-07 10.1-RELEASE-p9 FreeBSD 10.1-RELEASE-p9 i386  SRCDIR: /wrkdirs/usr/ports/net/samba41/work/samba-4.1.17/source3  BUILDDIR: /wrkdirs/usr/ports/net/samba41/work/samba-4.1.17/source3 Paths:  SBINDIR: /usr/local/sbin  BINDIR: /usr/local/bin  CONFIGFILE: /usr/local/etc/smb4.conf  LOGFILEBASE: /var/log/samba4  LMHOSTSFILE: /usr/local/etc/lmhosts  LIBDIR: /usr/local/lib  MODULESDIR: /usr/local/lib/shared-modules  SHLIBEXT: so  LOCKDIR: /var/db/samba4  STATEDIR: /var/db/samba4  CACHEDIR: /var/db/samba4  PIDDIR: /var/run/samba4  SMB_PASSWD_FILE: /var/db/samba4/private/smbpasswd  PRIVATE_DIR: /var/db/samba4/private （以下略） 起動 起動前にtestparmでsmb4.confのチェックをするのはいい習慣であります。\n$ testparm Load smb config files from /usr/local/etc/smb4.conf Processing section \u0026#34;[fileshare]\u0026#34; Loaded services file OK. Server role: ROLE_STANDALONE Press enter to see a dump of your service definitions [global] （略） では起動。\nrc.confでsamba_server_enable=\u0026ldquo;YES\u0026quot;と記載しているなら、以下の通り。\n$ sudo service samba_server start Performing sanity check on Samba configuration: OK Starting nmbd. Starting smbd. Starting winbindd. $ していないなら、以下のように「onestart」にする。\n$ sudo service samba_server onestart 以上。\n","permalink":"https://nobwak.github.io/posts/2015-05-07-freebsd_samba_3.x%E3%81%8B%E3%82%89samba_4.x%E3%81%B8%E3%81%AE%E7%A7%BB%E8%A1%8C/","summary":"Sambaの4.2.0リリースに伴い、3系列サポートが終了する、とのことなので、4.xに移行した。 顛末を記す。 Samba 3系列のサポート終了について","title":"[FreeBSD] Samba 3.xからSamba 4.xへの移行"},{"content":"https://www.sublimetext.com/docs/3/font.html を参照。\nPreferences \u0026gt; Settings - User と進み、表示されたファイルに設定を書き込む。\n書式は以下の通り。\n\u0026#34;font_face\u0026#34;: \u0026#34;Courier New\u0026#34;, \t\u0026#34;font_size\u0026#34;: 10 私の設定ファイルの例。\n{ \t\u0026#34;color_scheme\u0026#34;: \u0026#34;Packages/User/SublimeLinter/Monokai (SL).tmTheme\u0026#34;, \t\u0026#34;font_face\u0026#34;: \u0026#34;VL ゴシック\u0026#34;, \t\u0026#34;font_size\u0026#34;: 11, \t\u0026#34;ignored_packages\u0026#34;: \t[ \t\u0026#34;Vintage\u0026#34; \t] } 以上。\n","permalink":"https://nobwak.github.io/posts/2015-03-22-sublimetext3%E3%81%A7%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E3%82%92%E5%A4%89%E3%81%88%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"https://www.sublimetext.com/docs/3/font.html を参照。 Preferences \u0026gt; Settings - User と進み、表示されたファイルに設定を書き込む。 書式は以下の通り。 \u0026#34;font_face\u0026#34;: \u0026#34;Courier New\u0026#34;, \u0026#34;font_size\u0026#34;: 10 私の設定ファイルの例。 { \u0026#34;color_scheme\u0026#34;: \u0026#34;Packages/User/SublimeLinter/Monokai (SL).tmTheme\u0026#34;, \u0026#34;font_face\u0026#34;: \u0026#34;VL ゴシック\u0026#3","title":"sublimetext3でフォントを変えるには"},{"content":"proxy越しのpackage control（最初のインストール） package controlインストール用のコードを修正する。\n定石通り、以下からインストール用コードをコピー。\nhttps://packagecontrol.io/installation\nコードの中身をよく見ると、urllib.request.ProxyHandler() というのがあるはず。\n以下は例（見やすいように改行、インデントを加えてあります）\n（前略） sublime.installed_packages_path(); urllib.request.install_opener( \turllib.request.build_opener( \turllib.request.ProxyHandler() \t) （後略） このカッコのなかにdict型でproxyなどの設定を記述する。\n書式は下記の通り。\nhttp用、https用の二つを。\n{\u0026#34;http\u0026#34;: \u0026#34;http://＜ユーザ名＞:＜パスワード＞@＜アドレス＞:＜ポート＞\u0026#34;,  \u0026#34;https\u0026#34;: \u0026#34;https://＜ユーザ名＞:＜パスワード＞@＜アドレス＞:＜ポート＞\u0026#34;} 例\n（前略） sublime.installed_packages_path(); urllib.request.install_opener( \turllib.request.build_opener( \turllib.request.ProxyHandler( \t{\u0026#34;http\u0026#34;: \u0026#34;http://somebody:password@proxy.server:8000\u0026#34;, \t\u0026#34;https\u0026#34;: \u0026#34;https://somebody:password@proxy.server:8000\u0026#34;} \t) \t) （後略） proxy越しのpackage control（packageインストール向け） https://packagecontrol.io/docs/settings\n以上の通り。\nPreferences \u0026gt; Package Settings \u0026gt; Package Control \u0026gt; Settings – User と進み、表示されたファイルに設定を書き込む。\n書式は以下の通り。\n\u0026#34;http_proxy\u0026#34;: \u0026#34;http://[proxy_server]:[port]\u0026#34;,  \u0026#34;https_proxy\u0026#34;: \u0026#34;https://[proxy_server]:[port]\u0026#34;,  \u0026#34;proxy_username\u0026#34;: \u0026#34;username\u0026#34;,  \u0026#34;proxy_password\u0026#34;: \u0026#34;password\u0026#34; 変更例は以下の通り。\n{ \t\u0026#34;http_proxy\u0026#34;: \u0026#34;http://somebody:password@proxy.server:8000\u0026#34;, \t\u0026#34;https_proxy\u0026#34;: \u0026#34;https://somebody:password@proxy.server:8000\u0026#34;, \t\u0026#34;proxy_username\u0026#34;: \u0026#34;somebody\u0026#34;, \t\u0026#34;proxy_password\u0026#34;: \u0026#34;password\u0026#34;, \t\u0026#34;in_process_packages\u0026#34;: \t[ \t], \t\u0026#34;installed_packages\u0026#34;: \t[ \t\u0026#34;Anaconda\u0026#34;, \t\u0026#34;BracketHighlighter\u0026#34;, \t\u0026#34;ConvertToUTF8\u0026#34;, \t\u0026#34;IMESupport\u0026#34;, \t\u0026#34;Insert Callback\u0026#34;, \t\u0026#34;Package Control\u0026#34;, \t\u0026#34;SideBarEnhancements\u0026#34;, \t\u0026#34;SublimeLinter\u0026#34;, \t\u0026#34;SublimeLinter-pep8\u0026#34;, \t\u0026#34;Theme - Soda\u0026#34;, \t\u0026#34;Theme - Spacegray\u0026#34; \t] } 以上\n","permalink":"https://nobwak.github.io/posts/2015-03-20-sublime_text%E3%81%AEpackaging_control%E3%82%92proxy%E8%B6%8A%E3%81%97%E3%81%A7%E4%BD%BF%E3%81%86%E3%81%AB%E3%81%AF/","summary":"proxy越しのpackage control（最初のインストール） package controlインストール用のコードを修正する。 定石通り、以下からインス","title":"sublime textのpackaging controlをproxy越しで使うには"},{"content":"Pythonのエディタとして、長らくIDLEを使っていたけれども、Sublime textに巡り合って満足した。\n導入方法について記す。\n日曜プログラマのコードエディタ 俺みたいな日曜プログラマは間欠泉的にコードを書く。\nつまり日常的にコードを書くわけではないので、文法やらなにやら、すぐに忘れてしまう。\nこういう人々にとっては、コードを書くための支援や補助があるエディタは非常にありがたい。\nとなると、一番に候補に挙がるのはEclipseであるが、日曜プログラマはそんな重量級のIDEを使うほど必死でもない。\nとなると高機能なテキストエディタくらいがちょうど良いのである。\nsublime textは、そんな要望にピッタリであった。\nsublime textとは 「コードを書くための洗練されたテキストエディタ」だそうで。\n追加機能はパッケージシステムで実現されていて、駆使すれば驚くようなことができる。\nsublime textは$70であるが、お金を払わずとも使用はできる。\nWindowsでも、Macでも使える。\nインストール http://www.sublimetext.com/3\n上記からダウンロード、インストールすればよい。\n2と3があり、3はベータの段階であるが、まあ3でよいでしょう。\nポータブルバージョンもあるのが嬉しい。\nしかし、本体インストールだけでは単なるテキストエディタ。\n続けてパッケージシステムを有効にして、パッケージをいくつかインストールする。\nその前に。\n書いたコードの実行はCtrl + B そのまま。\nコードを書くエディタにテキストエディタを選んだときの一番の欠点は、コードの実行である。\nテキストエディタで書いて、ターミナル/コマンドプロンプトを開いて実行し、またエディタに戻って…というのが苦痛。\nこれが嫌で、かといって重量級IDEも嫌で、しょうがなくPython付属のIDE（？）であるIDLEをしばらく使っていた。\nもちろん、テキストエディタでだって、コードを実行することもできる。\nしかしそれには（俺にとっては）面倒な設定が必要なんだが、Sublime textならCtrl + Bだけで済む。もちろんpython等がPATHに入っている必要はあるけれども。\nではパッケージの話へ。\nパッケージシステムの有効化 パッケージシステムを有効にするには、sublime textでコマンド実行する必要がある。\nそこだけ聞くと面倒そうだが、意外に簡単。\nctrl+` と叩くか、View \u0026gt; Show Console。\n現れた欄に https://packagecontrol.io/installation にあるコードを貼り付ける。\n同サイトに以下の警告がある通り、必ずサイトからコードをコピーすること。\n Warning: Please do not redistribute the install code via another website. It will change with every release. Instead, please link to this page.\n パッケージのインストール さっそくパッケージをインストール。\nPreference \u0026gt; Package Control \u0026gt; Install Package と進むか、Ctrl + Shift + P と叩き、さらに\u0026quot;install\u0026quot;とタイプ、リターン。\nインストール可能なパッケージが並ぶので、カーソルで選んでリターンを押すだけ。\nどのパッケージをインストールするか。\n最初は以下のページからザクザクインストールしたらよい。不要なら無効にできるしね。\nパッケージ人気ランキング\nhttps://packagecontrol.io/browse/popular\n以下、パッケージの説明。\nおすすめパッケージ SublimeLinter\nhttp://sublimelinter.readthedocs.org/en/latest/\nSublime​Linter-pep​8\nhttps://packagecontrol.io/packages/SublimeLinter-pep8\nSublimeLinterは書式をチェックしてくれる（Linter）もの。\n追加で言語パッケージを入れる必要がある。pep8はPython用。\nSideBarEnhancements\nhttps://packagecontrol.io/packages/SideBarEnhancements\nSublime Textは、左側ペインにファイルのリストが表示される。ここでの操作を強化するパッケージ。\nTheme-Soda\nhttps://packagecontrol.io/packages/Theme%20-%20Soda\nテーマですね。テーマはSublime text全体の見た目を、カラースキームはコード表示を決める。\nBracketHighlighter\nhttps://packagecontrol.io/packages/BracketHighlighter\nカッコを強調表示。\nSublimeCodeIntel\nhttps://packagecontrol.io/packages/SublimeCodeIntel\nコード補助だけど、ちょっと鬱陶しいかも。\nAlignment\nhttp://wbond.net/sublime_packages/alignment\nイコールの場所を揃えてくれる。\n以下はWindowsの日本語関係\nConvertToUTF8\nhttps://packagecontrol.io/packages/ConvertToUTF8\nIMESupport\nhttps://packagecontrol.io/packages/IMESupport\n","permalink":"https://nobwak.github.io/posts/2015-02-17-python_sublime_text%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%A8%E8%A8%AD%E5%AE%9A/","summary":"Pythonのエディタとして、長らくIDLEを使っていたけれども、Sublime textに巡り合って満足した。 導入方法について記す。 日曜プロ","title":"[Python] Sublime textのインストールと設定"},{"content":"ActivePython入れたり純正Python入れたり訳わかんなくなるからメモ。\nPythonのインストール\nhttps://www.python.org/ から2.xでも3.xでもダウンロード、インストール。\nアップグレードの場合は、たぶん自分で古いバージョンをアンインストールした方がよい、と思う。\nインストール時設定は、pythonをpathに追加するところだけ変更した。\npipのインストール\n不要ッ！\n2.7.9以降、あるいは3.4以降なら最初っからインストールされている。\npip included with Python\n実際、デフォルトの状態で以下の通り。\nC:\\Users\\nobwak\u0026gt;python --version Python 2.7.9 C:\\Users\\nobwak\u0026gt;pip list pip (1.5.6) setuptools (7.0) ん？ちょっと古いような？\npip install -U pip などとして最新版にした。\n","permalink":"https://nobwak.github.io/posts/2015-01-12-pythonwindows_windows7%E3%81%B8%E3%81%AE%E7%B4%94%E6%AD%A3python%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%83%A1%E3%83%A2/","summary":"ActivePython入れたり純正Python入れたり訳わかんなくなるからメモ。 Pythonのインストール https://www.python.org/ から2.xでも3.xでもダウン","title":"[Python][Windows] Windows7への純正Pythonインストールメモ"},{"content":"pkgngが1.4.3に上がった。\nこれより前のpkgngでは、複数レポジトリをうまく扱えない。\nしたがって、レポジトリ参照先にpourdriere等による自前レポジトリと公式レポジトリを設定している諸氏は1.4.3に上げるのが得策。\n具体的には以下。\nports-mgmt/pkg: pkg install uses the wrong repository for some packages\n要するに、追加したレポジトリからpkgをインストールしても、pkgngが公式レポジトリからpkgをダウンロードしようとする。\n1.4.3では複数レポジトリを扱うための仕組みが追加された。\n端的に言えば、複数レポジトリに優先度設定ができる。\nまずpkg.confでCONSERVATIVE_UPGRADEを有効にし、各レポジトリの設定でPRIORITYを整数値で指定すれば、複数レポジトリの優先度を決められる。\n詳細はman pkg.confせよ。\nCONSERVATIVE_UPGRADEはこちら。\nCONSERVATIVE_UPGRADE: boolean  Ensure in multi repository mode that the priority is given  as much as possible to the repository where a package was  first installed from. Default: NO. PRIORITYはこちら。\nPRIORITY: integer Set the priority of the repository the  higher is the prefered repository.  Default: 0 ","permalink":"https://nobwak.github.io/posts/2015-01-03-freebsd%E3%83%A1%E3%83%A2_pkgng%E3%81%A7%E8%A4%87%E6%95%B0%E3%83%AC%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%8B%E5%A5%B4%E3%81%AF1.4.3%E3%81%AB%E4%B8%8A%E3%81%92%E3%81%A6%E3%81%8A%E3%81%91/","summary":"pkgngが1.4.3に上がった。 これより前のpkgngでは、複数レポジトリをうまく扱えない。 したがって、レポジトリ参照先にpourdrie","title":"[FreeBSD][メモ] pkgngで複数レポジトリ使ってる奴は1.4.3に上げておけ"},{"content":"10.1-RELEASEにアップグレードしたけどzpool(ZFS)のアップグレードを忘れてたのでメモ。\nアップグレードでfeaturesがいくつか追加されるから、まあやっておくのがおすすめ。\n9.x系列からのアップグレードの場合は、以下を参照のこと。\n[メモ]zpoolのupgrade[メモ]zpoolのVersionについて（Versionナンバはもう使われない）10.1-RELEASEで追加されるfeaturesは以下の通り。\n詳細はman zpool-featuresせよ（手抜き）。\nこの中ではbookmarksがすごいと思うよ。\nspacemap_histogram  enabled_txg  hole_birth  extensible_dataset  embedded_data  bookmarks  filesystem_limits アップグレードが必要かどうかは、zpool statusで分かる。\n$ zpool status  pool: warehouse  state: ONLINE status: Some supported features are not enabled on the pool. The pool can  still be used, but some features are unavailable. action: Enable all features using \u0026#39;zpool upgrade\u0026#39;. Once this is done,  the pool may no longer be accessible by software that does not support  the features. See zpool-features(7) for details.  scan: none requested config:  NAME STATE READ WRITE CKSUM  warehouse ONLINE 0 0 0  ada2 ONLINE 0 0 0 errors: No known data errors 前も書いたと思うけど、ZFSは「何をすべきか」まで教えてくれるのがとても助かる。\nファイルシステムなんてそんな頻繁にいじらないし、久しぶりだとコマンド忘れてしまうからね。\nこの場合はzpool upgradeせよと。\nまず一般権限でzpool upgrade。\n$ zpool upgrade This system supports ZFS pool feature flags. All pools are formatted using feature flags. Some supported features are not enabled on the following pools. Once a feature is enabled the pool may become incompatible with software that does not support the feature. See zpool-features(7) for details. POOL FEATURE --------------- warehouse  spacemap_histogram  enabled_txg  hole_birth  extensible_dataset  embedded_data  bookmarks  filesystem_limits 追加されるfeaturesを確認したらスーパーユーザでもう一度zpool upgrade。\nすぐ終わる。\nお約束だが、フルバックアップは取っておこうな！\n$ sudo zpool upgrade warehouse This system supports ZFS pool feature flags. Enabled the following features on \u0026#39;warehouse\u0026#39;:  spacemap_histogram  enabled_txg  hole_birth  extensible_dataset  embedded_data  bookmarks  filesystem_limits ","permalink":"https://nobwak.github.io/posts/2015-01-02-freebsd_%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89%E6%99%82%E3%81%AB%E3%81%AFzpoolzfs%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89%E3%82%82%E5%BF%98%E3%82%8C%E3%81%9A%E3%81%ABne/","summary":"10.1-RELEASEにアップグレードしたけどzpool(ZFS)のアップグレードを忘れてたのでメモ。 アップグレードでfeaturesがい","title":"[FreeBSD] システムアップグレード時にはzpool(ZFS)のアップグレードも忘れずにNE！"},{"content":"Python、Perl、Ruby、PHPなどのLight Languageは、俺みたいな素人プログラマでもじゃんじゃんコードを書けるところが素晴らしい。\nさらにそのコードがGUIで動くようになるのなら、もっと素晴らしい。\nwxGladeでそれができる。wxGladeでGUIを作ってみたので記す。\nwxGladeとは http://wxglade.sourceforge.net/index.php\nwxPython向けのGUIデザイナーである。\nwxPythonとはPythonのGUIツールキット。\nまた、GNOMEのGUIツールキットであるGladeが名前に入っている通り、wxGladeの設計思想はGladeに沿っている。\nインストール こちらからどうぞ。\n以下の例ではWindowsを使っている。\n最初の一歩 どんなGUIを作るにしても、まず最初にすべきことがある。\n起動すると以下のような画面。\n何のとっかかりもなく、いきなり途方に暮れるわけだが、慌てず騒がず、左上ウインドウのさらに左上にあるアイコンをクリック。\nそのままOK。\nなんか枠ができた。\nそしてこちらを選んで、先ほどの枠に追加。\nするとこのようなのっぺりした画面に。\nこれで最初の一歩が終了。\nここから、作りたいGUIに合わせて作業をしていく。\n作業の前に（日本語は使わないでおこう…） 超絶分かりやすいPythonにも弱点がある。\nそれは文字コードの扱い。\nwxGladeで日本語を書き込むことはできるが、UTF-8なのかShift-JIS(CP932)なのかの扱いが大変に面倒である。\nだから、GUI作成時のテキスト、注釈、ボタンは適当な英語で書いておき、実際の処理を書くときに日本語に変えるのがよいと思う。\n画面の分割と配置 最終的に以下のようなGUIを作りたいとする。\nこのGUIは、まず画面を縦に三分割する。さらに1行目、3行目を横に三分割する。\n分割にはパレット上の以下のツールで行う。\nざくざくと分割して以下のように。\n以下のように便宜的に番号を振って、\n①にはテキストを、②にはテキストの枠を、③にはボタン、④には横棒、⑤にはスペース、⑥、⑦にはボタンを置く。\nツリーはこんなかんじ。\n名前を変更し、空白（スペーサー）は適当に横に伸ばす。\nあとは、経験上、各要素を以下のようにするといいかも。\n書き出し Appのプロパティから、LanguageにPython、Output Pathでファイルを指定し、Generate Codeでコード生成。\n以下が例。\n#!/usr/bin/env python # -*- coding: CP932 -*- # # generated by wxGlade 0.6.8 (standalone edition) on Sun Dec 28 07:13:39 2014 #  import wx # begin wxGlade: dependencies import gettext # end wxGlade # begin wxGlade: extracode # end wxGlade class MyFrame(wx.Frame):  def __init__(self, *args, **kwds):  # begin wxGlade: MyFrame.__init__  kwds[\u0026#34;style\u0026#34;] = wx.DEFAULT_FRAME_STYLE  wx.Frame.__init__(self, *args, **kwds)  self.panel_1 = wx.Panel(self, wx.ID_ANY)  self.label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, _(\u0026#34;input : \u0026#34;))  self.inputfile = wx.TextCtrl(self.panel_1, wx.ID_ANY, \u0026#34;\u0026#34;)  self.ChooseButton = wx.Button(self.panel_1, wx.ID_ANY, _(\u0026#34;Choose\u0026#34;))  self.static_line_1 = wx.StaticLine(self.panel_1, wx.ID_ANY)  self.go = wx.Button(self.panel_1, wx.ID_ANY, _(\u0026#34;Run\u0026#34;))  self.exit = wx.Button(self.panel_1, wx.ID_ANY, _(\u0026#34;Cancel\u0026#34;))  self.__set_properties()  self.__do_layout()  self.Bind(wx.EVT_BUTTON, self.choosefile, self.ChooseButton)  self.Bind(wx.EVT_BUTTON, self.goclicked, self.go)  self.Bind(wx.EVT_BUTTON, self.exitclicked, self.exit)  # end wxGlade  def __set_properties(self):  # begin wxGlade: MyFrame.__set_properties  self.SetTitle(_(\u0026#34;frame_1\u0026#34;))  self.ChooseButton.SetToolTipString(_(\u0026#34;choose a file \u0026#34;))  # end wxGlade  def __do_layout(self):  # begin wxGlade: MyFrame.__do_layout  sizer_1 = wx.BoxSizer(wx.VERTICAL)  sizer_2 = wx.BoxSizer(wx.VERTICAL)  sizer_4 = wx.BoxSizer(wx.HORIZONTAL)  sizer_3 = wx.BoxSizer(wx.HORIZONTAL)  sizer_3.Add(self.label_1, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)  sizer_3.Add(self.inputfile, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)  sizer_3.Add(self.ChooseButton, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)  sizer_2.Add(sizer_3, 1, wx.EXPAND, 5)  sizer_2.Add(self.static_line_1, 0, wx.EXPAND, 5)  sizer_4.Add((200, 20), 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)  sizer_4.Add(self.go, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)  sizer_4.Add(self.exit, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)  sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)  self.panel_1.SetSizer(sizer_2)  sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)  self.SetSizer(sizer_1)  sizer_1.Fit(self)  self.Layout()  # end wxGlade  def choosefile(self, event): # wxGlade: MyFrame.  print \u0026#34;Event handler \u0026#39;choosefile\u0026#39; not implemented!\u0026#34;  event.Skip()  def goclicked(self, event): # wxGlade: MyFrame.  print \u0026#34;Event handler \u0026#39;goclicked\u0026#39; not implemented!\u0026#34;  event.Skip()  def exitclicked(self, event): # wxGlade: MyFrame.  print \u0026#34;Event handler \u0026#39;exitclicked\u0026#39; not implemented!\u0026#34;  event.Skip() # end of class MyFrame if __name__ == \u0026#34;__main__\u0026#34;:  gettext.install(\u0026#34;app\u0026#34;) # replace with the appropriate catalog name  app = wx.PySimpleApp(0)  wx.InitAllImageHandlers()  frame_1 = MyFrame(None, wx.ID_ANY, \u0026#34;\u0026#34;)  app.SetTopWindow(frame_1)  frame_1.Show()  app.MainLoop() ","permalink":"https://nobwak.github.io/posts/2014-12-29-python_wxglade%E3%81%A7gui%E3%81%AE%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%92/","summary":"Python、Perl、Ruby、PHPなどのLight Languageは、俺みたいな素人プログラマでもじゃんじゃんコードを書けるところが素","title":"[Python] wxGladeでGUIのデザインを"},{"content":"一年に一度しかやらないのでメモ。\nとはいえ、いまどき年賀状なんぞどこかに頼んだ方が楽でなんであるが。\nフォトレタッチ: paint.net http://www.getpaint.net/index.html\nフリーのフォトレタッチというとGIMP一択なんだが、高機能すぎて途方に暮れる。\nその点paint.netはシンプルだから楽。\n宛名印刷: Aprint Aprint。\nwebサイトには20世紀の残り香があるものの、ソフトは必要にして充分。\nデータはcsvで保存できるから取り回ししやすいし、複数宛先もできる。\nフォントも選べるので、はんなり明朝とか、ちょっと変わったフォントを使ってもよい。\n以上\n","permalink":"https://nobwak.github.io/posts/2014-12-23-%E3%83%A1%E3%83%A2windows_%E3%83%95%E3%83%AA%E3%83%BC%E3%82%BD%E3%83%95%E3%83%88%E3%81%A7%E5%B9%B4%E8%B3%80%E7%8A%B6%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8B/","summary":"一年に一度しかやらないのでメモ。 とはいえ、いまどき年賀状なんぞどこかに頼んだ方が楽でなんであるが。 フォトレタッチ: paint.net http://www.getpaint.net/index.html フリーのフォトレタッチ","title":"[メモ][Windows] フリーソフトで年賀状をつくる"},{"content":"ここ最近にamd64のFreeBSD 10.1-RELEASEでfreebsd-updateを実行すると、①「/usr/lib32/をインストールしようとする」、②「ルートディレクトリを削除しようとする」なんて事が起こる。\nいずれも大きな問題はない。\n[FreeBSD-Announce] [HEADS UP] freebsd-update issues in 10.1\n背景は以上のリンク先で示されるとおりである。\nすなわち。\n10.1アップグレード用のfreebsd-updateパッチを作る際に「lib32のことをうっかり対象外にしてしまいました！」「結果として10.1にfreebsd-udateでアップグレードした人はlib32が無くなってましたサーセン」ということである。\nしたがってfreebsd-updateが主張する通りインストールしても問題はない。\n一方で、ルートディレクトリを削除しようとする件については中の人もよく分かってないのだが、実害はないとのこと。\n以下は参考。\namd64の10.1-RELEASEでfreebsd-updateをすると、以下のように/usr/lib32がインストール対象になった。\nThe following files will be added as part of updating to 10.1-RELEASE-p2: /libexec/ld-elf32.so.1 /usr/bin/ldd32 /usr/lib32/Scrt1.o /usr/lib32/crt1.o /usr/lib32/crtbegin.o また、実際にインストールするとこんなメッセージも出る。実害なし。\n$ sudo freebsd-update install パスワード: Installing updates...rmdir: ///: Is a directory  done. $ ","permalink":"https://nobwak.github.io/posts/2014-12-19-freebsd_10.1-release%E3%81%AEfreebsd-update%E3%81%8C%E3%81%94%E4%B9%B1%E5%BF%83%E3%81%97%E3%81%9F%E4%BB%B6%E6%B6%88%E3%81%88%E3%81%9Flib32%E3%81%AE%E6%80%AA/","summary":"ここ最近にamd64のFreeBSD 10.1-RELEASEでfreebsd-updateを実行すると、①「/usr/lib32/をインスト","title":"[FreeBSD] 10.1-RELEASEのfreebsd-updateがご乱心した件（消えたlib32の怪）"},{"content":"10.1-RELEASEの目玉機能の一つにvt(4)がある。\n有名すぎるけど改めてvtが何かというと、殺風景で絶望的にクソダサいFreeBSDのコンソールを美しくするドライバである。\nLANGを日本語設定にしたままコンソールでログインし、メッセージが文字化けしまくる情けなさ。\nそうでなくとも、コンソールで使われるフォントはカッコ悪いように思う。\nそんなガッカリ感ともサヨナラである（ただし日本語表示にはひと手間かかる！）。\nみんな。今日限りコンソールドライバはvtにしちまおうぜ。\nvt(4)とは 使い方を示すまえにvtについてもう少しだけ詳しく。\nもとはNewcons（NEW CONSoleですな）として進められていたプロジェクトで、コンソールでの2バイト文字を含むユニコードを使えるようにしたコンソールドライバ。\nくわえて、Xを使ってる時でもバーチャルターミナルを使えるし、コンソールなのにマウスでコピー＆ペーストができたり、ScrLockして画面をスクロールバックしたりできる。\n（FreeBSDにおいて）これはすごい。\nただ、意外にもスクリーンセーバはできないようだ。\n詳細はNewcons wikiをどうぞ。\nhttps://wiki.freebsd.org/Newcons\nなお、従来のドライバはsyscons。\nvtの使い方 10.1-RELEASEではデフォルトで有効にはならない。\n有効にするには、/boot/loader.confに以下の記述が必要。\nkern.vty=vt 私は以下のように追記している。\n# # Virtual Terminal settings # see vt(4) # # set 1 to vt works textmode. hw.vga.textmode=0 # set vt to enable vt on console kern.vty=vt これで再起動。\n見た目の変化 これがオリジナルのコンソール。\nこの、フォントが気に入らないんですよ。\nこうなる。\nなんだろう…。20世紀の8bitパソコンのような趣がありますな。\n日本語フォント よしじゃあ次は日本語フォント！と思ったのだが、冒頭のnewcons Wikiを見るとCJKフォントは「In progress」、つまり「まだ」である。（2014/11/23現在）\nとはいえ全く表示できないか、というとそうではなく。このあたりを参考に進めてみた。\n具体的には、ユニコードなビットマップフォントをダウンロードしてきてvidcontrolで指定してあげればよい。\nvidcontrolでの操作はコンソールでやること。\n# fetch http://people.freebsd.org/~emaste/newcons/b16.fnt fetch: http://people.freebsd.org/~emaste/newcons/b16.fnt: size of remote file is not known b16.fnt 772 kB 238 kBps 00m03s # vidcontrol -f ./b16.fnt さすればこのように。\n以上\n","permalink":"https://nobwak.github.io/posts/2014-11-24-freebsd_10.1-release%E3%81%AEvt4%E3%81%A7console%E3%82%92%E3%81%86%E3%81%A4%E3%81%8F%E3%81%97%E3%81%8F/","summary":"10.1-RELEASEの目玉機能の一つにvt(4)がある。 有名すぎるけど改めてvtが何かというと、殺風景で絶望的にクソダサいFreeBSD","title":"FreeBSD 10.1-RELEASEのvt(4)でconsoleをうつくしく"},{"content":"FreeBSD 10.1-RELEASEがめでたくリリースされた。\n何が更新されたかといえば、UEFIブートやvt等々が世間一般の目玉のようである。\nFreeBSD 10.1-RELEASE Release Notes\nUEFIブートを初期サポートした「FreeBSD 10.1-RELEASE」リリース\nそのなかで興味を惹かれたのが、UDP-Lite。\nUDP-Liteとは。以下、公式サイトより俺私訳。\nRFC 3828で規定されるIPトランスポートプロトコルで、音声/動画/ゲームでの使用を想定したもの。\n通常、UDPデータグラムはチェックサムエラーが発生すると破棄される。\nこれはつまり、最大で64KBまでのサイズを許容されるデータパケットのうち、たった1byte誤っただけでパケット全体がドロップされることを示す。\nUDP Liteは、部分的に壊れているパケットのうち、壊れてない部分を使えるようなアプリケーション向けに作られた。\nこちらはWikipedia\n","permalink":"https://nobwak.github.io/posts/2014-11-19-freebsd_10.1-release%E3%81%8B%E3%82%89%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%95%E3%82%8C%E3%82%8Budp-lite%E3%81%A8%E3%81%AF/","summary":"FreeBSD 10.1-RELEASEがめでたくリリースされた。 何が更新されたかといえば、UEFIブートやvt等々が世間一般の目玉のようである。 FreeBSD 10.1-RELEASE Release Notes","title":"FreeBSD 10.1-RELEASEからサポートされるUDP-liteとは"},{"content":"先に結論:ダブルクオーテーションで括ればよい。\nrsyncの対象ディレクトリでカッコ「()」など、エスケープの必要な文字の含まれているケースがある。\nたとえば、Sambaでサービスしている共有フォルダとか。\nそのままディレクトリ名をrsyncに与えてしまうと、とても面倒なことになる。\nどうするか。\nダブルクオーテーションで括ればよい。\nふむ。よろしい。\nではディレクトリがリモートにある場合、どこからどこまでを括ればよいの？\n以下の通りである。\n192.168.1.1にsomeoneでログインした先のディレクトリを手元にsyncする場合。\nrsync -avz someone@192.168.1.1:\u0026#34;/work/fileshare/file\\(20141022\\)\u0026#34; /home/someone/fileshare/backup 参考\nhttp://serverfault.com/questions/234876/escaping-spaces-in-a-remote-path-when-using-rsync-over-a-remote-ssh-connection\n以上。\n","permalink":"https://nobwak.github.io/posts/2014-10-30-rsync%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%8C%87%E5%AE%9A%E3%81%A7%E3%82%A8%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%97%E3%81%AE%E5%BF%85%E8%A6%81%E3%81%AA%E6%96%87%E5%AD%97%E3%82%92%E5%90%AB%E3%82%81%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"先に結論:ダブルクオーテーションで括ればよい。 rsyncの対象ディレクトリでカッコ「()」など、エスケープの必要な文字の含まれているケースが","title":"rsyncのディレクトリ指定でエスケープの必要な文字を含めるには"},{"content":"自作PythonスクリプトをWindows実行バイナリに変換する場合、pyInstallerはとっても楽ちんなのであるが、問題もある。\n実行ファイルがスタートされるまで、とても待たされることだ。\nその遅さに耐えかねてpy2exeを試してみたところ、ビルドまでは面倒なものの、作成した実行ファイルはめっぽう速くて驚いた。\nそういったわけで、py2exeでのWindows実行バイナリ作成方法について記す。\nまず最初に、pyInstallerとpy2exeで果たしてどの程度差があるかを示す。\n実行速度の違い UNIX系だと、time; ＜実行ファイル＞ とすると所要時間を計測してくれるが、Windowsだとどのようにするのであろうか。\nよく分からない。\nあんまり興味もないのでWindowsにもあるtimeコマンドで大まかに測ってみた。\n前提\n・同じスクリプトを使用する\n・バイナリは一つにまとめる\n・バイナリの処理完了までを測る\n結果\n・pyInstallerだと5秒\n・py2exeだと2秒\nその差3秒。\nたかだか3MBytesのプログラムでこの違いである。\nただ、py2exeを避けていたのには理由がある。\npy2exeの制限 py2exeはバイナリ作成のために、別にsetup.pyを書かねばならない。\n対するpyInstallerは、pyInstaller本体に自作スクリプトを引数として与えればいいだけ。こちらからすると面倒ではある。\nまた、pyInstallerを使っていた時には、特に意識しなかったMSVCR90.dllの考慮もしなければならない。\nさらにさらに、エンコーディングにも注意が必要（後述）。\nが、これだけの弱点を差し引いても起動時間の差は魅力。\nくわえて、setup.pyは一度書いてしまえば使い回しもできるんである。\nというわけで、py2exeに宗旨替えを決意した。\npy2exe: インストール http://www.py2exe.org/から。\nActivePythonであれば、pypm install py2exeでインストールできる。\npy2exe: MSVCR90.dllの準備 py2exeでのバイナリ作成、およびバイナリの実行にはMSVCR90.dllが必要。\nMSVCR90.dllはファイル名が同じでも複数バージョンが存在する。\n悪いことにpy2exeは特定のバージョンを要求する。\nそのバージョンが9.0.21022.8。\nVisualStudioであれば「SP1でない」2008、あるいはこちらも「SP1でない」Microsoft Visual C++ 2008 Redistributable Package に含まれている。\nx86向け\nhttp://www.microsoft.com/ja-JP/download/details.aspx?id=29 x64向け\nhttp://www.microsoft.com/ja-JP/download/details.aspx?id=15336\n以下はあくまで参考\nx86向けSP1\nhttp://www.microsoft.com/ja-JP/download/details.aspx?id=5582 x64向けSP1\nhttp://www.microsoft.com/ja-JP/download/details.aspx?id=2092\nMSVCR90.dll、Microsoft Visual C++ 2008 Redistributable Packageのインストーラ（vcredist_x86.exe）ともに、プロパティからバージョンを確認することができる。\nバイナリ作成者がDLL再配布の権利を持っている場合、DLLも含めて自作プログラムを配布できる。\n権利がなければ、ユーザには上記のMicrosoft Visual C++ 2008 Redistributable Packageをインストールしてもらうこと。\npy2exe:setup.pyって何よ。 py2exeは、バイナリ化じたいの処理を、pythonスクリプトで書く。\n自作スクリプトのほかに、setup.pyを書く必要があるのはそのため。\npy2exe: setup.pyの書きかた http://www.py2exe.org/index.cgi/Tutorial\n上記チュートリアルに沿って進める。\n以下の通りのsetup.pyを作る。\nひとまず自作スクリプトと同じディレクトリが良いでしょう。\nもちろん、jisaku.pyは自作スクリプト名に変更。\nfrom distutils.core import setup import py2exe  setup(console=[\u0026#39;jisaku.py\u0026#39;]) そうしたら、setup.py, 自作スクリプトのあるディレクトリで、以下のように実行するだけ。\n$ python setup.py py2exe $ そうすると、同じディレクトリにdistというディレクトリが作られ、その下に実行ファイルができあがる。\n簡単である。\nあとはこのsetup.pyをベースに、いろいろと加えていけばよい。\npy2exeのオプションは以下を参照のこと。\nhttp://www.py2exe.org/index.cgi/ListOfOptions\npython setup.py py2exeとタイプするのが面倒 sys.argv.append('py2exe')を加えてあげれば、それ以降python setup.pyだけでよくなる。\nfrom distutils.core import setup import py2exe, sys, os  sys.argv.append(\u0026#39;py2exe\u0026#39;)  setup(console=[\u0026#39;jisaku.py\u0026#39;]) 実行ファイルを一つにまとめるには http://www.py2exe.org/index.cgi/SingleFileExecutable\n前章で作成したsetup.pyをベースに、といいつつガラッと変わる。\nとはいえ、基本的な書式は変わっていない。\nfrom distutils.core import setup import py2exe, sys, os  sys.argv.append(\u0026#39;py2exe\u0026#39;)  setup(  options = {\u0026#39;py2exe\u0026#39;: {\u0026#39;bundle_files\u0026#39;:1}},  zipfile = None,  console = [{\u0026#39;script\u0026#39;: \u0026#34;jisaku.py\u0026#34;}] ) bundle_filesでファイルのまとめ方を指定する。\n値は1でよい。\n1は、とにかく一つにまとめる。\n2だと、本体とPython.dllが分かれる。\nzipfileもNoneでよい。\nここにファイル名を指定すると、各種DLLがそのファイル名でzipされる。\nNoneであれば本体にマージされる。\n本体を圧縮するには 速度でpy2exeを選択した私としては、あまり使おうという気にならないのだが。\n手元の自作スクリプトから作成した5MBの実行バイナリが3.5MBになった。\nfrom distutils.core import setup import py2exe, sys, os  sys.argv.append(\u0026#39;py2exe\u0026#39;)  setup(  options = {\u0026#39;py2exe\u0026#39;: {\u0026#39;bundle_files\u0026#39;:1, \u0026#39;compressed\u0026#39;: True}},  zipfile = None,  console = [{\u0026#39;script\u0026#39;: \u0026#34;jisaku.py\u0026#34;}] ) アイコンを追加するには icon_resourcesで指定する。\nhttp://www.py2exe.org/index.cgi/CustomIcons\nfrom distutils.core import setup import py2exe, sys  sys.argv.append(\u0026#39;py2exe\u0026#39;)  setup(  options = {\u0026#39;py2exe\u0026#39;: {\u0026#39;bundle_files\u0026#39;:1}},  zipfile = None,  console = [{  \u0026#39;script\u0026#39;: \u0026#34;jisaku.py\u0026#34;,  \u0026#39;icon_resources\u0026#39;: [(1, \u0026#34;jisaku.ico\u0026#34;)]  ,}] ) 実行時にコマンドプロンプトウインドウを開かないようにするには consoleではなくwindowsにする。\nfrom distutils.core import setup import py2exe, sys  sys.argv.append(\u0026#39;py2exe\u0026#39;)  setup(  options = {\u0026#39;py2exe\u0026#39;: {\u0026#39;bundle_files\u0026#39;:1}},  zipfile = None,  windows = [{  \u0026#39;script\u0026#39;: \u0026#34;tsuboneChecker.py\u0026#34;,  \u0026#39;icon_resources\u0026#39;: [(1, \u0026#34;Artcore-Illustrations-Artcore-4-Terminal.ico\u0026#34;)]  ,}] ) py2exeでのエンコーディング py2exeでホクホクしていたら、スクリプトの実行は問題ないのに、ひとたびpy2exeでバイナリにすると、途端にエンコーディングエラーが出る、という症状に悩まされた。\n結論としては、以下を加えれば解決。\nif hasattr(sys, \u0026#39;setdefaultencoding\u0026#39;):  import locale  lang, enc = locale.getdefaultlocale()  sys.setdefaultencoding(enc or \u0026#39;cp932\u0026#39;)  del sys.setdefaultencoding http://www.py2exe.org/index.cgi/EvenMoreEncodings http://d.hatena.ne.jp/shive/20110626/1309061690\n","permalink":"https://nobwak.github.io/posts/2014-10-23-python_pyinstaller%E3%81%AE%E9%81%85%E3%81%95%E3%81%AB%E3%81%8C%E3%81%A3%E3%81%8B%E3%82%8A%E3%81%97%E3%81%A6py2exe%E3%81%AB%E3%81%97%E3%81%9F%E3%82%89%E7%88%86%E9%80%9F%E3%81%A7%E9%A9%9A%E3%81%84%E3%81%9F%E4%BB%B6/","summary":"自作PythonスクリプトをWindows実行バイナリに変換する場合、pyInstallerはとっても楽ちんなのであるが、問題もある。 実行フ","title":"[Python] pyInstallerの遅さにがっかりしてpy2exeにしたら爆速で驚いた件"},{"content":"たとえば仕事上、共有サーバにあるフォルダのパスを知らせたい、ということがある。\nこういう時のために、フォルダのパスを簡単にクリップボードへコピーする方法を示す。\nWindows, OS Xの両方向け。大盤振る舞いである。\nOS Xでは追加のツールも要らない方法です。\nWindowsでの方法 こちらは簡単。\n対象フォルダをSHIFT+右クリックして出てくるメニューからコピーを選べばよい。\nただの右クリックでは出てこないところが憎らしい。\nただ、ダブルクオーテーションで括られる点に注意。\nOS X(Mac)での方法 Automatorを使う。\nLaunchpadの「その他」の下にある。\nAutomatorの設定方法 起動時の選択では「サービス」を選ぶ。\n「アクション」では「クリップボードにコピー」を探す。\n「クリップボード」あたりで検索するとよい。\n「クリップボードにコピー」を、画面右側にドラッグ・アンド・ドロップ。\n「サービスは、次の選択項目を受け取る」では「ファイルまたはフォルダ」を。\n「検索対象」では「Finder」を選ぶ。\nメニューバーの編集から保存で「Copy Path to Clipboard」とでも名前を付けて保存。\n使いかた Controlキーを押しながらフォルダをクリックでメニューが開く。\nさっき追加した「Copy Path to Clipboard」があるはず。\n以上。\n","permalink":"https://nobwak.github.io/posts/2014-09-29-%E3%83%A1%E3%83%A2_windows_os_xmac%E3%81%A7%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80_%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%91%E3%82%B9%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%83%97%E3%83%9C%E3%83%BC%E3%83%89%E3%81%AB%E3%82%B3%E3%83%94%E3%83%BC%E3%81%99%E3%82%8B/","summary":"たとえば仕事上、共有サーバにあるフォルダのパスを知らせたい、ということがある。 こういう時のために、フォルダのパスを簡単にクリップボードへコピ","title":"[メモ] Windows, OS X(Mac)でフォルダ/ファイルのパスをクリップボードにコピーする"},{"content":"Sublime textはOS Xで使えるテキストエディタ。\nShift-JISが読めないが、Pluginで対応できる。\nPluginの名前はConvertToUTF8。\n「import」などせず、Pluginをダウンロードして突っ込む古式ゆかしい方法を示す。\nなお、sublime text3の場合はcodec33も必要。\n方法 公式サイトからダウンロードする。\n伸長（解凍）後、Sublime textのパッケージフォルダにコピーする。\nSublime textを再起動。\n公式サイト https://github.com/seanliang/ConvertToUTF8画面右にあるDownload ZIPをクリックしてダウンロード。\nパッケージフォルダへのコピー\nConvertToUTF8-master.zip を展開、フォルダをConvertToUTF8に変更し、パッケージフォルダにコピーする。\nパッケージフォルダは、Sublime textのpreferences.. から Browse Packagesで確認できる。\n私の例で言えば、パッケージフォルダは以下のとおり。\nSublime Textを再起動 以下のようにShift-JISで開けるようになる。\n","permalink":"https://nobwak.github.io/posts/2014-09-28-%E3%83%A1%E3%83%A2os_x_sublime_text%E3%81%A7shift-jis%E3%82%92%E6%89%B1%E3%81%86%E3%81%AB%E3%81%AF/","summary":"Sublime textはOS Xで使えるテキストエディタ。 Shift-JISが読めないが、Pluginで対応できる。 Pluginの名前はConvertTo","title":"[メモ][OS X] Sublime textでShift-JISを扱うには"},{"content":"wxPythonはWindows, OS X, LinuxなどOSを問わずGUIアプリケーションを作ることのできる超絶ありがたいツールである。\nあるのだが、OS Xにインストールしようとすると、イメージが「壊れているからインストールできません」と来る。\n実はこれ、壊れているのではなく、単にサインされていないだけである。\n解決法を示す。\nシステム環境設定の「セキュリティとプライバシー」から「一般」に進み、「ダウンロードしたアプリケーションの実行許可」で「すべてのアプリケーション」を選べばよい。\nインストールし終わったら元に戻しておこうな。\nhttp://stackoverflow.com/questions/21223717/install-wxpython-on-mac-os-mavericks\n","permalink":"https://nobwak.github.io/posts/2014-09-19-%E3%83%A1%E3%83%A2_wxpython%E3%81%8Cos_x%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E8%A7%A3%E6%B1%BA/","summary":"wxPythonはWindows, OS X, LinuxなどOSを問わずGUIアプリケーションを作ることのできる超絶ありがたいツールである。 あるのだ","title":"[メモ] wxPythonがOS Xにインストールできない（解決）"},{"content":"PythonでSQLiteのデータベースからデータを抜き取るときには何種類か方法がある。\n fetchallで一気に取得する方法 fetchoneを繰り返す方法 fetchmanyで数行ずつ取得する方法  である。\nfetchoneはダルいから、いままではfetchallを使っていた。\n単純に気持ちの問題なんだけれども、根こそぎぶっこ抜いてリストにいったん入れてしまえば、あとはフッツーのPythonで流儀で操作できるからである。\nしかし。この方法には問題がある。\nfetchallで全部を取り出した先はどこかと言えば、メモリである。\nつまり、データベースが巨大になるほど、メモリをバカ食いするわけである。\nこれはたまらん。\nそこで以下のようにする。\ndef getAllRecords(cursor, arraysize=1000):  while True:  records = cursor.fetchmany(arraysize)  if not records:  break  for record in records:  yield record データベースから1000行ずつ取り出し、かつ、1行ずつyieldする。\nメモリ使用量も抑えて、かつスピードも出る方法である。\n元ネタは以下。\nUse generators for fetching large db record sets (Python recipe)\nhttp://code.activestate.com/recipes/137270-use-generators-for-fetching-large-db-record-sets/\n","permalink":"https://nobwak.github.io/posts/2014-09-14-%E3%83%A1%E3%83%A2pythonsqlite_%E5%B7%A8%E5%A4%A7%E3%81%AAsqlite%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%8B%E3%82%89%E3%83%AC%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%99%E3%81%AB%E3%81%AF/","summary":"PythonでSQLiteのデータベースからデータを抜き取るときには何種類か方法がある。 fetchallで一気に取得する方法 fetchone","title":"[メモ][Python][SQLite] 巨大なSQLiteデータベースからレコードを取り出すには"},{"content":"Windows xp用にと、大昔に取得していたMicorosoftの\u0026quot;悪意のあるソフトウェア削除ツール\u0026quot;をclamavでチェックしたらトロイを見つけおって真っ青になりました。\nわたくし、トロイの入った削除ツールをいろんなxpマシンにインストールしたのかと。\nしかしまあ、結論から言うと、誤検出でした。\nファイルやURLを登録すると各種アンチウイルスソフトウェアでのチェック結果を表示してくれるVirusTotalというサイトがあります。\nググったところ、このVirutsTotalでの結果がヒットしました。\n結果、55のアンチウイルスソフト中、Clamavのみがトロイを検出。\nおそらくClamavの誤検出と判断してよいと思います。\nただ、念のため該当ファイルは削除しました。\n参考情報として記録を残します。\nClamavのエンジンは以下の通り。\nClamAV 0.98.4/19317/Sun Aug 31 14:18:51 2014 誤検出（と思われる）したトロイは以下のもの\nWin.Trojan.Swrort-12784 最新の Windows-KB890830-V5.15.exe （ただWindows7用ですが）では検出なし。\n","permalink":"https://nobwak.github.io/posts/2014-09-02-%E3%83%A1%E3%83%A2_clamav%E5%85%88%E7%94%9F%E6%82%AA%E6%84%8F%E3%81%AE%E3%81%82%E3%82%8B%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E5%89%8A%E9%99%A4%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AB%E3%83%88%E3%83%AD%E3%82%A4%E3%82%92%E8%A6%8B%E3%81%A4%E3%81%91%E3%82%8B%E8%AA%A4%E6%A4%9C%E5%87%BA/","summary":"Windows xp用にと、大昔に取得していたMicorosoftの\u0026quot;悪意のあるソフトウェア削除ツール\u0026quot;をclamavでチェックしたら","title":"[メモ] clamav先生、悪意のあるソフトウェア削除ツールにトロイを見つける（誤検出）"},{"content":"pkgを1.3.7にアップグレードすると、インストール済み全パッケージの再インストールが求められる。\nこの回避方法について示す。\nそもそも、なんでそんな事になっているかというと。\n端的に言って、パッケージシステムでのshared libraryの扱いに難があったため、1.3.7でキッチリ修正したのだと。\nその影響で、何も知らずにパッケージをアップグレードしようとすると、「shared libraryに変更があったため」と全パッケージを再インストールしようとしてしまう。\nもちろん、別に全部再インストールしたって問題ないわけだが、帯域も時間も電気ももったいないので、再インストールを必要最低限に止める方法が公儀から発表された次第である。\n詳細は以下をご覧あれ。\nhttp://lists.freebsd.org/pipermail/freebsd-ports-announce/2014-August/000086.html\n手順1.なにはともあれpkgを1.3.7に 2014/8/28現在である。\n$ sudo pkg update Updating repository catalogue Fetching meta.txz: 100% of 944 B Fetching digests.txz: 100% of 2 MB Fetching packagesite.txz: 100% of 5 MB Removing expired entries: 100% Adding new entries: 100% Incremental update completed, 23466 packages processed: 23297 packages updated, 133 removed and 76 added. $ pkg version -vRL=|grep pkg pkg-1.3.6 \u0026lt; needs updating (remote has 1.3.7) キター。\nさっそくpkgをアップグレードする。\n$ sudo pkg upgrade pkg パスワード: Updating repository catalogue Fetching meta.txz: 100% of 944 B Fetching digests.txz: 100% of 2 MB Fetching packagesite.txz: 100% of 5 MB Incremental update completed, 23466 packages processed: 0 packages updated, 0 removed and 0 added. New version of pkg detected; it needs to be installed first. The following 1 packages will be affected (of 0 checked): Installed packages to be UPGRADED:  pkg: 1.3.6 -\u0026gt; 1.3.7 The process will require 9 KB more space 2 MB to be downloaded Proceed with this action [y/N]:y Fetching pkg-1.3.7.txz: 100% of 2 MB Checking integrity... done (0 conflicting) [1/1] Upgrading pkg from 1.3.6 to 1.3.7: 100% Updating repository catalogue Fetching meta.txz: 100% of 944 B Fetching digests.txz: 100% of 2 MB Fetching packagesite.txz: 100% of 5 MB Incremental update completed, 23466 packages processed: 0 packages updated, 0 removed and 0 added. Checking integrity...  done (0 conflicting) Your packages are up to date $ オゲ。\n手順2.レポジトリカタログの強制更新とパッケージ解析 pkgをアップグレードした瞬間にレポジトリカタログの更新も走っている。\nしたがって、もう一回pkg updateする必要はないのだが、念のため手順に沿ってもう一回やる。\n$ sudo pkg update -f Updating FreeBSD repository catalogue... Fetching meta.txz: 100% 944 B 0.9k/s 00:01 Fetching digests.txz: 100% 2 MB 291.4k/s 00:07 Fetching packagesite.txz: 100% 5 MB 294.8k/s 00:18 Processing new repository entries: 100% FreeBSD repository update completed. 23466 packages processed:  0 updated, 0 removed and 23466 added. $ 当たり前だがアップデートも削除もなし。\n次。\n手順によるとpkg check -Baせよと。\nこれは何かというと、下記の通りインストール済みshared librariesを解析するものだそうな。\nつまりこの解析の結果、全ファイル再インストールという事態を避けられるわけですな？\n以下、-B, -aのオプション説明をmanから抜粋。\npkg check -B or pkg check --shlibs is used to reanalyse shared libraries  of installed packages.  -a, --all Process all packages. 実行…するが、ひょっとすると時間がかかるかも。\n仮想マシン、かつ750個くらいパッケージがある状態で1時間近くかかった。\nしかし実マシン（hp microserver）、120個くらいで2分。\nパッケージの数、装置スペックによって前後するだろうが覚悟のこと。\n改めて実行。\n$ sudo pkg check -Ba Checking all packages: 37% pkg: fstat() failed for(/usr/local/include/cdio++/enum.hpp): No such file or directory pkg: fstat() failed for(/usr/local/include/cdio++/mmc.hpp): No such file or directory pkg: fstat() failed for(/usr/local/include/cdio++/read.hpp): No such file or directory pkg: fstat() failed for(/usr/local/include/cdio/udf_file.h): No such file or directory pkg: fstat() failed for(/usr/local/lib/libcdio++.so): No such file or directory pkg: fstat() failed for(/usr/local/lib/libcdio.so): No such file or directory pkg: fstat() failed for(/usr/local/lib/libiso9660++.so): No such file or directory pkg: fstat() failed for(/usr/local/lib/libiso9660.so): No such file or directory pkg: fstat() failed for(/usr/local/lib/libudf.so): No such file or directory Checking all packages: 100% $ あとは通常通りpkg upgradeでよい。\n理不尽な再インストールを求められることもありません。\n","permalink":"https://nobwak.github.io/posts/2014-08-28-freebsd%E3%83%A1%E3%83%A2_pkg_1.3.7%E3%81%AB%E3%82%88%E3%82%8B%E5%95%8F%E7%AD%94%E7%84%A1%E7%94%A8%E3%81%AE%E5%85%A8%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E5%86%8D%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%82%92%E9%81%BF%E3%81%91%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"pkgを1.3.7にアップグレードすると、インストール済み全パッケージの再インストールが求められる。 この回避方法について示す。 そもそも、なん","title":"[FreeBSD][メモ] pkg 1.3.7による問答無用の全パッケージ再インストールを避けるには"},{"content":"EFSとは、Windowsの暗号化機能。\n使用するとファイル名とかフォルダ名とかが緑になるアレな。\n以下、Microsoftのサイトより。\nhttp://windows.microsoft.com/ja-jp/windows/what-is-encrypting-file-system#1TC=windows-7\n暗号化ファイル システム (EFS) は、情報をハード ディスク上に暗号化された形式で格納するための Windows の機能です。暗号化は、情報のセキュリティを保護するために Windows が提供する最も強力な保護手段です。\n EFS の主な機能の一部を紹介します。\n暗号化が簡単です。ファイルまたはフォルダーのプロパティのチェック ボックスをオンにするだけで有効になります。\nファイルを読むことができるユーザーを制限できます。\nファイルは閉じたときに暗号化されますが、開くときに自動的に使用できる状態になります。\nファイルの暗号化を解除する場合は、ファイルのプロパティでチェック ボックスをオフにします。\nEFS は、Windows 7 Starter、Windows 7 Home Basic、および Windows 7 Home Premium では完全にはサポートされていません。\n 末文に注意。Professional以上ということですな。\n使いかた crypt /?で使い方が表示される。長いので本記事末尾に示す。\nファイルを暗号化、復号する。 暗号化はcipher /e ＜ファイル名＞、復号にはcipher /d ＜ファイル名＞と指定する。\nEncrypt, Decrypt、ですな。\n以下、ひみつ.txtを暗号化する例。\nc:¥\u0026gt;cipher /e c:¥vault¥crypt¥ひみつ.txt  c:¥vault¥crypt¥ のファイルを暗号化しています ひみつ.txt [OK] 1 ディレクトリ内の 1 ファイル [またはディレクトリ] が暗号化されました。 ファイルをプレーンテキストから暗号化テキストに変換すると、 ディスク ボリュームに古いプレーンテキストの部分が残る場合があります。 変換がすべて完了してから、コマンド CIPHER /W:ディレクトリを使って ディスクをクリーンアップすることをお勧めします。 c:¥\u0026gt;cipher /d c:¥vault¥crypt¥ひみつ.txt  c:¥vault¥crypt¥ のファイルの暗号化を解除しています ひみつ.txt [OK] 1 ディレクトリ内の 1 ファイル [またはディレクトリ] の暗号化が解除されました。 簡単ですな。\nワイルドカードも使用可能 ファイルの指定にはワイルドカードが使える。\nc:¥\u0026gt;cipher /e c:¥vault¥crypt¥*.txt  c:¥vault¥crypt¥ のファイルを暗号化しています とてもひみつ.txt [OK] ひみつ.txt [OK] 1 ディレクトリ内の 2 ファイル [またはディレクトリ] が暗号化されました。 c:¥\u0026gt;cipher /d c:¥vault¥crypt¥*.txt  c:¥vault¥crypt¥ のファイルの暗号化を解除しています とてもひみつ.txt [OK] ひみつ.txt [OK] 1 ディレクトリ内の 2 ファイル [またはディレクトリ] の暗号化が解除されました。 これもまあ、普通。\nディレクトリの暗号化、復号 ファイルではなくディレクトリを指定することもできる。\nこの場合、「それ以降に」当該ディレクトリに置かれるファイルが暗号化されるか/されないかが決まる。\nもともと置いてあったファイルには影響しない。\nC:¥\u0026gt;cipher /e c:¥vault¥crypt¥  新しいファイルを暗号化するようにディレクトリ c:¥vault¥crypt¥ を設定 しています [OK] 1 ディレクトリ内の 1 ファイル [またはディレクトリ] が暗号化されました。 C:¥\u0026gt;cipher /d c:¥vault¥crypt¥  新しいファイルを暗号化しないようにディレクトリ c:¥users¥0066945¥out¥crypt¥ を設 定しています [OK] 1 ディレクトリ内の 1 ファイル [またはディレクトリ] の暗号化が解除されました。 フォルダ配下全部を暗号化/復号 /s:に続けてディレクトリを指定すると、再帰的な処理ができる。\nc:¥\u0026gt;cipher /e /s:c:¥vault¥crypt  新しいファイルを暗号化するようにディレクトリ c:¥vault¥crypt を設定 しています [OK]  c:¥vault¥crypt¥ のファイルを暗号化しています ひみつ.txt [OK] 2 ディレクトリ内の 2 ファイル [またはディレクトリ] が暗号化されました。 c:¥\u0026gt;cipher /d /s:c:¥vault¥crypt  新しいファイルを暗号化しないようにディレクトリ c:¥vault¥crypt を設 定しています [OK]  c:¥vault¥crypt¥ のファイルの暗号化を解除しています ひみつ.txt [OK] 2 ディレクトリ内の 2 ファイル [またはディレクトリ] の暗号化が解除されました。 状態確認 暗号化されているか/されていないかは、ファイル名の色で判断できる。\n緑色なら暗号化されていて、黒なら暗号化されていない。\nもちろん、コマンドからも確認できる。\nオプション指定なくファイル名、ディレクトリ名を渡せば暗号化状況を得られる。\nc:¥\u0026gt;cipher c:¥vault¥crypt  c:¥vault¥ の一覧を作成しています  このディレクトリに追加されるファイルは暗号化されません。 E crypt c:¥\u0026gt;cipher c:¥vault¥crypt¥ひみつ.txt  c:¥vault¥crypt¥ の一覧を作成しています  このディレクトリに追加される新しいファイルは暗号化されます。 E ひみつ.txt もちろん、再帰オプションも使用可能。\nc:¥\u0026gt;cipher /s:c:¥vault¥crypt¥  c:¥users¥0066945¥out¥crypt¥ の一覧を作成しています  このディレクトリに追加される新しいファイルは暗号化されます。 E とてもひみつ.txt U ひみつ.txt ヘルプ c:¥\u0026gt;cipher /? NTFS パーティション上のディレクトリ [ファイル] の暗号化を表示または変更します。 CIPHER [/E | /D | /C] [/S:ディレクトリ] [/B] [/H] [パス名 [...]] CIPHER /K [/ECC:256|384|521] CIPHER /R:ファイル名 [/SMARTCARD] [/ECC:256|384|521] CIPHER /U [/N] CIPHER /W:ディレクトリ CIPHER /X[:EFS ファイル] [ファイル名] CIPHER /Y CIPHER /ADDUSER [/CERTHASH:ハッシュ | /CERTFILE:ファイル名 | /USER:ユーザー名] [/S:ディレクトリ] [/B] [/H] [パス名 [...]] CIPHER /FLUSHCACHE [/SERVER:サーバー名] CIPHER /REMOVEUSER /CERTHASH:ハッシュ [/S:ディレクトリ] [/B] [/H] [パス名 [...]] CIPHER /REKEY [パス名 [...]] /B エラーが発生した場合に中断します。既定では、CIPHER は エラーが発生しても実行を続行します。 /C 暗号化されたファイルに関する情報を表示します。 /D 指定されたファイルまたはディレクトリの暗号化を解除します。 /E 指定されたファイルまたはディレクトリを暗号化します。後で追加 されたファイルが暗号化されるようにディレクトリをマークします。 親ディレクトリが暗号化されていない場合、暗号化されたファイルは、 変更されるときに暗号化を解除されます。ファイルおよび親 ディレクトリを暗号化することをお勧めします。 /H 隠しファイルやシステム属性のファイルを表示します。既定では これらのファイルは省略されます。 /K EFS で使用するための新しい証明書およびキーを作成します。 このオプションが指定されると、その他のオプションはすべて無視 されます。 注意: 既定では、/K によって現在のグループ ポリシーに準拠する 証明書とキーが作成されます。ECC が指定されている場合、 指定のキー サイズによる自己署名証明書が作成されます。 /N このオプションは /U を指定した場合にのみ動作します。 このオプションにより、キーが更新されなくなります。ローカル ドライブ上のすべての暗号化ファイルを探すために使用されます。 /R EFS 回復キーと証明書を作成してから、それらを .PFX ファイル (証明書と秘密キー) と .CER ファイル (証明書のみ) に書き込み ます。管理者は、ユーザーの回復キーを作成するために .CER の内容 を EFS 回復ポリシーに追加し、個々のファイルを回復するために .PFX ファイルをインポートすることができます。SMARTCARD が指定されている場合は、回復キーと証明書をスマート カードに 書き込みます。.CER ファイルが生成されます (証明書のみ)。.PFX ファイルは生成されません。 注意: 既定では、/R は 2048 ビット RSA 回復キーと証明書を作成しま す。ECC が指定されている場合、その後にキー サイズ 256、384 または 521 が指定されている必要があります。 /S 指定されたディレクトリと、その下にあるすべてのファイルとサブ ディレクトリに対して指定された操作を実行します。 /U ローカル ドライブのすべての暗号化ファイルを参照しようとします。 これにより、現在のユーザーのファイル暗号化キー、または回復キーに 変更があった場合、これらが更新されます。このオプションは /N 以外 の他のオプションでは動作しません。 /W ボリューム全体で利用可能な未使用のディスク領域から、データを削除 します。このオプションを選んだ場合は、他のオプションはすべて無視 されます。ローカル ボリューム上のどの場所にあるディレクトリでも 指定することができます。ディレクトリがマウント ポイントである 場合、または別のボリュームのディレクトリを指し示す場合は、その ボリュームのデータが削除されます。 /X EFS 証明書とキーのバックアップを、指定された名前のファイルに 保存します。EFS ファイルが指定されている場合は、ファイルの暗号化 に使用されている現在のユーザーの証明書のバックアップが作成され ます。指定されていない場合は、ユーザーの現在の EFS 証明書とキー のバックアップが作成されます。 /Y ローカル PC 上の現在の EFS 証明書を縮小表示します。 /ADDUSER 指定された暗号化ファイルにユーザーを追加します。CERTHASH が指定 されている場合は、この SHA1 ハッシュを含む証明書が検索されます。 CERTFILE が指定されている場合は、ファイルから証明書が抽出 されます。USER が指定されている場合、CIPHER は Active Directory ドメイン サービス内でユーザー証明書を検索します。 /FLUSHCACHE 指定されたサーバー上で、呼び出し元ユーザーの EFS キーのキャッシュ をクリアします。サーバー名が指定されていない場合は、ローカル コンピューター上の呼び出し元ユーザーのキー キャッシュがクリア されます。 /REKEY 指定した暗号化ファイルを、構成済みの EFS の現在のキーを使用する ように更新します。 /REMOVEUSER 指定されたファイルからユーザーを削除します。CERTHASH は削除する証明書の SHA1 ハッシュである必要があります。 ディレクトリ ディレクトリのパスです。 ファイル名 拡張子を伴わないファイル名です。 パス名 パターン、ファイル、またはディレクトリを指定します。 EFS ファイル 暗号化されたファイルのパスです。 パラメーターを指定せずに CIPHER を実行すると、現在のディレクトリとディレクト リに含まれるすべてのファイルの暗号化状態を表示します。複数のディレクトリ名 やワイルドカードを指定できます。複数のパラメーターを指定する場合は、パラ メーターをスペースで区切ってください。``` ","permalink":"https://nobwak.github.io/posts/2014-08-22-windows%E3%83%90%E3%83%83%E3%83%81%E3%83%A1%E3%83%A2_efs%E3%82%92%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%8B%E3%82%89%E6%93%8D%E4%BD%9C%E3%81%99%E3%82%8B/","summary":"EFSとは、Windowsの暗号化機能。 使用するとファイル名とかフォルダ名とかが緑になるアレな。 以下、Microsoftのサイトより。 http://windows.microsoft.com/ja-jp/windows/what-is-encrypting-file-system#1TC=windows-7 暗号","title":"[Windows][バッチ][メモ] EFSをコマンドラインから操作する。"},{"content":"pkgを1.2から1.3.xに上げたら以下のようなメッセージが出てupgradeができない。\n$ sudo pkg upgrade Updating repository catalogue FreeBSD repository is up-to-date All repositories are up-to-date pkg: Repo FreeBSD needs schema upgrade from 2006 to 2010 but it is opened readonly pkg: need to re-create repo FreeBSD to upgrade schema version Checking for upgrades: 100% Checking integrity... done (0 conflicting) need to re-create repo とか言いつつ、どうすればいいのか書いてないし。\n調べたところ、pkg update -fすればいいとのこと。\n$ sudo pkg update -f Updating repository catalogue Fetching meta.txz: 100% of 944 B Fetching digests.txz: 100% of 1 MB Fetching packagesite.txz: 100% of 5 MB Adding new entries: 100% Incremental update completed, 23313 packages processed: 0 packages updated, 0 removed and 23313 added. incremental update completedとのこと。\nこの状態でpkg upgradeすると、確かに動いた。\n表示も少し親切になっていますな。\n$ sudo pkg upgrade Updating repository catalogue FreeBSD repository is up-to-date All repositories are up-to-date Checking for upgrades: 100% The following 41 packages will be affected (of 0 checked): New packages to be INSTALLED:  libevent2: 2.0.21_2  i386-wine-devel: 1.7.23,1  p5-Mozilla-CA: 20130114 Installed packages to be UPGRADED:  xproto: 7.0.25 -\u0026gt; 7.0.26 Installed packages to be REINSTALLED:  tevent-0.9.21 (options changed) The process will require 209 MB more space 78 MB to be downloaded Proceed with this action [y/N]: y Fetching xproto-7.0.26.txz: 100% of 60 KB Fetching vim-lite-7.4.389.txz: 100% of 5 MB （略） しかもconflictsを検知してくれるみたい。\nChecking integrity... done (1 conflicting) Checking integrity... done (0 conflicting) Conflicts with the existing packages have been found. One more solver iteration is needed to resolve them. The following 42 packages will be affected (of 0 checked): Installed packages to be REMOVED:  libevent-1.4.14b_3 New packages to be INSTALLED:  p5-Mozilla-CA: 20130114  libevent2: 2.0.21_2  i386-wine-devel: 1.7.23,1 Installed packages to be UPGRADED:  xproto: 7.0.25 -\u0026gt; 7.0.26 Installed packages to be REINSTALLED:  libxcb-1.10_2 (options changed) Proceed with this action [y/N]: y [1/42] Upgrading python27 from 2.7.6_4 to 2.7.8_2: 100% [2/42] Upgrading pcre from 8.34_1 to 8.34_2: 100% 以上。\n","permalink":"https://nobwak.github.io/posts/2014-08-09-freebsdpkgng%E3%83%A1%E3%83%A2_pkg%E3%82%921.2%E3%81%8B%E3%82%891.3%E3%81%AB%E4%B8%8A%E3%81%92%E3%81%9F%E3%82%89need_to_re-create_repo_freebsd_to_upgrade_schema_version/","summary":"pkgを1.2から1.3.xに上げたら以下のようなメッセージが出てupgradeができない。 $ sudo pkg upgrade Updating repository catalogue FreeBSD repository is up-to-date All repositories are up-to-date pkg: Repo FreeBSD needs schema upgrade from 2006 to","title":"[FreeBSD][pkgng][メモ] pkgを1.2から1.3に上げたらneed to re-create repo FreeBSD to upgrade schema version"},{"content":"FreeOTFEとはフリーの暗号化ツール。仮想の暗号化ディスクが扱える。\nとても便利だが、開発が止まっていてWindows 64bitでは使えない。残念。\nインストール インストーラは以下からダウンロード。\nhttp://sourceforge.net/projects/freeotfe.mirror/\n32bitならインストールも問題なくできるはず。\n言語設定 デフォルトでは英語だけど、日本語に変えられる。\nViewからOption。\n日本語になった。\n暗号化ボリュームの作成 ここは英語なんですな。\nVolume Fileを選ぶ。\nボリュームファイルを指定する。\n名前を付ける。\n文字化けしてる。だからなに。\n容量指定\n暗号化方式を。\nうん。化けてるね。\n乱数発生方法を選ぶ。\nAPIは信用ならんし、マウスにするか、と思ったけど。\nマウスがあまりに大変なのでAPIをお勧めする。\nマウスを選んだ場合、画面内で「うおおおおお」とマウスカーソルを動かしまくる。\nお、終わった。\nパスワード設定。\n無事に作成が終わって、Fとしてマウントされたとのこと。\nエクスプローラで見ると普通のディスクとして見える。\nもちろん、実体はさきほど作ったファイル。\nただ、文字通り普通のディスクなので（続く）\nディスクを使用する前に フォーマットが必要なんである。\nとはいっても、フッツーにフォーマットすればよい。\nマウントの解除 こちらも難しいことはなく、FreeOTFEからマウント解除すればいいだけ。\n","permalink":"https://nobwak.github.io/posts/2014-08-09-windows_freeotfe%E3%81%AE%E4%BD%BF%E3%81%84%E3%81%8B%E3%81%9F/","summary":"FreeOTFEとはフリーの暗号化ツール。仮想の暗号化ディスクが扱える。 とても便利だが、開発が止まっていてWindows 64bitでは使えな","title":"[Windows] FreeOTFEの使いかた"},{"content":"ファイルを暗号化した仮想ディスクとして扱えるFreeOTFEについて記す。\n暗号化ツールは、探してみると意外にたくさんある。\nまた、最近ではOSで暗号化をサポートするのもトレンドである。\nそういったわけで、どんなものでも選り取り見取り、と思っておりました。\nしかし。\nちょっと条件を付けると途端に選択肢が狭まってしまう。\n具体的には、実ディスク全体を暗号化するのではなく、\n①Windowsで、\n②暗号化仮想ディスクを扱える、\n②フリー（オープンソース）のツール\nである。\n暗号化仮想ディスクのねらい つまり、PC本体の実ディスクはそのままに、暗号化した仮想ディスクを扱いたいわけです。\nなぜわざわざ仮想ディスクが必要なのか。\nなぜファイル単位の暗号化ではダメなのかというと。\n端的に言って、復号した後にもう一回暗号化するのが面倒だから。\n暗号化したファイル、フォルダは、ずっとそのままという訳にはいかない。\nとうぜん閲覧するなり実行したりしたいわけで、そのためには復号、すなわち暗号解除が必要だ。\nしかしひとたび、無事に用事を済ませたら、当然のことながらもう一度暗号化して大事にしまっておかねばならない。\nファイルあるいはフォルダ単位の暗号化ツールは、この「使った後にもう一度鍵をかけてしまう」という作業を考えられていないケースがほとんどだ。\nこれはおそらく、一回限りの暗号化を前提にしているためと思う。\nたとえば、セキュリティに不安のある経路を通してファイルを送受するとか。\n頻繁に暗号化されたファイルにアクセスするようなケースでは、ユーザが意識しなくても、使用後に元通り暗号化されることが望ましい。\n暗号化した仮想ディスクを扱える、というのはそういう使用用途にぴったりである。\n暗号化ファイルを復号するとディスクとしてマウントされる。\nシャットダウンあるいは再起動でマウントが外れ、暗号化されたファイルに戻る。\nぴったり。\nならディスクそのものを暗号化してしまえよWindowsにはBitLockerとかあるんだしさあ、というのはその通り。\nその通りなんだが、実ディスクの設定を気軽に触れないケースもあるってことで。\nFreeOTFE さて上述の検討をもとに選定をする。\nしかし暗号化ツールと言ってもかなりの数がある。\nどうやって探したらいいのだ。\nこういうときに便利なのがWikipedia。\nたいてい便利な比較表がある。\nComparison of disk encryption software\nところが、条件を当てはめていくと急激に数が減る。\n結論として、条件を十分に満足するソフトウェアはなかった。\n次点でFreeOTFE。\nFreeOTFEは、フリーでWindowsで使えて仮想ディスクを扱える。\n一見、問題なさそうに思えたのだが、なんと開発が止まっていた。\nなんという…。\nしたがって、不具合が見つかった場合の修正がなされないのは当然なことながら、64bit Windowsでは暗号化仮想ディスク用のドライバをインストールできず、今後も改善される予定はない。\nもちろん、誰かが開発を引き継いでくれればその限りではないが、昨今はOSで暗号化に対応するのが一般的だし、開発が復活するのは望み薄ではないかなと思っている。\n長くなったので、FreeOTFEのインストール方法は別項で。\n","permalink":"https://nobwak.github.io/posts/2014-08-08-windows_%E6%9A%97%E5%8F%B7%E5%8C%96%E4%BB%AE%E6%83%B3%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E7%AE%A1%E7%90%86%E3%83%84%E3%83%BC%E3%83%ABfreeotfe/","summary":"ファイルを暗号化した仮想ディスクとして扱えるFreeOTFEについて記す。 暗号化ツールは、探してみると意外にたくさんある。 また、最近ではOS","title":"[Windows] 暗号化仮想ディスク管理ツールFreeOTFE"},{"content":"sys.stderrを使う。\n例1)\nimport sys sys.stderr.write(\u0026#39;Error occurred!\u0026#39;) 例2)\nimport sys print \u0026gt;\u0026gt; sys.stderr, \u0026#39;Error occurred!\u0026#39; http://docs.python.jp/2/library/sys.html#sys.stderr\nhttp://stackoverflow.com/questions/5574702/how-to-print-to-stderr-in-python\nhttps://sites.google.com/site/diveintopythonjp/home/10-sukuriputo-to-sutorimu/10-2-hyoujun-nyuuryoku-hyoujun-shutsuryoku-soshite-era\n","permalink":"https://nobwak.github.io/posts/2014-07-31-%E3%83%A1%E3%83%A2_python%E3%81%A7%E6%A8%99%E6%BA%96%E3%82%A8%E3%83%A9%E3%83%BC%E5%87%BA%E5%8A%9B%E3%81%AB%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"sys.stderrを使う。 例1) import sys sys.stderr.write(\u0026#39;Error occurred!\u0026#39;) 例2) import sys print \u0026gt;\u0026gt; sys.stderr, \u0026#39;Error occurred!\u0026#39; http://docs.python.jp/2/library/sys.html#sys.stderr http://stackoverflow.com/questions/5574702/how-to-print-to-stderr-in-python https://sites.google.com/site/diveintopythonjp/home/10-sukuriputo-to-sutorimu/10-2-hyoujun-nyuuryoku-hyoujun-shutsuryoku-soshite-era","title":"[メモ] Pythonで標準エラー出力に表示するには"},{"content":"smbpasswdにはそういった機能がない。\npdbedit -Lを使う。\npdbeditとは manによれば「SAM database（sambaユーザデータベース）を管理するコマンド」\npdbedit -L ユーザデータベースに登録されているユーザアカウントをすべて表示する。\n「ユーザ名:uid:フルネーム」という書式で表示。\n以下、実行例はすべてmanから。\n$ pdbedit -L sorce:500:Simo Sorce samba:45:Test User -vを付けると詳細に。\n$ pdbedit -L -v --------------- username: sorce user ID/Group: 500/500 user RID/GRID: 2000/2001 Full Name: Simo Sorce Home Directory: ¥¥BERSERKER¥sorce HomeDir Drive: H: Logon Script: ¥¥BERSERKER¥netlogon¥sorce.bat Profile Path: ¥¥BERSERKER¥profile --------------- username: samba user ID/Group: 45/45 user RID/GRID: 1090/1091 Full Name: Test User Home Directory: ¥¥BERSERKER¥samba HomeDir Drive: Logon Script: Profile Path: ¥¥BERSERKER¥profile そのほかのオプションはpdbedit -helpあるいは、もちろんman。\n","permalink":"https://nobwak.github.io/posts/2014-07-23-%E3%83%A1%E3%83%A2_samba%E3%81%AE%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%83%A6%E3%83%BC%E3%82%B6%E4%B8%80%E8%A6%A7%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"smbpasswdにはそういった機能がない。 pdbedit -Lを使う。 pdbeditとは manによれば「SAM database（sambaユーザデータベ","title":"[メモ] sambaのパスワードファイルに登録されているユーザ一覧を表示するには"},{"content":"素の状態のFreeBSD 10にpkgngでhadoopをインストールしたときのメモ。\n2014/7/4時点でのpkgにはhadoop-1.2.1が入ってる。\npkgのインストール pkgの初回インストールに成功した試しがない。\npkgのpackageをダウンロードしてインストール。\n具体的には、pkg-staticを取り出し、pkg-staticでpkgのpackageをインストール。\n$ fetch http://pkg0.isc.freebsd.org/freebsd:10:x86:64/latest/Latest/pkg.txz pkg.txz 100% of 2013 kB 552 kBps 00m03s $ $ tar xvzf ./pkg.txz --include \u0026#34;*pkg-static\u0026#34; --strip-components 4 x pkg-static $ （rootになって） # ./bin/pkg-static add ./pkg.txz Installing pkg-1.2.7_3... done If you are upgrading from the old package format, first run:  # pkg2ng root@hdmock:/home/doe # pkg update。\n# pkg update Updating repository catalogue digests.txz 100% 1112KB 556.1KB/s 192.2KB/s 00:02 packagesite.txz 100% 5014KB 626.7KB/s 373.9KB/s 00:08 Incremental update completed, 23278 packages processed: 0 packages updated, 0 removed and 23278 added. # シェルとか、sudoとか、必要なものがあればインストールする。\nhadoopのインストール $ pkg search hadoop apache-hadoop-1.2.1_1 $ sudo pkg install hadoop Updating repository catalogue pkg: No packages matching \u0026#39;hadoop\u0026#39; available in the repositories [doe@hdmock ~]$ sudo pkg install apache-hadoop Updating repository catalogue The following 39 packages will be installed: (中略) [39/39] Installing apache-hadoop-1.2.1_1...===\u0026gt; Creating users and/or groups. Creating group \u0026#39;hadoop\u0026#39; with gid \u0026#39;955\u0026#39;. Creating user \u0026#39;hadoop\u0026#39; with uid \u0026#39;955\u0026#39;.  done OpenJDKのための設定 hadoopについてくるOpenJDKのためにfstabに設定を加える。\nOpenJDKインストール時のメッセージに沿って進める。\n====================================================================== This OpenJDK implementation requires fdescfs(5) mounted on /dev/fd and procfs(5) mounted on /proc. If you have not done it yet, please do the following:  mount -t fdescfs fdesc /dev/fd  mount -t procfs proc /proc To make it permanent, you need the following lines in /etc/fstab:  fdesc /dev/fd fdescfs rw 0 0  proc /proc procfs rw 0 0 ===================================================================== fstabに以下に行を追加。区切りはtab。\nfdesc /dev/fd fdescfs rw 0 0 proc /proc procfs rw 0 0 mount。\nmountと叩いてmountされていることを確認。\n$ sudo mount -a $ mount /dev/ada0p2 on / (ufs, local, journaled soft-updates) devfs on /dev (devfs, local, multilabel) fdescfs on /dev/fd (fdescfs) procfs on /proc (procfs, local) 以上。\n続きはこちら。\n","permalink":"https://nobwak.github.io/posts/2014-07-16-%E3%83%A1%E3%83%A2_freebsd10%E3%81%ABhadoop%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"素の状態のFreeBSD 10にpkgngでhadoopをインストールしたときのメモ。 2014/7/4時点でのpkgにはhadoop-1.2.","title":"[メモ] FreeBSD10にhadoopインストール"},{"content":"matplotlibには、gfortran、freetypeが必要で、こちらはbrewでインストールする。\nあとはpipでnumpy, scipyをインストールし、やっとmatplotlibをインストールできる。\ngfortran, freetypeのインストール gfortran。\n$ brew install gfortran ==\u0026gt; Summary  /usr/local/Cellar/gfortran/4.8.2: 960 files, 113M freetype。libpngも入る。\n$ brew install freetype ==\u0026gt; Installing freetype dependency: libpng ==\u0026gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/libpng-1.6. ######################################################################## 100.0% ==\u0026gt; Pouring libpng-1.6.10.mavericks.bottle.tar.gz /usr/local/Cellar/libpng/1.6.10: 17 files, 1.3M ==\u0026gt; Installing freetype ==\u0026gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/freetype-2. ######################################################################## 100.0% ==\u0026gt; Pouring freetype-2.5.3_1.mavericks.bottle.1.tar.gz /usr/local/Cellar/freetype/2.5.3_1: 60 files, 2.5M $ numpy, scipyのインストール $ pip install numpy Successfully installed numpy Cleaning up... $ $ pip install scipy Successfully installed scipy Cleaning up... numpy, scipyのテスト\n以下のようなスクリプトを実行\nimport numpy print numpy.__version__ import scipy print scipy.__version__ quit() 実行結果\n$ python ./test.py 1.8.1 0.14.0 matplotlibのインストール やっとmatplotlib\n$ pip install matplotlib Downloading/unpacking matplotlib  Downloading matplotlib-1.3.1.tar.gz (42.7MB): 69% 29.5MB （略） Successfully installed matplotlib python-dateutil tornado pyparsing nose six backports.ssl-match-hostname Cleaning up... $ おしまい。\n","permalink":"https://nobwak.github.io/posts/2014-07-09-%E3%83%A1%E3%83%A2_mac%E3%81%ABpython%E3%81%AEmatplotlib%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"matplotlibには、gfortran、freetypeが必要で、こちらはbrewでインストールする。 あとはpipでnumpy, scip","title":"[メモ] MacにPythonのmatplotlibをインストール"},{"content":"ひょんなことから知ったスクリーンショット取得ツールScreenshoter。\n見た目が悲しいくらいにブサイクでまったく期待してなかったのだが、意外に使い勝手が良くて驚いたので記す。\nScreenshoterとは、繰り返しになるがスクリーンショットの取得をサポートしてくれるツールである。\nあらかじめ決めておいたフォルダに、これまた決められたファイル名でスクリーンショットを保存してくれる。\n撮影対象も、全画面、アクティブウインドウ、任意の範囲で決められる。\nつまり設定だけしておけば、あとはじゃんじゃんPrintScreenを連打すればいいだけ（Altキーを押しながらとか要らない）。\nおそらく同じようなツールは他にもあるだろうが、Screenshoterにはそれ以外にも「おお！それだよそれ！」という気遣いがあるのだ。\n下記にまとめる。\nScreenshoterの特徴 公式サイトより引用しつつ追加:\n ツールのボタンクリックか、print screenキーを押すだけ（Altを押しながらとか不要）で撮る 撮影対象は、①全画面、②アクティブウインドウ、③任意のエリアから選べる マウスカーソルを撮ることもできる（デフォルトではカーソルは消える） 保存形式は①JPG、②PNG、③BMPから選べる ファイル名は①連番、②日時、③都度設定、から選べる ツール表示をコンパクトにできるし、タスクトレイに収納することもできる ツールは海外製だけど日本語表示もできる スクリーンショットを撮るときには空気を読んで消えてくれる インストール不要ッ！ ここまで素晴らしいのに見た目はブサイク。だがそれがいい  見た目は公式サイトを見てくれい。\nツール自体のスクリーンショットを撮ろうかと思ったら上記特徴8のせいで撮れなかったよ！\n","permalink":"https://nobwak.github.io/posts/2014-07-02-windows_%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%E5%8F%96%E5%BE%97%E3%83%84%E3%83%BC%E3%83%ABscreenshoter%E3%81%AF%E3%83%96%E3%82%B5%E3%82%A4%E3%82%AF%E3%81%A0%E3%81%91%E3%81%A9%E6%A5%BD%E3%81%99%E3%81%8E%E3%82%8B/","summary":"ひょんなことから知ったスクリーンショット取得ツールScreenshoter。 見た目が悲しいくらいにブサイクでまったく期待してなかったのだが、","title":"[Windows] スクリーンショット取得ツールScreenshoterはブサイクだけど楽すぎる"},{"content":"datetimeを使うのが教科書的な回答になるわけだが、ただタイムスタンプってえのは大抵2014/06/20 23:03:58.455118というような書式になっていて、これをどう扱うかがキモ。\nそうそう、二つのタイムスタンプの差、というと何かのターンアラウンドタイムとか、もっというと先方からの応答を測るためですね。\n諸賢には自明のことであろー。\n結論: datetime.strptime()を使う。 datetime.strptimeは与えられたフォーマットにしたがって時刻を構文解析し、datetime型に変換してくれる。\nさらにdatetime型どうしで減算すると、timedelta型のオブジェクトが返る。\ntimedeltaオブジェクトから読み出し専用のインスタンスで日、秒、マイクロセコンドを取り出せばよい（なお時間（Hour）はない）。\nスクリプト例 お目汚しではありますが例を示す。\nPython2.7な。\nfrom datetime import datetime FMT = \u0026#39;%Y/%m/%d %H:%M:%S.%f\u0026#39; timestampA = \u0026#34;2014/06/20 23:03:58.455118\u0026#34; timestampB = \u0026#34;2014/06/30 02:55:23.196501\u0026#34; tdelta = datetime.strptime(timestampB, FMT) - datetime.strptime(timestampA, FMT) print \u0026#34;time difference is %i day(s) %i.%i sec.\u0026#34; % (tdelta.days, tdelta.seconds, tdelta.microseconds) 実行結果 上記のスクリプトを実行すると以下のように。\ntime difference is 9 day(s) 13884.741383 sec. 以上。\n","permalink":"https://nobwak.github.io/posts/2014-06-30-python_%E4%BA%8C%E3%81%A4%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%97%E3%81%AE%E5%B7%AE%E5%88%86%E3%82%92%E8%A8%88%E7%AE%97%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"datetimeを使うのが教科書的な回答になるわけだが、ただタイムスタンプってえのは大抵2014/06/20 23:03:58.455118と","title":"[Python] 二つのタイムスタンプの差分を計算するには"},{"content":"インターネットに接続されていないなどの理由で、公式のpkgレポジトリからpkgをダウンロードできないマシンのpkgをどのように世話するか。\nインターネットに接続できるマシンでpkgをインストールしておき、そのマシンからpkgを取得する。\n手順 ・ターゲットとなるマシン（以下、ターゲット）と同じ構成でVM（以下、コピーマシン）を作る。\n・コピーマシンに必要なpkgをインストールする。\n・コピーマシン上のどこかでインストール済みpkgを作る。\n・同じ場所にrepoカタログを作成する。\n・ターゲットと同じLANに繋ぎかえる。\n・pkgのあるディレクトリをwebサーバで公開し、pkgをインストールする。\n以下、詳細手順\nターゲットと同じ構成でVMを作る RELEASEバージョンを合わせておけばよいでしょう。\n割愛。\nコピーマシンに必要なpkgをインストールする タイトルの通り。\nなにもわざわざインストールしなくても、という意見もあるだろうが、動作確認も必要だし。\n割愛。\npkgを作る 適当な場所にディレクトリを掘り、以下のコマンドを叩く。\npkg create -a -f tgz -o ./ -n -aは、インストール済みのすべてのpkgを指定、という意味。all。\n-fは、圧縮フォーマットの指定。右から左へ移すだけだからtgzでよい。tbzだと時間がかかる。\n-o ./は、作成したpkgを置く場所。\n-nは、作成済みのpkgを作らない、という意味。付けると処理のスピードアップが望めるが、逆に更新のあったpkgを作り忘れる、という危険性もあるかも。\n以下の例では-nを使っていない。\n$ cd /usr/home/vanilla/pkgrepo/ $ sudo pkg create -f tgz -o ./ -a Loading the package list... Creating package for GentiumBasic-110_1 Creating package for ImageMagick-6.8.9.3,1 Creating package for ORBit2-2.14.19_1 (略) repoカタログを作成する pkg repoにディレクトリを指定すればよい。\n$ cd /usr/home/vanilla/pkgrepo/ $ sudo pkg repo /usr/home/vanilla/pkgrepo/ Generating repository catalog in /usr/home/vanilla/pkgrepo/: done! $ そうすると以下の二つのファイルができる。\ndigests.txz packagesite.txz つまり今回の例でいえば、/usr/home/vanilla/pkgrepo/に作成したpkgと二つのファイルが格納されているわけ。\n以上でコピーマシンでの作業は完了。\nターゲットでの準備 ターゲットにpkg一式をコピーし、webサーバを立ち上げる。\nそのまえに、ターゲットでレポジトリの設定ファイルを修正しておくこと。\n具体的には、①公式のpkgレポジトリを無効にし、②自前のpkgレポジトリの設定を加えることである。\n①公式pkgレポジトリの無効化\n/etc/pkg/pkg/FreeBSD.confでenabledをnoにする。\n# $FreeBSD: release/10.0.0/etc/pkg/FreeBSD.conf 258710 2013-11-28 14:24:26Z gjb $ FreeBSD: {  url: \u0026#34;pkg+http://pkg.FreeBSD.org/${ABI}/latest\u0026#34;,  mirror_type: \u0026#34;srv\u0026#34;,  signature_type: \u0026#34;fingerprints\u0026#34;,  fingerprints: \u0026#34;/usr/share/keys/pkg\u0026#34;,  enabled: no } ②自前レポジトリの設定\n/usr/local/etc/pkg/repos/localpkg.confとして以下のようなファイルを作る。\nurlは、後ほど設定するwebサーバと合わせる事。\nlocalpkg: {  url: \u0026#34;http://localhost:8000/\u0026#34;,  mirror_type: \u0026#34;http\u0026#34;,  enabled: yes } pkg -vvとしてみる。\nrepo FreeBSDのenabledがno, repo localpkgのenabledがyesになっていることを確認。\nRepositories:  FreeBSD: {  url : \u0026#34;pkg+http://pkg.FreeBSD.org/freebsd:10:x86:32/latest\u0026#34;,  enabled : no,  mirror_type : \u0026#34;SRV\u0026#34;,  signature_type : \u0026#34;FINGERPRINTS\u0026#34;,  fingerprints : \u0026#34;/usr/share/keys/pkg\u0026#34;  }  localpkg: {  url : \u0026#34;http://localhost:8000/\u0026#34;,  enabled : yes,  mirror_type : \u0026#34;HTTP\u0026#34;  } webサーバでpkgを公開、インストールする。 rsyncでもなんでも使って、ターゲットにpkg一式をコピーする。\n/home/vanilla/10.0/pkgにコピーしたとして、webサーバでこのディレクトリを公開すればよい。\nここでは手早くpythonで公開する。\n以下のようにするとカレントディレクトリをルートとするwebサーバが立ちあがる。ポートは8000である。\n$ cd /home/vanilla/10.0/pkg $ python -m SimpleHTTPServer 同じくターゲットでpkg udpate。\npkg repoで作成したdigests.txz, packagesite.txzを参照できていることを確認したら、pkg upgradeすればよい。\n$ sudo pkg update Updating repository catalogue digests.txz 100% 29KB 29.3KB/s 29.3KB/s 00:00 packagesite.txz 100% 136KB 135.9KB/s 135.9KB/s 00:00 Incremental update completed, 613 packages processed: 0 packages updated, 0 removed and 613 added. 以上です。\n","permalink":"https://nobwak.github.io/posts/2014-06-23-freebsd_%E3%81%82%E3%82%8B%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%AEpkg%E3%82%92%E3%81%94%E3%81%A3%E3%81%9D%E3%82%8A%E4%BB%96%E3%81%AE%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%AB%E6%8C%81%E3%81%A3%E3%81%A6%E3%81%84%E3%81%8F%E3%81%AB%E3%81%AF/","summary":"インターネットに接続されていないなどの理由で、公式のpkgレポジトリからpkgをダウンロードできないマシンのpkgをどのように世話するか。 イ","title":"[FreeBSD] あるマシンのpkgをごっそり他のマシンに持っていくには"},{"content":"Windowsを複数ネットワークに繋ぎかえるとき、しかも片方がDHCPでの自動割り振りで、もう片方が固定でIPアドレスを指定しないいけない場合。\nいちいちネットワークインターフェースのプロパティからIPアドレスを変更するのは大変に面倒な作業である。\n調べてみたらコマンドラインでも変更はできるとか。\nnetshコマンドでTCP/IPのパラメータを設定する\nならばバッチファイルで手軽に変えられる。\nその経緯を示す。\n対象OSはWindows 7。xpだと動かないかも。\n結論 バッチファイル例を示す。\n拡張子.batの適当な名前で保存し、必要なときに実行すればよい。\n固定IPアドレスを設定するとき\nIPアドレスを固定で指定したい場合。\nインターフェース名: \u0026ldquo;ローカル エリア接続\u0026rdquo;\nIPアドレス: 192.168.0.100\nネットマスク: 255.255.255.0\nデフォルトゲートウェイ: 192.168.0.1\nDNS: 192.168.0.1\n@echo off netsh interface ip set address \u0026#34;ローカル エリア接続\u0026#34; static 192.168.0.100 255.255.255.0 192.168.0.1 netsh interface ip set dns \u0026#34;ローカル エリア接続\u0026#34; static 172.16.1.11 primary ipconfig pause DHCPで設定するとき。\nインターフェース名: \u0026ldquo;ローカル エリア接続\u0026rdquo;\n@echo off netsh interface ip set address \u0026#34;ローカル エリア接続\u0026#34; dhcp netsh interface ip set dns \u0026#34;ローカル エリア接続\u0026#34; dhcp ipconfig pause 書式\nnetsh interface ip setで設定する。\nオプションは以下の通り、netsh interface ip setだけで実行すればずらずらと表示される。\nC:¥\u0026gt;netsh interface ip set 使用できるコマンドは次のとおりです: このコンテキストのコマンド: set address - インターフェイスに IP アドレスまたはデフォルト ゲートウェイを設 定します。 set compartment - コンパートメント構成パラメーターを変更します。 set dnsservers - DNS サーバーのモードおよびアドレスを設定します。 set dynamicportrange - 動的ポート割り当てに使用するポートの範囲を変更します。 set global - グローバル構成一般パラメーターを変更します。 set interface - IP のインターフェイス構成パラメーターを変更します。 set neighbors - 近隣アドレスを設定します。 set route - ルートのパラメーターを変更します。 set subinterface - サブインターフェイス構成パラメーターを変更します。 set winsservers - WINS サーバーのモードおよびアドレスを設定します。 このうち、よく使うのはaddress, dnsserverだろう。\nなおdnsserverはdnsでも大丈夫のようだ。\naddress設定方法については;\n使用法: set address [name=]\u0026lt;文字列\u0026gt;  [[source=]dhcp|static]  [[address=][/\u0026lt;整数\u0026gt;] [[mask=]]  [[gateway=]|none [gwmetric=]\u0026lt;整数\u0026gt;]  [[type=]unicast|anycast]  [[subinterface=]\u0026lt;文字列\u0026gt;]  [[store=]active|persistent] パラメーター:  タグ 値  name - インターフェイス名またはインデックスです。  source - 次のいずれかの値を指定します:  dhcp: 指定したインターフェイスの IP アドレスの構成で  DHCP を使用できるようにします。  static: 指定したインターフェイスの IP アドレスの構成で  DHCP を使用できないようにします。アドレスまたは  ゲートウェイが構成されている場合、この値を指定  する必要があります。  address - 追加または変更する IPv4 アドレスです。  サブネット プレフィックス長を後に指定することもできます。  mask - 指定した IP アドレスの IP サブネット マスクです。  gateway - 次のいずれかの値を指定します:  : 設定している静的 IP アドレスに対する特定  のデフォルト ゲートウェイです。  none: デフォルト ゲートウェイは設定されません。  これは既定値です。 以上\n","permalink":"https://nobwak.github.io/posts/2014-06-20-%E3%83%A1%E3%83%A2windows_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%A7ip%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B/","summary":"Windowsを複数ネットワークに繋ぎかえるとき、しかも片方がDHCPでの自動割り振りで、もう片方が固定でIPアドレスを指定しないいけない場","title":"[メモ][Windows] コマンドラインでIPアドレスを変更する"},{"content":"タイトルの通り。\nたかがインストールして使える状態にするまでだけで苦労したからだよ！\nインストールした後はVagrantの使い方はこのあたり見たらいいわけですよ。\nVagrant超入門：Vagrant初心者向けの解説だよ！\nhttps://github.com/tmknom/study-vagrant\nインストール 手順はここ http://docs.vagrantup.com/v2/getting-started/index.html 参照。\nhttp://www.vagrantup.com/ からインストーラをダウンロードしてとっととインストール\n2014/6/7現在、ヴァージョンは1.6.3。\n初期設定 コマンドプロンプトを起動してinit。\nC:\\Users\\nobwak\u0026gt;vagrant init hashicorp/precise32 A `Vagrantfile` has been placed in this directory. You are now ready to `vagrant up` your first virtual environment! Please read the comments in the Vagrantfile as well as documentation on `vagrantup.com` for more information on using Vagrant. C:\\Users\\nobwak\u0026gt; そして起動\u0026hellip;だが。\nC:\\Users\\nobwak\u0026gt;vagrant up Bringing machine \u0026#39;default\u0026#39; up with \u0026#39;virtualbox\u0026#39; provider... ==\u0026gt; default: Box \u0026#39;hashicorp/precise32\u0026#39; could not be found. Attempting to find an d install...  default: Box Provider: virtualbox  default: Box Version: \u0026gt;= 0 ==\u0026gt; default: Loading metadata for box \u0026#39;hashicorp/precise32\u0026#39;  default: URL: https://vagrantcloud.com/hashicorp/precise32 ==\u0026gt; default: Adding box \u0026#39;hashicorp/precise32\u0026#39; (v1.0.0) for provider: virtualbox  default: Downloading: https://vagrantcloud.com/hashicorp/precise32/version/1 /provider/virtualbox.box  default: Progress: 39% (Rate: 4070k/s, Estimated time remaining: 0:01:01) The executable \u0026#39;bsdtar\u0026#39; Vagrant is trying to run was not found in the %PATH% variable. This is an error. Please verify this software is installed and on the path. bsdtarがpathに入ってないとか文句を言うわけですよ。\n解決法..再インストール なんと解決法は再インストールだそうです。\n嘘だろと思ったら本当に解決した。\nC:\\Users\\nobwak\u0026gt;vagrant up Bringing machine \u0026#39;default\u0026#39; up with \u0026#39;virtualbox\u0026#39; provider... ==\u0026gt; default: Box \u0026#39;hashicorp/precise32\u0026#39; could not be found. Attempting to find and install...  default: Box Provider: virtualbox  default: Box Version: \u0026gt;= 0 ==\u0026gt; default: Loading metadata for box \u0026#39;hashicorp/precise32\u0026#39;  default: URL: https://vagrantcloud.com/hashicorp/precise32 ==\u0026gt; default: Adding box \u0026#39;hashicorp/precise32\u0026#39; (v1.0.0) for provider: virtualbox  default: Downloading: https://vagrantcloud.com/hashicorp/precise32/version/1 /provider/virtualbox.box  default: Progress: 100% (Rate: 3345k/s, Estimated time remaining: --:--:--) ==\u0026gt; default: Successfully added box \u0026#39;hashicorp/precise32\u0026#39; (v1.0.0) for \u0026#39;virtualbox\u0026#39;! ==\u0026gt; default: Importing base box \u0026#39;hashicorp/precise32\u0026#39;... ==\u0026gt; default: Matching MAC address for NAT networking... ==\u0026gt; default: Checking if box \u0026#39;hashicorp/precise32\u0026#39; is up to date... ==\u0026gt; default: Setting the name of the VM: nobwak_default_1402067362695_84951 ==\u0026gt; default: Clearing any previously set network interfaces... ==\u0026gt; default: Preparing network interfaces based on configuration...  default: Adapter 1: nat ==\u0026gt; default: Forwarding ports...  default: 22 =\u0026gt; 2222 (adapter 1) ==\u0026gt; default: Booting VM... ==\u0026gt; default: Waiting for machine to boot. This may take a few minutes...  default: SSH address: 127.0.0.1:2222  default: SSH username: vagrant  default: SSH auth method: private key  default: Warning: Connection timeout. Retrying... ==\u0026gt; default: Machine booted and ready! ==\u0026gt; default: Checking for guest additions in VM...  default: The guest additions on this VM do not match the installed version of  default: VirtualBox! In most cases this is fine, but in rare cases it can  default: prevent things such as shared folders from working properly. If you see  default: shared folder errors, please make sure the guest additions within the  default: virtual machine match the version of VirtualBox you have installed on  default: your host and reload your VM.  default:  default: Guest Additions Version: 4.2.0  default: VirtualBox Version: 4.3 ==\u0026gt; default: Mounting shared folders...  default: /vagrant =\u0026gt; C:/Users/nobwak C:\\Users\\nobwak\u0026gt; このとき、Virtualboxに勝手に登録される。\nimg\nさっそく繋いでみよう。\nssh接続\u0026hellip;ダメ。 vagrant sshで動かしたマシンにログインできるはずだが。\nC:\\Users\\nobwak\u0026gt;vagrant ssh `ssh` executable not found in any directories in the %PATH% variable. Is an SSH client installed? Try installing Cygwin, MinGW or Git, all of which contain an SSH client. Or use your favorite SSH client with the following authentication information shown below: Host: 127.0.0.1 Port: 2222 Username: vagrant Private key: C:/Users/nobwak/.vagrant.d/insecure_private_key C:\\Users\\nobwak\u0026gt; sshがないからダメ。\nだから適当なsshクライアントで繋ぐ。\n上記のメッセージの通り、IPアドレスは127.0.0.1, ポートは2222。\nlogin as: vagrant vagrant@127.0.0.1\u0026#39;s password: Welcome to Ubuntu 12.04 LTS (GNU/Linux 3.2.0-23-generic-pae i686)  * Documentation: https://help.ubuntu.com/ Welcome to your Vagrant-built virtual machine. Last login: Fri Sep 14 06:22:31 2012 from 10.0.2.2 vagrant@precise32:~$ 繋げましたな。\nあとは消して終了。\nC:\\Users\\nobwak\u0026gt;vagrant destroy  default: Are you sure you want to destroy the \u0026#39;default\u0026#39; VM? [y/N] y ==\u0026gt; default: Forcing shutdown of VM... ==\u0026gt; default: Destroying VM and associated drives... C:\\Users\\nobwak\u0026gt; ","permalink":"https://nobwak.github.io/posts/2014-06-08-%E3%83%A1%E3%83%A2windows%E3%81%ABvagrant%E3%82%92%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%BF%E3%81%9F/","summary":"タイトルの通り。 たかがインストールして使える状態にするまでだけで苦労したからだよ！ インストールした後はVagrantの使い方はこのあたり見た","title":"[メモ]WindowsにVagrantを入れてみた"},{"content":"brewでpythonをインストールする\n10.9.3にはPython 2.7.5が入っている。\nbrewでこれを新しいものに。\nまたvirtualenvも入れてしまう。\n$ python --version Python 2.7.5 brewでインストール $ brew install python --framework --universal ==\u0026gt; Installing dependencies for python: pkg-config, readline, sqlite, gdb ==\u0026gt; Installing python dependency: pkg-config ==\u0026gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/pkg-config- （略） See: https://github.com/Homebrew/homebrew/wiki/Homebrew-and-Python .app bundles were installed. Run `brew linkapps` to symlink these to /Applications. ==\u0026gt; /usr/local/Cellar/python/2.7.6_1/bin/python -s setup.py --no-user-cfg instal ==\u0026gt; /usr/local/Cellar/python/2.7.6_1/bin/python -s setup.py --no-user-cfg instal ==\u0026gt; Summary /usr/local/Cellar/python/2.7.6_1: 5945 files, 101M, built in 3.5 minutes $ すっ飛ばした途中にいろいろと重要なことが表示されている。\nすなわち、Pythonのインストールに必要なソフトウェアはOS Xにもあるけど、いろいろと問題もあるから新しいの入れとくわなどなど。\nまた、pipとsetuptoolsもインストールされている。\nSetuptools and Pip have been installed. To update them  pip install --upgrade setuptools  pip install --upgrade pip いずれにせよpythonのインストールはできた。\nターミナルで調べてみると2.7.6に変化していますね。\n$ python --version Python 2.7.6 $ which python /usr/local/bin/python $ そのままvirtualenvなどのツールをインストール。\nvirtualenvのインストール pipでインストールするだけ。\n$ pip install virtualenv （略） Successfully installed virtualenv Cleaning up... $ pip install virtualenvwrapper （略） Successfully installed virtualenvwrapper virtualenv-clone stevedore Cleaning up... ","permalink":"https://nobwak.github.io/posts/2014-06-01-%E3%83%A1%E3%83%A2_mac%E3%81%ABhomebrew%E3%81%A7python%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%ABvirtualenv%E3%81%BE%E3%81%A7/","summary":"brewでpythonをインストールする 10.9.3にはPython 2.7.5が入っている。 brewでこれを新しいものに。 またvirtual","title":"[メモ] MacにhomebrewでPythonをインストール（virtualenvまで）"},{"content":"Homebrewとは、Macのパッケージマネージメントツールで、UNIX系ソフトウェアのインストールを管理してくれるもの。\nRubyで作られている。\nインストールは\nhttp://brew.sh/index_ja.html\nここの手順に沿う。\nインストール githubからダウンロード、インストールする。\nhttp://brew.sh/index_ja.htmlの下の方にあるコマンドをそのまま実行すればよい。\n以下が実行例。\n$ which ruby /usr/bin/ruby $ ruby -e \u0026#34;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\u0026#34; ==\u0026gt; This script will install: /usr/local/bin/brew /usr/local/Library/... /usr/local/share/man/man1/brew.1 Press RETURN to continue or any other key to abort ==\u0026gt; /usr/bin/sudo /bin/mkdir /usr/local (略) From https://github.com/Homebrew/homebrew  * [new branch] master -\u0026gt; origin/master HEAD is now at 17eceb1 pdf2htmlex: upstream patch to fix build with latest poppler ==\u0026gt; Installation successful! ==\u0026gt; Next steps Run `brew doctor` before you install anything Run `brew help` to get started $ まずbrew doctorをせい、ということなので。\n$ brew doctor Your system is ready to brew. 以上はうまくいった場合。\n少しでも気を抜くとこんな風に怒られる。\n24時間updateしてないだけで。\nbrewで作業するならまずbrew updateしてから、にしたほうが良さそう。\n$ brew doctor Warning: Your Homebrew is outdated. You haven\u0026#39;t updated for at least 24 hours, this is a long time in brewland! To update Homebrew, run `brew update`. update。\n$ brew update Updated Homebrew from 17eceb1a to 8510ebcd. ==\u0026gt; New Formulae aces_container\tlibltc\t（略） PATHの変更 せっかくbrewでソフトウェアをインストールするなら、それを使ってくれるようPATHを修正する。\nprofileに以下の一行を加える。\n$ vi ~/.bash_profile export PATH=/usr/local/bin:$PATH 試してみよう\nドット「 . 」に続けてprofileを指定すれば読み込んでくれる。\nそのあとにPATHの中身を確認。\n$ . ~/.bash_profile $ $ echo $PATH /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin /usr/local/binが二回続けて出てくるけど、まあよしとする。\n使い方 使い方は以下のとおり。\nまあ、一般的ですよね。\nbrew [info | home | options ] [FORMULA...]  brew install FORMULA...  brew uninstall FORMULA...  brew search [foo]  brew list [FORMULA...]  brew update  brew upgrade [FORMULA...]  brew pin/unpin [FORMULA...]``` ","permalink":"https://nobwak.github.io/posts/2014-05-30-%E3%83%A1%E3%83%A2_mac%E3%81%AE%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A3homebrew%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"Homebrewとは、Macのパッケージマネージメントツールで、UNIX系ソフトウェアのインストールを管理してくれるもの。 Rubyで作られて","title":"[メモ] MacのパッケージマネージャHomebrewのインストール"},{"content":"ブロック図作成ツールblockdiagとは、テキストファイルから以下のような図を作成してくれるツールである。\nこれをFreeBSD にインストールしたので経緯を示す。\n環境は10.0-RELEASE-p3、blockdiag-1.3.3である。\n必要なもの lockdiagはpkgに用意されているものの、残念ながら一発インストールというわけにはいかない。\n理由は後述。\npkg以外に必要なものは以下の通り。\n①ports（portsでインストールが必要なソフトウェアがある）\n②日本語フォント（これはpkgでインストールしてよい）\nblockdiagのインストール 一部ソフトウェアのportsからのインストールが必要だが、まずはblockdiagをpkgでインストールをしてしまったほうが楽。\n依存とかあるからね。\n$ pkg search blockdiag py27-blockdiag-1.3.3 インストールしたあとに依存を調べてみると以下の通り。\n$ pkg info -d py27-blockdiag-1.3.3 py27-blockdiag-1.3.3:  py27-reportlab-3.0_1  python27-2.7.6_4  py27-webcolors-1.4  py27-pillow-2.3.0_2  py27-setuptools27-2.0.1  py27-funcparserlib-0.3.6_1 日本語フォントのインストール お好みで。\n私はVLゴシックを。\n$ pkg info|grep ja-font ja-font-vlgothic-20130607 VLGothic Japanese TrueType fonts さてここからが本題である。\nblockdiagの罠: 吊るしのpkgでは日本語フォントを使えない 2014/5/24現在、blockdiagをpkgでインストールした場合、日本語フォントを扱うことができない。\n厳密にいえば、TrueTypeフォントを使えない。\n日本語を表示させようとすると、以下のように断られてしまう。\n$ blockdiag ./sample.txt ERROR: The _imagingft C module is not installed 原因は、FreeBSDにおいて言えばpy27-pillowのせい。\nblockdiagが画像を生成する際にはPIL（Python Image Library）を使う。\nblockdiagが依存しているpy27-pillowがそれ。\nしかしデフォルト設定では、py27-pillowのTrueTypeフォント対応が無効になってるんである。\n対応策: py27-pillowだけportsからインストール ということでpy27-pillowだけportsからインストールする。\n/usr/ports/graphics/py-pillowにおいてOption設定を変える。\n[vanilla@yaryka /usr/ports/graphics/py-pillow]$ sudo make config  ┌───────── py27-pillow-2.3.0_2 ─────  │ ┌─────────────────────────  │ │ [x] FREETYPE TrueType font rendering support  │ │ [x] JPEG JPEG image format support  │ │ [ ] LCMS Little Color Management System  │ │ [x] PNG PNG image format support  │ │ [ ] TIFF TIFF image format support  │ │ [ ] WEBP WebP image format support  │ └─────────────────────────  ├──────────────────────────  │ \u0026lt; OK \u0026gt;  └────────────────────────── FREETYPEのところにチェックを入れる。\n/var/db/ports/graphics_py-pillow/optionsの中身がこうなってればOK.\n$ cat /var/db/ports/graphics_py-pillow/options # This file is auto-generated by \u0026#39;make config\u0026#39;. # Options for py27-pillow-2.3.0_2 _OPTIONS_READ=py27-pillow-2.3.0_2 _FILE_COMPLETE_OPTIONS_LIST=FREETYPE JPEG LCMS PNG TIFF WEBP OPTIONS_FILE_SET+=FREETYPE OPTIONS_FILE_SET+=JPEG OPTIONS_FILE_UNSET+=LCMS OPTIONS_FILE_SET+=PNG OPTIONS_FILE_UNSET+=TIFF OPTIONS_FILE_UNSET+=WEBP そしたらpkgのpy27-pillowをいったんアンインストール。\n依存があるから強制オプションを付ける。\n$ sudo pkg remove -fy py27-pillow-2.3.0_2 pkg: You are trying to delete package(s) which has dependencies that are still required: graphics/py-pillow: print/py-reportlab, graphics/py-seqdiag, graphics/py-blockdiag ... delete these packages anyway in forced mode Deinstallation has been requested for the following 1 packages:  py27-pillow-2.3.0_2 The deinstallation will free 2 MB [1/1] Deleting py27-pillow-2.3.0_2... py27-pillow-2.3.0_2 is required by: py27-reportlab-3.0_1 py27-seqdiag-0.9.0 py27-blockdiag-1.3.3, deleting anyway  done $ そうしたらportsからpy27-pillowをインストール\n[vanilla@yaryka /usr/ports/graphics/py-pillow]$ sudo make install ===\u0026gt; Installing for py27-pillow-2.3.0_2 ===\u0026gt; py27-pillow-2.3.0_2 depends on package: py27-setuptools27\u0026gt;0 - found ===\u0026gt; py27-pillow-2.3.0_2 depends on file: /usr/local/bin/python2.7 - found ===\u0026gt; py27-pillow-2.3.0_2 depends on shared library: libfreetype.so - found ===\u0026gt; py27-pillow-2.3.0_2 depends on shared library: libjpeg.so - found ===\u0026gt; Checking if graphics/py-pillow already installed ===\u0026gt; Registering installation for py27-pillow-2.3.0_2 Installing py27-pillow-2.3.0_2... done [vanilla@yaryka /usr/ports/graphics/py-pillow]$ sudo make clean ===\u0026gt; Cleaning for py27-pillow-2.3.0_2 [vanilla@yaryka /usr/ports/graphics/py-pillow]$ テスト 詳しい記述方法は公式サイトを。\nhttp://blockdiag.com/ja/index.html\nテキストファイルに以下のような記述をする。\nsample.txtとする。\nblockdiag {  春 -\u0026gt; 夏 -\u0026gt; 秋 -\u0026gt; 冬;  A -\u0026gt; E -\u0026gt; F -\u0026gt; G; } あとはblockdiagに食わせるだけ。\n$ blockdiag sample.txt $ エラーもなくできた。\nそしてできるファイルは以下のようなもの。\nカクカクなのがいやなら、-aをオプションに与えればよい。\n$ blockdiag -a ./sample.txt $ アンチエイリアスがかかる。\n以上。\n","permalink":"https://nobwak.github.io/posts/2014-05-24-%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E5%9B%B3%E4%BD%9C%E6%88%90%E3%83%84%E3%83%BC%E3%83%ABblockdiagerrorthe__imagingft_c_module_is_not_installed%E3%81%AE%E5%80%92%E3%81%97%E3%81%8B%E3%81%9F/","summary":"ブロック図作成ツールblockdiagとは、テキストファイルから以下のような図を作成してくれるツールである。 これをFreeBSD にインストー","title":"ブロック図作成ツールblockdiag（ERROR: The _imagingft C module is not installedの倒しかた）"},{"content":"Pythonベースのプロジェクト管理ツールtracをインストールした経緯を示す。\nプロジェうと管理ツールとしては、redmineもインストールしたのだが、それと比較したい。\nだからひとまずインストールするだけ。\nFreeBSD 10.0-RELEASEにtrac-1.0.1。\n全体のながれ  tracのインストール 環境作成 環境のテスト 認証用パスワードファイルの作成 起動設定 複数プロジェクト設定  インストール tracはpkgにもあるので、特に障害もなくインストール完了。\n/usr/local/lib/python2.7/site-packages/tracにドバっとファイルが作られる。\n古い（といってもそこまで古くないが）ブログによると、日本語環境で使うためにいろいろと苦労が必要なようだが、現時点においてはpkg install trac一発で完了。\n依存関係はこんな感じ。\n$ sudo pkg info -d trac trac-1.0.1_2:  silvercity-0.9.7  py27-pygments-1.6_2  py27-Genshi-0.7_1  py27-docutils-0.11  python27-2.7.6_4  python2-2_2  py27-subversion-1.8.8_2  py27-setuptools27-2.0.1  py27-pytz-2014.1.1,1  py27-Babel-1.3_1  py27-sqlite3-2.7.6_3 データベースはご覧の通りsqliteが使われる。もちろんMySQLなど他のソフトウェアも使える。\nwebサーバも不要。こちらもapacheなど他のソフトウェアを使える。\n設定 大したことはない。\nまず環境を作る。\nディレクトリを決めておいて、そこでtracコマンドを実行し、初期化する。\n例えば/usr/local/wwwの下に、tracというディレクトリを作る。\nそこでtrac initenvと叩く。\n注意点は、ディレクトリの文字コード。ASCIIじゃないとダメ。\nまた、作成したあとには、ユーザ、グループ権限を変えること。\nwww:wwwで動かすならそのようにchownしておく。\n以下は実行例。\nデータベースにsqliteを使うならリターンキーを連打するだけでよい。\n（プロジェクト名はMy Projectになるけど。）\nexample01 /usr/local/www \u0026gt;trac-admin /usr/local/www/trac initenv Creating a new Trac environment at /usr/local/www/trac Trac will first ask a few questions about your environment in order to initialize and prepare the project database.  Please enter the name of your project.  This name will be used in page titles and descriptions. Project Name [My Project]\u0026gt;  Please specify the connection string for the database to use.  By default, a local SQLite database is created in the environment  directory. It is also possible to use an already existing  PostgreSQL database (check the Trac documentation for the exact  connection string syntax). Database connection string [sqlite:db/trac.db]\u0026gt; Creating and Initializing Project  Installing default wiki pages  CamelCase imported from （略） Project environment for \u0026#39;My Project\u0026#39; created. You may now configure the environment by editing the file:  /usr/local/www/trac/conf/trac.ini If you\u0026#39;d like to take this new project environment for a test drive, try running the Trac standalone web server `tracd`:  tracd --port 8000 /usr/local/www/trac Then point your browser to http://localhost:8000/trac. There you can also browse the documentation for your installed version of Trac, including information on further setup (such as deploying Trac to a real web server). The latest documentation can also always be found on the project website:  http://trac.edgewall.org/ Congratulations! example01 /usr/local/www \u0026gt; 詳細な設定はtrac.iniでできるよ、とメッセージがあるが、そんなのは後回しにして、まずは起動確認。\n試運転 初期設定完了時のメッセージにある通り、tracdとしてwebサーバを起動することができる。\n-portにポート番号、それにディレクトリを引数に与える。\nexample01 /usr/local/www \u0026gt;tracd --port 8000 /usr/local/www/trac/  Server starting in PID 2351.  Serving on 0.0.0.0:8000 view at http://127.0.0.1:8000/  Using HTTP/1.1 protocol version  192.168.100.106 - - [17/May/2014 00:35:57] \u0026#34;GET / HTTP/1.1\u0026#34; 200 -  192.168.100.106 - - [17/May/2014 00:35:58] \u0026#34;GET /favicon.ico HTTP/1.1\u0026#34; 404 -  192.168.100.106 - - [17/May/2014 00:35:58] \u0026#34;GET /favicon.ico HTTP/1.1\u0026#34; 404 -  192.168.100.106 - - [17/May/2014 00:36:00] \u0026#34;GET /trac HTTP/1.1\u0026#34; 200 -  192.168.100.106 - - [17/May/2014 00:36:00] \u0026#34;GET /trac/chrome/common/css/wiki.css HTTP/1.1\u0026#34; 200 - 1 この状態で、ブラウザから接続して、以下のような表示があれば成功。\nさっき作ったMy Projectが見えていますね。\nただ、この状態では何もできない。\nメニューのログインをクリックしても、ページがない旨のエラーが表示されるはず。\nまずは認証の準備をする必要がある。\nターミナルに戻ってCtrl+Cで抜けよう。\n認証用のパスワードファイル作成 認証の準備すなわちパスワードファイルの作成である。\nパスワードファイルだから、平文で書かれていてはまずい。\nではどうやって作るか。\napacheをインストールしていれば、htpasswdを使う。\napacheがなければ。\nインストールドキュメントに書いてあるスクリプトを使う。\nhttp://emelfm2.net/wiki/TracStandalone\nちょっと横道に逸れるが。\nいずれにしても、このさきtracにユーザを追加する場合には、ここで作成したパスワードファイルへの登録で行う。\nこれを面倒と感じるかどうか。\nさておき、以下を適当な名前で、たとえばtrac-digest.pyとして保存する。\nfrom optparse import OptionParser # The md5 module is deprecated in Python 2.5 try:  from hashlib import md5 except ImportError:  from md5 import md5 realm = \u0026#39;trac\u0026#39; # build the options usage = \u0026#34;usage: %prog [options]\u0026#34; parser = OptionParser(usage=usage) parser.add_option(\u0026#34;-u\u0026#34;, \u0026#34;--username\u0026#34;,action=\u0026#34;store\u0026#34;, dest=\u0026#34;username\u0026#34;, type = \u0026#34;string\u0026#34;,  help=\u0026#34;the username for whom to generate a password\u0026#34;) parser.add_option(\u0026#34;-p\u0026#34;, \u0026#34;--password\u0026#34;,action=\u0026#34;store\u0026#34;, dest=\u0026#34;password\u0026#34;, type = \u0026#34;string\u0026#34;,  help=\u0026#34;the password to use\u0026#34;) parser.add_option(\u0026#34;-r\u0026#34;, \u0026#34;--realm\u0026#34;,action=\u0026#34;store\u0026#34;, dest=\u0026#34;realm\u0026#34;, type = \u0026#34;string\u0026#34;,  help=\u0026#34;the realm in which to create the digest\u0026#34;) (options, args) = parser.parse_args() # check options if (options.username is None) or (options.password is None):  parser.error(\u0026#34;You must supply both the username and password\u0026#34;) if (options.realm is not None):  realm = options.realm  # Generate the string to enter into the htdigest file kd = lambda x: md5(\u0026#39;:\u0026#39;.join(x)).hexdigest() print \u0026#39;:\u0026#39;.join((options.username, realm, kd([options.username, realm, options.password]))) 使い方は以下の通りで、python trac-digest.pyに続けて、-u ＜ユーザネーム＞ -p ＜パスワード＞とし、その出力をファイルに向ける。\nexample01 /usr/local/www \u0026gt; python trac-digest.py -u username -p password \u0026gt;\u0026gt; /tmp/digest.txt つまりユーザusernameを、passwordというパスワードで作成している。\n生成されたファイルの中身は以下の通り。\n2カラムめはrealm。\nusername:trac:a053da77aad45fc9d4a506ef6fd 本格起動 今度はtracdにオプションを特盛で与える。\n-authで先ほどのパスワードファイルを与える。\nその際には、プロジェクトのベースディレクトリ、パスワードファイル、realmを指定する。\nベースディレクトリとは、もし環境を作ったディレクトリが/usr/local/www/tracならtracになる。\nこのベースディレクトリは、のちにwebサーバを動かしたとき、http://＜サーバアドレス＞/＜ベースディレクトリ＞というように使われる。\n最終的に-authは、本記事の例でいえば、-auth=trac,/tmp/digest.txt,tracとなる。\nさらに、-pで待ち受けポート、-user, -groupでtracdを動かす権限を、-dでdaemoniseを指定する。\n以下のようになる。\n# tracd --auth=trac,/tmp/digest.txt,trac -p 8000 --user=www --group=www /usr/local/www/trac/ -d 試運転の時とは違い、すぐにプロンプトが戻ってくる。\n試しにsockstatを見てみると、以下の通り。\n# sockstat -l4  USER COMMAND PID FD PROTO LOCAL ADDRESS FOREIGN ADDRESS  www python2.7 6517 3 tcp4 192.168.100.240:8000 *:* 認証の確認 さきほどはクリックしてもページのなかった「ログイン」が、今度はIDとパスワードを訊いてくるようになっているはず。\nこれでチケットの発行ができる。\n管理者権限の作成 しかしユーザusernameは一般ユーザである。\n彼に管理者権限を与えるには、以下のようにtracコマンドで操作を行う。\nexample01 /usr/local/www \u0026gt;trac-admin /usr/local/www/trac permission add username TRAC_ADMIN example01 /usr/local/www \u0026gt; このあと、ユーザusernameには管理者メニューが現れる。\nなお、管理者であれば、他ユーザの権限も操作できる。\nしたがって、管理者権限を与えるのは最初の一人だけ、にすることもできる。\n注意点としては、各ユーザの権限はさきほど作成したパスワードファイルでは管理されていない、ということ。\n繰り返すが、ユーザの登録はパスワードファイルへの登録で、（少なくとも初回の）権限変更は上記コマンドで、という仕組みをどう感じるか。\nまあちょっと面倒くさいかもしれませんな。\nシステム起動時設定（シングル環境モード） 以上でtracをとりあえず起動する設定は済んだ。\nあとはシステム起動時にtracが起動するよう、/etc/rc.confに設定を加える。\n/usr/local/etc/rc.d/trac内のコメントに沿ってrc.confに追加する。\n以下は例。## trac\ntracd_enable=\u0026#34;YES\u0026#34; tracd_listen=\u0026#34;192.168.100.240\u0026#34; tracd_port=\u0026#34;8000\u0026#34; tracd_envdir=\u0026#34;/usr/local/www/\u0026#34; tracd_env=\u0026#34;trac\u0026#34; tracd_args=\u0026#34;--user=www --group=www --auth=trac,/tmp/digest.txt,trac\u0026#34; tracd_envdirとtracd_envに注意。\nこういう書き方をしてtracに接続するといきなりMy Projectに移動する。\nプロジェクトが一つであれば何の問題もないが、複数プロジェクトを抱えたい場合には困る。\n複数プロジェクトの運営 複数プロジェクトを登録したいのであれば、必要なぶんだけディレクトリを作り、そこでtrac-admin initenvすればよい。\n例えば/usr/local/www/tracsなんてディレクトリを作り、projecttemp, projectaltというディレクトリをさらに作る。\nそれぞれにinit-envで環境を作る。\nこのとき、/etc/rc.confはこのようにする。\ntracd_envに/usr/local/www/tracsを指定し、tracd_envはコメントアウト。\n-authで指定するベースディレクトリにアスタリスクを与えれば、パスワードファイルを複数のプロジェクトで共有できる。\n## trac tracd_enable=\u0026#34;YES\u0026#34; tracd_listen=\u0026#34;192.168.100.240\u0026#34; tracd_port=\u0026#34;8000\u0026#34; tracd_envdir=\u0026#34;/usr/local/www/tracs\u0026#34; #tracd_env=\u0026#34;\u0026#34; tracd_args=\u0026#34;--user=www --group=www --auth=*,/tmp/digest.txt,trac\u0026#34; こんな感じ。\n以上\n","permalink":"https://nobwak.github.io/posts/2014-05-20-python%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E7%AE%A1%E7%90%86%E3%83%84%E3%83%BC%E3%83%ABtrac%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"Pythonベースのプロジェクト管理ツールtracをインストールした経緯を示す。 プロジェうと管理ツールとしては、redmineもインストール","title":"Pythonベースのプロジェクト管理ツール、tracのインストール"},{"content":"Rubyで作られたプロジェクト管理システムRedmineを、FreeBSDにインストールした。\n文字通り、インストールだけ。\nというのもインストールだけで大変だから。\nその経緯を示す。\n前提 インストールしたのはredmine-2.5.1。\n基本、公式の以下手順に沿うが、FreeBSD特有の条件で異なる手順を採ることもある。\nhttp://www.redmine.org/projects/redmine/wiki/RedmineInstall\nまた、redmineはそのデータ格納にデータベースソフトウェアが必要で、sqlite3を使っている。\n複数ユーザで使うならMySQLやPostgreSQLを推奨、というのが公式見解。\n同様にwebサーバもapacheやnginxが推奨されているが、ここではwebrickでテストするところまで。\nredmineのインストール pkgからインストール。\npkg install redmineでよい。\napacheなどのwebサーバはなくてもよいが、なぜかgtk2も付いてくるのが謎だが、jailに入れるからもう気にしない。\n# pkg install redmine （略）  Installing cups-image: 1.7.2  Installing gtk-update-icon-cache: 2.24.22  Installing ghostscript9: 9.06_6  Installing gtk2: 2.24.22_3  Installing gtk-engines2: 2.20.2_2  Installing librsvg2: 2.36.4_1  Installing ImageMagick: 6.8.0.7_8,1  Installing rubygem-rmagick: 2.13.2  Installing redmine: 2.5.1_2 The installation will require 651 MB more space 122 MB to be downloaded Proceed with installing packages [y/N]: y /usr/local/www/redmineにインストールされる。\nユーザ/グループはwwwが使われる。\n空のデータベースを作る SQLite3を使っているなら不要\nredmineでデータベースに繋ぐ設定をする /usr/local/www/redmine/configの下に各種設定ファイルがある。\nここでデータベースの設定を行う。\ndatabase.yml.exampleをdatabase.ymlとしてコピーし、書き換える。\n/usr/local/www/redmine/config # cp ./database.yml.example ./database.yml /usr/local/www/redmine/config # 「production」から始まる塊を以下のように。\n#production:  #adapter: mysql2  #database: redmine  #host: localhost  #username: root  #password: \u0026#34;\u0026#34;  #encoding: utf8 production:  adapter: sqlite3  database: db/redmine.sqlite3 つまり、mysql2を使うような設定を、sqlite3に変えているわけですな。\nbundler他のインストール 公式ドキュメントによればここでbundlerなどのインストールを行うが、FreeBSDでpkg/portsからインストールした場合にはスキップ可。\nご覧の通りredmineがインストールされた状態でbundlerもインストールされている。\n$ pkg info|grep bundler rubygem-bundler-1.5.3 A tool that manages gem dependencies for ruby applications セッションストア秘密鍵の作成 クッキーの生成に使用される秘密鍵を作る。\n# rake generate_secret_token (in /usr/local/www/redmine) # データベースのスキーマ（テーブル）作成 テーブル作成\n環境変数を使うのでshで。\n# sh # RAILS_ENV=production rake db:migrate （略） == StoreRelationTypeInJournalDetails: migrating ============================== == StoreRelationTypeInJournalDetails: migrated (0.0057s) ===================== == DeleteOrphanTimeEntriesCustomValues: migrating ============================ == DeleteOrphanTimeEntriesCustomValues: migrated (0.0009s) =================== == ChangeChangesetsCommentsLimit: migrating ================================== == ChangeChangesetsCommentsLimit: migrated (0.0000s) ========================= # データベースにデフォルトデータを投入 作ったばかりのテーブルにデータ（default configuration data）を投入\n# RAILS_ENV=production REDMINE_LANG=ja rake redmine:load_default_data (in /usr/local/www/redmine) Default configuration data loaded. # パーミッション設定 あと少し。\nredmineがファイルを置くディレクトリのパーミッションを設定する。\nFreeBSDにおいてはユーザ、グループにwww:wwwを使う。\n# mkdir -p tmp tmp/pdf public/plugin_assets # chown -R www:www files log tmp public/plugin_assets # chmod -R 755 files log tmp public/plugin_assets # これでほぼ準備完了\n試運転 webrickでredmineを起動し、動くかどうかを確かめる。\n# ruby script/rails server webrick -e production =\u0026gt; Booting WEBrick =\u0026gt; Rails 3.2.17 application starting in production on http://0.0.0.0:3000 =\u0026gt; Call with -d to detach =\u0026gt; Ctrl-C to shutdown server [2014-05-11 11:43:43] INFO WEBrick 1.3.1 [2014-05-11 11:43:43] INFO ruby 1.9.3 (2013-11-22) [amd64-freebsd10] [2014-05-11 11:43:43] INFO WEBrick::HTTPServer#start: pid=4187 port=3000 ご覧の通り、redmineをインストールしたマシンのポート3000で待ち受け。\nブラウザで繋ぐと、ターミナルには例えば以下のような反応があるはず。\nStarted GET \u0026#34;/\u0026#34; for 192.168.1.106 at 2014-05-11 11:44:01 +0900 Processing by WelcomeController#index as HTML  Current user: anonymous  Rendered welcome/index.html.erb within layouts/base (379.0ms) Completed 200 OK in 716.5ms (Views: 468.3ms | ActiveRecord: 20.8ms) あとはブラウザから操作。\n最初のログイン 以下のような画面が表示されれば成功で、さっそく右上のログインをクリック\nID、パスワードはadmin,admin\n以下の画面に遷移\nためしに「管理」をクリックすると、以下の画面に。\n以上。\n","permalink":"https://nobwak.github.io/posts/2014-05-11-freebsd%E3%81%ABredmine%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E5%8F%96%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92%E3%82%8B%E3%81%A8%E3%81%93%E3%81%BE%E3%81%A7/","summary":"Rubyで作られたプロジェクト管理システムRedmineを、FreeBSDにインストールした。 文字通り、インストールだけ。 というのもインスト","title":"FreeBSDにredmineのインストール（取りあえず立ち上げるとこまで）"},{"content":"Windowsアプリケーションのバージョンは、そのプロパティから確認できる。\nPyInstallerでWindowsアプリケーションを作るときにも、ぜひここに登録をしたい。\nPyInstallerでは、あらかじめ用意しておいたVersion Resource Fileを読み込ませることで、バージョンなどの情報をアプリケーションに書き込むことができる。\nしかし、その方法はちょっとトリッキーなので、ここにその方法を採録する。\nトリッキーな内容は何かというと。\n要するにVersion Resourceをスクラッチで書くのは大変なので、そのへんにあるWindowsアプリケーション（厳密には拡張子が.exeの実行ファイル）から抜き出してきてそれを使い回すというもの。\nれっきとした公式手順である。\nしたがって全体の流れは以下のようになる。\n全体の流れ 1.「既存の」WindowsアプリケーションからVersion Resourceを抜き出す。\n2.抜き出したファイルを書き換え。\n3.そのファイルを指定してPyInstallerを実行\nVersion Resourceファイルの抜き出し PyInstallerには、pyi-grab_version.pyというスクリプトが含まれている。\nPyInstallerを展開してできるutilsディレクトリの下にある。\nお使いのWindows上にある実行ファイルを引数に与えてpy-grab_version.pyを実行すればよい。\n結果はpy-grab_version.pyと同じディレクトリにfile_version_info.txtとして書き込まれる。\n以下はWindows 7のcmd.exeを引数に与えた場合の実行例である。\nC:\\home\\py\\PyInstaller-2.1\\utils\u0026gt;python grab_version.py \u0026#34;C:\\Windows\\winsxs\\x86_microsoft-windows-commandprompt_31bf3856ad364e35_6.1.7600.16385_none_8ae31ce07bb01ee0\\cmd.exe\u0026#34; Version info written to: C:\\home\\py\\PyInstaller-2.1\\utils\\file_version_info.txt C:\\home\\py\\PyInstaller-2.1\\utils\u0026gt; 以下が書き出されたfile_version_info.txt。\nUTF-8なので注意。\n# UTF-8 # # For more details about fixed file info \u0026#39;ffi\u0026#39; see: # http://msdn.microsoft.com/en-us/library/ms646997.aspx VSVersionInfo(  ffi=FixedFileInfo(  # filevers and prodvers should be always a tuple with four items: (1, 2, 3, 4)  # Set not needed items to zero 0.  filevers=(6, 1, 7600, 16385),  prodvers=(6, 1, 7600, 16385),  # Contains a bitmask that specifies the valid bits \u0026#39;flags\u0026#39;r  mask=0x3f,  # Contains a bitmask that specifies the Boolean attributes of the file.  flags=0x0,  # The operating system for which this file was designed.  # 0x4 - NT and there is no need to change it.  OS=0x40004,  # The general type of file.  # 0x1 - the file is an application.  fileType=0x1,  # The function of the file.  # 0x0 - the function is not defined for this fileType  subtype=0x0,  # Creation date and time stamp.  date=(0, 0)  ),  kids=[  StringFileInfo(  [  StringTable(  u\u0026#39;040904B0\u0026#39;,  [StringStruct(u\u0026#39;CompanyName\u0026#39;, u\u0026#39;Microsoft Corporation\u0026#39;),  StringStruct(u\u0026#39;FileDescription\u0026#39;, u\u0026#39;Windows Command Processor\u0026#39;),  StringStruct(u\u0026#39;FileVersion\u0026#39;, u\u0026#39;6.1.7600.16385 (win7_rtm.090713-1255)\u0026#39;),  StringStruct(u\u0026#39;InternalName\u0026#39;, u\u0026#39;cmd\u0026#39;),  StringStruct(u\u0026#39;LegalCopyright\u0026#39;, u\u0026#39;© Microsoft Corporation. All rights reserved.\u0026#39;),  StringStruct(u\u0026#39;OriginalFilename\u0026#39;, u\u0026#39;Cmd.Exe\u0026#39;),  StringStruct(u\u0026#39;ProductName\u0026#39;, u\u0026#39;Microsoft® Windows® Operating System\u0026#39;),  StringStruct(u\u0026#39;ProductVersion\u0026#39;, u\u0026#39;6.1.7600.16385\u0026#39;)])  ]),  VarFileInfo([VarStruct(u\u0026#39;Translation\u0026#39;, [1033, 1200])])  ] ) 次は本ファイルを書き換える。\nファイルの書き換え cmd.exeのプロパティ-\u0026gt;詳細タブと見比べながら書き換えていけばよい。\nそれ以外は触らないこと。\nたとえばこんな感じ。\n# UTF-8 # # For more details about fixed file info \u0026#39;ffi\u0026#39; see: # http://msdn.microsoft.com/en-us/library/ms646997.aspx VSVersionInfo(  ffi=FixedFileInfo(  # filevers and prodvers should be always a tuple with four items: (1, 2, 3, 4)  # Set not needed items to zero 0.  filevers=(1, 0, 0, 0),  prodvers=(1, 0, 0, 0),  # Contains a bitmask that specifies the valid bits \u0026#39;flags\u0026#39;r  mask=0x3f,  # Contains a bitmask that specifies the Boolean attributes of the file.  flags=0x0,  # The operating system for which this file was designed.  # 0x4 - NT and there is no need to change it.  OS=0x40004,  # The general type of file.  # 0x1 - the file is an application.  fileType=0x1,  # The function of the file.  # 0x0 - the function is not defined for this fileType  subtype=0x0,  # Creation date and time stamp.  date=(0, 0)  ),  kids=[  StringFileInfo(  [  StringTable(  u\u0026#39;040904B0\u0026#39;,  [StringStruct(u\u0026#39;CompanyName\u0026#39;, u\u0026#39;hoge Corporation\u0026#39;),  StringStruct(u\u0026#39;FileDescription\u0026#39;, u\u0026#39;hoge\u0026#39;),  StringStruct(u\u0026#39;FileVersion\u0026#39;, u\u0026#39;1.0.0\u0026#39;),  StringStruct(u\u0026#39;InternalName\u0026#39;, u\u0026#39;hoge\u0026#39;),  StringStruct(u\u0026#39;LegalCopyright\u0026#39;, u\u0026#39;© hoge Corporation. All rights reserved.\u0026#39;),  StringStruct(u\u0026#39;OriginalFilename\u0026#39;, u\u0026#39;hoge.exe\u0026#39;),  StringStruct(u\u0026#39;ProductName\u0026#39;, u\u0026#39;hoge\u0026#39;),  StringStruct(u\u0026#39;ProductVersion\u0026#39;, u\u0026#39;1.0.0\u0026#39;)])  ]),  VarFileInfo([VarStruct(u\u0026#39;Translation\u0026#39;, [1033, 1200])])  ] ) ファイルの準備はおしまい。\nあとはビルドの際にファイルを指定するだけ。\nVersion Resourceファイルを指定してビルド 単純に-version-file=＜ファイル名＞と指定するだけ。\nだから実行例は省く。\n無事に表示された。\n補足 参考までに公式の宣言、つまりVersion Resourceは複雑すぎマジ無理、と言っている箇所を貼り付けておく。\n because version resources are complex. Some elements are optional, others required. When you view the version tab of a Properties dialog, there\u0026rsquo;s no simple relationship between the data displayed and the structure of the resource. Using pyi-grab_version you can find an executable that displays the kind of information you want, copy its resource data, and modify it to suit your package.\n ","permalink":"https://nobwak.github.io/posts/2014-05-09-pyinstaller%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9Fwindows%E3%82%A2%E3%83%97%E3%83%AA%E3%81%A7%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%95%E3%81%9B%E3%81%9F%E3%81%84version_resource_file%E3%81%AE%E4%BD%9C%E3%82%8A%E3%81%8B%E3%81%9F/","summary":"Windowsアプリケーションのバージョンは、そのプロパティから確認できる。 PyInstallerでWindowsアプリケーションを作るとき","title":"PyInstallerで作ったWindowsアプリでバージョンを表示させたい（Version Resource Fileの作りかた）"},{"content":"過日、起こしたpyinstallerのインストール方法が盛大に間違っていたので改めて示す。\n（動いていたからまったく気がつかなかった・・・・）\nPythonでWindowsアプリケーションを作ってみようpyinstallerとは、pythonプログラムをWindowsなどで動く実行ファイルに変換してくれるものだ。\n自作pythonプログラムを他人にも使ってもらおうとすると、当然その人もpythonをインストールすることが前提になる。\nしかしスタンドアロンの実行ファイルにできるなら、そんな面倒を解消できる。\nありがたいことでございます。\nPyInstallerのインストール 公式のドキュメントに沿いつつ進める。\nインストール先はWindows。\n前提 Pythonはもちろんインストールしてあるとして、以下のものが必要\n・PyWin32\n・（場合によって）setuptools/distribute\n補足 2014/5/2現在、ActivePythonのPyPMにPyInstallerはありません。\nPyWin32のインストール PyWin32はPythonからWindows APIにアクセスするためのもの。\n以下から対応するバージョンをダウンロードし、インストールする。\nhttp://sourceforge.net/projects/pywin32/files/?source=navbar\n32bit WindowsにPython2.7をインストールしているなら、pywin32-218.win32-py2.7.exeをダウンロード（218はバージョンナンバなので変わる）。\npipがインストールされているなら、この時点でpip install PyInstallerでOK。\nsetuptools/distributeのインストール pipがインストールされているならこのステップは不要。\nまた、setuptools, distributeどっちでもよい。\n2014/5/2現在、setuptoolsでいいようだが、私がインストールしたのはdistribute。\nhttps://pypi.python.org/pypi/distribute/0.7.3\nダウンロードして、伸張して、できたディレクトリでpython setup.py install。\ndistribute, setuptoolsの違いについては以下を。\nhttp://stackoverflow.com/questions/6344076/differences-between-distribute-distutils-setuptools-and-distutils2\nPyInstallerのインストール 以下から最新のPyInstallerをダウンロード。\nhttps://pypi.python.org/pypi/PyInstaller/\n伸張して、できたディレクトリでpython setup.py install。\nC:\\local\\pyinstaller\u0026gt;python setup.py install （略） Installed c:\\python27\\lib\\site-packages\\pyinstaller-2.1-py2.7.egg Processing dependencies for PyInstaller==2.1 Searching for distribute==0.6.19 Best match: distribute 0.6.19 Adding distribute 0.6.19 to easy-install.pth file Installing easy_install-script.py script to C:\\Python27\\Scripts Installing easy_install.exe script to C:\\Python27\\Scripts Installing easy_install-2.7-script.py script to C:\\Python27\\Scripts Installing easy_install-2.7.exe script to C:\\Python27\\Scripts Using c:\\python27\\lib\\site-packages Finished processing dependencies for PyInstaller==2.1 C:\\local\\pyinstaller\u0026gt; コマンドプロンプトを開いてpyinstaller -versionと叩いてみる。\nうまく行っているならパスも通っている。\nC:\\local\u0026gt;pyinstaller --version 2.1 C:\\local\u0026gt; ","permalink":"https://nobwak.github.io/posts/2014-05-05-windows%E3%81%ABpyinstaller%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"過日、起こしたpyinstallerのインストール方法が盛大に間違っていたので改めて示す。 （動いていたからまったく気がつかなかった・・・・）","title":"Windowsにpyinstallerをインストール"},{"content":"メモでござる。\nHex文字列をBin文字列に変換したり、その逆に変換するには。\nBin-\u0026gt;Hex まずサンプル。\nbindata = \u0026#34;00001011\u0026#34; hexdata = \u0026#34;\u0026#34; scale = 2 num_of_digits = 2 hexdata = hex(int(bindata,scale))[2:].zfill(num_of_digits) print \u0026#34;%s ====\u0026gt; %s\u0026#34; % (bindata, hexdata) 実行例。\n00001011 ====\u0026gt; 0b 説明 まずint()で数値に変換する。\nその際には第二引数で基数を与える。bin文字列なら2を。hexなら16を与える。\n次にその数値をhex()で16進数に変換。\nそのままだと頭に0xが付いてしまうので[2:]として取り除く。\nさらにzfillで桁数分0で埋める。\nHex-\u0026gt;Bin bindata = \u0026#34;\u0026#34; hexdata = \u0026#34;1c\u0026#34; scale = 16 num_of_digits = 8 bindata = bin(int(hexdata,scale))[2:].zfill(num_of_digits) print \u0026#34;%s ====\u0026gt; %s\u0026#34; % (hexdata, bindata) 実行例\n1c ====\u0026gt; 00011100 ","permalink":"https://nobwak.github.io/posts/2014-05-01-python2_hex%E6%96%87%E5%AD%97%E5%88%97%E3%81%A8bin%E6%96%87%E5%AD%97%E5%88%97%E3%81%A7%E3%82%B3%E3%83%B3%E3%83%90%E3%83%BC%E3%83%88/","summary":"メモでござる。 Hex文字列をBin文字列に変換したり、その逆に変換するには。 Bin-\u0026gt;Hex まずサンプル。 bindata = \u0026#34;00001011\u0026#34; hexdata = \u0026#34;\u0026#34; scale = 2 num_of_digits = 2 hexdata = hex(int(bindata,scale))[2:].zfill(num_of_digits) print \u0026#34;%s ====\u0026gt; %s\u0026#34; % (bindata, hexdata) 実行","title":"[Python2] Hex文字列とBin文字列でコンバート"},{"content":"ビット列を逆に読むときとかに。\n[::-1]という指定 Python2で文字列を逆に表示するには、スライスで[::-1]と指定すればよい。\nteststring = \u0026#34;123456\u0026#34; print \u0026#34;%s ==\u0026gt; %s\u0026#34; % (teststring, teststring[::-1]) 以下、実行例\n123456 ==\u0026gt; 654321 reversed() 面白いのは、reversed()という関数。\nリバースドオブジェクトというそのままの名前なんだが、与えられたリストの逆順イテレータを返す。\nイテレータなので注意。\nつまり、そのままprintすることはできない。\nteststring = \u0026#34;123456\u0026#34; print reversed(teststring) print \u0026#34;version [::-1]\u0026#34; for i in teststring[::-1]:  print i print \u0026#34;version reversed()\u0026#34; for i in reversed(teststring):  print i 実行例\nreverse \u0026lt;reversed object at 0x108269f50\u0026gt; version [::-1] 6 5 4 3 2 1 version reversed() 6 5 4 3 2 1 ","permalink":"https://nobwak.github.io/posts/2014-04-30-python2_string%E3%82%92%E9%80%86%E3%81%AB%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"ビット列を逆に読むときとかに。 [::-1]という指定 Python2で文字列を逆に表示するには、スライスで[::-1]と指定すればよい。 teststring = \u0026#34;123456\u0026#34;","title":"[Python2] stringを逆に表示するには"},{"content":"Heartbleedバグ対応では皆さんいかがお過ごしでしたか。\nPoudriereではpackageの作成をjail内で実行するんだけども、もちろんこれらjailにもセキュリティアップデートは必要だ。\nずいぶん簡単なんだけれども採録。\nPoudriere jailのアップデートは-uで ほんとうに簡単で、-uをつけるだけ。\n以下のようなjailがあったとする。\n$ sudo poudriere jail -l JAILNAME VERSION ARCH METHOD 100i386 10.0-RELEASE i386 ftp そうしたら-uを指定するだけ。\n$ sudo poudriere jail -u -j 100i386 ====\u0026gt;\u0026gt; Upgrading using ftp /etc/resolv.conf -\u0026gt; /usr/local/poudriere/jails/100i386/etc/resolv.conf mount: /usr/local/poudriere/jails/100i386/compat: No such file or directory Looking up update.FreeBSD.org mirrors... none found. Fetching public key from update.FreeBSD.org... done. Fetching metadata signature for 10.0-RELEASE from update.FreeBSD.org... done. Fetching metadata index... done. Fetching 2 metadata files... done. Inspecting system... done. Preparing to download files... done. Fetching 16 patches.....10... done. Applying patches... done. The following files will be updated as part of updating to 10.0-RELEASE-p1: /bin/freebsd-version （略） /usr/src/sys/conf/newvers.sh /usr/src/sys/fs/nfsserver/nfs_nfsdserv.c Installing updates... done. 100i386: removed おしまい。\n","permalink":"https://nobwak.github.io/posts/2014-04-25-poudriere%E3%81%AEjail%E3%81%AB%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88%E3%82%92%E9%81%A9%E7%94%A8/","summary":"Heartbleedバグ対応では皆さんいかがお過ごしでしたか。 Poudriereではpackageの作成をjail内で実行するんだけども、も","title":"Poudriereのjailにセキュリティアップデートを適用"},{"content":"Sambaの汚物（ウイルス）は消毒だ。哀愁のsamba-virusfilter編である。\nvirusfilterはsambaのvfs。\nsamba上ファイルを開くときにclamavでスキャンしてくれる。\nそういうタイプのvfsはvscan-clamavが有名だが、FreeBSDのportsやpkgには見当たらない。\nそこでvirusfilterで試してみた。\n試してみた、というのは、ファイルの開け閉めの際にスキャンするのはどうもいただけなく感じるので、本運用には至らなかったから。\nなお、clamav、sambaはインストール済みの前提。\nsamba-virusfilterのインストール security/samba-virusfilterからインストールできる。\n設定ファイルの説明は以下を参照。ただしclamdが動いている前提。\nhttps://github.com/fumiyas/samba-virusfilter/blob/master/etc/smb.svf-clamav.conf.tmpl\n設定例 vfs objects = svf-clamav  svf-clamav:socket path = /var/run/clamav/clamd.sock # clamavのソケット  svf-clamav:can on open = yes # ファイルを開くときにスキャンする  svf-clamav:can on close = no # ファイルを閉じるときにもスキャンする  svf-clamav:max file size = 100000000 # スキャンするファイルのサイズ上限  svf-clamav:min file size = 0 # スキャンするファイルのサイズ下限  ## What to do with an infected file  ## nothing: Do nothing (default)  ## quarantine: Try to move to quantine directory  ## delete: Delete infected file  svf-clamav:infected file action = nothing  ## Where to move infected files  svf-clamav:quarantine directory = @SAMBA_LOCKDIR@/svf/quarantine  ## Prefix for files in quarantine directory  svf-clamav:quarantine prefix = svf. ウイルスを見つけたき「何もしない」を選択した場合、感染ファイルはそのまま共有ディレクトリ上に残るし見える。\nしかしユーザは当該ファイルを開くことはできない。\nウイルスを発見したとき、ログとしては/var/log/samba下のログに、以下のように記録される。\n[2014/03/22 22:51:19.578805, 0] ../include/svf-vfs.h:668(svf_scan)  Scan result: Infected: /usr/home/vanilla/share/testvirus.txt: Eicar-Test-Signature ","permalink":"https://nobwak.github.io/posts/2014-03-29-samba%E3%81%AE%E6%B1%9A%E7%89%A9%E3%82%A6%E3%82%A4%E3%83%AB%E3%82%B9%E3%81%AF%E6%B6%88%E6%AF%92%E3%81%A0samba-virusfilter%E7%B7%A8/","summary":"Sambaの汚物（ウイルス）は消毒だ。哀愁のsamba-virusfilter編である。 virusfilterはsambaのvfs。 samb","title":"Sambaの汚物（ウイルス）は消毒だ。samba-virusfilter編"},{"content":"sambaのvfs, scannedonly scannedonlyとは、sambaのvfs。\nその名前の通り、スキャン済みのもののみ開いたりダウンロードできるようになる。\nscannedonlyのインストール scannedonlyのvfsは、実はSambaに含まれる。\nあれ？じゃあすぐ使えるの？と思ったのだが、それは間違いで、実際にスキャンを行うdaemonを別にインストールする必要がある。\nその代わりと言っては何だが、clamdを立ち上げる必要はない。\nsecurity/scannedonlyからインストールできる。\n以下はインストール例。sysctl.confに一行追加しとけよ、と言われるのでその通りにしておく。\n$ sudo pkg install scannedonly Updating repository catalogue The following 1 packages will be installed: Installing scannedonly: 0.21 The installation will require 61 KB more space 24 KB to be downloaded Proceed with installing packages [y/N]: y scannedonly-0.21.txz 100% 24KB 24.3KB/s 24.3KB/s 00:00 Checking integrity... done [1/1] Installing scannedonly-0.21... done ************************************************** * WARNING! * * * * Make sure you\u0026#39;ve enough socket buffer size. * * Consider increasing kern.ipc.maxsockbuf adding * * at least the following sysctl setting to * * /etc/sysctl.conf: * * * * kern.ipc.maxsockbuf=589824 * * * ************************************************** [vanilla@yaryka ~]$ scannedonlyの設定の流れ scannedonlyの設定には、前章のとおりにsysctl.confを修正することに加え、①vfsとしてのscannedonlyの設定、②daemonとしてのscannedonlyの設定が必要\nまず③のdaemonとしての設定から。\nscannedonly daemonの設定 /etc/rc.confで行う。\n設定例は以下のとおり。\nscannedonly_clamav_enable=\u0026#34;YES\u0026#34; scannedonly_clamav_flags=\u0026#34; --scanroot /usr/home/vanilla/share --big 20 -t 8 -m 20\u0026#34; おなじみの一行目はシステム起動時にdaemonも起動させる指定。\n二行目でdaemonに与えるオプションを指定する。\n上記の-scanrootは、スキャン対象のファイルが置かれるトップディレクトリを指定する。\ndaemonは、ここで指定されたディレクトリ外のファイルのウイルススキャンを要求されても無視する。\nその他のオプションには;\n-p --portnum: ポート番号。ネットワークソケット経由でスキャンするならこちら。 -s path --socket=path : UNIX domainソケット。デフォルトは/var/run/scannedonlyd.sock -t 4 --maxthreads=4 : ウイルススキャンを行うスレッドの数。デフォルトは4。 -b 10 --big=10 : 「大きいファイルだ」と認識するサイズをメガバイト単位で指定。後ほど触れる。 -q 1000 --queuelen=1000 : スキャン待ちできる数。これを超えて要求されたウイルススキャンは無視される。 -m 20 --time=20 : ここで指定された分ごとにステータスメッセージをログに吐く。 scannedonlyのスレッドと「大きいファイル」について scannedonlyはデフォルトでスキャン用に4スレッドを用意する。\n複数のスキャン要求が来たとき、scannedonlyは「大きいファイル」を特定の1スレッドのみに割り当てる。残りのスレッドは「小さいファイル」をざくざくスキャンする。\nこうすることでスキャンの待ち行列をスムーズに解消しようと試みる。\n「大きいファイル」は前述の-bigで指定するサイズで決まる。\nこの値は、共有ファイルにどんなファイルがあるかを前提に変えたらよい。\nデフォルトの10MBはちょっと小さいので、20MBにした。\nscannedonly vfsの設定 smb.confに書く。\nshareごとに設定できる。\n以下が設定例。\n最後の行だけ特殊。後述。\n[share] (略) vfs objects = scannedonly # scannedonlyを有効に。 scannedonly:domain_socket = True # domain socketを使うよ scannedonly:socketname = /var/run/scannedonlyd.sock # domain socketの指定 scannedonly:hide_nonscanned_files = True # 未スキャンファイルを隠し、（下の行に続く） scannedonly:scanning_message = is being scanned for viruses # スキャン中である旨表示する。 scannedonly:allow_nonscanned_files = True # Officeドキュメントを共有するならTrueに。後述。 起動 scannedonly daemonを起動し、そのあとsambaを（再）起動。\n$ sudo service scannedonly start Starting scannedonly_clamav. $ sudo service samba restart Performing sanity check on Samba configuration: OK Stopping smbd. Stopping nmbd. Waiting for PIDS: 4847. Removing stale Samba tdb files: ....... done Starting nmbd. Starting smbd. $ このとき、/var/log/messagesには以下の表示があるはず。\nMar 21 21:13:35 yaryka scannedonlyd_clamav[5741]: Starting with socket /var/run/scannedonlyd.sock and 8 threads Mar 21 21:13:47 yaryka scannedonlyd_clamav[5741]: Finished building databases. Ready for scanning with 8 threads 実験:未スキャンのファイルはどう表示されるか。 さっそく共有フォルダにファイルを放り込んでみよう。\n小さいファイルだと変わらないようにみえるが、ちょっと大きいファイルになると、コピーが終わってからスキャンが終わるまで、以下のような表示になるはず。\nなお、hide_nonscanned_filesをFalseにした場合、コピーが終わった瞬間にファイルは表示される。\nスキャンが終わってなくても表示される。\nされるのだが、開こうとしたりコピーしようとすると、「アクセス権がない」旨のメッセージが表示されて蹴られる。\nユーザからしてみれば、ファイルが見えるのに開けないのはストレスでしかない。\nhide_nonscanned_filesはTrueをお勧めする。\nしかし。\nOfficeドキュメントを共有する場合 scannedonlyの仕組みで困るのは、Officeドキュメント。\nというのも、Officeはファイルを頻繁に開け閉めするから。\nその都度、スキャンが走り、終わるまでファイルを開けなくなる。\n要するに、使い物にならん。\nそこで下記の行を追加して、未スキャンファイルも開けるようにするほかない。\nうーん…。\nscannedonly:allow_nonscanned_files = True まあ、仕方ないよね。\nバックヤードでは さて。scannedonlyのバックヤードはどうなっているのだろうか。\n実ディレクトリを見てみると、このようになっている。\n$ ls -la total 84360 drwxrwxrwx 2 vanilla clamav 512 Mar 21 01:17 . drwxr-xr-x 3 vanilla vanilla 512 Mar 3 22:40 .. -rwxr--r-- 1 vanilla clamav 0 Mar 21 21:17 .scanned:Sophos Virus Removal Tool.exe -rwxr--r-- 1 vanilla clamav 86325064 Mar 17 23:35 Sophos Virus Removal Tool.exe $ ディレクトリに置かれたファイルと同じファイル名、ただしファイル名の先頭に「.scanned:」と付いたサイズ0バイトのファイルができる。\nこのファイルでスキャン済みかどうかを、scannedonlyは判断している。\nちなみに、オリジナルのファイルを消すと.scannedの方も消える。\n.scannedだけが残るということはないからご安心めされよ。\nもちろん、ファイルを更新した際には再スキャンが行われる。\n大きなファイルを共有フォルダにコピーしはじめ、そのあとに小さなファイルを共有フォルダに置くと、小さいファイルはすぐに表示される。\n複数スレッドで処理していることと、大きいファイルは1スレッドでしか処理しないことからこのような動作になる。\nまた、しばらくすると、/var/log/messagesにはログが増えているはず。\nMar 21 21:33:47 yaryka scannedonlyd_clamav[5741]: Status: scanned 3 files and 0 large files in 20 minutes; min 0/max 4 requests on small queue, min 0/max 0 requests on large queue 実験: virusが見つかったらどうなる？ 試してみた。\ntestvirus.txtというファイルを突っ込んでみると、コピーが終わっても共有フォルダには表示がされない。\n代わりに、同じファイル名、ただしファイル名先頭に「VIRUS_found_in_」、末尾に「.txt」と付いたサイズ0のファイルが作られ表示される。\nこのとき、実ディレクトリはこのようになっている。\nつまりオリジナルのファイルは「.virus:」と頭に付けられて、ユーザからは見えなくなっている。\n$ ls -la total 12 drwxrwxrwx 2 vanilla clamav 1024 Mar 21 01:44 . drwxr-xr-x 3 vanilla vanilla 512 Mar 3 22:40 .. -rwxr--r-- 1 vanilla clamav 68 Mar 21 21:44 .virus:testvirus.txt -rwxr--r-- 1 vanilla clamav 0 Mar 21 21:44 VIRUS_found_in_testvirus.txt.txt $ さらにこのとき、/var/log/messagesには以下のように。\n1,2行目がウイルス発見時のもの、3行目はstatus report時のものである。\nMar 21 21:42:51 yaryka scannedonlyd_clamav[5741]: 0:0: WARNING: /usr/home/vanilla/share/testvirus.txt contains virus Eicar-Test-Signature! Mar 21 21:42:51 yaryka scannedonlyd_clamav[5741]: 0: moving /usr/home/vanilla/share/testvirus.txt to /usr/home/vanilla/share/.virus:testvirus.txt Mar 21 21:44:59 yaryka scannedonlyd_clamav[6836]: Warning: 1 files failed to scan in 1 minutes (error or virus found) 以上\n","permalink":"https://nobwak.github.io/posts/2014-03-27-samba%E3%81%AE%E6%B1%9A%E7%89%A9%E3%82%A6%E3%82%A4%E3%83%AB%E3%82%B9%E3%81%AF%E6%B6%88%E6%AF%92%E3%81%A0scannedonly%E7%B7%A8/","summary":"sambaのvfs, scannedonly scannedonlyとは、sambaのvfs。 その名前の通り、スキャン済みのもののみ開いたりダウンロードできるように","title":"Sambaの汚物（ウイルス）は消毒だ。scannedonly編。"},{"content":"Samba上のファイルをウイルススキャンするには。 Samba上のファイルをウイルススキャンするならどんな方法があるだろうか。\n一つは、cronで定期的にスキャンする方法である。\nもう一つは、Sambaにスキャンを組み込む方法である。\nクライアントにアンチウイルスソフトウェアがインストールされており、定義ファイルも更新されているなら、前者のcronがおすすめである。\n理由にはあとで触れる。\nクライアントを信用できないなら、後者のsamba側スキャンが候補に挙がる。\nSambaのウイルススキャンvfs Sambaにはvfsスタッカブルモジュールという仕組みがある。\nSambaに追加機能をもたらすものだが、ウイルススキャン機能を追加するvfsもいくつかある。\nhttp://www.samba.gr.jp/project/translation/Samba3-HOWTO/VFS.html\nこれらのvfsには、大きく分けて以下二つのアプローチがある。\n ファイルをオープンするときにスキャン スキャン済みのファイルのみオープンを許可  1には、vscan-clamavやvirusfilterとがある。\n2には、scannedonlyがある。それ以外には知らない。\n以下、二つのアプローチの特徴を、たいへん大まかに記す。\nアプローチ1: ファイルオープン時スキャン法 Samba上ファイルを開くときに外部のウイルススキャナへファイルを渡し、スキャンするというもの。\nまあ普通に考えるとそうなるわな、という方法。\nただ短所はある。\nファイルに変更があろうがなかろうが、開くたびにスキャンする。\nユーザはスキャンが終わるまで待たされる。\n仮にファイルがとてつもなく巨大だと、待たされる時間も長くなる（スキャン対象とするファイルサイズ上限は決められる）。\n同時接続ユーザが増えても問題になるだろう。\nアプローチ2: あらかじめスキャン法 ②、すなわちscannedonlyは、ファイルが共有ディレクトリ上に置かれたとき、あるいは更新があったときにスキャンする。\nスキャン済みのファイルであれば、ファイルオープン時に再スキャンは行われない。\nファイルオープン時にオーバーヘッドがないこと、ファイルのサイズが大きくてもまったく影響のないこと、ユーザ数の増加による負荷への影響が少ないことは長所である。\nもちろん、こちらにも短所がある。\n当該ファイルがスキャン済みであることを示す「しるし」が必要である。\nscannedonlyは、この「しるし」として、.scannedというサイズ0バイトのファイルを作る。\nつまり、共有ディレクトリに置かれるファイルの数が倍になる。\nサイズが0バイトであるものの、iノードの残量には懸念の生じることがあるかも。\n当然、①にはこの懸念はない。\nやっぱりcronで定期スキャンだよね ご覧のとおり、1,2ともに短所がある。\nクライアント側のウイルス対策が保証できるなら、cronで定期的にスキャンしたほうがよいだろう。\nしかしクライントが信用ならないのなら、アプローチの1,2いずれかを選んで、Sambaでウイルス対策を講じるべき。\nということで、アプローチ1,2のインストール、設定方法については記事を改めて示す。\n","permalink":"https://nobwak.github.io/posts/2014-03-25-samba%E3%81%AE%E6%B1%9A%E7%89%A9%E3%82%A6%E3%82%A4%E3%83%AB%E3%82%B9%E3%81%AF%E6%B6%88%E6%AF%92%E3%81%A0%E3%81%82%E3%82%8B%E3%81%84%E3%81%AFsamba%E3%81%AEvfs%E3%81%A7%E3%82%A6%E3%82%A4%E3%83%AB%E3%82%B9%E3%82%B9%E3%82%AD%E3%83%A3%E3%83%B3/","summary":"Samba上のファイルをウイルススキャンするには。 Samba上のファイルをウイルススキャンするならどんな方法があるだろうか。 一つは、cron","title":"Sambaの汚物（ウイルス）は消毒だ。あるいはsambaのvfsでウイルススキャン"},{"content":"アンチウイルスソフトのテストには、実際にウイルスを食わせるのが一番である。ただまあウイルスなんて物騒なものは、そうそう手には入らない。\nどうしたもんかと思ってんだが、やっぱりあるとこにはあるんですなあ。\nThe Anti-Malware Test file\nhttp://www.eicar.org/86-0-Intended-use.html\n上記ページの下部にある文字列をテキストファイルに貼り付ければテスト用ウイルスの出来上がり。手軽。\nアンチウイルスソフトにはウイルスとして判定されるが実害なし。\n","permalink":"https://nobwak.github.io/posts/2014-03-23-%E3%83%A1%E3%83%A2_%E3%83%86%E3%82%B9%E3%83%88%E7%94%A8%E3%81%AE%E3%82%A6%E3%82%A4%E3%83%AB%E3%82%B9%E3%81%AFeicar%E3%81%A7/","summary":"アンチウイルスソフトのテストには、実際にウイルスを食わせるのが一番である。ただまあウイルスなんて物騒なものは、そうそう手には入らない。 どうし","title":"[メモ] テスト用のウイルスはEICARで"},{"content":"ママも安心。軽量手軽な監視ツールMonitorix の続き\n素の状態でもだいたいのところを監視してくれるMonitorixであるが、それでも設定変更したほうがいいところ、変更するとよいところがある。\n変更例を示す。\n概要 monitorixの設定ファイルは大きく三つに分かれる。\n①全体的な設定をする箇所\n②個々の監視内容をOn/Offするスイッチ箇所\n③個々の監視内容の設定をする箇所\n以下、それぞれについて扱うとともに、ログの設定も行う。\n①全体の設定 設定ファイルの冒頭部分。\nMonitorixの全体的な設定を行う箇所。\n# グラフの置かれるページのタイトル(ブラウザのバーに表示されるもの) title = copper, poudirere server # グラフの置かれるページで表示されるタイトル hostname = copper # テーマカラー。whiteもあるのだが…。記事末尾で触れる。 theme_color = black # 更新頻度 refresh_rate = 150 # ネットワーク速度の表示をbpsにするか（デフォルトはBps） # yでいいのでは netstats_in_bps = y そしてログファイルの場所を指定するエリアがある。\nlog_fileの行のみ性質が異なる、と理解している。\nこの行に関しては「monitorixのログの吐き出し箇所を指定する」という意味。\n残りは、「Monitorixが見に行くログの場所」という意味になる。\n# Log files pathnames # monitorixが確認するログファイル # ---------------------------- log_file = /var/log/monitorix secure_log = /var/log/auth.log （略） 以上に続いて、Monitorixで監視する項目の設定を行うエリアがある。\n②個々の監視内容をOn/Offするスイッチ箇所 Monitorixでは、出来合いの監視項目をON/OFFする、というスタイルを取る。\nだからこそ手軽。\nここにない内容を監視したいなら、他の監視ツールに変えたほうがいいでしょう。\n# Graphs (de)activation # 有効にするグラフを指定する。yで有効、nで無効 # グラフの詳細はman monitorix.confで確認のこと。 # # 対応する③設定は、systemなら\u0026#34;\u0026lt;system\u0026gt;\u0026#34;というエリアに, # マニュアルは「sysmte.rrd」というエリアにある。 # # ----------------------------------- \u0026lt;graph_enable\u0026gt;  system = y  kern = y  proc = y （略） では、それぞれの監視項目の設定を。\n③個々の監視内容の設定をする箇所 以下、監視項目をいくつかピックアップして触れる。\nlmsense\nLinuxのlmsensorsが入ってないとダメ。\nつまりFreeBSDでは無理。\nnvidia\nNvidiaグラフィックカードの温度を測定する。\nオフィシャルドライバーが入っていれば大丈夫そうな記載だけどもFreeBSDだとどうやら無理。\ndisk\nディスクの温度などを測定する。\n測定にはsmartmontools, hddtempのいずれかが必要。\nFreeBSDの場合はsmartmontools。\nsysutils/smartmontoolsからインストールできる。\nsudo smartctl -scanで表示されるディスクのうち、監視したいディスクを下記の0 =に続けて並べる。\n区切りはカンマ\n例\n\u0026lt;disk\u0026gt;  \u0026lt;list\u0026gt;  0 = /dev/ada0, /dev/ada1  \u0026lt;/list\u0026gt; （略） fs\nファイルシステムの使用容量、I/Oなどを調べる。\nカンマで並べる。\n例\n\u0026lt;fs\u0026gt;  \u0026lt;list\u0026gt;  0 = /, swap, /usr/local  \u0026lt;/list\u0026gt; net\nネットワークインターフェースの入出力を調べる。\nlistでインタフェースを指定。\nデフォルトだとeth0になってるから、FreeBSDでは変更必須。\n記載例。\n\u0026lt;net\u0026gt; \tlist = bge0 \t\u0026lt;desc\u0026gt; \tbge0 = GbE LAN, 0, 100000000 \t\u0026lt;/desc\u0026gt; \tgateway = bge0 \u0026lt;/net\u0026gt; descには、listで指定した各インタフェースの詳細を記載する。\nここにはグラフの最大値も指定する必要がある。\nこの時に注意点がひとつ。\n単位はbpsではなく、Bpsである、ということ。\nざっくり、100MbpsのNICであれば10000000を。\nGbEのNICであれば、100000000を指定する。\nどういうことかと言えば、つまり下記の通り。\n100Mbps = 最大でも10MBpsは超えない = 10,000,000 と指定。\n1000Mbps = 最大でも100MBpsは超えない = 100,000,000と指定。\nport\nportの監視。\nFreeBSDの場合、ipfwを動かしておく必要がある。\nLinuxではiptabelsで。\nlistに監視したいポートを並べる。\ndescでポートの詳細を指定。\n記載例。\n\u0026lt;port\u0026gt; \tmax = 9 \trule = 24000 \tlist = 21, 80, 22, 110, 139 \t\u0026lt;desc\u0026gt; \t21\t= FTP, tcp, in, 0, 1000 \t80\t= HTTP, tcp, in, 0, 1000 \t22\t= SSH, tcp, in, 0, 1000 \t110\t= POP3, tcp, in, 0, 1000 \t139\t= NETBIOS, tcp, in, 0, 1000 \t\u0026lt;/desc\u0026gt; （略） descの22ではtcp, inと指定している。\nこれは「ポート22にtcp接続してくる/ポート22からtcpで出て行く通信を監視する」という意味。\noutだと「ポート22へtcp接続し、ポート22からやってくるtcp接続を監視する」という意味。\nruleはipfwを使う時だけ有効。\nipfwのルール2400番を使うよ、と指定している。\nipfwのルールを見てみると（ポート22のところだけ抜粋）。\n24000 count tcp from me 22 to any 24000 count tcp from any to me dst-port 22 ログのローテート設定 /var/log/には以下のようにログが吐かれる。\nこのまま放っておくと、ログは一方的にたまるだけなので、newsyslogに設定しておく。\n-rw-r--r-- 1 root wheel 349949 2月 20 17:54 ./monitorix -rw-r--r-- 1 www www 165818 2月 20 17:17 ./monitorix-httpd /etc/newsyslog.conf\n# for monitorix /var/log/monitorix 600 7 100 * JC /var/log/monitorix-httpd www:www 600 7 100 * JC newsyslogの再起動。\n$ sudo service newsyslog restart Creating and/or trimming log files. テーマについて デフォルトのテーマblackは、前世紀のwebみたいで、ちょっといただけない。\nかと言って、もう一方の選択肢whiteもあんまりである。\n試行錯誤の末、白基調で冒頭の様なテーマにしている。\n設定ファイルの下の方にある、whiteのところを書き換えた。\n全体設定でthemeをwhiteにしておくこと。\n参考までに。\n\u0026lt;white\u0026gt;  canvas = FFFFFF  back = 101010  font = C0C0C0  #mgrid = 80C080  mgrid = ecf0f1  #grid = 808020  grid = 808020  frame = ecf0f1  arrow = FFFFFF  shadea = 404040  shadeb = 404040  axis = 101010  main_bg = FEFEFE  main_fg = e67e22  title_bg = ecF0f1  title_fg = 34495e  graph_bg = bdc3c7  gap = FFFFFF  \u0026lt;/white\u0026gt;``` ","permalink":"https://nobwak.github.io/posts/2014-03-18-monitorix%E3%82%92%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA%E3%81%97%E3%82%88%E3%81%86/","summary":"ママも安心。軽量手軽な監視ツールMonitorix の続き 素の状態でもだいたいのところを監視してくれるMonitorixであるが、それでも設定","title":"Monitorixをカスタマイズしよう"},{"content":"Microsoft Security Essentials（以下, MSE）はご存知Microsoftが作った アンチウイルスソフトウェアである。\n普通はGUIで使うものだが、実はコマンドラインからも使える。\nコマンドラインから使えると、バッチ処理ができる。\nあらいいですね。\nバッチ処理できると何が便利か。\nたとえばフォルダA、B、C配下すべてのファイルをスキャンしたい。\nしかも定期的に。\nこれをGUIでやろうとすると、その都度、いちいちフォルダをマウスやキーボードで選ばないといけない。\nノーグッドである。\nランチャーに登録したバッチファイルを実行するほうがはるかにビウティフルである。\n以下に方法を示す。\nなおMSEは4.4.304.0、Windows 7での内容である。\nコマンドライン版MSEのありか Microsoftのサイトからインストール済みなら、以下の場所にある。\n%ProgramFiles%\\Microsoft Security Client\\MpCmdRun.exe フォルダを開きたいならWindowsキー+Rで開いたウインドウに以下を貼り付けて実行せよ。\n%ProgramFiles%\\Microsoft Security Client\\ 使うべきMSEのオプション 定義ファイルのアップデート\n-SignatureUpdate\nスキャン\n-Scan -ScanType 3 -File ＜ファイル、あるいはフォルダのパス＞\nなおScanTypeには0〜3がある。\n一見、選択肢がありそうだが、ファイル/フォルダを指定したい場合には3の一択である。\n以下は参考。\n-Scan [-ScanType value]  0 Default, according to your configuration  1 Quick scan  2 Full system scan  3 Single file custom scan  [-File ]  Indicates the file path to be scanned, only valid for custom scan バッチファイルの例 下記の通り、-Fileに続けてスキャン対象フォルダを並べるだけ。\nフォルダはリモートフォルダでもよい。\nとなると、使い勝手は格段によくなりますな。\n@echo off setlocal set path=%programfiles%\\Microsoft Security Client\\;%path% @echo on MpCmdRun.exe -SignatureUpdate MpCmdRun.exe -Scan -ScanType 3 -File c:¥data MpCmdRun.exe -Scan -ScanType 3 -File \\\\192.168.0.5\\sharedfolder pause またこの例では、結果を目視確認したいので、最後にpauseを入れてスキャン終了後もコマンドプロンプトを開いたままにしている。\nそれが嫌ならpauseを消して、最初に@echo offをつければよろしい。\nでもその場合、結果はどうやったらわかるのか。\n結果はどこに出るの？ C:\\WINDOWS\\Temp\\MpCmdRun.log にスキャン結果が記録されるので、ゆっくりご覧になればよい。\n以下はログの例\n「MpScan() has detected 0 threats.」とのこと。\n------------------------------------------------------------------------------------- MpCmdRun: Command Line: \u0026#34;C:\\Program Files\\Microsoft Security Client\\Antimalware\\MpCmdRun.exe\u0026#34; -scan -Scantype 3 -File \\\\192.168.0.5\\sharedfolder Start Time: ‎日 ‎2 ‎16 ‎2014 17:15:32 Start: MpScan(MP_FEATURE_SUPPORTED, dwOptions=3, path \\\\192.168.0.5\\sharedfolder, DisableRemediation = 0) INFO: This is a resource scan. skipping signature updateScanning path as folder: \\\\192.168.0.5\\sharedfolder. MpScan() started Time Info - ‎日 ‎2 ‎16 ‎2014 19:23:59 MpScan() was completed Finish: MpScanStart(MP_FEATURE_SUPPORTED, dwOptions=16385) Finish: MpScan(MP_FEATURE_SUPPORTED, dwOptions=16385, path \\\\192.168.0.5\\sharedfolder, DisableRemediation = 0) Scanning \\\\192.168.0.5\\sharedfolder found no threats. MpScan() has detected 0 threats. MpCmdRun: End Time: ‎日 ‎2 ‎16 ‎2014 19:23:59 ------------------------------------------------------------------------------------- 応用例 以下のようなバッチファイルを例えばvscan.batという名前で保存する。\n保存先はパスの通った場所にする。\nこうしておけば、Windows + Rでウインドウを開き、vscan ＜スキャンしたいフォルダ＞ と叩けば素早くスキャンできる。\nビウティフル。\n@echo off setlocal set path=%programfiles%\\Microsoft Security Client\\;%path% MpCmdRun.exe -Scan -ScanType 3 -File %1 pause ","permalink":"https://nobwak.github.io/posts/2014-03-13-microsoft_security_essentials%E3%82%92%E3%83%90%E3%83%83%E3%83%81%E3%81%A7%E4%BD%BF%E3%81%8A%E3%81%86/","summary":"Microsoft Security Essentials（以下, MSE）はご存知Microsoftが作った アンチウイルスソフトウェアである。 普通はGUIで使うものだが、実は","title":"Microsoft Security Essentialsをバッチで使おう"},{"content":"Monitorixは軽量で手軽に運用できる監視ツールである。\nhttp://www.monitorix.org/\nMonitorixの特徴 Perlで書かれており、データ格納、グラフ描画はrrdtoolを使っている。\nここだけ見ると他の量産型監視ツールとそれほど変わらない。\n特筆すべきはそのサイズ。\n依存ソフトウェアを除いたmonitorix関連ファイルは合計で2MBytesにも満たない。\nそれなのに、ツール自体にhttpサーバも含まれているのでapacheなどを追加でインストールする必要はない（他のhttpサーバを使ってもよい）。\n複数サーバ監視ももちろん可能。\n監視対象サーバ、監視サーバの双方にmonitorixをインストールし、設定で監視サーバ、監視「対象」サーバを分けることになる。\nつまり、これ一つで完結する。\n加えて、監視項目の設定も楽。\nインストールしてすぐグラフが表示されるのは驚きである。\n以下、インストールした記録を示す。\nOSはFreeBSDだが、インストール後の設定はほぼ共通と思う。\nmonitorixビルトインのhttpサーバを使う。\nインストール pkgngでインストールしています。\n$ pkg search -o monitorix sysutils/monitorix $ pkg search monitorix monitorix-3.4.0 $ sudo pkg install monitorix Updating repository catalogue The following 8 packages will be installed:  Installing p5-ParallelUA: 2.57_2  Installing p5-HTTP-Server-Simple: 0.44  Installing p5-CGI.pm: 3.63,1  Installing p5-XML-SAX-Expat: 0.50  Installing p5-Config-General: 2.52  Installing rrdtool: 1.4.8  Installing p5-XML-Simple: 2.20  Installing monitorix: 3.4.0 The installation will require 5 MB more space 1 MB to be downloaded Proceed with installing packages [y/N]: y （略） ご覧の通り私の環境では一部の依存含めて5MB消費するだけだが、rrdtoolのインストールがあるとドッと依存が増える。\n以下のようにインストールされる。\n実行ファイル　/usr/local/bin/monitorix\n設定ファイル　/usr/local/etc/monitorix.conf\nhtmlなどは　/usr/local/www/monitorix/\ncgiは /usr/local/www/cgi-bin/monitorix.cgi\n起動スクリプト　/usr/local/etc/rc.d/monitorix\nPerlモジュール /usr/local/share/monitorix/\nドキュメント　/usr/local/share/doc/monitorix/\nフルリストは pkg info -l monitorix-3.4.0 のようにすれば見られる。\n設定 /usr/local/etc/monitorix.confで行う。\n最低限、変えないといけない場所は以下。\nbase_urlとbase_cgiと、httpdを動かす権限。\n以下はFreeBSDの例だが他OSでも変更する「箇所」は同じ。どう変えるかはOS/monitorixがインストールされた内容に応じて考える。\nまずbase_urlとbase_cgi\nbase_dir = /usr/local/www/monitorix/ base_lib = /var/db/monitorix/ # ↓このままだと/usr/local/www/monitorix/monitorixを # ↓参照してしまう。 # base_url = /monitorix base_url = / # ↓このままだと/usr/local/www/monitorix/monitorix/cgi-binを # ↓参照してしまう。 # base_cgi = /cgi-bin/ # ↓/usr/local/www/monitorix/cgi/が/usr/local/www/cgi-binに # ↓リンクされているのでこうする。 base_cgi = /cgi/ 次にhttpdの動作ユーザ、グループ。\nデフォルトではnobodyに設定されているが、可能なら個別の専用ユーザを設定したほうがよい。\nユーザnobodyは他のサーバソフトウェアでも使われることがある。\nこのため、何らかの問題でnobodyの権限が奪われた場合、monitorixだけでなく、同じnobody権限で動いているソフトウェアにも影響が及んでしまうからである。\nFreeBSDではwebサーバ用のアカウント「www」が用意されているのでこちらを使う。\n（もちろん、同じマシンで他のwebサーバを動かしており、かつ権限がwwwの場合には先述の懸念が発生するので注意）\nグラフの画像が保存される/usr/local/www/monitorix/imgsのオーナ/グループがwwwになっているしね。\nなお、monitorixのhttpdはポート8080を使う。\n同ホスト内の他のサーバがポート8080を使っている場合には変えておくこと。\n\u0026lt;httpd_builtin\u0026gt;  enabled = y  host =  port = 8080 # user = nobody # group = nobody  user = www  group = www （略） \u0026lt;/httpd_builtin\u0026gt; 参考までにFreeBSDにおけるユーザwwwは以下の通り。\n$ finger www Login: www Name: World Wide Web Owner Directory: /nonexistent Shell: /usr/sbin/nologin No Mail. No Plan. テスト起動 FreeBSDでは以下の通りにして起動。\n$ sudo service monitorix onestart : Starting monitorix. $ そしたらブラウザでhttp://＜monitorixサーバ＞:8080/に繋ぐ。\n下記のような画面になれば成功。\nなんというか・・・20世紀末から21世紀初頭のアングラサイトといいましょうか、「Welcome to Underground」とか書いてありそうなサイトで素敵です。\nOKを選んで先に進めばグラフがご覧の通り。\n続き Monitorixをカスタマイズしよう\n","permalink":"https://nobwak.github.io/posts/2014-03-11-%E3%83%9E%E3%83%9E%E3%82%82%E5%AE%89%E5%BF%83%E8%BB%BD%E9%87%8F%E6%89%8B%E8%BB%BD%E3%81%AA%E7%9B%A3%E8%A6%96%E3%83%84%E3%83%BC%E3%83%ABmonitorix/","summary":"Monitorixは軽量で手軽に運用できる監視ツールである。 http://www.monitorix.org/ Monitorixの特徴 Perlで書かれており、データ格納、グラフ描画はrrd","title":"ママも安心。軽量手軽な監視ツールMonitorix"},{"content":"ディスクのS.M.A.R.T.（以降、SMART）から情報を取得したり、ディスクのチェックができる。\nFreeBSDではsysutils/smartmontoolsからインストールできる。\nsmartmontoolsのインストール、実施例はいろんなところに書かれているので、ここではメモ程度にまとめる。\nFreeBSD 9.2-RELEASE-p3(i386), smartmontools-6.2_1での内容。\nインストール portsもpkgもsysutils/smartmontoolsからインストールできる。\nsmartctlとsmartdが/usr/local/sbin/にインストールされる。\nsmartctlがメインのコマンド。\nsmartdがデーモンプログラム。\n立ち上げておくと、定期的にディスクチェックを行い、結果をdaemonファシリティのログに書き込んでくれる。\n必要であれば問題発生時にメールも送ってくれる。\n設定ファイルは/usr/local/etc/smartd.conf。\nディスクの確認 何はともあれ、どんなディスクが繋がっているか調べる。\nsmartctl -scanで得られる。\nなお、SMARTにアクセスするには管理者権限が必要。\n以下は実行例。\nここではHDDは/dev/ada0である。\n環境により/dev/da0の場合もあるでしょう。\n$ sudo smartctl --scan /dev/ada0 -d atacam # /dev/ada0, ATA device /dev/cd0 -d atacam # /dev/cd0, ATA device ディスクが分かったら、SMARTに対応しているかどうかを調べる。\nsmartctlでデバイスファイルを開いてみればよい。\n$ sudo smartctl /dev/ada0 smartctl 6.2 2013-07-26 r3841 [FreeBSD 9.2-RELEASE-p3 i386] (local build) Copyright (C) 2002-13, Bruce Allen, Christian Franke, www.smartmontools.org ATA device successfully opened Use \u0026#39;smartctl -a\u0026#39; (or \u0026#39;-x\u0026#39;) to print SMART (and more) information 大丈夫そう。\nSMARTからの情報の取得 smartctl -a ＜デバイスファイル＞で情報を全部、-xでSMART以外の情報も表示。\n実行例\n$ sudo smartctl -a /dev/ada0 smartctl 6.2 2013-07-26 r3841 [FreeBSD 9.2-RELEASE-p3 i386] (local build) Copyright (C) 2002-13, Bruce Allen, Christian Franke, www.smartmontools.org === START OF INFORMATION SECTION === Model Family: Seagate Barracuda 7200.10 Device Model: ST380815AS Serial Number: 5RW18X0V Firmware Version: 3.ADA User Capacity: 80,000,000,000 bytes [80.0 GB] Sector Size: 512 bytes logical/physical Device is: In smartctl database [for details use: -P show] ATA Version is: ATA/ATAPI-7 (minor revision not indicated) Local Time is: Thu Feb 27 23:10:37 2014 JST SMART support is: Available - device has SMART capability. SMART support is: Enabled === START OF READ SMART DATA SECTION === SMART overall-health self-assessment test result: PASSED See vendor-specific Attribute list for marginal Attributes. （略） ディスクのテスト実行 smartctl -t short ＜デバイスファイル＞で実行する。\n-tはテストの種類の指定。\nshortと指定しているが、shortとくればlongもある。\nそれ以外にもある。\n詳しくはman smartctl（「-test」で検索するとよい）。\nshortだと10分以内、longだと数十分単位でのテスト。\n運用中でも可能。\n上記のコマンドは、ディスクのSMARTに対して「テストをせい」と指示をするだけ。\nコマンド叩いたときには、「何時何分ごろに終わるからね」と言うだけで結果は表示されない。\n結果はsmartctl -aで確認する。\nsmartctl -Xでテストを中止する。\n以下実行例。\n$ sudo smartctl -t short /dev/ada0 パスワード: smartctl 6.2 2013-07-26 r3841 [FreeBSD 9.2-RELEASE-p3 i386] (local build) Copyright (C) 2002-13, Bruce Allen, Christian Franke, www.smartmontools.org === START OF OFFLINE IMMEDIATE AND SELF-TEST SECTION === Sending command: \u0026#34;Execute SMART Short self-test routine immediately in off-line mode\u0026#34;. Drive command \u0026#34;Execute SMART Short self-test routine immediately in off-line mode\u0026#34; successful. Testing has begun. Please wait 2 minutes for test to complete. Test will complete after Thu Feb 27 23:35:37 2014 Use smartctl -X to abort test. $ 結果確認 smartctl -aで確認する。\n見るのはSelf-test execution status、SMART Self-test logの二つのエリア\n以下の通り、「Self-test execution status」「SMART Self-test log」ともにエラーなし（without error）となっている。\nなお、テスト実行をしてすぐsmartctl -aとすると、「いまテストしているところだよ」という表示になるので興味があればご覧ください。\n（前略） Self-test execution status: ( 0) The previous self-test routine completed  without error or no self-test has ever  been run. （略） SMART Self-test log structure revision number 1 Num Test_Description Status Remaining LifeTime(hours) LBA_of_first_error # 1 Short offline Completed without error 00% 41957 - # 2 Short offline Completed without error 00% 41956 - # 3 Short offline Completed without error 00% 0 - 常時モニタリングのためのsmartd cronでsmartctlを実行してもよいけど、smartdを立ち上げおくのがよい。\nテストの自動実行や、後述するようなディスクの変化についてもレポートしてくれる。\n/usr/local/etc/smartd.confが設定ファイル。\nデフォルトでは問題のあったときにしか報告してくれない。\n日々のログを吐き出させたいのなら、syslogd, newsyslogの設定変更も必要。\nsmartd.confの変更 最低限やることは二つ。\n①DEVICESCANはコメントアウト\n②ディスクとテスト種別、スケジュールを指定。\n①DEVICESCANのコメントアウト\nデフォルトではDEVICESCANが有効になっている。\nDEVICESCANがあると、smartdはそれ以降の設定をすべて無視して、実行される都度、デバイスのスキャンを行う。\nそれよりも、チェックするデバイスを明示した方がよい。\n②ディスクとテスト種別、スケジュールを指定。\n書式例は以下の通り。\n＜ディスク＞　＜各種オプション＞　-s ＜スケジュール＞\n実際の例は以下の通り。\n/dev/ada0 -a -o on -S on -s S/../.././02 ＜ディスク＞にはデバイスファイルを指定。\n＜各種オプション＞は以下の通り。\n-a: ATAではデフォルト。全部入り。黙ってつけとけ。\n-o: ATA専用。SMARTのオフラインテストを有効にするか。ONにしとけ。\n-S: autosaveを有効にするか。ONにしとけ。\n-s: T/MM/DD/d/HH でスケジュール指定。\nT/MM/DD/d/HH\nT: テストのタイプ。short（S）かlong（L）か。\nMM: 月。01-12で指定。必ず二桁で指定。\nDD: 日。01-31で指定。必ず二桁で指定。\nd: 曜日。1が月曜、7が日曜。\nHH: 時刻。00-23で指定。必ず二桁で指定。\n以下だと毎日の午前2時にshortのテストを実施。\n-s S/../.././02 syslogdの設定 smartdは、デフォルトではdaemonファシリティにログを吐く。\nそのままだと使いにくいので、ログの出力先を変える。\nたとえばlocal3ファシリティにする。\nそれには/etc/rc.confで、smartd_flagsとして指定する。\n/etc/rc.conf\n#SMART monitor tool smartd_enable=\u0026#34;YES\u0026#34; # マシン起動時にsmartdも起動させる設定 smartd_flags=\u0026#34; -l local3 \u0026#34; # ログ出力先の指定 そうしておいて、/etc/syslog.confにて以下を追加。\n/etc/syslog.conf\n# # smartd(smartmontools) # local3.* /var/log/smartd.log 変更したらsyslogdを再起動。\n$ sudo service syslogd restart Stopping syslogd. Waiting for PIDS: 26185 Starting syslogd. $ しかしこのままだとsmartd.logが際限なく大きくなる。\nnewsyslog.confにも変更を加える。\nnewsyslog.confの設定 以下を追加。\n/etc/newsyslog.conf\n# # smartd(smartmontools) # /var/log/smartd.log 640 10 1024 * JC 1MBを超えたらログをローテート。bzipで圧縮。10個まで保存。圧縮後のパーミッションは640。\n終わったらnewsyslogを一回再起動しておくとよいかな。\n$ sudo service newsyslog restart Creating and/or trimming log files. $ やっと準備完了。\nsmartdを起動しよう。\nsmartdの起動 再掲になるけれども、/etc/rc.confを修正してsmartdを起動する。\n/etc/rc.conf\n#SMART monitor tool smartd_enable=\u0026#34;YES\u0026#34; # マシン起動時にsmartdも起動させる設定 smartd_flags=\u0026#34; -l local3 \u0026#34; # ログ出力先の指定 smartdを起動する。\n$ sudo service smartd start Starting smartd. $ 先ほど指定したログファイルを見る。\n$ cat /var/log/smartd.log Mar 4 22:17:59 ascomoid newsyslog[38905]: logfile first created Mar 4 22:26:32 ascomoid smartd[53036]: smartd 6.2 （略） Mar 4 22:26:32 ascomoid smartd[53038]: file /var/run/smartd.pid written containing PID 53038 動いていますね。\nただこれだけでは、指定したディスクをチェックしてくれるか、分からない。\nsmartdはSIGUSR1シグナルを送ってやるとステータスチェックをしてくれるというので試してみよう。\nなお、smartdのpidはさっきのログファイルに書いてあるし、あるいはservice smartd statusとやればpidを知ることができる。\n$ sudo kill -SIGUSR1 53038 $ そのうえでログファイルを見てみると。\n以下のような行が増えているはず。\n/dev/ada0のチェックが出来ていますね。\nMar 4 22:35:10 ascomoid smartd[53038]: Signal USR1 - checking devices now rather than in 682 seconds. Mar 4 22:35:10 ascomoid smartd[53038]: Device: /dev/ada0, SMART Usage Attribute: 190 Airflow_Temperature_Cel changed from 52 to 53 Mar 4 22:35:10 ascomoid smartd[53038]: Device: /dev/ada0, SMART Usage Attribute: 194 Temperature_Celsius changed from 48 to 47 daily status 以下のような行を/etc/periodic.confに追加するとレポートをroot宛てに送ってくれる。\n複数ディスクの場合は、スペースで区切り。\n下記のようなメールが届く。\nSMART status:  Checking health of /dev/ada0: OK  Checking health of /dev/ada1: OK  Checking health of /dev/ada2: OK 以上。\n","permalink":"https://nobwak.github.io/posts/2014-03-09-freebsd%E3%81%A7smartmontools%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"ディスクのS.M.A.R.T.（以降、SMART）から情報を取得したり、ディスクのチェックができる。 FreeBSDではsysutils/sm","title":"FreeBSDでsmartmontoolsのインストール"},{"content":"メモでござる。\n5 Scientifically Proven Ways to Work Smarter, Not Harder\nhttp://www.inc.com/jeff-haden/5-scientifically-proven-ways-to-work-smarter-not-harder-tues.html\n上記記事から。\n 休憩をたくさん取れ 昼寝しろ 自然に触れろ 仕事のカタマリごとに場所変えろ まずメールをチェックしろ  休憩をたくさん取れ よく言われるとおり、90分ごとに休憩を取れと。\nで、この90分は縮日周期（ultradian rhythm)のこと。\n昼寝しろ 睡眠は記憶を定着させるとともに、燃え尽き症候群を防ぐのに役立つ。\n自然に触れろ 都会は人の注意力を耐えず刺激するから。\n仕事のカタマリごとに場所変えろ。 あらかじめ消化すると決めておいたto-doを片付けたら、場所を変えるようにする。\n区切りがいいし、次のto-doのカタマリをどう片付けようか、移動中に整理できるから。\nまずメールをチェックしろ やるべき事をまず一覧する、ってことですな。\n","permalink":"https://nobwak.github.io/posts/2014-03-07-%E3%83%A1%E3%83%A2_%E3%83%90%E3%83%AA%E3%83%90%E3%83%AA%E5%83%8D%E3%81%8F#8230%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%8F%E8%B3%A2%E3%81%8F%E5%83%8D%E3%81%8F5%E3%81%A4%E3%81%AE%E6%96%B9%E6%B3%95/","summary":"メモでござる。 5 Scientifically Proven Ways to Work Smarter, Not Harder http://www.inc.com/jeff-haden/5-scientifically-proven-ways-to-work-smarter-not-harder-tues.html 上記記事から。 休憩をたくさん取れ 昼寝しろ 自然に触れろ 仕事のカタマリごとに場所変えろ まずメールをチェックしろ","title":"[メモ] バリバリ働く...ではなく、賢く働く5つの方法"},{"content":"備忘のためOffice 2007以降のドキュメントを開くMS製Viewerをまとめておく。\nExcel Viewer\nhttp://www.microsoft.com/ja-jp/download/details.aspx?id=10\nhttp://download.microsoft.com/download/4/6/C/46C73A03-F72F-419F-A76E-6C0D9F583E2E/ExcelViewer.exe\nWord Viewer\nhttp://www.microsoft.com/ja-jp/download/details.aspx?id=4\nhttp://download.microsoft.com/download/1/0/1/1016da1b-6a19-432a-ad6b-0b3f6e60bb28/wordview_ja-jp.exe\nPowerPoint Viewer\nhttp://www.microsoft.com/ja-jp/download/details.aspx?id=13\nhttp://download.microsoft.com/download/9/2/A/92AEA2B8-CBD9-494D-B60B-F1E6D8EE1771/PowerPointViewer.exe\nWord/Excel/PowerPoint 用 Microsoft Office 互換機能パック\nhttp://download.microsoft.com/download/8/B/9/8B97798B-00F8-4523-8CA6-8C0C5867883F/FileFormatConverters.exe\n","permalink":"https://nobwak.github.io/posts/2014-03-06-%E3%83%A1%E3%83%A2_ms%E8%A3%BDoffice_2007%E4%BB%A5%E9%99%8D%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%83%93%E3%83%A5%E3%83%BC%E3%82%A2/","summary":"備忘のためOffice 2007以降のドキュメントを開くMS製Viewerをまとめておく。 Excel Viewer http://www.microsoft.com/ja-jp/download/details.aspx?id=10 http://download.microsoft.com/download/4/6/C/46C73A03-F72F-419F-A76E-6C0D9F583E2E/ExcelViewer.exe Word Viewer http://www.microsoft.com/ja-jp/download/details.aspx?id=4 http://download.microsoft.com/download/1/0/1/1016da1b-6a19-432a-ad6b-0b3f6e60bb28/wordview_ja-jp.exe PowerPoint Viewer http://www.microsoft.com/ja-jp/download/details.aspx?id=13 http://download.microsoft.com/download/9/2/A/92AEA2B8-CBD9-494D-B60B-F1E6D8EE1771/PowerPointViewer.exe Word/Excel/PowerPoint 用 Microsoft Office 互換機能パック http://download.microsoft.com/download/8/B/9/8B97798B-00F8-4523-8CA6-8C0C5867883F/FileFormatConverters.exe","title":"[メモ] MS製Office 2007以降ドキュメントビューア"},{"content":"ある日、デスクトップ用途で使用しているFreeBSDマシンで、いきなりデスクトップ環境がブラックアウトしました。\nログを見たところこんな感じ。\nswap_pager_getswapspace(4): failed swap_pager_getswapspace(3): failed pid 1218 (mate-settings-daemo), uid 1001, was killed: out of swap space pid 1228 (mate-panel), uid 1001, was killed: out of swap space pid 1025 (clamd), uid 106, was killed: out of swap space pid 1203 (Xorg), uid 0, was killed: out of swap space swapが足りなくて無実のプロセスを血祭りにした証拠であります。\n恐ろしい。怖い。\nこれは、ちょっと洒落にならんのじゃないかと思って、調べたのだが。\nたとえば以下スレッドで議論が持ち上がってるようなんだけど、私の理解の限度を超えている。\nhttp://lists.freebsd.org/pipermail/freebsd-current/2012-August/036080.html\nよろしい。\n理解は諦めた。\n対症療法的ではあるが、swapを後から補う方法はあるので、ここに採録。\nなお、このようにswapが枯渇するのはよっぽどのこと。\n末尾の後日談を参照の事。\n「後から」スワップを追加する方法 ここに書いてある通り。\nhttp://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/adding-swap-space.html\nddでファイルを作り、それをswapとしてマウントする、という仕組み。\n物理ディスクに余裕があれば、好きな容量を追加できる。\n現状確認 まず、現状確認。\nswapinfoでできる。\n$ swapinfo Device 1K-blocks Used Avail Capacity /dev/ada0s1b 524288 25960 498328 5% 500MBしか確保してなかった…。\n古いマシンでOSアップグレードしながら使ってたからなあ。\n物理ディスクを確認。\n7.2GBあるので、いっちょう奢って2GB確保しよう。\n$ df -h Filesystem Size Used Avail Capacity Mounted on /dev/ad4s1a 71G 58G 7.2G 89% / devfs 1.0k 1.0k 0B 100% /dev swapファイルの作成 ddでファイルを作る。\n置き場所は物理ディスク上でも余裕のあるところにしよう。\n以下の例では/var/cache下にファイルを作っている。\n/var/cacheは/dev/ad4s1aの上に載っていて、上で確認した通り、容量も十分。\n$ sudo dd if=/dev/zero of=/var/cache/swapfile bs=1m count=2048 パスワード: 2048+0 records in 2048+0 records out 2147483648 bytes transferred in 45.843033 secs (46844275 bytes/sec) 念のためファイルのサイズ確認。\n2GBになっている。\n$ du -sh /var/cache/swapfile 2.0G /var/cache/swapfile オーナ、グループ、パーミッションを設定。\n$ sudo chmod 0600 /var/cache/swapfile $ sudo chown root:wheel /var/cache/swapfile $ ls -la /var/cache/swapfile -rw------- 1 root wheel 2147483648 2月 10 17:20 /var/cache/swapfile 準備完了。\nswapファイルの追加 以下のようにすればswapが増える。\n$ sudo mdconfig -a -t vnode -f /var/cache/swapfile -u 0 \u0026amp;\u0026amp; sudo swapon /dev/md0 おお二段になった。\n$ swapinfo Device 1K-blocks Used Avail Capacity /dev/ada0s1b 524288 25596 498692 5% /dev/md0 2097152 0 2097152 0% Total 2621440 25596 2595844 1% /etc/rc.confの修正 /etc/rc.confに以下を追加して、再起動しても設定が残るように。\n# add swapfile # See: # http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/adding-swap-space.html swapfile=\u0026#34;/var/cache/swapfile\u0026#34; 後日談 swapの枯渇は、後から追加したソフトウェアが原因だった。\nソフトウェアを更新したらswapの枯渇はなくなった。\n以上\n","permalink":"https://nobwak.github.io/posts/2014-03-02-swap%E3%81%8C%E8%B6%B3%E3%82%89%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%A6%E3%82%AD%E3%83%AC%E3%81%9Ffreebsd%E3%81%AE%E6%80%96%E3%81%95%E3%81%AF%E7%95%B0%E5%B8%B8%E3%81%A8%E3%81%9D%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/","summary":"ある日、デスクトップ用途で使用しているFreeBSDマシンで、いきなりデスクトップ環境がブラックアウトしました。 ログを見たところこんな感じ。","title":"swapが足らなくなってキレたFreeBSDの怖さは異常（と、その対処法）"},{"content":"クリップボードに移したデータに対し、何らかの操作を行うWindowsのツールをまとめる。\n任意の文章を引用貼り付け Thunderbirdでは、任意の文章であっても「引用文として貼り付け（Ctrl+Shift+O）」で引用貼り付けができる。\nOutlookには同等の機能がない。\n以下、二つのツールは、実行するとクリップボードの文字列先頭に引用記号\u0026quot;\u0026gt;\u0026ldquo;を付けてくれるもの。\nひと手間増えるのは悔しいが、ランチャーに本ツールを登録しておき、貼り付け前に実行するとよい\nクリップボードの文字列に引用記号を付加するツール\nPlus引用符\nhttp://www.vector.co.jp/soft/dl/winnt/writing/se341366.html\n引用くん\nhttp://www.fukapon.com/showcase/softwares/inyokun.html\nデフォルトでは引用記号は\u0026rdquo;\u0026gt;\u0026quot;。\n実行すると以下のようにになる。\n\u0026gt;実行すると以下のようになる。 気に入らない。\n\u0026ldquo;\u0026gt;\u0026ldquo;のあとにスペースがあってほしい。\nこの場合、「引用くん」のほうがいいだろう。\nオプションで引用記号を自由に変えられるから。\n方法は同梱のドキュメントを参照のこと。\nExcelの表をメールやテキストファイルに貼りつける。 Excel文字罫線変換\nhttp://www.ne.jp/asahi/soft/miday/Excel_Moji/Excel_Moji.html\n文字通り。\nExcelの表をコピーしクリップボードに送った状態で起動すると、文字罫線に変換してくれる。\n変換後の例は以下の通り。\n+----+----------------+--------+ | 年 | 都市 | 国 | +----+----------------+--------+ |2016|リオデジャネイロ|ブラジル| +----+----------------+--------+ |2020|東京 |日本 | +----+----------------+--------+ 以上\n","permalink":"https://nobwak.github.io/posts/2014-02-27-windows%E3%81%AE%E3%82%AF%E3%83%AA%E3%83%83%E3%83%97%E3%83%9C%E3%83%BC%E3%83%89%E6%93%8D%E4%BD%9C%E7%B3%BB%E3%83%84%E3%83%BC%E3%83%AB/","summary":"クリップボードに移したデータに対し、何らかの操作を行うWindowsのツールをまとめる。 任意の文章を引用貼り付け Thunderbirdでは、","title":"Windowsのクリップボード操作系ツール"},{"content":"poudriereとは 中の人曰く:\n primarily designed to test package production on FreeBSD. However, most people will find it useful to bulk build ports for FreeBSD.\n「package生成のテストを主眼にデザインされたツールである。しかしながら、ほとんどの人はportsをまとめてコンパイルする点を有用と考えるだろう。」\n とのこと。\nちなみにpoudriereとはフランス語であり、英語にするとgunpowder magazine、つまり弾薬庫のことだそうな。\n物騒であるな。\nあと、poudriereって綴りが覚えづらくて困る。\nカスタムpackageのためのツール？ 一方で、poudriereはカスタムpackageを欲する人にも勧められてたりする。\nというのも。\n現時点では、pkgでインストールするpackageのオプションは決め打ちされていて自由に選ぶことができない。\n有名なところで例を挙げると、PHPのpackageにapacheモジュールが付属しない。\nしたがって、apacheモジュールが欲しければ自分でコンパイルするしかない。\nコンパイルとくればportsである。\npoudriereもコンパイルを行うが、こちらはpackageを作ることができる。\npackageを作ってしまえば、pkgコマンドで手軽に管理できる。\nおお。\nこれは便利なのか？\nしかしながら準備段階でコンパイルが発生しているわけで、わざわざpkgコマンドなんて経由しないで、portsからコンパイルしてさっさと入れてしまったほうが効率的だろう。\nそれでもpoudriereが有用なケース①: 複数ホストが対象のとき ずいぶんネガティブなことを書いたけれども、もしもカスタムpackageを複数ホストで使うのならば、poudriereの利点が活きてくる。\npoudriereの優れているところは、公式のpackageレポジトリの構成とまったく同じものを作る点だ。\nそのディレクトリをwebサーバで公開するだけで、自前のレポジトリができてしまう。\nクライアントでは、pkgコマンドの見に行く場所を自前レポジトリに向けるだけでよい。\nやってみると分かるけど、同じLANにあるレポジトリはめっぽう速くて気分がよい。速いのはあたりまえだけど。\nこうしたことから、カスタムpackageを複数ホストにばら撒くならpoudriereはとても有用である。\nそれでもpoudriereが有用なケース②: オフラインマシン向け もう一つ加えるとすれば、オフラインのマシンにpackageを展開する場合だろう。\npkgコマンドにはcreateというサブコマンドがあり、インストール済みのpakcageからpackageを再生成できる。\nこれを利用して、ネットに繋がるマシン（たいていはセキュリティポリシー上許可されたマシン（多くはWindows）の「上で」動く仮想マシン）でpackageをインストールしてpkg create、ネットに繋げないマシンにまるまる移すことができる。\nまた別の考え方をすると、テスト環境でpackageをインストールして検証し、問題のないことを確認したら、packageを本番環境に移す、ということもできるだろう。\nただこの方法には問題があって、現時点のpkgコマンドにはインストール済みのpackageをリプレイスする仕組みがないのである。\n例えばターゲットとなるマシンのbashを更新したいとする。\n通常であればpkg upgradeを使うところだが、このコマンドは手許にあるpackageを読んでくれないのである。\n（もしできるのなら教えてください本当に）\nどうしようもないので、いったんbashをアンインストールしてから再インストールするという、なんだかすごく頭の悪いことをする羽目になる。\nbashなら悠長なこと言ってられるかもしれないが、これがサーバソフトウェアなら大変である。\nまたこれが１つ２つではなく、数百個になったらどうするのか。\nここで告白するが、私はとても面倒くさくなって、packageを根こそぎ削除して新規にまるまるインストールしようとした。\nそしたら、pkgコマンドも削除されててリアルでorzとなった。\nみんなは気をつけるように。\n話を戻すと、こういうウッカリさんには、poudriereは便利、かもしれない。\n注意点 仮想マシンでpoudriereを動かす人は以下の点に注意すべき。\n端的に言って、firefox等のブラウザ、libreofficeなどの巨大packageを作る際には、膨大なメモリ、swapが必要である。メモリ、swapそれぞれ1GBでは失敗した。\nメモリを用意できない場合には、出来合いのpackageを持ってくるしかないだろう。\nなお、ブラウザに限って言えば、operaなら悠々とコンパイルできたことをお伝えしておく。\nながながと前置きをしたが、以下にpoudriereでカスタムpackageを作る方法を示す。\n前提 便宜上、「インターネットに繋がっていない」ことを「オフライン」と表現する。\n「オフラインマシン」であれば、「インターネットには繋がっていないマシン」とする。\nただしオフラインマシンであっても、LANには接続されている前提。\nネット接続可能で、poudriereのインストールされているマシンをオンラインマシンとする。\nオンラインマシンでpackageを作り、「レポジトリをオフラインマシンにコピーしてから」、オフラインマシンにインストールするという手順にする。\nつまりこれは複数のオフラインマシンを前提にしているというわけ。\n事前準備 オンラインマシンにpoudriereの環境があること。\n作り方は本記事の前編であるこちらをどうぞ。\nオフラインマシンには、pkgコマンド、webサーバ（nginx, lighttpd, apacheのいずれか。Pythonでもよい。 Python? ええPythonです）、あとはまあ転送用に、rsyncがあると便利。なくてもよい。\nオフラインマシンへのpkgインストールはこちらを。\nオフラインマシンへのpackageインストールは、poudriereに関するこちらを。\n全体の流れ poudriereでカスタムpackageを作るときの流れは以下のようなものである。\nでは。\nカスタマイズしたいpackage一覧の作成\n一例として、以下のようなファイルを作る。\npkg.custom.txt\nlang/php5 lang/php5-extensions originの探し方はpkg search -o phpなどとすればよい。\noptionの設定\n以下のようにする。\npoudriere options -n ＜package一覧＞ -j ＜jail name＞ optionsサブコマンドにテキストファイルを与えると、書かれているpackageのoptionを根こそぎ聞いてくれる。\n実態は、おそらく当該portsに移ってmake config-recursiveをしている。\nそれはともかく、素のままoptionsを実行すると、再帰的にmake configされるので大変である。\n大量の依存を抱えているといつまで経ってもoption選択が終わらない。ウンザリする。\nそもそもカスタマイズしたいpackageだけを書いているのにこんなことをされては迷惑である。\nそこで-nオプションを与えて、option設定を一階層に限るというわけ。\npackageの作成\nあとは同じテキストファイルを、bulkコマンドに与えて上げればよい。\n待つだけ。\nリポジトリの展開\nオンラインマシン（”オンラインマシン”の定義は「前提」章を参照のこと）からオフラインマシンに移す。\nオンラインマシンでいきなりリポジトリを公開するケースはこちらを。\nさて以下の場所にリポジトリができたとする。\n/usr/local/poudriere/data/packages/92i386-default それをオフラインマシンに転送。\nrsyncを使った。\nないならtarでもなんでも固めて持っていけ。\nここでは192.168.200.100がオフラインマシン。\nオフラインマシンにいる普通のユーザのディレクトリに置いているが、気にしない。\n$ cd /usr/local/poudriere/data/ $ rsync -avz —-delete ./packages/ vanilla@192.168.200.100:/home/vanilla/poudriere/ その後、オフラインマシンに移って該当箇所をwebで公開。\npythonが入っていれば以下のコマンドですぐに公開できる（Python 2の例）。\n$ cd /home/vanilla/poudriere $ python -m SimpleHTTPServer Serving HTTP on 0.0.0.0 port 8000 ... オフラインマシンでの設定\n以下のような設定を書けばOK。\n/usr/local/etc/pkg/repos/localpkg.conf localpkg: { url: \u0026#34;http://192.168.200.100:8000/92i386-default\u0026#34;, mirror_type: \u0026#34;http\u0026#34;, enabled: yes } リポジトリの設定を変えたら必ずpkg -vvで確認。\npkg -vv Repositories: localpkg: { url : \u0026#34;http://192.168.200.100:8000/92i386-default\u0026#34;, enabled : yes, mirror_type : \u0026#34;HTTP\u0026#34; } あとはpkg updateしていつもの流れ。\n$ sudo pkg update Updating repository catalogue digests.txz 100% 26KB 25.6KB/s 25.6KB/s 00:00 packagesite.txz 100% 114KB 114.0KB/s 114.0KB/s 00:00 Incremental update completed, 537 packages processed: 0 packages updated, 0 removed and 537 added. 以上。\n","permalink":"https://nobwak.github.io/posts/2014-02-25-%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0pkg%E3%82%92poudriere%E3%81%A7%E4%BD%9C%E3%82%8D%E3%81%86/","summary":"poudriereとは 中の人曰く: primarily designed to test package production on FreeBSD. However, most people will find it useful to bulk build ports for FreeBSD. 「package生成のテストを主眼にデザインされたツールである。","title":"カスタムpkgをpoudriereで作ろう"},{"content":"Pythonがあれば、webサーバソフトウェアを追加することなくwebサーバを立ち上げることができる。\nたいへん便利なのでメモしておく。\n書式 Python 2.xの場合、以下のようにすると、「カレントディレクトリ」をwebサーバとして公開する。\nポートは8000。\nつまりアドレスはhttp://＜当該ホスト＞:8000/となる。\nなお、8000なので起動はスーパーユーザじゃなくても平気。\npython -m SimpleHTTPServer Python 3.xの場合。\npython -m http.server 実行例 下記のようなindex.htmlを用意する。\n$ cat ./index.html it works! pythonでwebサーバ起動。\n2.7.6なので、python2の書式ですな。\n$ python -V Python 2.7.6 $ python -m SimpleHTTPServer Serving HTTP on 0.0.0.0 port 8000 ... w3mで繋いでみると。\n$ w3m -no-proxy http://127.0.0.1:8000/ it works! おお。\nsockstatの結果は以下の通り。\n$ sockstat -l4 USER COMMAND PID FD PROTO LOCAL ADDRESS FOREIGN ADDRESS vanilla python2.7 69678 3 tcp4 *:8000 *:* root sshd 980 4 tcp4 *:22 *:* ","permalink":"https://nobwak.github.io/posts/2014-02-24-python%E3%81%8C%E3%81%82%E3%82%8C%E3%81%B0web%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E5%8B%95%E3%81%8B%E3%81%9B%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"Pythonがあれば、webサーバソフトウェアを追加することなくwebサーバを立ち上げることができる。 たいへん便利なのでメモしておく。 書式 Python","title":"Pythonがあればwebサーバを動かせる件について"},{"content":"cal/ncalにはイースター（復活祭）を表示するオプションがある。\n私はキリスト教徒ではないのですが、コマンドにこういったオプションが自然に入っていることに感銘したので記録する。\n結論 ncal -e　（西方教会向け） ncal -o　（東方教会向け）  Linux(GNU cal)ならcal -e/cal -oでOK。  calコマンド UNIXにはcalコマンドという、カレンダーを表示するコマンドがある。\n手許のMacにもきちんと入っていて（MacなのでFreeBSD由来です）、実行してみると以下のように表示される。\n$ cal 2月 2014 日 月 火 水 木 金 土 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 復活祭とは wikiがこちら。\nhttp://ja.wikipedia.org/wiki/復活祭\n「復活祭は基本的に「春分の日の後の最初の満月の次の日曜日」に祝われるため、年によって日付が変わる移動祝日である。」ということなので、コンピュータに計算させるニーズは、それなりにあるというわけですな。\nコマンド実行例 OS XやFreeBSDで復活祭の日付を表示させるには、calコマンドではできず、ncalコマンドを使う必要がある。\nGNU calなら問題なし、つまり大半のLinuxでも問題なし。\nncalコマンドは、calコマンドにさらにレイアウトやオプションを追加したもの。\n-e、つまりeaster、で復活祭の日付を表示する。\n-o、つまりOrthodox(正教)での復活祭の日付を表示する。\n$ ncal -e 4月 20 2014 $ ncal -o 4月 20 2014 東方、西方、同じようですな。\nおわりに マニュアルを見ると、calコマンドはAT\u0026amp;T UNIXのVersion 5で現れたとのこと。\n1975年ごろ。\nまさに神代である。\nそして、そんな時代でターミナル上にカレンダーを豪快に表示させるという、ロックなコマンドが生まれてるんである。\n「真面目にやれよ」とか怒られなかったんですかね。\nそしていつごろか、そこに復活祭のような移動祝祭日を計算するオプションが入ってくる。\nのびのびしているというか、融通無碍というか。\n気持ちよくて、駄文を記した次第でございます。\n","permalink":"https://nobwak.github.io/posts/2014-02-23-unix_tips_%E5%BE%A9%E6%B4%BB%E7%A5%AD%E3%82%A4%E3%83%BC%E3%82%B9%E3%82%BF%E3%83%BC%E3%81%AE%E6%97%A5%E4%BB%98%E3%81%AB%E7%A5%9E%E4%BB%A3%E3%81%AE%E9%81%8A%E3%81%B3%E5%BF%83%E3%82%92%E8%A6%8B%E3%81%9F2014%E5%B9%B4%E3%81%AE%E3%82%A4%E3%83%BC%E3%82%B9%E3%82%BF%E3%83%BC%E3%81%AF4_20%E3%81%A7%E3%81%99/","summary":"cal/ncalにはイースター（復活祭）を表示するオプションがある。 私はキリスト教徒ではないのですが、コマンドにこういったオプションが自然に","title":"[UNIX tips] 復活祭（イースター）の日付に神代の遊び心を見た（2014年のイースターは4/20です）"},{"content":"埋め草ネタです。\nLINEでは既読になっているのに返信ないとかが問題になるらしいんですがどうでもいいですね。\n先日、ふとfingerしてみたら、メールをいつから読んでないか、表示されることに気が付いた。\n知らなかったよ…。\n$ finger nobwak Login: nobwak Name: John nobwak Directory: /home/nobwak Shell: /usr/local/bin/bash On since 月 2月 10 23:50 (JST) on ttyv0, idle 0:12 (messages off) On since 月 2月 10 23:53 (JST) on pts/0 from 192.168.17.88 Last login 月 2月 10 23:58 (JST) on pts/1 from 192.168.17.88 New mail received 月 2月 10 09:35 2014 (JST)  Unread since 木 3月 14 22:17 2013 (JST) No Plan. ","permalink":"https://nobwak.github.io/posts/2014-02-18-unix%E7%95%8C%E3%81%AE%E6%97%A2%E8%AA%AD%E5%95%8F%E9%A1%8C%E3%81%AFfinger%E3%81%A7%E8%A7%A3%E6%B1%BA/","summary":"埋め草ネタです。 LINEでは既読になっているのに返信ないとかが問題になるらしいんですがどうでもいいですね。 先日、ふとfingerしてみたら、","title":"UNIX界の既読問題はfingerで解決…？"},{"content":"poudriereを使ったので経緯を記す。\npoudriereは自前のpkgngレポジトリを作るツール。\n自前のレポジトリを作るのは、自前のpackageを置きたいときや、オフラインマシンにpackageを提供したいとき、である。\npoudriereの構築は、以下二つのサイトに沿えばできる。\nただ、簡潔にまとめられているので、本記事では補足も併せてまとめる。\nhttp://blog.etoilebsd.net/post/Home_made_pkgng_repo\nhttp://w.vmeta.jp/tdiary/?date=20130205\n仕組み poudriereがどのようにしてpackageを作るかというと。\nOS/アーキテクチャごとにjailを作り、そこでportsからpackagesを作る。\nつまりホストのOS|アーキテクチャと違っていても大丈夫だが、ホストは最新にしておいた方がよい。\npackagesはあるディレクトリにまとめられる。\nディレクトリはそのままwebで公開できる形式になっている。\n他のマシンから、pkgngでつなげば、自家製packagesを取得できる。\n作成するpackagesは自分で選ぶことができる。\nまた、オプションも選ぶことができる。\nオプションはまた別途。\n必要なもの zpoolを最低7GB用意しておくこと。\nインストール ports-mgmt/poudriereからportsでもpkgでもよいのでインストール。\n設定ファイル まず設定ファイルを作る。\n/usr/local/etc/poudriere.conf.sampleをもとに。\n/usr/local/etc/poudriere.conf\n# 作成しておいたzpoolの名前をここで指定 ZPOOL=vault # 上記のzpoolから切り出したzfsを、 # ここで示したディレクトリにマウントしておく。 ZROOTFS=/poudriere # FreeBSDの部品の取得先。国内にしておこう。 FREEBSD_HOST=ftp://ftp2.jp.freebsd.org # デフォルトのまま RESOLV_CONF=/etc/resolv.conf # デフォルトでいいでしょう。 BASEFS=/usr/local/poudriere # デフォルトでいいでしょう。 USE_PORTLINT=no # デフォルトでいいでしょう。 USE_TMPFS=yes # デフォルトでいいでしょう。 DISTFILES_CACHE=/usr/ports/distfiles # proxyの指定が必要であれば export HTTP_PROXY=\u0026#34;http://proxy:8080/\u0026#34; export FTP_PROXY=\u0026#34;http://proxy:8080/\u0026#34; poudriere作業用zfsの準備 zpoolからzfsを切り出し、/poudriereにマウント。\npoudriere.confを参照すると、最低でも7GBとある。\nzfsの操作はよろしければこちらをどうぞ。\n../../../?p=1827\n結果として以下のような環境。\n20.0Gのzpoolをvaultとして作成している。\n$ zpool list NAME SIZE ALLOC FREE CAP DEDUP HEALTH ALTROOT vault 19.9G 190K 19.9G 0% 1.00x ONLINE - $ zpool status  pool: vault  state: ONLINE  scan: none requested config:  NAME STATE READ WRITE CKSUM  vault ONLINE 0 0 0  ada1 ONLINE 0 0 0 errors: No known data errors ここからpoudriereとして切り出し。\n$ zfs list NAME USED AVAIL REFER MOUNTPOINT vault 45.7M 19.5G 31K /vault vault/poudriere 45.0M 19.5G 45.0M /poudriere それを/poudriereにマウント。\n$ mount /dev/ada0p2 on / (ufs, local, journaled soft-updates) devfs on /dev (devfs, local, multilabel) vault/poudriere on /poudriere (zfs, local, nfsv4acls) 再起動しても大丈夫なようにfstabに書き込み\n$ cat fstab # Device Mountpoint FStype Options Dump Pass# /dev/ada0p2 / ufs rw 1 1 /dev/ada0p3 none swap sw 0 0 vault/poudriere /poudriere zfs rw 0 0 以降、本格的な作業に。\nデフォルトのportstreeを作る。: poudriere ports jailごとにportsディレクトリを持っていてはディスクがいくらあっても足らない。\nそこでportsディレクトリは全jailsで共有する。\nそのportsディレクトリ、portstreeを作る。\npoudriere ports -cで作成。\n場所は/poudriere/ports/defaultに作られる。\nちなみに、二回目からは-uで更新。\n指定がなければportsnapが使われる。\nsvnとかが使いたければ-m svnなどと指定する。\n作成例\n$ sudo poudriere ports -c ====\u0026gt;\u0026gt; Creating default fs... done ====\u0026gt;\u0026gt; Extracting portstree \u0026#34;default\u0026#34;... Looking up portsnap.FreeBSD.org mirrors... none found. Fetching public key from portsnap.FreeBSD.org... done. Fetching snapshot tag from portsnap.FreeBSD.org... done. Fetching snapshot metadata... done. Fetching snapshot generated at Fri Nov 1 21:00:43 JST 2013: 98c3a00130d24348ff5bcca8474e4c6cb777d838e8f5d2100% of 69 MB 3590 kBps 00m19s Extracting snapshot... done. Verifying snapshot integrity... （略） 二回目以降の例\nすでにportsがある状態で-cを指定すると怒られる。\n$ sudo poudriere ports -c ====\u0026gt;\u0026gt; Error: The ports tree default already exists $ sudo poudriere ports -u ====\u0026gt;\u0026gt; Updating portstree \u0026#34;default\u0026#34; Looking up portsnap.FreeBSD.org mirrors... none found. Fetching snapshot tag from portsnap.FreeBSD.org... done. Fetching snapshot metadata... done. Updating from Fri Nov 1 21:27:07 JST 2013 to Fri Jan 17 22:08:55 JST 2014. Fetching 4 metadata patches... done. Applying metadata patches... done. Fetching 4 metadata files... done. Fetching 11146 patches.....10 （略） 各システム向けのJailを作る: poudriere jail いよいよ個別のjail。\npkgを提供したいシステムに合わせてjailを作る。\njailを作るにはpoudriere jailを使う。\npoudriere jailでオプション一覧が表示される。\n-jでjailname指定、-vでFreeBSDバージョン、-aでアーキテクチャ（i386かamd64）を指定。\n-cで作成、-dで削除、-lで一覧、-sで開始、-kで停止、-uで更新。\n後で見返した時に分からなくなるので、jail名にはシステム関連の情報を入れておくとよい。\nたとえば9.2-RELEASE i386向けなら92i386というように。\n実行例\n$ sudo poudriere jail -c -j 92i386 -v 9.2-RELEASE -a i386 ====\u0026gt;\u0026gt; Creating 92i386 fs... done ====\u0026gt;\u0026gt; Fetching base.txz for FreeBSD 9.2-RELEASE i386 /poudriere/jails/92i386/fromftp/base.txz 100% of 60 MB 6703 kBps 00m10s ====\u0026gt;\u0026gt; Extracting base.txz... done ====\u0026gt;\u0026gt; Fetching src.txz for FreeBSD 9.2-RELEASE i386 /poudriere/jails/92i386/fromftp/src.txz 100% of 95 MB 6049 kBps 00m16s ====\u0026gt;\u0026gt; Extracting src.txz... done ====\u0026gt;\u0026gt; Fetching games.txz for FreeBSD 9.2-RELEASE i386 /poudriere/jails/92i386/fromftp/games.txz 100% of 861 kB 4705 kBps 00m00s ====\u0026gt;\u0026gt; Extracting games.txz... done ====\u0026gt;\u0026gt; Cleaning up... done ====\u0026gt;\u0026gt; Jail 92i386 9.2-RELEASE i386 is ready to be used 一覧の例\n$ sudo poudriere jail -l JAILNAME VERSION ARCH METHOD 92i386 9.2-RELEASE i386 ftp 削除例\n$ sudo poudriere jail -d -j 92i386 ====\u0026gt;\u0026gt; Removing 92i386 jail... done $ $ sudo poudriere jail -l JAILNAME VERSION ARCH METHOD $ このときのmountの出力\nえらいことに。\n$ mount /dev/ada0p2 on / (ufs, local, journaled soft-updates) devfs on /dev (devfs, local, multilabel) vault/poudriere on /poudriere (zfs, local, nfsv4acls) vault/poudriere/data on /usr/local/poudriere/data (zfs, local, nfsv4acls) vault/poudriere/ports on /poudriere/ports (zfs, local, nfsv4acls) vault/poudriere/ports/default on /usr/local/poudriere/ports/default (zfs, local, nfsv4acls) vault/poudriere/jails on /poudriere/jails (zfs, local, nfsv4acls) vault/poudriere/jails/92i386 on /usr/local/poudriere/jails/92i386 (zfs, local, nfsv4acls) jailの作成が失敗するとき 失敗しなかったらこの章は読み飛ばしてOK.\n最初のCreatingで失敗するときは、以前に作った何かが邪魔しているはず。\n$ sudo poudriere jail -c -j 92i386 -v 9.2-RELEASE -a i386 ====\u0026gt;\u0026gt; Creating 92i386 fs... done mkdir: /poudriere/jails/92i386: No such file or directory ====\u0026gt;\u0026gt; Fetching base.txz for FreeBSD 9.2-RELEASE i386 fetch: /poudriere/jails/92i386/fromftp/base.txz: open(): No such file or directory fetch: /poudriere/jails/92i386/fromftp/base.txz: open(): No such file or directory ====\u0026gt;\u0026gt; Error: Failed to fetch from ftp://ftp2.jp.freebsd.org/pub/FreeBSD/releases/i386/i386/9.2-RELEASE/base.txz ====\u0026gt;\u0026gt; Error while creating jail, cleaning up. ====\u0026gt;\u0026gt; Removing 92i386 jail... done zfs listすると同じ名前の残骸がある。\n$ zfs list NAME USED AVAIL REFER MOUNTPOINT vault 2.06G 17.5G 31K /vault vault/poudriere 2.06G 17.5G 561M /poudriere vault/poudriere/data 32K 17.5G 32K /usr/local/poudriere/data vault/poudriere/jails 1000M 17.5G 32K /poudriere/jails vault/poudriere/jails/92i386 1000M 17.5G 1000M /poudriere/jails/92i386 vault/poudriere/ports 545M 17.5G 31K /poudriere/ports vault/poudriere/ports/default 545M 17.5G 545M /usr/local/poudriere/ports/default 削除。オプションなしではうまくいかないので-rで再トライ。\n$ sudo zfs destroy vault/poudriere/jails/92i386 cannot destroy \u0026#39;vault/poudriere/jails/92i386\u0026#39;: filesystem has children use \u0026#39;-r\u0026#39; to destroy the following datasets: vault/poudriere/jails/92i386@clean $ sudo zfs destroy -r vault/poudriere/jails/92i386 $ きれいになった。\n$ zfs list NAME USED AVAIL REFER MOUNTPOINT vault 1.08G 18.5G 31K /vault vault/poudriere 1.08G 18.5G 561M /poudriere vault/poudriere/data 32K 18.5G 32K /usr/local/poudriere/data vault/poudriere/jails 32K 18.5G 32K /poudriere/jails vault/poudriere/ports 545M 18.5G 31K /poudriere/ports vault/poudriere/ports/default 545M 18.5G 545M /usr/local/poudriere/ports/default 作成したいpackagesのリストを作る 作成したいpackagesを指定する。\nテキストファイルにpackagesを並べればよい。\nただしOriginで記載すること。\nOriginっていうのは\u0026hellip;たとえばrsyncならnet/rsyncと書く。\nOriginが分からなければ、pkg searchするときに-oを付ければよい。\n$ pkg search -o rsync net/grsync net/librsync mail/maildirsync net/rsync sysutils/rsyncbackup sysutils/rsyncmanager sysutils/rsyncrypto psearch（ports-mgmt/psearch）でもできる。\n$ psearch rsync archivers/rvm Archive manager that uses rsync to manage backups devel/p5-File-DirSync Perl5 module for synchronizing two directories rapidly mail/maildirsync Online synchronizer for Maildir-format mailboxes net/grsync GTK frontend for rsync net/librsync Library for delta compression of streams net/p5-File-Rsync Perl convenience wrapper for the rsync(1) program net/p5-File-RsyncP Perl Rsync client net/rsync Network file distribution/synchronization utility sysutils/dirvish Network backup system based off of rsync (略) 試しにrsyncだけ書く。\n$ cat ./pkg.list net/rsync packagesの作成: poudriere bulk いよいよ作成。\n作成にはpoudriere bulkを使う。\npoudriere bulkでオプションを一覧できる。\n-fで作成するパッケージリストを指定。さっき作ったやつ。\n特定のjailでのみ実施したい場合は-jでjailname指定。\n-cで作成したpackagesをすべて吹き飛ばす。\n-C -f に書かれたpackagesのみ消す。\nでは実行。\n初回なのでpkgも作ってくれているようですな。\n$ sudo poudriere bulk -j 92i386 -f ./pkg.list ====\u0026gt;\u0026gt; Creating the reference jail... done ====\u0026gt;\u0026gt; Mounting system devices for 92i386-default ====\u0026gt;\u0026gt; Mounting ports/packages/distfiles ====\u0026gt;\u0026gt; Mounting packages from: /usr/local/poudriere/data/packages/92i386-default ====\u0026gt;\u0026gt; Logs: /usr/local/poudriere/data/logs/bulk/92i386-default/2014-01-20_22h03m21s ====\u0026gt;\u0026gt; Appending to make.conf: /usr/local/etc/poudriere.d/92i386-make.conf /etc/resolv.conf -\u0026gt; /usr/local/poudriere/data/build/92i386-default/ref/etc/resolv.conf ====\u0026gt;\u0026gt; Starting jail 92i386-default ====\u0026gt;\u0026gt; Calculating ports order and dependencies ====\u0026gt;\u0026gt; pkg package missing, skipping sanity ====\u0026gt;\u0026gt; Cleaning the build queue ====\u0026gt;\u0026gt; Building 2 packages using 1 builders ====\u0026gt;\u0026gt; Starting/Cloning builders ====\u0026gt;\u0026gt; Hit CTRL+t at any time to see build progress and stats ====\u0026gt;\u0026gt; [01] Starting build of ports-mgmt/pkg ====\u0026gt;\u0026gt; [01] Finished build of ports-mgmt/pkg: Success ====\u0026gt;\u0026gt; [01] Starting build of net/rsync ====\u0026gt;\u0026gt; [01] Finished build of net/rsync: Success ====\u0026gt;\u0026gt; Stopping 1 builders ====\u0026gt;\u0026gt; Creating pkgng repository Generating repository catalog in /packages: done! ====\u0026gt;\u0026gt; Cleaning up ====\u0026gt;\u0026gt; Umounting file systems ====\u0026gt;\u0026gt; Built ports: ports-mgmt/pkg net/rsync ====\u0026gt;\u0026gt; [92i386-default] 2 packages built, 0 failures, 0 ignored, 0 skipped ====\u0026gt;\u0026gt; Logs: /usr/local/poudriere/data/logs/bulk/92i386-default/2014-01-20_22h03m21s $ 自家製packagesの公開 さて。\n作成したpackagesはどこにあるかというと、今回の場合は以下である。\n/usr/local/poudriere/data/packages/92i386-default/ このディレクトリをwebサーバで公開する。\n※もちろん、webサーバで公開しているディレクトリに中身を移しても可。\nこの場所は、poudriere.confのPOUDRIERE_DATAで決まる。\n${POUDRIERE_DATA}/packages/＜jailname＞-default/となる。\nもしこの場所が気に食わなかったら、POUDRIERE_DATAを変える。\nlsで中身を見てみると、オフィシャルpkgsiteのものと全くそっくりな内容になっている。\n$ ls /usr/local/poudriere/data/packages/92i386-default/ All Latest digests.txz packagesite.txz ではこれをwebサーバで公開する。\nここではnginxを例にとる。\nnginx.confは下記のように。\nworker_processes 1; events {  worker_connections 1024; } http {  include mime.types;  default_type application/octet-stream;  sendfile on;  keepalive_timeout 65;  server {  listen 80;  server_name localhost;  location / {  autoindex on; #Here!  root /usr/local/poudriere/data/packages;　#Here!  index index.html index.htm;  }  error_page 500 502 503 504 /50x.html;  location = /50x.html {  root /usr/local/www/nginx-dist;  }  } } デフォルトからほとんど変えていない。\n変えたのは、#Here!と記載した箇所。\nrootを/usr/local/poudriere/data/packagesに向ける。\nautoindexをonにする。\nnginxは、デフォルトではautoindex offなので、明示的に指定しないとForbiddenを食らってしまう。\nnginxを起動して;\n$ sudo service nginx start Performing sanity check on nginx configuration: nginx: the configuration file /usr/local/etc/nginx/nginx.conf syntax is ok nginx: configuration file /usr/local/etc/nginx/nginx.conf test is successful Starting nginx. 接続確認。良さそうですな。\n$ w3m http://localhost/92i386-default/ Index of /92i386-default/ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ ../ All/ 20-Jan-2014 22:24 Latest/ 20-Jan-2014 22:06 digests 20-Jan-2014 22:24 digests.txz 20-Jan-2014 22:07 3 packagesite.txz 20-Jan-2014 22:07 12 packagesite.yaml 20-Jan-2014 22:24 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ webサーバを他の用途にも使っている場合には、以下のようにlocation /packages/を/usr/local/poudriere/dataに向ければよい。\n※冗長なのでserverディレクティブの中しか引用しない。\nserver {  listen 80;  server_name localhost;  location / {  root /usr/local/www/nginx;  index index.html index.htm;  }  location /packages/ {  autoindex on;  root /usr/local/poudriere/data;  } クライアント側の設定 やっとたどり着いた。\nクライアント側では/etc/pkg/の下か、/usr/local/etc/pkg/repos/の下に以下のような設定ファイルを作る。\nここで192.168.200.111はサーバのアドレス。\n/etc/pkg/homebrew.conf\nhomebrew: {  url: \u0026#34;http://192.168.200.111/92i386-default\u0026#34;,  enabled: yes } こうしておき、pkg -vvとすると見えるはず。\nRepositories:  homebrew: {  url : \u0026#34;http://192.168.200.111/92i386-default\u0026#34;,  enabled : yes  } pkg updateするとさっき作ったpackagesも見える。\n$ sudo pkg update Updating repository catalogue digests.txz 100% 352 0.3KB/s 0.3KB/s 00:00 packagesite.txz 100% 1904 1.9KB/s 1.9KB/s 00:00 Incremental update completed, 2 packages processed: 0 packages updated, 0 removed and 2 added. いろんな工夫については別途。\n","permalink":"https://nobwak.github.io/posts/2014-02-16-poudriere%E3%81%A7homebrew%E8%87%AA%E5%89%8D_pkg%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92/","summary":"poudriereを使ったので経緯を記す。 poudriereは自前のpkgngレポジトリを作るツール。 自前のレポジトリを作るのは、自前のpa","title":"poudriereでhomebrew（自前） pkgリポジトリを"},{"content":"pkgngで色々と遊んでたりすると、ごくごく稀に以下のような表示が出ることがある。\npkg: sqlite: database disk image is malformed (pkgdb_repo.c:545) 要するにpkgのdatabaseが壊れたということである。\nこれを復旧するにはどうしたらよいか。\n実はすごく簡単だし、大した問題ではない。\nここで壊れているのは、repository catalogueつまりpkgサーバに何が格納されているか、というデータベースなので、消してもう一回ダウンロードすればよい。\n# rm /var/db/pkg/repo-*.sqlite として、それからpkg updateすればよいだけ。\nただし削除するときは注意。\nlocal.sqliteは、そのホストにどのpkgがインストールされているか、というデータベースである。\nこれを消してしまうと、当然ながらそのホストにはpkgが一つもインストールされていない、ということになって、たいへん面倒なことになるから注意。\n告白すると私は一度やりました。ええ。\n","permalink":"https://nobwak.github.io/posts/2014-02-09-pkg%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%81%8C%E5%A3%8A%E3%82%8C%E3%81%9F%E3%81%A7%E3%81%94%E3%81%96%E3%82%8B%E3%82%88%E3%82%8D%E3%81%97%E3%81%84%E6%B6%88%E3%81%97%E3%81%A6%E3%81%8A%E3%81%97%E3%81%BE%E3%81%84/","summary":"pkgngで色々と遊んでたりすると、ごくごく稀に以下のような表示が出ることがある。 pkg: sqlite: database disk image is malformed (pkgdb_repo.c:545) 要するにpkgのdatabaseが壊れたと","title":"pkgのデータが壊れたでござる。よろしい。消しておしまい。"},{"content":"pkg updateとやったあと、更新のあったpackagesを一覧するには。\nスマート: \u0026ldquo;pkg version -vRL=\u0026ldquo;とすればよい。\nかっこよくない: いきなりpkg upgradeして表示させる。\n実行例 $ pkg version -vRL= gvfs-1.12.3_1 ? orphaned: devel/gvfs mate-file-archiver-1.6.0 ? orphaned: archivers/mate-file-archiver mate-file-manager-1.6.2 ? orphaned: x11-fm/mate-file-manager mate-text-editor-1.6.0 ? orphaned: editors/mate-text-editor …なんか面倒くさいことになってるけど、この通り。\nportsのINDEXを使う場合 /usr/portsがあり、OSバージョンに合ったINDEXがあれば、version -vIL=も使える。\nINDEXとは、/usr/ports/INDEX-10などの、portsの目次。\nportsを使わない場合は不要だけど、poudriereで自家製packagesを使うときには重宝するかも。\n$ pkg version -vIL= gnutls-2.12.23_2 \u0026lt; needs updating (index has 2.12.23_3) libXfont-1.4.6,1 \u0026lt; needs updating (index has 1.4.7,1) pkg-1.2.4_1 \u0026lt; needs updating (index has 1.2.5) zsh-5.0.4 \u0026lt; needs updating (index has 5.0.5) オプション補足 -Iと-Rの違いは下記の通り。\n-I　portsのINDEXを使う。 -R リポジトリのカタログを使う。 -vと-Lの意味は以下の通り。\n-v 出力を詳細にする。ないと更新の有無しか表示しない。 -L \u0026#34;-L =\u0026#34;とすると、\u0026#34;=\u0026#34;を含まない場合だけ表示。すなわち、更新のある場合のみ表示。 ","permalink":"https://nobwak.github.io/posts/2014-02-06-%E3%83%A1%E3%83%A2_pkgng%E3%81%A7%E6%9B%B4%E6%96%B0%E3%81%AE%E3%81%82%E3%82%8Bpackages%E3%82%92%E4%B8%80%E8%A6%A7%E3%81%AB%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"pkg updateとやったあと、更新のあったpackagesを一覧するには。 スマート: \u0026ldquo;pkg version -vRL=\u0026ldquo;とすればよい。 かっこよくない:","title":"[メモ] pkgngで更新のあるpackagesを一覧にするには"},{"content":"pkgコマンドが何らかの要因で壊れてしまい、pkgコマンド自体の再インストールすらできず詰んでしまったときの対処方法を示す。\nお急ぎの方は「蘇生方法」からお読みください。\n背景: pkgはベースシステム？package？ pkgコマンドは、ベースシステムに組み込まれていながら、pkgシステムで管理されている。\n言い換えると、ベースシステムに含まれているのに追加ソフトウェアとしてのpackagesでもある、というちょっと変わった存在である。\nこれは、pkgコマンド自体を、OSのバージョンに固定されることなく、更新できるための仕組み。\npkgコマンドが純然たるベースシステムであった場合、pkgコマンドを更新するたびにOSリリースが発生してしまうからである。\nだから、皆さんご存知の通り、初めてpkgコマンドを実行すると最新のpkgをダウンロード\u0026amp;インストールするのだが、それは上記のような理由である。\nなお、ここでの「ベースシステム」とは、FreeBSD projectがリリースする一式（カーネル+ユーザランド）を指す。packagesはユーザが任意に追加するソフトウェア。\n問題: pkgはpackageなのでpkgが壊れると詰む。 よろしい。背景は、わかる。\nしかし、問題もあって、すなわち;\npkgコマンドもpkgngで管理しているので、pkgコマンドが壊れてしまった場合、pkgの再インストールができず詰む\nということである。\nたとえば、pkgコマンドが依存しているshared objectが無くなったとか、壊れた場合である。\nFreeBSDではこういう場合に備えて、/rescueにスタティックリンクされたコマンドが並べられているが、pkgはここにない（9.2-RELEASEで確認）。\nどうしたらよいか。\n蘇生方法: pkgコマンドをダウンロードして、それでpkgコマンドをインストールせよ。 結論。pkgのpackageにはスタティックリンクされたpkgが含まれているのでそれを使う。\n以下、手順。\npkgコマンドのダウンロード\nまず、pkg.freebsd.orgからpkgコマンドのpackageをダウンロードする。\nOSバージョン、アーキテクチャに合ったpackageを選ぶこと。\n9.2 i386なら、以下\nhttp://pkg.freebsd.org/freebsd:9:x86:32/latest/Latest/pkg.txz\n10.0 amd64なら、以下\nhttp://pkg.freebsd.org/freebsd:10:x86:64/latest/Latest/pkg.txz\n※URLは変わる可能性があるので、都度、確認すること。\npkg.freebsd.orgから辿っていけばよい。\n実行例\n$ uname -a FreeBSD ascomoid 9.2-RELEASE FreeBSD 9.2-RELEASE #0 r255898: Fri Sep 27 03:52:52 UTC 2013 root@bake.isc.freebsd.org:/usr/obj/usr/src/sys/GENERIC i386 $ fetch http://pkg.freebsd.org/freebsd:9:x86:32/latest/Latest/pkg.txz pkg.txz 100% of 1811 kB 53 kBps 00m34s pkg-staticの取り出し。\n以下のようにしてpkg-staticを取り出す。\nこのpkg-staticがスタティックリンクされたpkg\n$ tar xvf ./pkg-1.2.4_1.tgz -s\u0026#34;,/.*/,,g\u0026#34; \u0026#34;*/pkg-static\u0026#34; x pkg-static pkgのインストール\nこのpkg-staticを使って、ダウンロード済みのpkg packageをインストールする。\nローカルにダウンロード済みのpackageをインストールする場合には引数にaddを与える。\n壊れたpkgが邪魔でインストールできないなら、-fを付けて強制的にインストールする。\n$ sudo ./pkg-static add -f ./pkg-1.2.4_1.tgz Installing pkg-1.2.4_1...pkg-static: package pkg is already installed, forced install  done If you are upgrading from the old package format, first run:  # pkg2ng あとは通常通りpkg updateなど。\npkgの設定確認\npkgの設定を一覧したり、どのリポジトリを見ているかを確認するにはpkg -vvとする。\npkgについて、誰かに質問するときには、この出力も必ず付けること。\n$ pkg -vv Version : 1.2.4_1 PACKAGESITE : PKG_DBDIR : /var/db/pkg PKG_CACHEDIR : /var/cache/pkg PORTSDIR : /usr/ports PUBKEY : HANDLE_RC_SCRIPTS : no ASSUME_ALWAYS_YES : no REPOS_DIR : [  /etc/pkg/,  /usr/local/etc/pkg/repos/, ] PLIST_KEYWORDS_DIR : SYSLOG : yes AUTODEPS : yes ABI : freebsd:9:x86:32 DEVELOPER_MODE : no PORTAUDIT_SITE : http://portaudit.FreeBSD.org/auditfile.tbz VULNXML_SITE : http://www.vuxml.org/freebsd/vuln.xml.bz2 MIRROR_TYPE : SRV FETCH_RETRY : 3 PKG_PLUGINS_DIR : /usr/local/lib/pkg/ PKG_ENABLE_PLUGINS : yes PLUGINS : [ ] DEBUG_SCRIPTS : no PLUGINS_CONF_DIR : /usr/local/etc/pkg/ PERMISSIVE : no REPO_AUTOUPDATE : yes NAMESERVER : EVENT_PIPE : FETCH_TIMEOUT : 30 UNSET_TIMESTAMP : no SSH_RESTRICT_DIR : PKG_SSH_ARGS : PKG_ENV : { } DISABLE_MTREE : no DEBUG_LEVEL : 0 ALIAS : { } Repositories:  FreeBSD: {  url : \u0026#34;pkg+http://pkg.FreeBSD.org/freebsd:9:x86:32/latest\u0026#34;,  enabled : yes,  mirror_type : \u0026#34;SRV\u0026#34;  } pkgの設定ファイルなど。\n以下があれば何とかなるはず。\n/usr/local/etc/pkg/repos/FreeBSD.conf\nFreeBSD: {  url: \u0026#34;pkg+http://pkg.FreeBSD.org/${ABI}/latest\u0026#34;,  mirror_type: \u0026#34;srv\u0026#34;,  enabled: yes } 以上\n","permalink":"https://nobwak.github.io/posts/2014-02-04-pkgng%E3%81%8C%E6%AD%BB%E3%82%93%E3%81%A7%E8%A9%B0%E3%82%93%E3%81%A0%E3%81%A8%E3%81%8D%E3%81%AB%E3%81%AF/","summary":"pkgコマンドが何らかの要因で壊れてしまい、pkgコマンド自体の再インストールすらできず詰んでしまったときの対処方法を示す。 お急ぎの方は「蘇","title":"pkgngが死んで詰んだときには"},{"content":"Windowsでもバッチファイルでファイルのダウンロードをしたい事がある。\nそうすると、たとえばIEにURLを渡して起動するといったような事が考えられるが、いちいち保存を選ばないといけないとか、何かの操作が必要になってしまう。\nこれではバッチファイルの意味がない。\n無人で行う方法にはいくつかあるだろうが、ここではcurlを使ってみる。\ncurlとは curlとは、URLを使った、データ送受信コマンドである。\nUNIX/Linux系では有名なコマンドだけれども、実はWindows向けバイナリも配布されている。\n公式サイト\nhttp://curl.haxx.se/\nWikipedia\nhttp://ja.wikipedia.org/wiki/CURL\nインストール 上記サイトのダウンロードページから取得。\nhttp://curl.haxx.se/download.html\nWindows向けには32bit版, 64bit版のほか、Generic版, MSVC版がある。\nさらにMSIとzipが選べる。\nGenericの方が最新なのでこちらを使った。2014/1/7現在のバージョンは7.34.0。\nWindows7だけど2000/XPのもので問題なし。\nインストーラは使いたくないのであれば、MSIではなくzipの方でどうぞ。\nただしzipの場合は、PATHを通すなどの作業は自分でしないといけないよう。\ncurlの使い方 curlはオプションが多くてウンザリする。\n以下のサイトが適切な量にまとまっていると思う。\nhttp://d.hatena.ne.jp/hogem/20091122/1258863440\ncurlの使い方例 proxy越しにMicrosoft Security Essential定義ファイルのダウンロードをする例。\nC:¥home¥tools¥curl\u0026gt;curl -O -x this.is.sample.proxyserver.com:8080 \u0026#34;http://download.microsoft.com/download/DefinitionUpdates/mpam-fe.exe\u0026#34; curlは、そのままだとダウンロードした内容を標準出力に表示する。\n-Oを付けると、ダウンロード先のファイル名で保存する。\nこの場合だとmpam-fe.exeとして保存する。\nproxyサーバは、-xあるいは-proxyで指定する。\n書式は\u0026lt;[protocol://][user:password@]proxyhost[:port]\u0026gt;\nプロトコル指定がなければHTTP proxyとして扱われる。\nポート番号については、指定がなければ1080として扱われる。\n例ではproxyサーバとしてthis.is.sample.proxyserver.com:8080を指定。\n定義ファイルのダイレクトリンクとして http://download.microsoft.com/download/DefinitionUpdates/mpam-fe.exe を指定している（いつまで使えるかは分からない）\n追記: リトライ数、リトライ感覚の指定 サーバの反応が悪く、ダウンロード途中で失敗してしまうことがある。\nそういう場合には、-retry -retry-delay を指定しておこう。\ncurlのman抜粋 以下、-xと-Oのマニュアルを抜粋。\n-x, --proxy \u0026lt;[protocol://][user:password@]proxyhost[:port]\u0026gt; Use the specified proxy. The proxy string can be specified with a protocol:// prefix to specify alternative proxy protocols. Use socks4://, socks4a://, socks5:// or socks5h:// to request the specific SOCKS version to be used. No protocol specified, http:// and all others will be treated as HTTP proxies. (The protocol support was added in curl 7.21.7) If the port number is not specified in the proxy string, it is assumed to be 1080. This option overrides existing environment variables that set the proxy to use. If there\u0026#39;s an environment variable setting a proxy, you can set proxy to \u0026#34;\u0026#34; to override it. All operations that are performed over an HTTP proxy will transparently be converted to HTTP. It means that certain protocol specific operations might not be available. This is not the case if you can tunnel through the proxy, as one with the -p, --proxytunnel option. User and password that might be provided in the proxy string are URL decoded by curl. This allows you to pass in special characters such as @ by using %40 or pass in a colon with %3a. The proxy host can be specified the exact same way as the proxy environment variables, including the protocol prefix (http://) and the embedded user + password. If this option is used several times, the last one will be used. -O, --remote-name Write output to a local file named like the remote file we get. (Only the file part of the remote file is used, the path is cut off.) The remote file name to use for saving is extracted from the given URL, nothing else. Consequentially, the file will be saved in the current working directory. If you want the file saved in a different directory, make sure you change current working directory before you invoke curl with the -O, --remote-name flag! There is no URL decoding done on the file name. If it has %20 or other URL encoded parts of the name, they will end up as-is as file name. You may use this option as many times as the number of URLs you have.``` ","permalink":"https://nobwak.github.io/posts/2014-02-02-windows%E3%81%A7curl%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86%E3%81%82%E3%82%8B%E3%81%84%E3%81%AFmicrosoft_security_essential%E3%81%AE%E5%AE%9A%E7%BE%A9%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92curl%E3%81%A7%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89/","summary":"Windowsでもバッチファイルでファイルのダウンロードをしたい事がある。 そうすると、たとえばIEにURLを渡して起動するといったような事が","title":"Windowsでcurlを使おう。あるいはMicrosoft Security Essentialの定義ファイルをcurlでダウンロード。"},{"content":"FreeBSDにMATEをpkgngでインストールしたので経緯を示す。\n「メイト」って読んでたけどマテ茶のマテなのね。\n私がFreeBSDをインストールしているマシンはやや古めで、GNOME3だと荷が重い。\nそこでGNOME2後継のMATEにした。\nデザインなど、やっぱり物足りない点はあるけれど満足している。\nデスクトップ用途としてはそんなに使わないしね。\n(追記)\nこの記事は一ヶ月ほどまえに書いたものです。\nFreeBSD 10.o-RELEASEが公式アナウンスされた1/21(JST)の時点では、公式pkgリポジトリにmateが、加えてxorgすらもありません。\npkgリポジトリは一週間に一回の頻度で更新されますが、その都度全体的な整合性が保証されるわけではありません。\nしたがって、あるpackageがリポジトリに現れたり消えたりすることは、ままあることです。\nmateやxorgなどの大量に依存を抱えるソフトウェアをすべてpkgで扱うのは、現時点では難しいようです。\n(追記ここまで)\n(2014/1/30さらに追記)\n現時点でpkgにmateはあるけれども、今度はavahi-daemonがコアダンプするとかもうね…。\n(追記ここまで)\nMATEとは Wikipediaから引用\n MATE (マテ、スペイン語発音: [ˈmate])はGNOME 2のコードからフォークされたデスクトップ環境である。\n従来のデスクトップメタファーをGNOME Shellによる新しいインターフェースで置き換えたGNOME 3はLinuxコミュニティの一部から批判を受けた。多くのユーザーは新しいGNOMEを受け入れることを拒否し、GNOME 2の開発を継続する者を求めた。MATEプロジェクトはあるArch Linuxユーザー[3]によってこのタスクを行うために立ち上げられた。\n MATE(wikipedia)\nhttp://ja.wikipedia.org/wiki/MATE_%28%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97%E7%92%B0%E5%A2%83%29\n公式サイトはこちら。\nMATE(公式)\nhttp://mate-desktop.org/\nFreeBSDへのインストールについて pkgngに用意されているので、コマンド一発でインストールできる。\nただ、注意点が一つ。\nmateにはログインマネジャーが付属しない。\nおすすめはslim。xdmでも可。\ngdmはおすすめしない。\n理由。\ngdmはGNOMEアプリケーションだから。（せっかくGNOMEからフォークしてるのに）\n以下にmateをFreeBSDにportしてくれた人のコメントを引用。\n Q: Why you won\u0026rsquo;t check on GDM?\nA: Because it\u0026rsquo;s a GNOME applications and I do not want to install any\nextra dependency. :-) But if MATE folks fork the GDM and yes I will\nwork on it.\n 引用元\nhttp://lists.freebsd.org/pipermail/freebsd-gnome/2012-July/027576.html\nインストール Xorgはインストールされている前提。\n$ sudo pkg install mate とするだけ。\nログを取り忘れたので出力例は割愛。\nslimもインストールする。\nslimは本体の他にテーマもインストールする。\n-fで調べてみると以下の様な結果。\n$ pkg search -f slim-1.3.5_3 slim-1.3.5_3 Name : slim Version : 1.3.5_3 Origin : x11/slim Architecture : freebsd:9:x86:32 Prefix : /usr/local Categories : x11 Licenses : GPLv2 Maintainer : henry.hu.sh@gmail.com WWW : http://slim.berlios.de/ Comment : Graphical login manager for X11, derived from Login.app Options : PAM : on （略）Description : SLiM is a desktop-independent graphical login manager for X11, derived from Login.app by Per Liden. It aims to be light and simple, although completely configurable through themes and an option file; is suitable for machines on which remote login functionalities are not needed. WWW: http://slim.berlios.de/ インストール。\n$ sudo pkg install slim Updating repository catalogue The following 1 packages will be installed: Installing slim: 1.3.5_3 The installation will require 467 kB more space 257 kB to be downloaded Proceed with installing packages [y/N]: y slim-1.3.5_3.txz 100% 258KB 257.9KB/s 97.9KB/s 00:01 Checking integrity... done [1/1] Installing slim-1.3.5_3... done ************************************************************************* Thanks to Nikos Ntarmos, it is now possible to start slim from /etc/ttys. Please see /usr/local/etc/rc.d/slim for instructions on how to do that. テーマもインストール\n$ pkg search -f slim-themes-1.0.1 slim-themes-1.0.1 Name : slim-themes Version : 1.0.1 Origin : x11-themes/slim-themes Architecture : freebsd:9:x86:32 Prefix : /usr/local Categories : x11-themes Maintainer : rea@FreeBSD.org WWW : http://slim.berlios.de/themes01.php Comment : Theme pack for SLiM login app Options : ALL_THEMES : on ARCHLINUX_SIMPLE: on CAPERNOITED : on DEBIAN_MOREBLUE: on FINGERPRINT : on FLAT : on FLOWER2 : on FREEBSD : on GENTOO_SIMPLE : on GNEWSENSE : on LAKE : on LUNAR_LINUX : on MINDLOCK : on PARALLEL_DIMS : on RAINBOW : on REAR_WINDOW : on SCOTLAND_ROAD : on SUBWAY : on WAVE : on ZENWALK : on Flat size : 5.33MiB Pkg size : 4 MB Description : Theme pack for the SLiM X login application. WWW: http://slim.berlios.de/themes01.php $ sudo pkg install slim-themes-1.0.1 Updating repository catalogue The following 1 packages will be installed: Installing slim-themes: 1.0.1 The installation will require 5 MB more space 4 MB to be downloaded Proceed with installing packages [y/N]: y slim-themes-1.0.1.txz 100% 5021KB 279.0KB/s 311.5KB/s 00:18 Checking integrity... done [1/1] Installing slim-themes-1.0.1... done 設定 以下メールの手順に沿うだけ。とっても簡単。\nhttp://lists.freebsd.org/pipermail/freebsd-gnome/2012-July/027575.html\n具体的には/etc/rc.confの修正と、ホームディレクトリ.xinitrcの修正。\n/etc/rc.conf\ndbus_enable=\u0026#34;YES\u0026#34; hald_enable=\u0026#34;YES\u0026#34; avahi_daemon_enable=\u0026#34;YES\u0026#34; avahi_dnsconfd_enable=\u0026#34;YES\u0026#34; slim_enable=\u0026#34;YES\u0026#34; dbusからavahiまでの順番は重要。入れ替えないこと。\ngdm_enableがあれば削るかコメントアウトすること。\n~/.xnitrc\nexec mate-session 再起動すればおしまい。\n","permalink":"https://nobwak.github.io/posts/2014-01-30-freebsd%E3%81%B8%E3%81%AEmate%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"FreeBSDにMATEをpkgngでインストールしたので経緯を示す。 「メイト」って読んでたけどマテ茶のマテなのね。 私がFreeBSDをイン","title":"FreeBSDへのMATEインストール"},{"content":"10.0-RCxから10.0-RELEASEへの移行期に下記のようなエラーに遭遇した場合。\n/usr/bin/ld: cannot find /usr/lib/libc_nonshared.a cc: error: linker command failed with exit code 1 (use -v to see invocation) 以下のようにしてlibc_nonshared.aをインストールすれば回避できる。\n# cd /usr/src/lib/libc_nonshared # make \u0026amp;\u0026amp; make install \u0026amp;\u0026amp; make clean srcが無いなら、以下からダウンロードする。（i386の例）\nftp://ftp.iij.ad.jp/pub/FreeBSD/releases/i386/10.0-RELEASE/src.txz\nsrc.txzを展開して（依存があるから全部展開するのがよいあるね）;\n$ tar xvzf ./src.txz x usr/src/ x usr/src/share/monetdef/sr_YU.ISO8859-2.src x usr/src/share/monetdef/es_ES.UTF-8.src (略) ディレクトリに降りてmake install clean;\n$ cd usr/src/lib/libc_nonshared/ $ sudo make install clean Warning: Object directory not changed from original /usr/home/vanilla/files/10.0/usr/src/lib/libc_nonshared cc -O2 -pipe -fpic -DPIC -fvisibility=hidden（略） きちんとありますな。\n$ ls -la /usr/lib/libc_nonshared.a -r--r--r-- 1 root wheel 16658 1月 28 23:22 /usr/lib/libc_nonshared.a 終わったらsrcは消してOK。\n","permalink":"https://nobwak.github.io/posts/2014-01-29-%E3%83%A1%E3%83%A2_freebsd_10.0_%E3%81%A7_libc_nonshared.a%E3%81%8C%E8%A6%8B%E3%81%A4%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84%E3%81%A8%E3%81%8D%E3%81%AB%E3%81%AF/","summary":"10.0-RCxから10.0-RELEASEへの移行期に下記のようなエラーに遭遇した場合。 /usr/bin/ld: cannot find /usr/lib/libc_nonshared.a cc: error: linker command failed with exit code 1 (use -v to see invocation) 以下のようにし","title":"[メモ] FreeBSD 10.0 で libc_nonshared.aが見つからないときには"},{"content":"zfs snapshotの差分send/recvについて zfsのバックアップは、snapshotを撮っておいて、自ホストの別zpool、あるいは他ホストの別zpoolに移すことで行われる。\nバックアップは定期的に行われるものであるが、ではそのsnapshotを移す際、毎回毎回まるまる送っていたんでは帯域も時間もディスク寿命も無駄である。\nzfsはそこも考慮していて、差分だけを送ればいいようにincrementalオプションがきちんと用意されている。\n書式は以下の通りsendに-iオプションを与えるだけ。\n（recv側にはsnapshotAがすでに転送済みの前提）\nzfs send -i ＜snapshotA＞ ＜snapshotB＞ | zfs recv ＜target pool＞ よろしい。では次回からは…？ ふむ。\nでは二回目以降はどうするのだろう？\n上記の書式例でsnapshotCが出来たらどうするのだろう？\nまさかsnapshotA, B, Cを全部並べるのか？と思ったけどそれは間違いで、snapshotB, Cだけでよい。\nrecv側にはsnapshotAがすでにあるとき。\nzfs send -i snapshotA snapshotBでAとBの差分のみが送られる。\nつぎにzfs send -i snapshotB snapshotCでBとCの差分のみが送られる、というわけ。\nでは早速試してみる。が。\n「転送先が更新されているため差分を転送できません」 こんなエラーがでる。\ncannot receive incremental stream: destination warehouse/dir has been modified since most recent snapshot まあ文字通りなんですが。\nバックアップ用の転送先が更新されるのはなぜか分からないが（atimeだろうか？）。\nこういう場合には、recv側で-Fオプションを与えればよい。\n-Fオプションによりrecv側は最新snapshotに強制rollbackして、それからsnapshotを受け取る。\n下記の例だと、recv側は@20131226にいったんrollbackしてから受け取る。\n$ sudo sh -c \u0026#34;zfs send -i vault/chamber@20131226 vault/chamber@2014010 2 | zfs recv -F warehouse/chamber\u0026#34; atimeのoff recv側がなぜ更新されてるのか、atimeが怪しいのでoffにしておく。\nrecv側のzpoolに対してzfs set atime=offするだけ。\n（zpoolから切り出されたzfsすべてに適用される）\n$ zfs get atime warehouse NAME PROPERTY VALUE SOURCE warehouse atime on default $ sudo zfs set atime=off warehouse $ zfs get atime warehouse NAME PROPERTY VALUE SOURCE warehouse atime off local $ zfs get atime warehouse/chamber NAME PROPERTY VALUE SOURCE warehouse/chamber atime off inherited from warehouse ","permalink":"https://nobwak.github.io/posts/2014-01-28-zfs_snapshot%E3%81%AE%E5%B7%AE%E5%88%86send_recv%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"zfs snapshotの差分send/recvについて zfsのバックアップは、snapshotを撮っておいて、自ホストの別zpool、あるいは他","title":"zfs snapshotの差分send/recvについて"},{"content":"昨年あたりからWindows XPのサポート終了にともない、Windows 7へクライアントOSを移す企業が多い。\n私の仕事PCも過日、ついに7に変更された。\nさすがに色んなところが改善されていて使いやすくなっているのだが、なぜかSambaに置いてあるファイルが壊れたり、誰も開いていないはずなのに読み取り専用でしか開けない事象が頻発した。\n特に共有設定したOfficeドキュメントで顕著。\nしばらく悩んでいたのだが、Sambaのログにoplocks failedという記録を見つけて（おそらく）対処方法が分かった。\n以下に示す。\nSambaのバージョンは3.6.22である。\n結論 smb.confのglobalセクションに以下を書け。\noplocks = No blocking locks = No ネタ元 ネットを渉猟したところ、やはりOplocksの評判はあまりよくない。\n以下のホワイトペーパーが分かりやすかった。\nOplocksとread cachingが原因と断定している。\nOpportunistic Locking and Read Caching on Microsoft Windows Networks\nhttp://www.dataaccess.com/whitepapers/opportunlockingreadcaching.html\n先に進む前にプロトコルとしてのSMBでいくつか確認を。\nSMB（プロトコル）のバージョンについて Windowsファイル共有で使われるプロトコルSMBは、Vistaでバージョン2, 7でバージョン2.1になった。\nOplocksとread cachingもバージョン2以降で追加、あるいは強化されている。\n詳細は以下。\nSMB の新機能\nhttp://technet.microsoft.com/ja-jp/library/ff625695.aspx\nSMB1⇒2⇒2.1への変化と新機能\nhttp://blog.goo.ne.jp/mito_and_tanu/e/10c47629fbb7e7d3d73cbd54a1a9f28d\nOplocksとは ネットワークの効率化を狙う、Windows固有の機能。\n複数のプロセスが同じファイルをロックでき、なおかつクライアントがデータをキャッシュできる。\nChapter 17. File and Record Locking\nhttp://www.samba.org/samba/docs/man/Samba-HOWTO-Collection/locking.html\nhttp://www.samba.gr.jp/project/translation/Samba3-HOWTO/locking.html\nRead Cachingとは Oplocksの一機能。クライアント側でのデータキャッシュ。\nクライアントがローカルでデータをキャッシュする目的は、ネットワーク越しの書き込み回数を減らすこと、ひいてはネットワークの効率化のため。\nファイルの同じ部分（the same region）に対する書き込みをまとめて、一回で済ませる。\nOplocksの危険性 Oplocksが狙い通りに動けば、目的通りネットワークの効率化が図られる。\n問題なのはネットワークに何か問題が起こり、キャッシュが適切にフラッシュされない場合。ともするとファイルの破壊を引き起こす。\nとくにデータベースが危険。\n以下のリンクに詳細が。\n本記事の末尾に私訳を付す。\nLocks and Oplocks\nhttp://www.samba.org/samba/docs/using_samba/ch08.html\n対策:Oplocksを無効にしろ ここまで分かれば、対策は簡単。\nOplocksを無効にすればよい。\n無効にする方法には、サーバ側での方法、クライアント側での方法がある。\nクライアントと言っても、たいていはWindowsであろうが、Windowsで対処しようとするとレジストリの変更が必要になる。\nさすがにそれは面倒だ。\nそこでサーバ側、Sambaの設定でOplocksを無効にする。\nsmb.confでOplocksを無効にする oplocks = noとすればよい。\nデフォルト無効にしたければ[global]セクションに、共有ごとに無効にしたければ共有のところに書けばよい。\nsmb.confのmanは一見、共有ごとにしか指定できないように見えるかもしれないが[global]にも使える。\nまた、oplocksはbooleanなのでnoでもfalseでも、はたまた0でも理解してもらえる。\nなお、ファイルごとに有効無効を指定したければveto oplock filesで指定できる。\nsmb.confのmanより抜粋\noplocks (S) This boolean option tells smbd whether to issue oplocks (opportunistic locks) to file open requests on this share. （略） Default: oplocks = yes smb.confのmanよりPARAMETERS抜粋\nPARAMETERS （略） The letter G in parentheses indicates that a parameter is specific to the [global] section. The letter S indicates that a parameter can be specified in a service specific section. All S parameters can also be specified in the [global] section - in which case they will define the default behavior for all services. blocking locks Sambaはロックの方法を指定できる。\nblocking locksというものである。\nこれは、ファイルをロックするときに、特定部分だけをロック（range lock）するか、ファイル全体をロックするか、というものである。\nデフォルトで有効。\nWindowsのRead Cachingに対応してそうな機能である。\n加えてmanを見ると、「range lockに失敗すると、タイムアウトするまで何回かrange lockを再試行する」などと書いてある。\nこれも無効にしよう。\nblocking locks (S) This parameter controls the behavior of smbd(8) when given a request by a client to obtain a byte range lock on a region of an open file, and the request has a time limit associated with it. If this parameter is set and the lock range requested cannot be immediately satisfied, samba will internally queue the lock request, and periodically attempt to obtain the lock until the timeout period expires. If this parameter is set to no, then samba will behave as previous versions of Samba would and will fail the lock request immediately if the lock range cannot be obtained. Default: blocking locks = yes 設定例 以上を踏まえて、以下のように設定\nしょぼい英文は勘弁しておくれ。\n[global] (略) # # Disable oplock # It\u0026#39;s supposed to improve network performance but causes problems # # See: # Opportunistic Locking and Read Caching on Microsoft Windows Networks # http://www.dataaccess.com/whitepapers/opportunlockingreadcaching.html # oplocks = no blocking locks = no 再起動しておしまい。\n$ sudo service samba restart Performing sanity check on Samba configuration: OK Stopping winbindd. Waiting for PIDS: 667. Stopping smbd. Waiting for PIDS: 664, 664. Stopping nmbd. Waiting for PIDS: 661. Removing stale Samba tdb files: .. done Starting nmbd. Starting smbd. Starting winbindd. （参考）Locks and Oplocks 私訳 http://www.samba.org/samba/docs/using_samba/ch08.html\nLocks and Oplocks\noplocksの使用によって得られるパフォーマンス増は、大変に望ましいことがほとんどだ。\nしかしながら、クライアントやネットワークのハードウェアの信頼性が怪しいような状況では、クライアントにデータをキャッシュさせることは大きなリスクになり得る。\nクライアントが書き込みのためにファイルを開き、oplockを行う場合を考えてみよう。\nそして他のクライアントが同じファイルを開こうとしたとき、\u0026ldquo;oplock break\u0026quot;要求が最初のクライアントに送られる。\nもしこの要求が何らかの理由により失敗し、二番目のクライアントがファイルの書き込みをしたとする。\n二つのプロセスが同時に書き込みをするわけだから、ファイルは簡単に壊れてしまうだろう。\n残念なことに上記のケースは現実に起こりうる。\nSMBネットワークにおける複数のWindowsクライアント環境では、このようなおかしな動きは頻繁にみられる。\nたくさんのクライアントが同時に書き込みを行うデータベースファイルは特に影響を受けてしまう。\noplocksの失敗するもっと具体的な例を挙げると、それはデータベースファイルが大変に大きい場合である。\nクライアントがこのようなファイルを開き、oplockを許可されると、非常に大きな遅延が発生する。\nその一部を修正するためだけであっても、クライアントがファイル全部をキャッシュするからである。\nこのファイルを別のクライアントが開こうとしたとき、状況はさらに悪くなる。\n二番目のクライアントがファイルを開くためには、最初のクライアントがキャッシュをすべてサーバに書き戻す必要があるからだ。\nこのために、また別の遅延が発生する（しかも双方のクライアントで）。\n結果として、タイムアウトにより二番目のクライアントがファイルオープンに失敗し、たぶんデータが壊れた旨のWarning messageも併せて表示されるだろう。\nIn most cases, the extra performance resulting from the use of oplocks is highly desirable. However, allowing the client to cache data can be a big risk if either the client or network hardware are unreliable. Suppose a client opens a file for writing, creating an oplock on it. When another client also tries to open the file, an oplock break request is sent to the first client. If this request goes unfulfilled for any reason and the second client starts writing to the file, the file can be easily corrupted as a result of the two processes writing to it concurrently. Unfortunately, this scenario is very real. Uncoordinated behavior such as this has been observed many times among Windows clients in SMB networks (with files served by Windows NT/2000 or Samba). Typically, the affected files are database files, which multiple clients open concurrently for writing.\nA more concrete example of oplock failure occurs when database files are very large. If a client is allowed to oplock this kind of file, there can be a huge delay while the client copies the entire file from the server to cache it, even though it might need to update only one record. The situation goes from bad to worse when another client tries to open the oplocked file. The first client might need to write the entire file back to the server before the second client\u0026rsquo;s file open request can succeed. This results in another huge delay (for both clients), which in practice often results in a failed open due to a timeout on the second client, perhaps along with a message warning of possible database corruption!\n","permalink":"https://nobwak.github.io/posts/2014-01-26-windows7%E3%81%A7samba%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8C%E3%81%86%E3%81%BE%E3%81%8F%E9%96%8B%E3%81%91%E3%81%AA%E3%81%84%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6oplocks%E6%AD%BB%E3%81%99%E3%81%B9%E3%81%97/","summary":"昨年あたりからWindows XPのサポート終了にともない、Windows 7へクライアントOSを移す企業が多い。 私の仕事PCも過日、ついに7に","title":"Windows7でsambaのファイルがうまく開けない件について（oplocks死すべし）"},{"content":"ログは1行1イベントに 何を言っとるんだお前はという感じであるが、つまりこういう事である。\n通常、ログは1行が1イベントである。\nたとえばapacheのログやらなにやら、みんなそうである。\n少なくともUNIX系のシステムであれば、これは常識である。\nしかし、この世の中、UNIX系の常識が通用しないログだって山ほどあるのである。\n1イベントが複数行にわたるログがなぜいけないか。 たとえば以下の様な擬似ログを考えてみよう。\nまったく関係のない話だが、以下のデータは手元にあるLIFEのノートから適当にでっち上げた。\n冒頭にタイムスタンプがあり、イベントの内容が記される、典型的なログである。\n2013/12/16 17:55:05.6582 N28 [499016804864] Noble note section B6 5m/m しかしこれが、以下のように複数行にわたって記録（あるいは表示）される、こういうログを相手にすることだってあるのだ。\n2013/12/16 17:55:05.6582 N28 4990 1680 4864 Noble note section B6 5m/m これは主に可読性を意識したせいであろうが、こういったログをHadoopで扱うのは難しい。Hadoopのデータの扱い方 というのも、Hadoopは分散処理のためにログを分割するからだ（デフォルトでは64MBごと）。\nしかもその分割は、単純にサイズのみで判断され、文脈は考慮されない。\n上のログで言えば、Nobleの手前で切られてしまってログとして意味がなくなってしまうことだってある。\nこれを避けるには、Hadoopにファイルそのものではなくて、ファイルリストを与える手があるけれども、それではHadoopの長所を活かせない。\nファイルリストは綺麗に分割されるけど、ファイルの大きさはまちまちだから。\nログの整形 というわけで、こういったログを扱う前に、下準備として1行1イベントにまとめてしまおう。\nまとめ自体もHadoopで処理してしまえば楽である。\nHadoopの象本Appendix Cに良い例があるのでこれを使う。\nここでfiles.txtは処理するログファイルをリストしたものとする。\nまた、concat.shは1行1イベントにまとめるスクリプトとする。\n$ hadoop jar $HADOOP_INSTALL/contrib/streaming/hadoop-*-streaming.jar \\ -D mapred.reduce.tasks=0 \\ -D mapred.map.tasks.speculative.execution=false \\ -D mapred.task.timeout=12000000 \\ -input files.txt \\ -inputformat org.apache.hadoop.mapred.lib.NLineInputFormat \\ -output output \\ -mapper concat.sh \\ -file concat.sh reduceは必要ないのでmapred.reduce.tasks=0。\n重複して書き込んでほしくないのでmapred.map.tasks.speculative.execution=false。\nタイムアウトは長めに。\nmapが一回に処理するファイルはひとつにしたいので、-inputformat org.apache.hadoop.mapred.lib.NLineInputFormat 。\n以上\n","permalink":"https://nobwak.github.io/posts/2014-01-23-hadoop%E3%83%95%E3%83%AC%E3%83%B3%E3%83%89%E3%83%AA%E3%83%BC%E3%81%AA%E3%83%87%E3%83%BC%E3%82%BF%E3%81%A8%E3%81%AF/","summary":"ログは1行1イベントに 何を言っとるんだお前はという感じであるが、つまりこういう事である。 通常、ログは1行が1イベントである。 たとえばapac","title":"Hadoopフレンドリーなデータとは"},{"content":"タイトル通り、FreeBSDでnginx、FastCGIでPHPを動かす場合。\nlighttpd + phpの場合はこちら。\n必要なもの。\n nginx spawn-fcgi php（fastCGI）  概要 nginxは静的コンテンツ向けのwebサーバ。\nそのままでは動的コンテンツは扱えない。\nどうしても必要なら、よそで動的コンテンツを生成してもらわなければならない。\nその仕組みの一つにFastCGIがある。\nFastCGIは動的コンテンツの受け渡しのためのインタフェースである。\nspawn-fcgiはFastCGIプロセスの管理を行う。\nここで、PHPにはFastCGIサーバモードというのがある。\n指定されたポートで待ち受けてリクエストに応えるというもの。\nspawn-fcgiとPHPのFastCGIサーバモードを組み合わせれば、PHPのFastCGIインタフェースができあがる。\nnginxはPHPコンテンツのリクエストを受けたら、FastCGIを通してphp-cgiにコンテンツを生成してもらう、というわけ。\n参考。まあwikipediaなんですけどね。\nnginx\nhttp://ja.wikipedia.org/wiki/Nginx\nCGI\nhttp://ja.wikipedia.org/wiki/Common_Gateway_Interface\nFastCGI\nhttp://ja.wikipedia.org/wiki/FastCGI\nインストール FreeBSDなら、pkgで前章の三つをインストールする。\n特に難しいこともないので割愛。\nphpはpkgそのままでfastCGI対応になっているので意識する必要なし。\nPHPの確認 FastCGI対応かどうかを念のため確認。\n/usr/local/bin/php-cgiというのがインストールされていればよい。\n念のため-vで確認。\n$ php-cgi -v PHP 5.4.23 (cgi-fcgi) (built: Dec 19 2013 21:06:30) Copyright (c) 1997-2013 The PHP Group Zend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies spawn-fcgiの設定 spawn_fcgiには特定の設定ファイルがないのでrc.confに直接書き込む。\n起動スクリプト/usr/local/rc.d/spawn-fcgiの中身を見るとどういったオプションがあるかが分かる。\nnginx、spawn-fcgiの起動設定と一緒にやってしまおう。\n下記を/etc/rc.confにひとまず貼りつける。\nコメントアウトしてあるのはデフォルト設定。\n変えたい箇所があれば#を外して設定する。\n注意！\nspawn-fcgiのspawnとfcgiの間はハイフン（ダッシュ）\u0026quot;-\u0026ldquo;であるが、/etc/rc.confでの記載にはアンダースコア\u0026rdquo;_\u0026ldquo;にすること。\n言い方を変えると、spawn-fcgi_enableなどと書かないこと。\n# # nginx, with PHP FastCGI # nginx_enable=\u0026#34;YES\u0026#34; spawn_fcgi_enable=\u0026#34;YES\u0026#34; ##spawn_fcgi_app=\u0026#34;/usr/local/bin/php-cgi\u0026#34; ##spawn_fcgi_pidfile=\u0026#34;/var/run/spawn-fcgi.pid\u0026#34; ##spawn_fcgi_username=\u0026#34;www\u0026#34; ##spawn_fcgi_groupname=\u0026#34;www\u0026#34; ##spawn_fcgi_bindaddr=\u0026#34;127.0.0.1\u0026#34; ##spawn_fcgi_bindport=\u0026#34;9000\u0026#34; ##spawn_fcgi_bindsocket_mode=\u0026#34;0777\u0026#34; ##spawn_fcgi_children=\u0026#34;5\u0026#34; ##spawn_fcgi_max_requests=\u0026#34;1000\u0026#34; ##spawn_fcgi_path_env=\u0026#34;/sbin:/bin:/usr/sbin:/usr/bin:/usr/games:/usr/local/sbin:/usr/local/bin\u0026#34; 最終的に以下のようにした。\n個人用のサーバなのでささやかに。\n（冗長なので一部のコメント部分は除く）\n# # nginx, with PHP FastCGI # nginx_enable=\u0026#34;YES\u0026#34; spawn_fcgi_enable=\u0026#34;YES\u0026#34; spawn_fcgi_bindport=\u0026#34;8000\u0026#34; spawn_fcgi_children=\u0026#34;3\u0026#34; spawn_fcgi_max_requests=\u0026#34;100\u0026#34; spawn-fcgiの起動確認 serviceコマンドで起動。\n$ sudo service spawn-fcgi start Starting spawn_fcgi. spawn-fcgi: child spawned successfully: PID: 7486 sockstatで待ち受けポートを確認\n$ sockstat -l4 USER COMMAND PID FD PROTO LOCAL ADDRESS FOREIGN ADDRESS www php-cgi 7489 0 tcp4 127.0.0.1:8000 *:* www php-cgi 7488 0 tcp4 127.0.0.1:8000 *:* www php-cgi 7487 0 tcp4 127.0.0.1:8000 *:* www php-cgi 7486 0 tcp4 127.0.0.1:8000 *:* （略） phpの動作確認 nginxにはサンプルの設定ファイルがついてくる。\nそれをベースに、たとえば以下のような設定ファイルを作る。\nlocation ~ .php$のブロックが重要。\nfastcgi_pass 127.0.0.1:8000;のポートを先のswawn-fcgiと合わせること。\nworker_processes 1; events {  worker_connections 1024; } http {  include mime.types;  default_type application/octet-stream;  sendfile on;  keepalive_timeout 65;  server {  listen 80;  root /usr/local/www/php-test;  index index.html;  fastcgi_index index.php;  location ~ \\.php$ {  include fastcgi_params;  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;  fastcgi_pass 127.0.0.1:8000;  }  } } /usr/local/www/php-testにindex.htmlをつくる。また、test.phpを作る。\nindex.html\nIt works! test.php\n\u0026lt;?php phpinfo(); ?\u0026gt; nginxをスタートしておき;\n$ sudo service nginx restart Performing sanity check on nginx configuration: nginx: the configuration file /usr/local/etc/nginx/nginx.conf syntax is ok nginx: configuration file /usr/local/etc/nginx/nginx.conf test is successful Stopping nginx. Performing sanity check on nginx configuration: nginx: the configuration file /usr/local/etc/nginx/nginx.conf syntax is ok nginx: configuration file /usr/local/etc/nginx/nginx.conf test is successful Starting nginx. ブラウザで繋ぐ。\nスクリーンショット撮るのが面倒なのでw3mで。\n下記の通り/usr/local/www/nginx/index.htmlの内容が表示される。\n$ w3m 127.0.0.1 It works! index.htmlの内容が表示された。\nこれで通常のwebサーバとしては問題なく動作していることが確認できた。\nではphpの動作確認\nPHP infoの結果が表示される。\n内部的には、nginxが127.0.0.1:8000で待っているphp-cgiにtest.phpを実行させて、その結果を返している。\n$ w3m 127.0.0.1/test.php PHP Logo PHP Version 5.4.23  FreeBSD copper 10.0-RC2 FreeBSD 10.0-RC2 #0 r259404: Sun Dec System 15 08:18:20 UTC 2013 root@snap.freebsd.org:/usr/obj/usr/src/  sys/GENERIC amd64 Build Date Dec 19 2013 21:05:25 (略) 以上\n","permalink":"https://nobwak.github.io/posts/2014-01-21-nginx%E3%81%A7%E3%81%AEfastcgi_php%E8%A8%AD%E5%AE%9A/","summary":"タイトル通り、FreeBSDでnginx、FastCGIでPHPを動かす場合。 lighttpd + phpの場合はこちら。 必要なもの。 nginx spawn-fcgi php（fastCG","title":"NginxでのFastCGI PHP設定"},{"content":"Hadoopのnamenode兼datanodeが電源瞬断のせいで壊れてしもうた。\n勉強用のHadoopなのでダメージはないのだが、せっかくなのでfsckなどを試した結果を記す。\nhadoop-1.0.0。\nOS側でもfsckはしておいた。\nサマリ  HDFSにもfsckがある。 hadoop fsckでチェック、修正できる。 hadoop fsckと叩けば使い方の簡単な説明が表示される。 namenodeがsafemodeのためにHDFSが読み取り専用になっていることがある。 読み取り専用ではfsckで修正できないので、safemodeから出る必要がある。  HDFSでのfsck hadoop fsck ＜path＞と指定すればよい。\nCORRUPT!とのことで、壊れておりますなあ。\n$ hadoop fsck / FSCK started by hadoop from /172.29.17.159 for path / at Wed Dec 25 18:51:37 JST 2013 （略） /var/hadoop/mapred/system/jobtracker.info: MISSING 1 blocks of total size 4 B.Status: CORRUPT Total size: 45638364128 B Total dirs: 5321 Total files: 13059 Total blocks (validated): 9819 (avg. block size 4647964 B) ******************************** CORRUPT FILES: 2470 MISSING BLOCKS: 2498 MISSING SIZE: 15590981155 B CORRUPT BLOCKS: 2498 ******************************** Minimally replicated blocks: 7321 (74.559525 %) Over-replicated blocks: 0 (0.0 %) Under-replicated blocks: 7321 (74.559525 %) Mis-replicated blocks: 0 (0.0 %) Default replication factor: 2 Average block replication: 0.7455953 Corrupt blocks: 2498 Missing replicas: 7321 (100.0 %) Number of data-nodes: 1 Number of racks: 1 FSCK ended at Wed Dec 25 18:51:38 JST 2013 in 1185 milliseconds The filesystem under path \u0026#39;/\u0026#39; is CORRUPT 壊れている場合の対処:消去か移動 壊れている場合には対処が二つ。\n壊れているブロックを消すか、lost+foundに移すか。\n消す場合には-delete, 移す場合には-moveを指定する。\n以下は消した場合の例\u0026hellip;.なのだが、namenodeがsafemodeにいるので変更が出来ないとのこと。\n$ hadoop fsck / -delete FSCK started by hadoop from /172.29.17.159 for path / at Wed Dec 25 18:58:29 JST 2013 . /tmp/hadoop-hadoop/mapred/staging/hadoop/.staging/job_201308300823_0001/job.jar: CORRUPT block blk_3947350403157044322 /tmp/hadoop-hadoop/mapred/staging/hadoop/.staging/job_201308300823_0001/job.jar: MISSING 1 blocks of total size 66249 B.FSCK ended at Wed Dec 25 08:58:29 JST 2013 in 5 milliseconds Cannot delete /tmp/hadoop-hadoop/mapred/staging/hadoop/.staging/job_201308300823_0001/job.jar. Name node is in safe mode. The ratio of reported blocks 0.7456 has not reached the threshold 0.9990. Safe mode will be turned off automatically. Fsck on path \u0026#39;/\u0026#39; FAILED safemodeとは そもそもnameodeは通常の動作として、起動時には状態がsafemodeである。\nsafenodeのまま待機をしているうちに、datanodeが起動し、保管しているブロックの報告をnamenodeに行う。\nnamenodeは、充分なブロックの確認ができれば自動的にsafemodeを出る。\n「充分なブロック」がどれくらいか、は設定できる。\nsafemodeのときは読み取り専用になり、複製や消去もできないが、手動でsafemodeに入ったり出たりすることができる。\n以下、公式からの引用\n Safe mode is entered automatically at Namenode startup, and leaves safe mode automatically when the configured minimum percentage of blocks satisfies the minimum replication condition. Safe mode can also be entered manually, but then it can only be turned off manually as well.\nSafe mode maintenance command. Safe mode is a Namenode state in which it\n does not accept changes to the name space (read-only) does not replicate or delete blocks.   今回、問題の発生したnamenodeはdatanodeも兼ねている。\n電源瞬断でブロックが壊れているからブロックの報告はできないし、そもそもnamenodeが保管しているメタデータも壊れている。\nボロボロである。\nしたがって、いつまで待ってもsafemodeから出るはずがない。\nそこで手動でsafemodeを解除する。\nsafemodeの操作 safemodeの操作はhadoop dfsadmin -safemodeに続けて行う。\ngetで状態を得る。\nenterでsafemodeに入る。\nleaveでsafemodeから出る。\n面白いのは、wait。\nsafemodeから出たらコマンド実行する、というもの。\n# 状態を得る。 $ hadoop dfsadmin -safemode get # 終わってからコマンド実行 $ hadoop dfsadmin -safemode wait # safemodeに入る。 $ hadoop dfsadmin -safemode enter # safemodeから出る。 $ hadoop dfsadmin -safemode leave 以下、実際の例。\nsafe modeがONになっているので、OFFに。\n$ hadoop dfsadmin -safemode get Safe mode is ON $ hadoop dfsadmin -safemode leave Safe mode is OFF 改めてfsck / -delete\nblockが2000個くらい消えた。ま、まあ勉強用だし（震え声）\n$ hadoop fsck / -delete FSCK started by hadoop from /172.29.17.159 for path / at Wed Dec 25 19:05:54 JST 2013 （略） .......Status: HEALTHY Total size: 29928657533 B Total dirs: 5321 Total files: 10589 Total blocks (validated): 7319 (avg. block size 4089173 B) Minimally replicated blocks: 7319 (100.0 %) Over-replicated blocks: 0 (0.0 %) Under-replicated blocks: 7319 (100.0 %) Mis-replicated blocks: 0 (0.0 %) Default replication factor: 2 Average block replication: 1.0 Corrupt blocks: 0 Missing replicas: 7319 (100.0 %) Number of data-nodes: 1 Number of racks: 1 FSCK ended at Wed Dec 25 19:05:55 JST 2013 in 1696 milliseconds The filesystem under path \u0026#39;/\u0026#39; is HEALTHY HEALTYになったので、これでhadoopが使える状態に戻った。\n以上。\n","permalink":"https://nobwak.github.io/posts/2014-01-19-hadoop%E3%81%AEsafemode%E3%81%A8fsck/","summary":"Hadoopのnamenode兼datanodeが電源瞬断のせいで壊れてしもうた。 勉強用のHadoopなのでダメージはないのだが、せっかくな","title":"hadoopのsafemodeとfsck"},{"content":"いつも忘れるのでメモ。\nあるファイルから、コメント行と空行を除いて表示させるには。\nコメント行なら\u0026quot;^ *#\u0026ldquo;がマッチ。\n空行なら^ *$\u0026ldquo;がマッチ。\negrepに　-v \u0026ldquo;^ *#|^ *$\u0026rdquo; を与えればよい。\n冒頭タブとかは漏れてしまうけど、ひとまずはこれでいいかな。\n以下、実行例。\n$ egrep -v \u0026#34;^ *#|^ *$\u0026#34; ./nginx.conf user www; worker_processes 1; events {  worker_connections 1024; } http {  include mime.types;  default_type application/octet-stream;  sendfile on;  keepalive_timeout 65;  server {  listen 80;  server_name localhost;  location / {  root /usr/local/www/nginx;  index index.html index.htm;  }  error_page 500 502 503 504 /50x.html;  location = /50x.html {  root /usr/local/www/nginx-dist;  }  } } ","permalink":"https://nobwak.github.io/posts/2014-01-16-%E3%83%A1%E3%83%A2_grep%E3%81%A7%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E8%A1%8C%E7%A9%BA%E8%A1%8C%E4%BB%A5%E5%A4%96%E3%81%AE%E8%A1%8C%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%95%E3%81%9B%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"いつも忘れるのでメモ。 あるファイルから、コメント行と空行を除いて表示させるには。 コメント行なら\u0026quot;^ *#\u0026ldquo;がマッチ。 空行","title":"[メモ] grepでコメント行、空行以外の行を表示させるには"},{"content":"メモ。\niCalにGoogleカレンダーの内容を表示させる方法について\n事前準備 googleの二段階認証を有効にしている場合には、googleのアカウントでiCal向けのパスワードを作っておく。\n登録 流れ。\n iCalからカレンダー、アカウントの追加を選ぶ Googleを選ぶ アカウント情報を入れる。  二段階認証を有効にしている場合には、Step3で、Googleアカウントで作ったical向けのパスワードを入力。\nStep 1Step 2\u0026lt;/a\u0026gt;Step 3\u0026lt;br /\u0026gt; \u0026lt;a href=\u0026quot;/wp-content/uploads/2014/01/icaladdgoogleauth20140110.png\u0026quot;\u0026gt;\u0026lt;img class=\u0026quot;alignnone size-thumbnail wp-image-2537\u0026quot; alt=\u0026quot;icaladdgoogleauth20140110\u0026quot; src=\u0026quot;/wp-content/uploads/2014/01/icaladdgoogleauth20140110-150x150.png\u0026quot; width=\u0026quot;150\u0026quot; height=\u0026quot;150\u0026quot; /\u0026gt; \u0026lt;/a\u0026gt;以上  ","permalink":"https://nobwak.github.io/posts/2014-01-15-ical%E3%81%ABgoogle%E3%81%AE%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"メモ。 iCalにGoogleカレンダーの内容を表示させる方法について 事前準備 googleの二段階認証を有効にしている場合には、googleの","title":"iCalにGoogleのカレンダーを表示するには"},{"content":"EasyBotterとはTwitter Botツールで、pha氏の手になるもの。\nphpで作られている。\n設定は以下に沿うとして、このツールをFreeBSDで動かすために必要な事を記す。\nhttp://pha22.net/twitterbot/\nhttp://www26.atwiki.jp/easybotter_wiki/pages/1.html\nFreeBSD 10.0-RC1, pkgngで実施。\nEasyBotterの展開 ダウンロードしたEasyBotterを展開する。\nどこでもよい。\n$ ls EasyBotter.php bot.php license.txt PEAR data.txt log.dat RCS path.txt reply_pattern.php __MACOSX index.html setting.php 設定は冒頭のリンクに沿ってどうぞ。\nphpのインストール 最低限必要なものは以下の三つ。2013/12/16現在。\nphp5-5.4.21 PHP Scripting Language\nphp5-hash-5.4.21 The hash shared extension for php\nphp5-json-5.4.21 The json shared extension for php\nbotの喋る内容はUTF-8で書くので、vimも入れておくとよいかも。\nテスト bot.phpを実行する。\n以下のようになれば成功。\n$ php ./bot.php \u0026lt;!DOCTYPE html PUBLIC \u0026#34;-//W3C//DTD XHTML 1.0 Transitional//EN\u0026#34; \u0026#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\u0026#34;\u0026gt; \u0026lt;html xmlns=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34; lang=\u0026#34;ja\u0026#34; xml:lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv=\u0026#34;content-language\u0026#34; content=\u0026#34;ja\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;content-type\u0026#34; content=\u0026#34;text/html; charset=UTF-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;EasyBotter\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;pre\u0026gt;Twitterへの投稿に成功しました。 \u0026lt;br /\u0026gt;@[samplebot](http://twitter.com/samplebot)に投稿したメッセージ：.... cronに設定 以下のようなどうってことないシェルスクリプトを作って;\n#!/bin/sh cd /home/nobody/files/EasyBotter/ /usr/local/bin/php ./bot.php crontabに設定。\n$ crontab -l 10 * * * * /home/nobody/bin/bot.sh 以上\n","permalink":"https://nobwak.github.io/posts/2014-01-13-easybotter%E3%82%92freebsd%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%99/","summary":"EasyBotterとはTwitter Botツールで、pha氏の手になるもの。 phpで作られている。 設定は以下に沿うとして、このツールをFr","title":"EasyBotterをFreeBSDで動かす"},{"content":"メモ。\nFreeBSD 10.0-RC5にしたら、おなじ10.0からのアップグレードであっても、pkg/portsの再インストールが必要。\nというのもABIの変更があったから。\n必ずしもすべてのpkg/ports、というわけではないが、全部やっておいた方が安心。\nソースは以下。\nhttp://lists.freebsd.org/pipermail/freebsd-stable/2014-January/076817.html\n\u0026gt;\u0026lt;i\u0026gt; \u0026gt; Changes between -RC4 and -RC5 include: \u0026lt;/i\u0026gt;\u0026gt;\u0026lt;i\u0026gt; \u0026gt; o Revert a change to the kinfo_file structure to preserve ABI. \u0026lt;/i\u0026gt; You should rebuild your ports after upgrading from the previous -RCs, since there was an ABI change. Glen pkgの再インストールは以下のコマンドで。\npkg upgrade -fy ","permalink":"https://nobwak.github.io/posts/2014-01-13-%E3%83%A1%E3%83%A2_freebsd10.0-rc5%E3%81%AB%E3%81%97%E3%81%9F%E3%82%89%E5%85%A8pkg_ports%E3%82%92%E5%86%8D%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%82%8D/","summary":"メモ。 FreeBSD 10.0-RC5にしたら、おなじ10.0からのアップグレードであっても、pkg/portsの再インストールが必要。 というのもABIの","title":"[メモ] FreeBSD10.0-RC5にしたら全pkg/portsを再インストールしろ"},{"content":"PythonでWindowsアプリケーションを作ったとする。\nたとえばファイルを引数に取り、整形するものだとする。\nせっかくWindowsアプリケーション、というかGUI上のプログラムなんだから、アプリケーションにドラッグ＆ドロップしたいじゃないか。\nどうしたらできるか。\n…まあ普通にargvで受け取ればいいんですがね。\n以下、Pythonにおけるargvの使い方メモ。\nsys.argv sys.argvは、コマンドラインで渡される引数が入ったリスト。\nsys.argv[0]にはスクリプト自身が入る。\nlen(sys.argv)で引数の数をカウントできる。\nできるが、スクリプト自身も含めての数であることに注意。sys.argv[0]に自分が入っているからね。\nサンプルスクリプト\nサンプルスクリプトである。\nimport sys print \u0026#34;the name of script is :\u0026#34;, sys.argv[0] print \u0026#34;the number of arg is :\u0026#34;, len(sys.argv) for arg in sys.argv:  print arg この実行結果は、たとえば以下のようになる。\n$ python ./argv.py a b c the name of script is : ./argv.py the number of arg is : 4 ./argv.py a b c sys.argvはリストなのでforなどで中身を一つ一つ参照できるが、自分自身からまず始まるのは美しくない。\n引数一つ目から扱うには 以下のようにする。\nimport sys def main(argv):  print \u0026#34;the name of script is :\u0026#34;, sys.argv[0]  print \u0026#34;the number of original arg is :\u0026#34;, len(sys.argv)  print \u0026#34;the number of altered arg is :\u0026#34;, len(argv)  for arg in argv:  print arg if __name__ == \u0026#34;__main__\u0026#34;:  main(sys.argv[1:]) 端的に言えば、一枚レイヤを入れる。\n一番下のif文部分でsys.argvを受けたら、リストの一つ目以降、つまりスクリプト自身を除いた残りをmain()に渡すというわけ。\n出力は例えば以下のようになる。\n$ python ./argv.py a b c the name of script is : ./argv.py the number of original arg is : 4 the number of altered arg is : 3 a b c ベリーナイス。\nシャレオツな使い方（引数の数を担保したい） さて。もうちょっと頭のいいことをやってみたい。\n具体的には、引数を一つだけ取るようにしたい。\nさてサンプル。\ndef main(argv):  print \u0026#34;the name of script is :\u0026#34;, sys.argv[0]  print \u0026#34;the number of original arg is :\u0026#34;, len(sys.argv)  print \u0026#34;the number of altered arg is :\u0026#34;, len(argv)  if len(argv) != 1:  sys.exit(\u0026#34;Usage: %s \u0026lt;filename\u0026gt;\u0026#34; % sys.argv[0])  print argv[0] if __name__ == \u0026#34;__main__\u0026#34;:  main(sys.argv[1:]) 出力例\n$ python ./argv.py a b c the name of script is : ./argv.py the number of original arg is : 4 the number of altered arg is : 3 Usage: ./argv.py \u0026lt;filename\u0026gt; シャレオツな使い方（引数の内容を担保したい） さらに。\nファイルを引数に取るとして（さあ冒頭の話につながってまいりました！）、そのファイルの有無を確認したい。\nサンプル。\nimport sys import os def main(argv):  print \u0026#34;the name of script is :\u0026#34;, sys.argv[0]  print \u0026#34;the number of original arg is :\u0026#34;, len(sys.argv)  print \u0026#34;the number of altered arg is :\u0026#34;, len(argv)  if len(argv) != 1:  sys.exit(\u0026#34;Usage: %s \u0026lt;filename\u0026gt;\u0026#34; % sys.argv[0])  if not os.path.exists(argv[0]):  sys.exit(\u0026#39;ERROR: file %s was not found!\u0026#39; % argv[0])  print argv[0] if __name__ == \u0026#34;__main__\u0026#34;:  main(sys.argv[1:]) 出力例\n$ python ./argv.py a the name of script is : ./argv.py the original number of arg is : 2 the altered number of arg is : 1 ERROR: file a was not found! 以上でござる\n","permalink":"https://nobwak.github.io/posts/2014-01-10-python%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AB%E5%BC%95%E6%95%B0%E3%82%92%E6%B8%A1%E3%81%9D%E3%81%86/","summary":"PythonでWindowsアプリケーションを作ったとする。 たとえばファイルを引数に取り、整形するものだとする。 せっかくWindowsアプリ","title":"Pythonアプリに引数を渡そう"},{"content":"pkgngで、あるpkg、たとえばpkg Aをインストールすると、依存によりほかのpkgを大量に連れてくることがある。\nそれはそれで良いのだが、ではそのpkgを、依存も含めて一式アンインストールしたい場合にはどうするか。\nいったんpkg Aを削除したあとに、autoremoveを使えばよい。\nこれはgnome2などの巨大なものでも同じ。\npkg autoremove manより抜粋\npkg autoremove is used for removing orphan packages, which were installed  during dependency resolution and are no longer needed.  pkg autoremoveは、依存関係の解決のためにインストールされたがもう必要のない、いわば「孤児」pkgを削除するのにつかわれる。\n 実行例（gnome2削除） 以下にgnome2を削除したときの例を示す。\ngnome2のレベルになると、meta-portが用意されているので、これを削除してからautoremoveすればよい。\nまずはmeta-portを削除\n$ pkg info|grep gnome2 gnome2-2.32.1_5 The \\\u0026#34;meta-port\\\u0026#34; for the GNOME 2 integrated X11 desktop $ sudo pkg delete gnome2-2.32.1_5 Deinstallation has been requested for the following 1 packages: gnome2-2.32.1_5 Proceed with deinstalling packages [y/N]: y [1/1] Deleting gnome2-2.32.1_5... done $ そしてautoremove\n$ sudo pkg autoremove Deinstallation has been requested for the following 322 packages: alacarte-0.13.2_2 bitstream-vera-1.10_5 (中略) iso8879-1986_3 libxslt-1.1.28_1 xmlcharent-0.3_2 The deinstallation will free 2 GB Proceed with deinstalling packages [y/N]:y (中略) [320/322] Deleting iso8879-1986_3...xmlcatmgr: enabling compatibility mode; removing ALL matching entries done [321/322] Deleting libxslt-1.1.28_1... done [322/322] Deleting xmlcharent-0.3_2... done $ おしまい。\n","permalink":"https://nobwak.github.io/posts/2014-01-08-pkgng%E3%81%A7gnome2%E3%81%AA%E3%81%A9%E3%81%AE%E4%B8%80%E5%BC%8F%E3%82%92%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"pkgngで、あるpkg、たとえばpkg Aをインストールすると、依存によりほかのpkgを大量に連れてくることがある。 それはそれで良いのだが、","title":"pkgngでgnome2などの「一式」を削除するには。"},{"content":"過日、zpool v28のアップグレードをして、いくつかのfeature flagsを有効にした。\nしたのだが、よく分からないことがいくつかあった。\nすなわち、最新のはずのv28なのにアップグレードを促されたこと、アップグレードしたら zpool get allの結果からバージョンが消えてしまったこと、である。\nWikipediaのZFSやOpenZFSを眺めてみて分かったのは、zpool（(Open)ZFS）はv28以降、バージョンナンバの使用を止めてしまったせいとの由。\nhttp://en.wikipedia.org/wiki/OpenZFS\nhttp://en.wikipedia.org/wiki/ZFS#RELEASEHISTORY\n以下に調べた結果を示す。\nなお、ご覧の通り情報の出所はwikipediaである。\n問題ないとは思うが、各位においてはご留意されたい。\nZFSの歴史 もともと、zpoolやZFS filesytemに機能が追加されるたび、バージョンナンバがインクリメントされてきた。\nしかし2010年、OpenSoralisの開発が停止され、ZFSはオープンソースではなくなった。\n本家（Oracle）のZFSはプロプライエタリとなって、2013/12/24現在、ZFS filesystemはv6, ZFS Poolはv34まで進んでいる。\nそれはそれとして、illumos(OpenSolaris後継）やBSD/Linux/OSX関連の方々は、オープンであったzfs v5, zpool v28をベースに本家とは別の開発が進める。\nこれが2013年にOpenZFSとなる。\nバージョンナンバとフィーチャーフラグ OpenZFSはいろんな所でいろんな人々が開発を続けている。\nこういった状態で、単一のバージョンナンバを付与することは不可能である。\nそこでフィーチャーフラグ（feature flags）という考え方を導入する。\n機能ごとに個別の名前を与える、というもの。\n個別の名前は、feature@:という書式で表される。\norg-nameは当該機能を開発した組織名。一意の名前。もちろん、勝手につけることは許されない。\norg-nameが明らかな場合には、feature@と短縮してもよい。\nfeature@async_destroyというように。\nフィーチャーの状態 フィーチャーの状態には三つある。\ndisabled, enabled, activeである。\n disabled: 無効。機能を使えない状態。 enabled: 機能を使える状態。有効にはなっていない。 active: 機能が有効。旧バージョンとの互換性がなくなっている。  フィーチャーの種類  features for write : 書き込みには必須の機能。読み込みのみであれば不要。 features for read : 読み込み、あるいはpoolを開くために必須の機能。  たとえばasync_destroyはデータ書き込みの時だけ必要な機能なのでfeatures for write。\nバージョンについて 一つでもフィーチャーを有効にするとpoolのバージョンは1000になる。\n1000とはめちゃくちゃな数に見えるかもしれないが、本家のバージョンと被らないようにするため。\nおわりに ここで改めてzpoolの出力を見てみると、poolのバージョンがハイフンになっていることや、フィーチャーの記載など、なるほどと理解できることがありますな。\n$ zpool get all|grep vault vault size 2.27T - vault capacity 64% - vault health ONLINE - vault version - default （略） vault feature@async_destroy enabled local vault feature@empty_bpobj enabled local vault feature@lz4_compress enabled local ","permalink":"https://nobwak.github.io/posts/2014-01-05-%E3%83%A1%E3%83%A2zpool%E3%81%AEversion%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6version%E3%83%8A%E3%83%B3%E3%83%90%E3%81%AF%E3%82%82%E3%81%86%E4%BD%BF%E3%82%8F%E3%82%8C%E3%81%AA%E3%81%84/","summary":"過日、zpool v28のアップグレードをして、いくつかのfeature flagsを有効にした。 したのだが、よく分からないことがいくつかあった","title":"[メモ]zpoolのVersionについて（Versionナンバはもう使われない）"},{"content":"FreeBSDダイモン（守護霊）の一人であらせられるコリン・パーシバル（Colin Percival）神がpanicmailをインストールせい、と仰せになったので入れた。\npanicmailとは panicmailとは、FreeBSDがkernel panicを起こしたとき、panic reportをFreeBSDの開発者に送るツールのこと。\nもちろん、panic reportにはセンシティブな情報は含まれないうえに、暗号化された状態で送られる。\n開発者は、受け取ったレポートをもとに開発を進める。\nkernel panic\u0026hellip;だと？ そもそも安定しているOSなのでpanicなんて滅多にしない。\nするのはcurrentくらい。\ncurrentでなければ最初のOSインストールのときくらいではないだろうか。\nそれだけにコリン神のアナウンスもcurrentメーリングリストである。\nだからインストールするのはcurrentユーザだけでいいんじゃないですかね。\nRELEASEユーザならまあ保険程度に。\nインストール panicmailはsysutils/panicmailから入れられる。\n以下はpkgngでのインストール例。\n$ sudo pkg search panicmail panicmail-1.0 $ sudo pkg install panicmail Updating repository catalogue The following 2 packages will be installed: Installing pkesh: 1.0 [FreeBSD] Installing panicmail: 1.0 [FreeBSD] The installation will require 12 KB more space 10 KB to be downloaded Proceed with installing packages [y/N]: y pkesh-1.0.txz 100% 4720 4.6KB/s 4.6KB/s 00:00 panicmail-1.0.txz 100% 5408 5.3KB/s 5.3KB/s 00:00 Checking integrity... done [1/2] Installing pkesh-1.0... done [2/2] Installing panicmail-1.0... done To enable sending of panic reports, add dumpdev=\u0026#34;AUTO\u0026#34; panicmail_enable=\u0026#34;YES\u0026#34; to your /etc/rc.conf. By default panic reports will be sent to root with instructions to forward them if they do not contain any sensitive information. To automatically submit panic reports directly, add panicmail_autosubmit=\u0026#34;YES\u0026#34; to your /etc/rc.conf in addition. 設定 panicmailを送るには以下が必要。\n dumpdevが有効であること panicmail_enableがrc.confで設定されていること  この状態でkernel panicが起こると、レポートはいったん当該システムのrootに送られる。\nレビューをして問題なければFreeBSD開発者にメールを送る。\nそのレビューをすっ飛ばしたいなら、panicmail_autosubmitをrc.confで設定すればよい。\n以下、/etc/rc.conf設定例。\n# # enable kernel panic reports # # see: # Automated submission of kernel panic reports: sysutils/panicmail # http://lists.freebsd.org/pipermail/freebsd-current/2013-November/046175.html panicmail_enable=\u0026#34;YES\u0026#34; panicmail_autosubmit=\u0026#34;YES\u0026#34; テストをしてみるべきなんだろうけど、やってません。\n","permalink":"https://nobwak.github.io/posts/2014-01-02-freebsd-current%E3%83%A6%E3%83%BC%E3%82%B6%E3%81%AFpanicmail%E3%82%92%E3%81%84%E3%81%BE%E3%81%99%E3%81%90%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%82%8D/","summary":"FreeBSDダイモン（守護霊）の一人であらせられるコリン・パーシバル（Colin Percival）神がpanicmailをインストールせい","title":"FreeBSD-currentユーザはpanicmailをいますぐインストールしろ"},{"content":"Pythonには、pythonスクリプトを手軽にWindowsアプリケーション化できるツールが揃っている。\n有名なのはPy2exeとPyInstallerである。\n違いをまとめたうえで、PyInstallerでのWindowsアプリ化をまとめる。\nPy2exeとPyInstallerの違い サイト\nhttp://www.pyinstaller.org/\nhttp://www.py2exe.org/\n インストールの容易さ\n→PyInstallerが有利 対応Pythonバージョン\n→Py2exe: 2.4～3.1\n→PyInstaller: 2.4～2.7 単独exeファイル作成の容易さ\n→PyInstallerがやや有利 「manifest」ファイル埋め込みの容易さ\n→Py2exeが有利  手軽さの点でPyInstallerを選んだ。\nPyInstallerの制限（日本語パスはダメ） ※2014/5/29追記\nPyInstallerで生成したアプリには制限がある。\nそのアプリを、日本語、要するにNon-ASCII文字列の含まれるパスに置くと起動に失敗する。\nPython2なせいだと思うが、じゃあPython3で作ったらどうよ?と考えるも、そもそもPyInstallerはPython3に対応してないし…。\n運用回避するしかないです。\n作ったアプリを人に配って初めて気づいたよ。\nPyInstallerのインストール pyinstallerのインストールを参照。\nダウンロードして展開するだけ。インストールっぽいことは不要。追加でUPXがあれば準備するとよい。後述。\nhttp://www.pyinstaller.org/ からダウンロード。\n2013/12/6現在、最新版は2.1。\nUPXのインストール UPXとは、実行ファイルを、実行できる形式のまま圧縮してくれるツールである。\nメリットはストレージの占有スペースを少なく出来ること。デメリットは実行時の展開処理。\nUPXは実行時の展開処理がすごく速いうえにメモリ消費量も少ないとのこと。\n大規模なプログラムだったら使ってもよいかな。\nhttp://upx.sourceforge.net/‎\nhttp://ja.wikipedia.org/wiki/UPX\nUPX is a portable, extendable, high-performance executable packer for several different executable formats. It achieves an excellent compression ratio and offers *very* fast decompression. Your executables suffer no memory overhead or other drawbacks for most of the formats supported, because of in-place decompression. インストールはごく簡単。\n公式サイトからアーカイブをダウンロード。\nWin32/i386版。\n展開したらupx.exeが出てくるので、それをパスの通ったところに置くだけ。\nPythonのインストールされているディレクトリ（例: C:\\Python27）の下に置くのがよいでしょう。\nあるいは別ディレクトリに置いてそこにパスを通す。\nPyInstallerの使い方 python pyinstaller.py targetscript.py とするだけである。\n以下、詳細。\nサンプルpythonスクリプトを一つ用意。\nコマンドプロンプトを開いて展開したPyInstallerのディレクトリに移る。\ncdで移るのが面倒なら、SHIFT+右クリックで開く。\npythonにパスが通っていることを確認。\nC:\\download\\python\\PyInstaller-2.1\u0026gt;python -V Python 2.7.2 C:\\download\\python\\PyInstaller-2.1\u0026gt; 対象スクリプトをpyinstallerのディレクトリに置くか、パスを取得する。\nパスの取得は、対象ファイルをSHIFT+右クリックで出来る。\nC:\\download\\python\\PyInstaller-2.1\u0026gt;python pyinstaller.py \u0026#34;C:\\download\\python\\reducer.py\u0026#34; 1215 INFO: wrote C:\\download\\python\\PyInstaller-2.1\\reducer\\reducer.spec 1559 INFO: Testing for ability to set icons, version resources... 1901 INFO: ... resource update available 2413 INFO: UPX is available. （中略） 7048 INFO: Extending PYTHONPATH with C:\\download\\python 7049 INFO: checking Analysis 7050 INFO: building Analysis because out00-Analysis.toc non existent 7050 INFO: running Analysis out00-Analysis.toc 7054 INFO: Adding Microsoft.VC90.CRT to dependent assemblies of final executable （中略） 21276 INFO: Executing - upx --lzma -q C:\\Users\\xxxxxx\\AppData\\Roaming\\pyinstall er\\bincache01_py27\\_socket.pyd C:\\download\\python\\PyInstaller-2.1\u0026gt; Windowsプログラムのできあがり PyInstallerのフォルダに、スクリプト名でフォルダが出来ているはず。\nその下に、さらにbuildとdistという、二つのフォルダがある。\n他人にプログラムを配る場合には、distフォルダの下にある方を配ること。\n実行に必要なDLL（pythonのDLL, MSVCRのDLL）もセットになっているので。\nその他のオプション説明 以下参照。\nhttp://pythonhosted.org/PyInstaller/\n以下にピックアップ。\n-w, -windowed\n実行時にコマンドプロンプトを開かないようになる。\nGUIプログラムのときに便利。\n-F, -onefile\nプログラムを一つにまとめてくれる。\nなかなか魅力的なオプションだが、プログラム実行時にけっこう時間がかかってしまう。\n（試してみると分かるが、イライラするレベル）\nおすすめしない。\n-i ＜アイコンファイル＞, -icon=＜アイコンファイル＞\nプログラムのアイコンを設定できる。アイコンは拡張子.icoのファイル。\n-y\n-clean\n-yは既存の実行ファイルを問答無用で上書きする。\n修正しては何回も実行ファイルを作るときには便利。\n-cleanはログファイルや作業ファイルを消してから実行ファイル作成を始める。\n-noupx\nUPXを使いたくないときに指定。\n","permalink":"https://nobwak.github.io/posts/2013-12-27-python%E3%81%A7windows%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86/","summary":"Pythonには、pythonスクリプトを手軽にWindowsアプリケーション化できるツールが揃っている。 有名なのはPy2exeとPyIns","title":"PythonでWindowsアプリケーションを作ってみよう"},{"content":"インストールしたいpkgがある場合、どのように探すか。\npkg searchに与えるオプションを変えながら探していく。\nsageというpkgを探す場合を例に取って記録しておく。\nまずはsearchから pkg seach sageですな。\n$ pkg search sage dosage-2.6 gmessage-0.2_5 gxmessage-2.12.4_1 nagios-check_cpu_usage-1.0 p5-AnyEvent-MessagePack-0.19 p5-CGI-Application-Plugin-MessageStack-0.34 p5-Catalyst-Plugin-StatusMessage-1.002000 p5-Data-MessagePack-0.48 p5-Data-MessagePack-Stream-0.07_1 山のように引っかかって面倒。\n検索する文字列を考慮してみよう。\nsearchで正規表現 正規表現が使えるので、頭にsageとつくpkgを探す。\u0026quot;^sage\u0026quot;を与えればよいですな。\n$ pkg search \u0026#34;^sage\u0026#34; sage-0.2.0_3 一件になった。\nではインストール…の前に必ず確認。\nインストールしていないpkgの詳細を知る インストール済みのpkgであればpkg infoで調べることができる。\n未インストールならどうするか。\n-fを付ければよい。\n$ pkg search -f \u0026#34;^sage\u0026#34; sage-0.2.0_3 Name : sage Version : 0.2.0_3 Origin : graphics/sage Prefix : /usr/local Categories : graphics devel Maintainer : oliver@FreeBSD.org WWW : http://www.worldforge.org/dev/eng/libraries/sage Comment : OpenGL extension library Shared Libs required:  libSDL-1.2.so.11 Shared Libs provided:  libsage.so.2 Flat size : 953KiB Pkg size : 96 KB Description : Sage is an OpenGL extension library written to make use of SDL\u0026#39;s mechanism for enabling OpenGL\u0026#39;s extensions. WWW: http://www.worldforge.org/dev/eng/libraries/sage 欲しいsageは数学関連のものなので、どうも違うようですな。\n危なかった！\nしかし狙いのsageは無いのだろうか。\nカテゴリで探す pkgはカテゴリ分けされている。\n狙いのsageは数学関連であるから、おそらくmathの下にあるはずだ。\n$ pkg search \u0026#34;^math/\u0026#34;|less math/R math/R-cran-ChangeAnomalyDetection math/R-cran-Formula （略） あるいは:\n$ pkg search \u0026#34;math\\/\u0026#34;|less math/R math/R-cran-ChangeAnomalyDetection math/R-cran-Formula （略） しかし。\nありませんでした。\n$ pkg search \u0026#34;math\\/\u0026#34;|grep sage|wc -l  0 $ 仕方がないのでportsでインストールしよう。\nmath/sageはportsにはないのだろうか。\npsearchを使う。\n$ psearch \u0026#34;^sage\u0026#34; graphics/sage OpenGL extension library math/sage Open source Mathematics software あった。\nportsでのインストールは最小限に。 しかしportsからインストールするソフトウェアは最小限にしたい。\nつまりmath/sageだけはportsを使ってもよいが、依存するものはpkgを使いたい。\n本命ではない依存ソフトウェアのコンパイルなど待ちたくないし。\nportmasterを使うなら-Pを与えればよい。\n以下、portmasterのman抜粋。\n-P|--packages  use packages, but build port if not available $ sudo portmaster -P math/sage （中略） ===\u0026gt;\u0026gt;\u0026gt; Initial dependency check complete for math/sage ===\u0026gt;\u0026gt;\u0026gt; math/sage \u0026gt;\u0026gt; (15) ===\u0026gt;\u0026gt;\u0026gt; The following actions will be taken if you choose to proceed:  Install math/sage  Install devel/autoconf  Install devel/autoconf-wrapper  Upgrade pkg-1.1.4_10 to pkg-1.2_1  Install devel/gmake  Install devel/m4  Install misc/help2man  Install devel/p5-Locale-gettext  Install math/atlas  Install print/teTeX-base  Install print/teTeX-texmf  Install print/font-amsfonts  Install print/tex-texmflocal  Install textproc/texi2html  Install www/libwww  Install devel/libtool ===\u0026gt;\u0026gt;\u0026gt; Proceed? y/n [y] n pkgのアップグレードも提案された。\n嫌な予感しかしない。\npkgのアップグレードはやめよう。\nいったんNで抜ける。\nportmasterで特定のportsのアップグレードを抑止したい。 -xオプションを使う。\nportmasterのmanから抜粋。\n$ portmaster --version ===\u0026gt;\u0026gt;\u0026gt; Version 3.17.3 $ man portmaster  -x avoid building or updating ports that match this pattern. Can be  specified more than once. If a port is not already installed the  exclude pattern will be run against the directory name from  /usr/ports. $ sudo portmaster -P -x pkg math/sage (中略) ===\u0026gt;\u0026gt;\u0026gt; Initial dependency check complete for math/sage ===\u0026gt;\u0026gt;\u0026gt; math/sage \u0026gt;\u0026gt; (14) ===\u0026gt;\u0026gt;\u0026gt; The following actions will be taken if you choose to proceed:  Install math/sage  Install devel/autoconf  Install devel/autoconf-wrapper  Install devel/gmake  Install devel/m4  Install misc/help2man  Install devel/p5-Locale-gettext  Install math/atlas  Install print/teTeX-base  Install print/teTeX-texmf  Install print/font-amsfonts  Install print/tex-texmflocal  Install textproc/texi2html  Install www/libwww  Install devel/libtool 意図した通りpkgのupgradeが外れている。\nただ…pkgレポジトリのものよりportsのバージョンが新しいとやっぱりportsが選ばれてしまう。\n","permalink":"https://nobwak.github.io/posts/2013-12-23-%E6%97%A5%E5%B8%B8%E4%BD%BF%E3%81%84%E3%81%AEpkgngpkg%E3%82%92%E6%8E%A2%E3%81%97%E3%81%A6%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"インストールしたいpkgがある場合、どのように探すか。 pkg searchに与えるオプションを変えながら探していく。 sageというpkgを探す場合","title":"日常使いのpkgng:pkgを探してインストール"},{"content":"pkgngのレポジトリがsrvレコードなせいで、proxy越しだったりするとpkgがダウンロードできない問題があった。\n2013/12/19現在のpkg-1.2.3でこの件が修正されている。\nしたがって、デフォルトの設定ファイル/etc/pkg/FreeBSD.confをそのまま使うことが出来る。\n以下のような状態で、つまり、FreeBSD.confが有効（enabled:yes）になっている状態で;\n$ pkg -vv Version : 1.2.3 （中略） Repositories:  FreeBSD: {  url : \u0026#34;pkg+http://pkg.FreeBSD.org/freebsd:10:x86:64/latest\u0026#34;,  enabled : yes,  mirror_type : \u0026#34;SRV\u0026#34;,  signature_type : \u0026#34;FINGERPRINTS\u0026#34;,  fingerprints : \u0026#34;/usr/share/keys/pkg\u0026#34;  }  us-west: {  url : \u0026#34;http://pkg0.isc.freebsd.org/freebsd:10:x86:64/latest\u0026#34;,  enabled : no  } $ pkg updateが問題なくできる。\n$ sudo pkg update Updating repository catalogue digests.txz 100% 1042KB 347.5KB/s 512.4KB/s 00:03 packagesite.txz 100% 5491KB 499.1KB/s 610.6KB/s 00:11 Incremental update completed, 22191 packages processed: 0 packages updated, 0 removed and 22191 added. ああよかった。\nこちらからは以上です。\n(追記)\nFreeBSD-9.xの場合には以下の内容を/usr/local/etc/pkg/repos/FreeBSD.confとして保存すればよい。\nFreeBSD: {  url: \u0026#34;pkg+http://pkg.FreeBSD.org/${ABI}/latest\u0026#34;,  mirror_type: \u0026#34;srv\u0026#34;,  enabled: yes } ","permalink":"https://nobwak.github.io/posts/2013-12-19-%E5%A0%B1%E5%91%8Apkg-1.2.3%E3%81%A7proxy%E8%B6%8A%E3%81%97%E3%81%AE%E3%83%AC%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E6%8E%A5%E7%B6%9A%E3%81%8C%E5%8F%AF%E8%83%BD%E3%81%AB/","summary":"pkgngのレポジトリがsrvレコードなせいで、proxy越しだったりするとpkgがダウンロードできない問題があった。 2013/12/19現","title":"[報告]pkg-1.2.3でproxy越しのレポジトリ接続が可能に"},{"content":"Graphvizとは、AT\u0026amp;T研究所の作ったグラフ描画ソフトである。\nここでのグラフとは棒グラフのグラフではなく、ソーシャルグラフとかのグラフである。\n点（ノード）と線（エッジ）で表されるもので、例えば、何らかの状態遷移や、路線図や、ネットワークなどの「関係」の表現に使われる。\nもともとオイラーの一筆書きのような経路探索の分野があって、それを視覚的に表現するためのツールとしてこういったソフトがある（たぶん）。\nそんな分野はとても手に負えない。\nしかし、グラフ描画に注目するだけでも、とても面白いんである。\n例えば、ふだん利用する路線の、各駅の関係と乗降数をグラフに書いてみるだけでも、表で見たときは比べ物にならないくらいのインパクトがある。\nこれは、京浜急行の駅の繋がりと乗降者数をグラフにしてみたもの。\n隣り合う駅は繋ぐし、特急などで途中の駅をすっ飛ばす場合も繋ぐ。\n乗降者数に応じて駅の大きさを変えてみた。\n（何気なく作ったら一辺が10,000ピクセルを超える巨大画像になったので泣く泣く縮小した。）\nそういったわけで、この記事では(Python経由で)graphvizのグラフ描画についてまとめた。\n以下、特に指定のないかぎり、グラフと記載があれば、それは上記の意味でのグラフである。\nGraphvizについて 手っ取り早くどんなグラフが描けるのかを知りたければこちらのサンプルグラフなどを。\n関連のwebsiteは以下のとおり。\nGraphviz(公式) http://www.graphviz.org/\nGraphviz(wiki) http://ja.wikipedia.org/wiki/Graphviz \nGraphvizでは、DOTという形式でグラフを描画する。\nしかしDOT形式をそのまま扱うのはちょっと難しい。\nそこで他の言語を通して使う。\n具体的にはpygraphviz。\nPyGraphvizはGraphvizのpythonインタフェースである。\nPyGraphvizのインストール FreeBSD, OS Xでのインストールは確認済みである。\nしかし意外や意外、WindowsのActivePythonではPyGraphvizをインストールできない。PyPMにないのである。\n素のPythonなら出来るのかもしれないが。\nしかし、Graphviz単体ならインストールできる。DOT形式のファイル（以降、DOTファイル）を別マシンからもらえば、WIndows上でもグラフ描画は可能。\nFreeBSDでのインストール portsでもpkgでも、pygraphvizで探せば出てくるのでそれをインストールすればよい。\n以下はpkgでの例。\ngccを連れてきてダウロードサイズが100MBを超えた。驚いた。\nついでnumpyも入れた。\n$ pkg search graphviz graphviz-2.34.0 py27-graphviz-1.1_1 rubygem-graphviz-1.0.9 trac-graphviz-0.7.4_6 $ sudo pkg install py27-numpy py27-graphviz Updating repository catalogue The following 12 packages will be installed:  Installing mpc: 1.0.1  Installing gcc-ecj: 4.5  Installing binutils: 2.23.2  Installing py27-nose: 1.3.0  Installing libgd: 2.1.0_1,1  Installing gcc: 4.6.4  Installing graphviz: 2.34.0  Installing blas: 3.4.2_1  Installing py27-graphviz: 1.1_1  Installing lapack: 3.4.2_1  Installing suitesparse: 4.0.2_2  Installing py27-numpy: 1.7.0_2,1 The installation will require 685 MB more space 110 MB to be downloaded OS Xでのインストール graphvizをインストールし、そのあとPython上でpygraphvizをインストールすればよろし。\n以下の例ではbrewでgraphvizを、そのあとpipでpygraphvizをインストールしている。\n$ brew install graphviz ==\u0026gt; Downloading http://www.graphviz.org/pub/graphviz/stable/SOURCES/graphviz-2.3 ######################################################################## 100.0% ==\u0026gt; Downloading patches \u0026lt;snip\u0026gt; ==\u0026gt; make install /usr/local/Cellar/graphviz/2.30.1: 462 files, 10M, built in 3.1 minutes $  $ pip install pygraphviz Downloading/unpacking pygraphviz  Using download cache from /Users/xxx/.pip/cache/https%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2Fp%2Fpygraphviz%2Fpygraphviz-1.2.tar.gz  Running setup.py egg_info for package pygraphviz  Trying pkg-config  library_path=/usr/local/Cellar/graphviz/2.30.1/lib  include_path=/usr/local/Cellar/graphviz/2.30.1/include/graphviz \u0026lt;snip\u0026gt;  no previously-included directories found matching \u0026#39;doc/build\u0026#39; Successfully installed pygraphviz Cleaning up... $ Windowsでのインストール（graphvizだけ） WindowsのActivePythonではpygraphvizが使えない。\n素のgraphvizをインストールする。\n以下あたりからダウンロードする。\nhttp://www.graphviz.org/Download_windows.php\nインストーラがよければmsiを、レジストリを汚したくないならzipをダウンロード。\nzipは展開するとreleaseというフォルダが出来る。\nリネームしてどこにでも置けばよい。\n実行ファイルはbinの下にある。\n必要ならパスを通しておく。\n実際に使う実行ファイルはdot、circo、neatoあたりでしょう。\npygraphvizインストールの確認 pygraphvizをimportしてみてエラーの出ないことを確認しておこう。\nたとえばIDLEで。\nPython 2.7.5 (default, Oct 17 2013, 07:35:17) [GCC 4.2.1 Compatible FreeBSD Clang 3.3 (tags/RELEASE_33/final 183502)] on freebsd10 Type \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license()\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; import pygraphviz \u0026gt;\u0026gt;\u0026gt; PyGraphvizを使ってみよう。 基本はここのチュートリアルに沿えばよい。\nhttp://networkx.lanl.gov/pygraphviz/tutorial.html\npygraphvizをimportし、AGraphクラスを作る。\nimport pygraphviz as pgv G = pgv.AGraph() ノードの追加\nG.add_node(\u0026#39;a\u0026#39;) G.add_node(\u0026#39;b\u0026#39;) エッジの追加\nG.add_edge(\u0026#39;c\u0026#39;,\u0026#39;d\u0026#39;) G.add_edge(\u0026#39;e\u0026#39;,\u0026#39;f\u0026#39;) そして描画。\nlayoutを指示すると各ノード、エッジの配置がなされ、drawで画像に書き込める。\nG.layout() G.draw(\u0026#39;sample01.png\u0026#39;) dotファイルを書き出すには。\nG.write(\u0026#34;sample01.dot\u0026#34;) サンプルスクリプト 以下、サンプルスクリプトとその結果つくられるグラフを列挙する。\n先述の通りWindowsではpygraphvizが使えない。\nWindowsでグラフを描こうとするなら、MacやFreeBSD他、pygraphvizで生成しておいたdotをWindows上のgraphvizで読みこむしかない。\nその方法は最後に触れる。\nサンプル1 #!/bin/env python import pygraphviz as pgv G = pgv.AGraph() G.add_node(\u0026#39;a\u0026#39;) G.add_node(\u0026#39;b\u0026#39;) G.add_edge(\u0026#39;c\u0026#39;,\u0026#39;d\u0026#39;) G.add_edge(\u0026#39;e\u0026#39;,\u0026#39;f\u0026#39;) G.layout() G.draw(\u0026#39;sample01.png\u0026#39;) サンプル2 ノードの追加は、リストでまとめてできる。\n#!/bin/env python import pygraphviz as pgv G = pgv.AGraph() nodelist = [\u0026#39;g\u0026#39;,\u0026#39;h\u0026#39;,\u0026#39;i\u0026#39;] G.add_nodes_from(nodelist) G.add_edge(\u0026#39;c\u0026#39;,\u0026#39;d\u0026#39;) G.add_edge(\u0026#39;e\u0026#39;,\u0026#39;f\u0026#39;) G.layout() G.draw(\u0026#39;sample02.png\u0026#39;) サンプル3 同じエッジを二回追加しても変わらない。\n#!/bin/env python import pygraphviz as pgv G = pgv.AGraph() nodelist = [\u0026#39;g\u0026#39;,\u0026#39;h\u0026#39;,\u0026#39;i\u0026#39;] G.add_nodes_from(nodelist) G.add_edge(\u0026#39;h\u0026#39;,\u0026#39;i\u0026#39;) G.add_edge(\u0026#39;h\u0026#39;,\u0026#39;i\u0026#39;) G.layout() G.draw(\u0026#39;sample03.png\u0026#39;) サンプル4\nしかし、最初のクラス作成時にstrict=Falseと指定すれば。\n#!/bin/env python import pygraphviz as pgv G = pgv.AGraph(strict=False) nodelist = [\u0026#39;g\u0026#39;,\u0026#39;h\u0026#39;,\u0026#39;i\u0026#39;] G.add_nodes_from(nodelist) G.add_edge(\u0026#39;h\u0026#39;,\u0026#39;i\u0026#39;) G.add_edge(\u0026#39;h\u0026#39;,\u0026#39;i\u0026#39;) G.layout() G.draw(\u0026#39;sample04.png\u0026#39;) 二本になる。\nサンプル5 さらにdirectを指定すれば。\n#!/bin/env python import pygraphviz as pgv G = pgv.AGraph(strict=False, directed=True) nodelist = [\u0026#39;g\u0026#39;,\u0026#39;h\u0026#39;,\u0026#39;i\u0026#39;] G.add_nodes_from(nodelist) G.add_edge(\u0026#39;h\u0026#39;,\u0026#39;i\u0026#39;) G.add_edge(\u0026#39;h\u0026#39;,\u0026#39;i\u0026#39;) G.layout() G.draw(\u0026#39;sample05.png\u0026#39;) 矢印になる。\nサンプル6\nここまでは殺風景であったが、色だって形だって変更できる。\n#!/bin/env python import pygraphviz as pgv G = pgv.AGraph(strict=False, directed=True) nodelist = [\u0026#39;g\u0026#39;,\u0026#39;h\u0026#39;,\u0026#39;i\u0026#39;] G.add_nodes_from(nodelist) G.add_edge(\u0026#39;h\u0026#39;,\u0026#39;i\u0026#39;) G.add_edge(\u0026#39;h\u0026#39;,\u0026#39;i\u0026#39;) G.layout() G.draw(\u0026#39;sample05.png\u0026#39;) 参考 ここから先は、以下を参考にして各自素敵なグラフを作ってくれたまえ。\nhttps://github.com/pygraphviz/pygraphviz/blob/master/examples/miles.py\npygraphviz attrの一覧\nhttp://www.graphviz.org/doc/info/attrs.html\nWindowsでdotからグラフを描画する。 インストールしたdot, circo, neatoのいずれかに、-Tで出力形式を、-oで出力ファイル名を指定したうえで、dotファイルを与えればよい。\ndot -Tpng -o filename.png filename.dot circo -Tpng -o filename.png filename.dot neato -Tpng -o filename.png filename.dot ","permalink":"https://nobwak.github.io/posts/2013-12-17-graphviz%E3%81%A7%E3%82%AB%E3%83%83%E3%82%AF%E3%81%84%E3%81%84%E3%82%B0%E3%83%A9%E3%83%95%E3%82%92%E6%8F%8F%E3%81%93%E3%81%86/","summary":"Graphvizとは、AT\u0026amp;T研究所の作ったグラフ描画ソフトである。 ここでのグラフとは棒グラフのグラフではなく、ソーシャルグラフとか","title":"Graphvizでカックいいグラフを描こう"},{"content":"zpoolのupgradeをしたのでメモ。\n結論としては、zpoolのupgradeとは、単にversionを上げるだけ以外にもあるようだ。\nlegacy on-disk formatでformat?? 気がつくと、zpool statusで文句を言われていた。\n$ zpool status  pool: vault  state: ONLINE status: The pool is formatted using a legacy on-disk format. The pool can  still be used, but some features are unavailable. action: Upgrade the pool using \u0026#39;zpool upgrade\u0026#39;. Once this is done, the  pool will no longer be accessible on software that does not support feature  flags. (略) 曰く、「このpoolはlegacy on-disk formatでフォーマットされている。\nもちろんpoolは引き続き使えるけれども、いくかの機能が使えない。」とのこと。\nzpoolを調べてみたが、最新のv28である。\n$ zpool get all|grep vault vault size 2.27T - vault capacity 64% - vault health ONLINE - vault version 28 local （略） zpool upgradeで調べて分かってきた。\nzpoolバージョンではなくfeature flagsのことを言っているわけだ。\n$ zpool upgrade This system supports ZFS pool feature flags. The following pools are formatted with legacy version numbers and can be upgraded to use feature flags. After being upgraded, these pools will no longer be accessible by software that does not support feature flags. VER POOL --- ------------ 28 vault Use \u0026#39;zpool upgrade -v\u0026#39; for a list of available legacy versions. Every feature flags pool has all supported features enabled. で、もういちど調べてみると。\n$ zpool get all|grep vault vault size 2.27T - vault capacity 64% - vault health ONLINE - vault version 28 local （略） vault feature@async_destroy disabled local vault feature@empty_bpobj disabled local vault feature@lz4_compress disabled local featureがいくつかdiabledになっている。\nそうと分かれば素直にupgradeである。\nzpoolのupgrade zpool upgradeとするだけ。\nただ、バージョンが変わらないとはいえ、ファイルシステムの基盤をアップグレードするわけだからバックアップは取っといた。\n$ sudo zpool upgrade vault This system supports ZFS pool feature flags. Successfully upgraded \u0026#39;vault\u0026#39; from version 28 to feature flags. Enabled the following features on \u0026#39;vault\u0026#39;:  async_destroy  empty_bpobj  lz4_compress あっけなく終了。\n調べてみるとversionが消えて（なぜ\u0026hellip;.でもpropertiesがdefaultだからよしとしよう）、その代りfeatureはすべてenabledに変化したことが分かる。\nなお、enabledは「その機能が使えますよ」という表示。\n実際に有効にするとenabledはactiveに変化する。\n$ zpool get all|grep vault vault size 2.27T - vault capacity 64% - vault health ONLINE - vault version - default （略） vault feature@async_destroy enabled local vault feature@empty_bpobj enabled local vault feature@lz4_compress enabled local zpool upgrade、zpool statusの表示いずれも問題なし。\n$ zpool upgrade This system supports ZFS pool feature flags. All pools are formatted using feature flags. Every feature flags pool has all supported features enabled. $ zpool status  pool: vault  state: ONLINE  scan: scrub repaired 0 in 4h53m with 0 errors on Sat Jul 27 14:35:23 2013 config:  NAME STATE READ WRITE CKSUM  vault ONLINE 0 0 0  ada1 ONLINE 0 0 0 errors: No known data errors ","permalink":"https://nobwak.github.io/posts/2013-12-13-%E3%83%A1%E3%83%A2zpool%E3%81%AEupgrade/","summary":"zpoolのupgradeをしたのでメモ。 結論としては、zpoolのupgradeとは、単にversionを上げるだけ以外にもあるようだ。 legacy","title":"[メモ]zpoolのupgrade"},{"content":"HDDを増設してZFSを作ったのでメモ。\n一本のHDDにpool、zfsを作成し、圧縮、重複排除機能の有効化まで。\n環境は（残念ながら10.0-Rではなく）FreeBSD 9.2-RELEASE-p1。\nlz4でzfsの圧縮機能を気軽に試せるように ファイルシステムで圧縮機能を有効にすると、読み書きのいずれにもCPUパワーが必要で、要するに遅くなる。\n非力なCPUを使っているとなかなか使いにくい機能なのだが、圧縮方法にlz4が選べるようになってハードルは下がったように思う。\nlz4はここでも触れたが、めっぽう速い圧縮アルゴリズムである。\nこれはぜひとも使ってみなければ。\nディスクの確認とzfs機能の確認 物理ディスクを追加し、ブートしたらdmesgを確認する。\n$ uname -r 9.2-RELEASE $ dmesg|grep ada ada2 at ahcich2 bus 0 scbus2 target 0 lun 0 ada2: \u0026lt;WDC WD30EZRX-00D8PB0 80.00A80\u0026gt; ATA-9 SATA 3.x device ada2: 300.000MB/s transfers (SATA 2.x, UDMA6, PIO 8192bytes) ada2: Command Queueing enabled ada2: 2861588MB (5860533168 512 byte sectors: 16H 63S/T 16383C) ada2: quirks=0x1\u0026lt;4K\u0026gt; ada2: Previously was known as ad8 ada2とのこと。\n作業前にzfs, zpoolのバージョンを確認しておいてもいいかも。\nzfs, zpoolそれぞれにupgradeオプションを与えればよい。\nupgradeという名前の通り、upgradeのためのコマンドだが、バージョン確認にも使える。\n$ zfs upgrade This system is currently running ZFS filesystem version 5. All filesystems are formatted with the current version. $ $ zpool upgrade This system supports ZFS pool feature flags. The following pools are formatted with legacy version numbers and can be upgraded to use feature flags. After being upgraded, these pools will no longer be accessible by software that does not support feature flags. VER POOL --- ------------ 28 vault Use \u0026#39;zpool upgrade -v\u0026#39; for a list of available legacy versions. Every feature flags pool has all supported features enabled. zfsはバージョン5、zpoolはバージョン28。\nこのバージョンであれば、lz4による圧縮機能（LZ4 Compression algorithm support)と、重複排除機能（Deduplication)を使える。\npool、zfsの作成 warehouseというzpoolを作り、そこからbackupというボリュームを切り出す。\nまずzpoolを作る。\nほんと簡単で速くて助かる。\n$ sudo zpool create backup /dev/ada2 $ で確認。\n$ mount /dev/ada0p2 on / (ufs, local, journaled soft-updates) devfs on /dev (devfs, local, multilabel) vault/itunes on /itunes (zfs, local, noatime, nfsv4acls) vault/chamber on /chamber (zfs, local, noatime, nfsv4acls) backup on /backup (zfs, local, nfsv4acls) $ zpool status pool: backup state: ONLINE scan: none requested config: NAME STATE READ WRITE CKSUM backup ONLINE 0 0 0 ada2 ONLINE 0 0 0 errors: No known data errors pool: vault state: ONLINE (略) $ df  Filesystem 1K-blocks Used Avail Capacity Mounted on  /dev/ada0p2 239436440 20822200 199459328 9% /  devfs 1 1 0 100% /dev  vault/itunes 1436646199 598670122 837976077 42% /itunes  vault/chamber 1796007595 958031518 837976077 53% /chamber  warehouse 2873622450 31 2873622419 0% /warehouse ではzpoolからzfsの切り出し。\n先ほど作成したwarehouseからbackupという名前で。\n$ sudo zfs create warehouse/backup $ $ mount /dev/ada0p2 on / (ufs, local, journaled soft-updates) devfs on /dev (devfs, local, multilabel) vault/itunes on /itunes (zfs, local, noatime, nfsv4acls) vault/chamber on /chamber (zfs, local, noatime, nfsv4acls) warehouse on /warehouse (zfs, local, nfsv4acls) warehouse/backup on /warehouse/backup (zfs, local, nfsv4acls) $ df Filesystem 1K-blocks Used Avail Capacity Mounted on /dev/ada0p2 239436440 20823572 199457956 9% / devfs 1 1 0 100% /dev vault/itunes 1436646199 598670122 837976077 42% /itunes vault/chamber 1796007595 958031518 837976077 53% /chamber warehouse 2873622404 32 2873622372 0% /warehouse warehouse/backup 2873622403 31 2873622372 0% /warehouse/backup あとは/etc/fstabに書くだけ。\nwarehouse/backupを/backupにマウントするとして以下のように書いておき。\nwarehouse/backup /backup zfs rw 0 0 /warehouse/backupをいったんunmountしてそれからmount。\n$ sudo umount /warehouse/backup $ $ mount /dev/ada0p2 on / (ufs, local, journaled soft-updates) devfs on /dev (devfs, local, multilabel) vault/itunes on /itunes (zfs, local, noatime, nfsv4acls) vault/chamber on /chamber (zfs, local, noatime, nfsv4acls) warehouse on /warehouse (zfs, local, nfsv4acls) $ $ sudo mount /backup $ $ mount /dev/ada0p2 on / (ufs, local, journaled soft-updates) devfs on /dev (devfs, local, multilabel) vault/itunes on /itunes (zfs, local, noatime, nfsv4acls) vault/chamber on /chamber (zfs, local, noatime, nfsv4acls) warehouse on /warehouse (zfs, local, nfsv4acls) warehouse/backup on /backup (zfs, local, nfsv4acls) 圧縮機能と重複排除機能を有効に ではさっそく圧縮機能と重複排除機能を有効にする。\nといっても、すっごく簡単なんだけどね。\n$ sudo zfs set dedup=on warehouse/backup $ $ sudo zfs set compression=lz4 warehouse/backup $ 確認。\nzfs getで対象zfsの属性を確認できる。\n$ zfs get dedup warehouse/backup NAME PROPERTY VALUE SOURCE warehouse/backup dedup on local $ $ zfs get compression warehouse/backup NAME PROPERTY VALUE SOURCE warehouse/backup compression lz4 local $ タイプが面倒ならzfs get allですべての属性を表示させ、grepすればよい。\n$ zfs get all warehouse/backup|egrep \u0026#34;compre|ded\u0026#34; warehouse/backup compressratio 1.00x - warehouse/backup compression lz4 local warehouse/backup dedup on local warehouse/backup refcompressratio 1.00x - 書き込んでみる 今回追加したHDDはもともとバックアップ用途のつもり。\nここにスナップショットを流しこんでみる。\n以下のようにしてスナップショットを作成する。\n$ sudo zfs snapshot vault/itunes@`date +%Y%m%d` $ $ sudo zfs snapshot vault/chamber@`date +%Y%m%d` スナップショットのサイズは以下のとおりである。\n$ zfs list -t snapshot NAME USED AVAIL REFER MOUNTPOINT vault/chamber@20131121 0 - 914G - vault/itunes@20131121 0 - 571G - これらスナップショットをバックアップのHDDに流し込む。\nzfs sendとzfs recvをパイプで繋ぐ必要がある。\nsudoを使う場合にはsh -cで。\n$ sudo sh -c \u0026#34;zfs send vault/chamber@20131121 | zfs recv warehouse/backup/chamber\u0026#34; 注意点がある。\n以上のようにsnapshotを送ると、受け側では：\n①warehouse/backup/chamber ができ、さらに;\n②warehouse/backup/chamber@20131121 つまり;\n実ディレクトリで言えばwarehouse/backup/chamber/.zfs/snapshot/20131121ができる。\n漠然とvault/chamber@20131121の内容がwarehouse/backup/chamberに書き込まれる思っていたので驚いた。\nまた、ロードアベレージを監視するような仕組みは特に入れていなかったので、topの出力を見たところ5を超えてた。ちょっと怖い。\nlast pid: 10483; load averages: 5.37, 2.84, 1.36 up 2+23:24:54 22:01:40 45 processes: 3 running, 42 sleeping CPU: 0.0% user, 0.0% nice, 56.8% system, 0.3% interrupt, 42.9% idle Mem: 20M Active, 96M Inact, 1592M Wired, 11M Cache, 200M Buf, 120M Free ARC: 1039M Total, 58M MFU, 826M MRU, 103M Anon, 11M Header, 40M Other Swap: 907M Total, 10M Used, 897M Free, 1% Inuse そしてたかだか913GBのsnapshotの転送にかかった時間であるが。\nreal 3756m59.109s user 0m0.048s sys 192m3.897s まる二日半て…。\nこれは圧縮か重複排除か、どちらか止めた方がいいかもわからんね。\n差分snapshotの転送 オリジナルディスクで複数回snapshotを作成した場合、バックアップディスクにはその差分を送ることができる。\nzfs sendに-iを与え、二つのsnapshotを指定すればよいだけ。\n$ sudo sh -c \u0026#34;zfs send -i vault/chamber@20131121 vault/chamber@20131125 | zfs recv warehouse/backup/chamber\u0026#34; 以上\n","permalink":"https://nobwak.github.io/posts/2013-12-10-%E3%83%A1%E3%83%A2_%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%A6zfs%E3%82%92%E4%BD%9C%E3%82%8A%E4%BB%96zpool%E3%81%AEsnapshot%E3%82%92%E9%80%81%E3%82%8A%E8%BE%BC%E3%82%80/","summary":"HDDを増設してZFSを作ったのでメモ。 一本のHDDにpool、zfsを作成し、圧縮、重複排除機能の有効化まで。 環境は（残念ながら10.0-","title":"[メモ] ディスクを追加してZFSを作り、他zpoolのsnapshotを送り込む"},{"content":"この件があって、jailはqjailで管理している。\n上記記事では触れなかったのだが、qjailにはもう一つ大きな利点がある。\nqjailでは、jailのユーザランド更新にmake buildworldが不要なのである。\n細かいところは後で述べる。\nまずその使い方から。\nqjailでのユーザランド更新 jailを止めたあとに、qjail update -bだけでOK。\njailを止めないで実行しようとしても、下記のように怒られる。\nupdate -bはすぐに終わる。\n$ sudo qjail update -b Error: All jails have to be stopped. This jail is running. example01 ]$ sudo qjail stop example01 Jail successfully stopped example01 $ sudo qjail update -b Deletion of sharedfs binaries successful for bin. Deletion of sharedfs binaries successful for lib. Deletion of sharedfs binaries successful for libexec. Deletion of sharedfs binaries successful for sbin. Deletion of sharedfs binaries successful for usr/bin. Deletion of sharedfs binaries successful for usr/include. Deletion of sharedfs binaries successful for usr/lib. Deletion of sharedfs binaries successful for usr/libdata. Deletion of sharedfs binaries successful for usr/libexec. Deletion of sharedfs binaries successful for usr/sbin. Deletion of sharedfs binaries successful for usr/lib32. Copied host\u0026#39;s binaries to sharedfs successfully for bin. Copied host\u0026#39;s binaries to sharedfs successfully for lib. Copied host\u0026#39;s binaries to sharedfs successfully for libexec. Copied host\u0026#39;s binaries to sharedfs successfully for sbin. Copied host\u0026#39;s binaries to sharedfs successfully for usr/bin. Copied host\u0026#39;s binaries to sharedfs successfully for usr/include. Copied host\u0026#39;s binaries to sharedfs successfully for usr/lib. Copied host\u0026#39;s binaries to sharedfs successfully for usr/libdata. Copied host\u0026#39;s binaries to sharedfs successfully for usr/libexec. Copied host\u0026#39;s binaries to sharedfs successfully for usr/sbin. Copied host\u0026#39;s binaries to sharedfs successfully for usr/lib32. Host to sharedfs binaries update completed successfully. $ qjail update -bとは マニュアルから俺訳で引用すると:\n freebsd-updateはホストしか調べてくれず、jailは対象外だ。ホストには最新の環境があるのに、jailのためにわざわざ make buildworld/installworldするのは次男の無駄無駄無駄。\nだからして、ホストのバイナリをsharedfsにコピーできるようした。\n 原文は以下の通り。\n-b The basic requirement of FreeBSD jails is the jail environment  and the host run the same version of the systems binaries. Since  the FreeBSD-update utility only inspects the host system to  determine the systems RELEASE level it\u0026#39;s not applicable in a  jailed environment. Performing a make buildworld/installworld on  sharedfs\u0026#39;s source is such a waste of effort and resources after  having done this already for the host system. This option makes  the buildworld/installworld obsolete for the qjail environment.  This option deletes all the system binaries from the sharedfs and  them copies the host\u0026#39;s system binaries to sharedfs. It\u0026#39;s intended  to be used after running the FreeBSD-update utility on the host  to apply security updates or to upgrade the GENERIC host from one  RELEASE to another newer RELEASE, or after performing a make  buildworld/installworld on the host updating its system binaries.  Basically update the host and copy your work to the sharedfs  getting both environments synchronized. (snip) FreeBSD 10.0 July 22, 2013 FreeBSD 10.0 ","permalink":"https://nobwak.github.io/posts/2013-12-06-qjail%E3%81%AA%E3%82%89jail%E3%81%AE%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%A9%E3%83%B3%E3%83%89%E6%9B%B4%E6%96%B0%E3%81%ABmake_world%E3%81%AF%E4%B8%8D%E8%A6%81%E3%83%83/","summary":"この件があって、jailはqjailで管理している。 上記記事では触れなかったのだが、qjailにはもう一つ大きな利点がある。 qjailでは、","title":"qjailならjailのユーザランド更新にmake worldは不要ッ！"},{"content":"pkgngを1.2にアップデートしたら、設定ファイルの扱いが変わって、ちょっとした修正が必要になった。\nそれをまとめる。\nまとめ。\n pkgngを更新したらpkg upgradeを忘れずに すべてコメントの設定ファイルは受け付けてくれない。 設定ファイルでのキー指定は、\u0026quot;（クオート）で囲わないこと。  pkg のアップデートあり pkg updateをしたら、やたら文句を言われる。\n$ sudo pkg update pkg: Invalid configuration format, ignoring the configuration file Updating repository catalogue digests.txz 100% 1045KB 261.2KB/s 434.7KB/s 00:04 packagesite.txz 100% 5537KB 276.9KB/s 177.0KB/s 00:20 pkg: Skipping malformed dependency docbook-xml pkg: Skipping malformed dependency docbook pkg: Skipping malformed dependency docbook-xml そしてupgradeすると、pkgに更新があるとな。\n1.2.1である。\npkgに更新がある場合には、まずpkgを更新し、そのあとpkg upgradeをせよ、とのお達し。\n$ sudo pkg upgrade pkg: Invalid configuration format, ignoring the configuration file Updating repository catalogue digests.txz 100% 1045KB 261.2KB/s 504.7KB/s 00:04 New version of pkg detected; it needs to be installed first. After this upgrade it is recommended that you do a full upgrade using: \u0026#39;pkg upgrade\u0026#39; Upgrades have been requested for the following 1 packages:  Upgrading pkg: 1.1.4_10 -\u0026gt; 1.2.1 The upgrade will require 580 KB more space 2 MB to be downloaded Proceed with upgrading packages [y/N]: y pkg-1.2.1.txz 100% 1942KB 323.7KB/s 282.3KB/s 00:06 Checking integrity... done [1/1] Upgrading pkg from 1.1.4_10 to 1.2.1... done $ pkg 1.2でアップデートができない。 pkgの更新は問題なく完了。\n念のためもう一回pkg updateを試みるが、設定ファイルを読めないと怒られる。\n$ sudo pkg update pkg: Cannot parse configuration file! $ どうも設定ファイルがおかしいようだ。\nしかし現状、/etc/pkgの下や、/usr/local/etc/reposの下にも設定ファイルがあって訳の分からない状態だ。\n調べた結果は以下のようなものだ。\npkgはREPOS_PATHで指定される全てのディレクトリから設定ファイルを探す。\nデフォルトでは、/etc/pkgと/usr/local/etc/pkg/reposである。\n詳しくは以下を参照。\nhttp://lists.freebsd.org/pipermail/freebsd-questions/2013-November/254682.html\n注意すべきは、すべてコメント文で出来ている設定ファイルがあると、\u0026ldquo;pkg: Cannot parse configuration file!\u0026ldquo;と言い出してそれ以上の処理をしてくれなくなることだ。\nどうもバグのようだが。\n1.2より前では文句だけだった。\n私の場合、以下の通り/usr/local/etc/pkg.confがコメント文だけだったので、rmした。（RCSに保存しているので消したって平気）\n$ grep -v \u0026#34;^#\u0026#34; /usr/local/etc/pkg.conf $ $ sudo rm /usr/local/etc/pkg.conf $ 設定ファイルでのkey指定方法の変更 改めてpkg update。今度は問題なしか？\n$ sudo pkg update pkg: Warning: expecting a boolean for the \u0026#39;enabled\u0026#39; key of the \u0026#39;us-west\u0026#39; repo, the value has been correctly converted, please consider fixing Updating repository catalogue digests.txz 100% 1045KB 261.2KB/s 404.7KB/s 00:04 packagesite.txz 100% 5537KB 276.9KB/s 187.0KB/s 00:20 Incremental update completed, 22233 packages processed: 0 packages updated, 0 removed and 22233 added. 今度は設定ファイルの内容に文句が付いた。\nbooleanを期待してたのに違うぞ、と。\n文句だけなので進めはするが、気持ち悪いので修正する。\n設定ファイルの中でenabledなどのキー指定からクオートを外せばよい。\nbefore\nus-west: {  url: \u0026#34;http://pkg0.isc.freebsd.org/${ABI}/latest\u0026#34;,  enabled: \u0026#34;yes\u0026#34;,  mirror_type: \u0026#34;none\u0026#34;, } after\nus-west: {  url: \u0026#34;http://pkg0.isc.freebsd.org/${ABI}/latest\u0026#34;,  enabled: yes,  mirror_type: none, } pkg upgrade そうしたら指定通りpkg upgradeを実行。\n今度は問題なし。\n通常のアップグレードのほかに、依存が変わったとかで再インストールの必要なものが結構あった。\n$ sudo pkg upgrade Updating repository catalogue digests.txz 100% 1045KB 149.2KB/s 54.7KB/s 00:07 Upgrades have been requested for the following 37 packages:  Upgrading apr: 1.4.8.1.5.2 -\u0026gt; 1.4.8.1.5.3 （略）  Reinstalling orca-2.32.1_2 (direct dependency changed)  Reinstalling gnome2-2.32.1_5 (direct dependency changed) The upgrade will require 2 MB more space 102 MB to be downloaded Proceed with upgrading packages [y/N]: y そしてまた、autoremoveで掃除をしておこう。\n$ sudo pkg autoremove Deinstallation has been requested for the following 6 packages:  autoconf-2.69  autoconf-wrapper-20130530  gmake-3.82_1  help2man-1.43.3_1  m4-1.4.17,1  p5-Locale-gettext-1.05_3 The deinstallation will free 5 MB Proceed with deinstalling packages [y/N]: 余談 以下のようにpy27-distributeが邪魔だというので、pkg delete -f py27-distributeしてpkg upgradeした。\nChecking integrity...pkg: WARNING: locally installed py27-distribute-0.6.35 conflicts on /usr/local/bin/easy_install with:  - py27-setuptools-1.1.7_1 pkg: WARNING: locally installed py27-distribute-0.6.35 conflicts on /usr/local/bin/easy_install-2.7 with:  - py27-setuptools-1.1.7_1 pkg: WARNING: locally installed py27-distribute-0.6.35 conflicts on /usr/local/lib/python2.7/site-packages/easy-install.pth.dist with:  - py27-setuptools-1.1.7_1 ","permalink":"https://nobwak.github.io/posts/2013-12-02-pkgng_1.2%E3%81%B8%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88%E3%81%AB%E4%BC%B4%E3%81%86%E3%81%82%E3%82%8C%E3%81%93%E3%82%8C/","summary":"pkgngを1.2にアップデートしたら、設定ファイルの扱いが変わって、ちょっとした修正が必要になった。 それをまとめる。 まとめ。 pkgngを更","title":"pkgng 1.2へのアップデートに伴うあれこれ。"},{"content":"PyPMはActivePythonのPythonパッケージマネージメントシステムである。\nパッケージの提供はActiveState。\nただ、すべてのパッケージが揃っているわけではなく、ものによってはコンパイルに失敗し、結果としてPyPMでは入手できないものもある。\nたとえば2013/11/14現在、pygraphvizは入手できない。\nhttp://code.activestate.com/pypm/pygraphviz/\n pygraphviz is unavailable in PyPM, because there aren\u0026rsquo;t any builds for it in the package repositories.\n 前後したが、PyPMで揃えられるパッケージは以下のサイトで確認できる。\nhttp://code.activestate.com/pypm/\nまた、PyPMにもパッケージ検索機能が備わっている。\nPyPMの起動 ActivePythonをインストールすると、Python Package Manager(PyPM)というプログラムがスタートメニューにできているはず。\nこれがPyPM。\nプログラムとは言っても、実体はcmd.exeに引数を与えて実行するショートカットである。\nC:\\Windows\\System32\\cmd.exe /k title PyPM \u0026amp; pypm 実行すると、コマンドプロンプトが開く。\nPyPMの使い方 以下を参照\nhttp://docs.activestate.com/activepython/3.3/pypm.html\n検索: 　pypm search ＜パッケージ＞ インストール: 　pypm install ＜パッケージ＞ 削除: 　pypm uninstall ＜パッケージ＞ 更新: 　pypm upgrade 一覧: 　pypm list 実行例 matplotlibを検索、インストールしてみる。\n検索\nC:\\Windows\\system32\u0026gt;pypm search matplotlib  boomslang A thin layer over matplotlib that simplifies creation of common p  brewer2mpl Connect colorbrewer2.org color maps to Python and matplotlib  descartes Use geometric objects as matplotlib paths and patches  ezplot Remote Procedure interface to Matplotlib  matplotlib Python plotting package  pygmyplot Matplotlib wrapper plotting library  pywcsgrid2 pywcsgrid2 is a python module to be used with matplotlib for disp  root2matplot Tools to plot ROOT histograms using matplotlib  sphinxreport SphinxReport : a report generator in python based on Sphinx and m  webplotlib A package for creating server-side charts/graphs using matplotlib  wxmplot high level wxPython Components for 2D plotting and image display インストール\nC:\\Windows\\system32\u0026gt;pypm install matplotlib The following packages will be installed into \u0026#34;%APPDATA%\\Python\u0026#34; (2.7):  as.mklruntime-1.3 numpy-1.7.1 matplotlib-1.1.1 Get: [pypm-free.activestate.com] as.mklruntime 1.3 downloading: [===========\u0026gt; ] 59% 19.0MB/32.1MB (1m18s; 55s left) インストール済みのパッケージ一覧\nC:\\Windows\\system32\u0026gt;pypm list as.mklruntime 1.3 Intel MKL runtime files (Windows only) matplotlib 1.1.1 Python plotting package networkx 1.8.1 Python package for creating and manipulating graphs and net numpy 1.7.1 NumPy: array processing for numbers, strings, records, and プロキシの設定 もしインターネット接続がproxy越しの場合には、環境変数の設定が必要だ。\n以下に記載のあるとおり。\nhttp://docs.activestate.com/activepython/3.3/pypm.html#proxies-and-firewalls\nPyPMを実行したあと、以下のように設定してから進めればよい。\nC:\\Windows\\system32\u0026gt;set http_proxy=http://proxysomewhere.com:8080/ なお、activestateのサイト通りだとうまくいかなくて、経験的な結果として:\n 　ダブルクオーテーションで囲ったらダメ。 　（おそらく）URLの最後はスラッシュで終わらないとダメ。  使用例\nC:\\Windows\\system32\u0026gt;set http_proxy=http://proxysomewhere.com:8080/ C:\\Windows\\system32\u0026gt;pypm install networkx Get: [pypm-be.activestate.com] :repository-index: Get: [pypm-free.activestate.com] :repository-index: downloading: [=======\u0026gt; ] 39% 2.5MB/6.4MB (10s; 17s left) 以上\n","permalink":"https://nobwak.github.io/posts/2013-12-01-activepython%E3%81%A7python%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E6%89%B1%E3%81%86%E3%81%AB%E3%81%AFpypm/","summary":"PyPMはActivePythonのPythonパッケージマネージメントシステムである。 パッケージの提供はActiveState。 ただ、すべ","title":"ActivePythonでPythonパッケージを扱うにはPyPM"},{"content":"Hadoopへのインプットはふつう、ディレクトリかファイルの指定で行う。\nしかし以下のような場合にどうするか。\n 複数のディレクトリの下にあるファイルをhadoopに処理させたいとき。 特定拡張子のファイルのみをhadoopに処理させたいとき。  実はワイルドカードが使えるので、それで解決。\n以下、hadoop-1.0.0で確認。\nケース1:複数ディレクトリの下に処理対象ファイルがある場合。 top-+-dir1-file1  | -file2  | -file3  |  +-dir2-file4  -file5  -file6 以上のような状態でhadoopへのinputにtopを指定すると、hadoopはdir1をファイルとして処理しようとし、失敗する。\nたとえばこのように。\n13/11/13 22:26:03 ERROR security.UserGroupInformation: PriviledgedActionException as:hadoop cause:java.io.IOException: Not a file: hdfs://namenode/user/hadoop/top/dir1 13/11/13 22:26:03 ERROR streaming.StreamJob: Error Launching job : Not a file: hdfs://namenode/user/hadoop/top/dir1 Streaming Job Failed! このような場合には、top/*と指定してあげればよい。\nたとえばこのように。\n$ hadoop jar ${HADOOP_PREFIX}/contrib/streaming/hadoop-streaming-1.0.0.jar \\ -D mapred.reduce.tasks=0 \\ -input top/* \\ -output sampleoutput \\ -mapper /home/hadoop/map.py \\ -file /home/hadoop/map.py ケース2:特定のファイルのみ処理したい場合 たとえば以下のdir3で.txtのみを処理したい場合。\n-dir3-file1.txt  -file2.bin  -file3.txt -input dir3/*.txtとすればよい。\nケース3:ケース1/2の複合ケース top-+-dir4-file1.txt  | -file2.bin  | -file3.txt  |  +-dir5-file4.txt  -file5.bin  -file6.txt 合わせ技でtop/*/*.txtと指定すればよい。\n","permalink":"https://nobwak.github.io/posts/2013-11-27-hadoop%E3%81%AE%E3%82%A4%E3%83%B3%E3%83%97%E3%83%83%E3%83%88%E6%8C%87%E5%AE%9A%E3%81%AB%E3%83%AF%E3%82%A4%E3%83%AB%E3%83%89%E3%82%AB%E3%83%BC%E3%83%89%E3%81%8C%E4%BD%BF%E3%81%88%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"Hadoopへのインプットはふつう、ディレクトリかファイルの指定で行う。 しかし以下のような場合にどうするか。 複数のディレクトリの下にあるファ","title":"Hadoopのインプット指定にワイルドカードが使える件について"},{"content":"/usr/portsをportsnapではなく、svnliteで管理してみた。\n一般ユーザとしては、portsnapの管理が望ましいのだが、svnだとportsの個別更新が出来たりする。\nこのためだけにsvnlite管理にした。\nHandbookどおりにしただけ。\n以下のようなマシンで実施。\n$ uname -a FreeBSD vostro 10.0-BETA3 FreeBSD 10.0-BETA3 #0 r257580: Sun Nov 3 19:43:01 UTC 2013 root@snap.freebsd.org:/usr/obj/usr/src/sys/GENERIC amd64 $ which svnlite /usr/bin/svnlite ミラーサイトを選ぶ 以下のページでミラーサイトを選ぶ。\nhttp://www.freebsd.org/doc/ja/books/handbook/svn-mirrors.html\n日本からならsvn0.us-west.FreeBSD.orgでしょうなあ。\nこのとき、SSLフィンガープリントも見ておくこと。\n2013/11/12現在、us-westミラーのフィンガープリントは以下の通り\nSHASHA1 1C:BD:85:95:11:9F:EB:75:A5:4B:C8:A3:FE:08:E4:02:73:06:1E:61 初回チェックアウト /usr/portsの中身が何もないことを確認してからsvnlite checkout。\nSSLフィンガープリントが表示されて、これでよいか訊かれる。\nhandbookの値と同じなので大丈夫ですな。\n$ sudo svnlite checkout https://svn0.us-west.FreeBSD.org/ports/head /usr/ports Password: Error validating server certificate for \u0026#39;https://svn0.us-west.freebsd.org:443\u0026#39;:  - The certificate is not issued by a trusted authority. Use the  fingerprint to validate the certificate manually!  - The certificate hostname does not match. Certificate information:  - Hostname: svnmir.ysv.FreeBSD.org  - Valid: from Jul 29 22:01:21 2013 GMT until Dec 13 22:01:21 2040 GMT  - Issuer: clusteradm, FreeBSD.org, (null), CA, US (clusteradm@FreeBSD.org)  - Fingerprint: 1C:BD:85:95:11:9F:EB:75:A5:4B:C8:A3:FE:08:E4:02:73:06:1E:61 (R)eject, accept (t)emporarily or accept (p)ermanently? p \u0026lt;snip\u0026gt; A /usr/ports/net-p2p/eiskaltdcpp-daemon/Makefile A /usr/ports/net-p2p/tribler/pkg-plist A /usr/ports/net-p2p/eiskaltdcpp-daemon/files/patch-nasdc__CMakeLists.txt  U /usr/ports Checked out revision 333566. 二回目以降のcheckout svnlite update /usr/portsとすればよい。\n$ sudo svnlite update /usr/ports Updating \u0026#39;/usr/ports\u0026#39;: \u0026lt;snip\u0026gt; U /usr/ports/UPDATING Updated to revision 333571. リビジョンが上がってますな。\nportsの個別checkout portsの個別checkoutができる。\nつまり、/usr/ports全部をアップデートするのではなくて、特定のportsだけ更新する。\n$ sudo svnlite update /usr/ports/math/sage Updating \u0026#39;/usr/ports/math/sage\u0026#39;: At revision 333571. 以上\n","permalink":"https://nobwak.github.io/posts/2013-11-23-freebsd%E3%83%A1%E3%83%A2_svnlite%E3%81%A7_usr_ports%E3%81%AE%E7%AE%A1%E7%90%86/","summary":"/usr/portsをportsnapではなく、svnliteで管理してみた。 一般ユーザとしては、portsnapの管理が望ましいのだが、s","title":"[FreeBSD][メモ] svnliteで/usr/portsの管理"},{"content":"久しぶりにFreeBSDにGNOME2をインストールしたのでメモ。\n前回のまとめはこちら。\nFreeBSD 10.0-BETA3, pkgngでGnome2まで設定。\n入れたマシンはDELL Vostro 1500。GPUはNvdia 8600M GTである。\nbash, sudoくらいは入っている。\nXorgのインストール pkg installにxorgを指定するだけ。\n$ sudo pkg install xorg Updating repository catalogue The following 182 packages will be installed: \u0026lt;snip\u0026gt; Installing xorg: 7.7 The installation will require 156 MB more space 49 MB to be downloaded Proceed with installing packages [y/N]: y xwud-1.0.4.txz 100% 14KB 14.3KB/s 14.3KB/s 00:00 \u0026lt;snip\u0026gt; hald, dbusを、rc.confに設定してから起動。\n以下の例で使っているsysrcについてはこちら。\n$ sudo sysrc hald_enable=\u0026#34;YES\u0026#34; hald_enable: -\u0026gt; YES $ sudo sysrc dbus_enable=\u0026#34;YES\u0026#34; dbus_enable: -\u0026gt; YES 起動\n$ sudo service hald start Starting hald. $ sudo service dbus start Starting dbus. Xorgの設定の前に、nvidiaのドライバをインストール pkg searchでnvidia driverを確認。\n319と304がある。\n$ pkg search nvidia nvidia-driver-319.32 nvidia-driver-304-304.88_1 nvidia-settings-310.14 nvidia-texture-tools-2.0.8.1_3 nvidia-xconfig-310.14 ここでドライバのバージョンを確認して319と304のどちらかを選ぶ。\n8600M GT,FreeBSD x64だと319。\ndriverのほかにsetting, xconfigもセットでインストールする。\nなお、ドライバはカーネルモジュールとして提供される。\nインストール後にロードすることを忘れずに。\n$ sudo pkg install nvidia-driver-319.32 nvidia-settings-310.14 nvidia-xconfig-310.14 Updating repository catalogue The following 21 packages will be installed: Installing linux_base-f10: 10_7 \u0026lt;snip\u0026gt; Installing nvidia-settings: 310.14 The installation will require 381 MB more space 62 MB to be downloaded Proceed with installing packages [y/N]: y \u0026lt;snip\u0026gt; kldloadでドライバをロード、kldstatで確認。\n$ sudo kldload nvidia $ kldstat Id Refs Address Size Name 1 19 0xffffffff80200000 15ef860 kernel 2 1 0xffffffff817f0000 23ab28 zfs.ko 3 2 0xffffffff81a2b000 6630 opensolaris.ko 4 1 0xffffffff81c12000 860970 nvidia.ko 5 1 0xffffffff82473000 43274 linux.ko もちろん、ドライバがシステムブート時に読み込まれるよう、/boot/loader.confに書き込んでおく。\n/boot/loader.conf nvidia_load=\u0026#34;YES\u0026#34; Xorgの設定。 rootでXorg -configure。\n# Xorg -configure 同じディレクトリにxorg.conf.newというファイルが出来るはず。\nデフォルトだとNvidiaのドライバにnvが選ばれてしまうので、nvidiaに書き換える。\n以下の部分。\nIdentifier \u0026#34;Card0\u0026#34; Driver \u0026#34;nv\u0026#34; BoardName \u0026#34;G86M [GeForce 8400M GS]\u0026#34; 以下のように。\nIdentifier \u0026#34;Card0\u0026#34; Driver \u0026#34;nvidia\u0026#34; BoardName \u0026#34;8600M GT\u0026#34; 以下のようにしてテスト。\n# Xorg -config xorg.conf.new -retro 細かい市松模様にXのマウスカーソルが出ていれば成功。\nCtrl+Alt+F1を押し、Ctrl+Cで戻る。\nこのときコンソールに(EE)が出ていないかチェック。\n(EE)が出ているとすると、haldやdbusが立ち上がってないとか、かな。\nxorg.conf.newを/usr/local/etc/X11/xorg.confにコピー。\n# cp xorg.conf.new /usr/local/etc/X11/xorg.conf ではGNOME。\nGNOME installでgnome2を指定するだけ。\n$ sudo pkg install gnome2 Updating repository catalogue The following 385 packages will be installed: Installing xcb-util-renderutil: 0.3.8 \u0026lt;snip\u0026gt; Installing gnome2: 2.32.1_5 The installation will require 2 GB more space 368 MB to be downloaded Proceed with installing packages [y/N]: y \u0026lt;snip\u0026gt; [384/385] Installing gnome-applets-2.32.1.1_4... done [385/385] Installing gnome2-2.32.1_5... done フォント、インプットメソッドのインストール ja-uim-anthy, uim-gnomeを。\n$ sudo pkg install ja-uim-anthy uim-gnome フォントは、ja-fontで検索して好きなものを。\n$ pkg search ja-font ja-font-ipa-00303_1 ja-font-ipa-uigothic-00203 ja-font-ipaex-00201_2 ja-font-jisx0213-20040425_3 ja-font-kochi-20030809_2 ja-font-migmix-1.0.20130617 ja-font-migu-1.0.20130617 ja-font-mona-ipa-1.0.8_2 ja-font-motoya-al-0.0.20100921_1 ja-font-mplus-2.2.4.055_2 ja-font-mplus-ipa-1.0.20060520.p1_2 ja-font-sazanami-20040629_2 ja-font-shinonome-0.9.11.p1 ja-font-std-0.0.20130501 ja-font-takao-003.02.01_1 ja-font-ume-0.0.456 ja-font-vlgothic-20130607 以下を選んだ。\n$ sudo pkg install ja-font-ipa ja-font-migu ja-font-motoya-al ja-font- mplus ja-font-vlgothic ja-font-takao インストールは以上。\nGNOME2向けにいくつかファイルを修正 ほとんどは一行追加。\n/boot/loader.conf\nkern.maxfiles=\u0026#34;25000\u0026#34; /etc/fstab\nproc /proc procfs rw 0 0 /etc/sysctl.conf\nvfs.usermount=1 /etc/devfs.conf\nperm devstat 0444 /usr/local/etc/PolicyKit/PolicyKit.confは以下のように修正。\n\u0026lt;config version=\u0026#34;0.1\u0026#34;\u0026gt; \u0026lt;match action=\u0026#34;org.freedesktop.hal.storage.mount-removable\u0026#34;\u0026gt; \u0026lt;return result=\u0026#34;yes\u0026#34;/\u0026gt; \u0026lt;/match\u0026gt; \u0026lt;match action=\u0026#34;org.freedesktop.hal.storage.mount-fixed\u0026#34;\u0026gt; \u0026lt;return result=\u0026#34;yes\u0026#34;/\u0026gt; \u0026lt;/match\u0026gt; \u0026lt;match user=\u0026#34;root\u0026#34;\u0026gt; \u0026lt;return result=\u0026#34;yes\u0026#34;/\u0026gt; \u0026lt;/match\u0026gt; \u0026lt;define_admin_auth group=\u0026#34;wheel\u0026#34;/\u0026gt; \u0026lt;/config\u0026gt; 以上で一通り終わり。\nGNOME起動の設定 gnome_enable, gdm_enableを/etc/rc.confに追加\n$ sudo sysrc gnome_enable=\u0026#34;YES\u0026#34; gnome_enable: -\u0026gt; YES $ sudo sysrc gdm_enable=\u0026#34;YES\u0026#34; gdm_enable: -\u0026gt; YES gdmが嫌なら、gdm_enableはNOにしておいて、以下を設定。\nこの場合はログインしてstartxで起動。\n$ echo \u0026#39;/usr/local/bin/gnome-session\u0026#39; \u0026gt; ~/.xinitrc $ echo \u0026#39;#!/bin/sh\u0026#39; \u0026gt; ~/.xsession $ echo \u0026#39;/usr/local/bin/gnome-session\u0026#39; \u0026gt;\u0026gt; ~/.xsession $ chmod +x ~/.xsession 文字コード設定 bashの場合。\n$ echo \u0026#39;LANG=\u0026#34;ja_JP.UTF-8\u0026#34;; export LANG\u0026#39; \u0026gt;\u0026gt; ~/.profile 以上。\nあとは再起動で。\n","permalink":"https://nobwak.github.io/posts/2013-11-19-gnome2%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB_freebsd_10.0-beta3/","summary":"久しぶりにFreeBSDにGNOME2をインストールしたのでメモ。 前回のまとめはこちら。 FreeBSD 10.0-BETA3, pkgngでGnome2まで設定。 入れたマシンは","title":"Gnome2インストール FreeBSD 10.0-BETA3"},{"content":"たとえばApacheをインストールして、マシン起動時にApacheも起動してくれるよう、rc.confに「apache22_enable=\u0026ldquo;YES\u0026rdquo;」とタイプしているとき、たまに情けなくなったりしませんかね。\nシンプルなのはいいけど、なんかこう、もうちょっとスマートにできないかとか。\n（こわごわ言うけど、Linuxだったらchkconfig httpd onとかで済むよね。）\n9.2-RELEASEから入ったsysrcというユーティリティがある。\nrc.confの変更を少しだけ助けてくれるものだ。\nserviceコマンドと併せて使えば、rc.conf周りの設定は少しだけ楽になる。\n以下に使用例を示す。\nrc.conf設定の表示 まずはrc.confで設定している変数を、sysrcに続けてタイプしてみる。\n$ sysrc hostname hostname: ascomoid $ sysrc ifconfig_em0 ifconfig_em0: DHCP というように、現状の値を教えてくれる。\nsysrc -aでrc.confの設定を一覧できる。\n$ sysrc -a dumpdev: NO hostname: ascomoid ifconfig_em0: DHCP keymap: jp.106.kbd sshd_enable: YES お気づきの通り、sysrc -aで表示されるのは、デフォルト設定から変更したものだけである。\nデフォルト設定も含めて全部表示するには-Aを与える。\n$ sysrc -A accept_sourceroute: NO accounting_enable: NO allscreens_flags: allscreens_kbdflags: （中略） wpa_supplicant_program: /usr/sbin/wpa_supplicant zfs_enable: NO $ 設定書き換え sysrcに変数設定を与えると、rc.confを書き換えてくれる。\n例えばsysrc sshd_enable=\u0026ldquo;NO\u0026quot;というようにすると、/etc/rc.confの該当行が書き換わる。\n$ sysrc sshd_enable sshd_enable: YES $ grep sshd_enable /etc/rc.conf sshd_enable=\u0026#34;YES\u0026#34; $ sysrc sshd_enable sshd_enable: YES $ sudo sysrc sshd_enable=\u0026#34;NO\u0026#34; sshd_enable: YES -\u0026gt; NO $ grep sshd_enable /etc/rc.conf sshd_enable=\u0026#34;NO\u0026#34; $ sysrc sshd_enable sshd_enable: NO $ /etc/rc.confになく、/etc/defaults/rc.confにあるものでもOK。\nzfs_enableを指定すると新しく/etc/rc.confに行が追加される。\n$ sysrc zfs_enable zfs_enable: NO $ grep zfs_enable /etc/rc.conf $ $ sudo sysrc zfs_enable=\u0026#34;YES\u0026#34; zfs_enable: NO -\u0026gt; YES $ sysrc zfs_enable zfs_enable: YES $ grep zfs_enable /etc/rc.conf zfs_enable=\u0026#34;YES\u0026#34; 設定書き換え（rc.confからの削除） zfs_enableをNOに戻すが、/etc/rc.confに記載が残ってしまった。\n$ sudo sysrc zfs_enable=\u0026#34;NO\u0026#34; zfs_enable: YES -\u0026gt; NO $ grep zfs_enable /etc/rc.conf zfs_enable=\u0026#34;NO\u0026#34; $ このままでも、とうぜん害はないが、-xで指定すれば削除できる。\n$ sudo sysrc -x zfs_enable $ grep zfs_enable /etc/rc.conf $ $ sysrc zfs_enable zfs_enable: NO 設定書き換え（新規ソフトウェア） では/etc/rc.conf, /etc/defaults/rc.confの双方にない変数は？\nこれも追加できる。\n以下はlighttpdの場合。\n$ sysrc lighttpd_enable sysrc: unknown variable \u0026#39;lighttpd_enable\u0026#39; $  $ sudo sysrc lighttpd_enable=\u0026#34;YES\u0026#34; lighttpd_enable: -\u0026gt; YES $ sysrc lighttpd_enable lighttpd_enable: YES $ grep lighttpd /etc/rc.conf lighttpd_enable=\u0026#34;YES\u0026#34; $ もちろん削除も可能。\n$ sudo sysrc -x lighttpd_enable $ $ grep lighttpd /etc/rc.conf $ $ sysrc lighttpd_enable sysrc: unknown variable \u0026#39;lighttpd_enable\u0026#39; $ 以上\n","permalink":"https://nobwak.github.io/posts/2013-11-15-freebsdrc.conf%E3%81%AE%E5%A4%89%E6%9B%B4%E3%82%92%E5%B0%91%E3%81%97%E3%81%A0%E3%81%91%E5%8A%A9%E3%81%91%E3%81%A6%E3%81%8F%E3%82%8C%E3%82%8Bsysrc/","summary":"たとえばApacheをインストールして、マシン起動時にApacheも起動してくれるよう、rc.confに「apache22_enable=\u0026","title":"[FreeBSD]rc.confの変更を少しだけ助けてくれるsysrc"},{"content":"Lynisとは Linux向けのセキュリティ監査ツール。\nhttp://www.rootkit.nl/projects/lynis.html\nLinux向けではあるが、Linux以外でも使える。\nFreeBSD, Solarisに加えてなんとOS Xまで。\nこのツールを実行すると、OSだけでなく、そこにインストールされているソフトウェアのセキュリティチェックもしてくれる。\nLynisのいいところ Lynisのポイントは、問題のある設定、状態を指摘してくれるところにある。\n具体的には、期限切れになっているSSLや、パスワード設定のないユーザアカウントや、不適切なパーミッションとか、そういったものを指摘してくれる。\n指摘のしかたも、「Warnings」で危険性を挙げることのほかに、「Suggestions」で推奨対応方法も教えてくれる。\nたとえばこれが「インストールされているソフトウェアに脆弱性があるよ」というレベルであれば大したことない。\nFreeBSDの場合、portauditとかpkg auditで十分。\nしかしLynisは、上述の通りソフトウェアやOSの設定にまで踏み込んでチェックしてくれるんである。\nなじみのないソフトウェアをインストールするとき、初めてのOSをセットアップするときはもちろん、普段から使っているOS、ソフトウェアに対しても、「あ、これ危なかったんだ」と気づきを与えてくれる。\nこれはありがたい。\nさっそく試してみる。\nインストール 適当にどうぞ。\nFreeBSDならportsにもpkgにもあるよ。\nLinuxならapt-getでもyumでもどうぞ。\n使いかた まず最初に、lynisの実行にはroot権限が必要。\n使い方はlynis -helpでズラズラと出てくる。\n# lynis --help ------------------------------------  Scan options:  --auditor \u0026#34;\u0026lt;name\u0026gt;\u0026#34; : Auditor name  --check-all (-c) : Check system  --no-log : Don\u0026#39;t create a log file  --profile \u0026lt;profile\u0026gt; : Scan the system with the given profile file  --quick (-Q) : Quick mode, don\u0026#39;t wait for user input  --tests \u0026#34;\u0026lt;tests\u0026gt;\u0026#34; : Run only tests defined by \u0026lt;tests\u0026gt;  --tests-category \u0026#34;\u0026lt;category\u0026gt;\u0026#34; : Run only tests defined by \u0026lt;category\u0026gt;  Layout options:  --no-colors : Don\u0026#39;t use colors in output  --quiet (-q) : No output, except warnings  --reverse-colors : Optimize color display for light backgrounds  Misc options:  --check-update : Check for updates  --view-manpage (--man) : View man page  --version (-V) : Display version number and quit  See man page and documentation for all available options. Exiting.. フルチェック -cオプションを与えて実行すればよい、。\n# lynis -c [ Lynis 1.3.0 ] （略） [+] Initializing program ------------------------------------  - Detecting OS... [ DONE ]  - Clearing log file (/var/log/lynis.log)... [ DONE ]  ---------------------------------------------------  Program version: 1.3.0  Operating system: FreeBSD  Operating system name: FreeBSD  Operating system version: 10.0-BETA1  Kernel version: GENERIC  Hardware platform: amd64  Hostname: cal01  Auditor: [Unknown]  Profile: /usr/local/etc/lynis/default.prf  Log file: /var/log/lynis.log  Report file: /var/log/lynis-report.dat  Report version: 1.0  --------------------------------------------------- [ Press [ENTER] to continue, or [CTRL]+C to stop ] まず基本的な情報が表示される。\nチェック対象ホストの情報と、profile、ログとレポートの場所である。\nprofileとは、いわばチェック方法の設定のようなもの。指定なしだとdefault.prfが選択される。\nlynis.logにはlynisの動作ログが、lynis-report.datにはチェック結果が書き込まれる。\nENTERキーで先に進む。\n- Checking profile file (/usr/local/etc/lynis/default.prf)...  - Program update status... [ UNKNOWN ] [+] System Tools ------------------------------------  - Scanning available tools...  - Checking system binaries...  - Checking /bin... [ FOUND ]  - Checking /sbin... [ FOUND ]  - Checking /usr/bin... [ FOUND ]  - Checking /usr/sbin... [ FOUND ]  - Checking /usr/local/bin... [ FOUND ]  - Checking /usr/local/sbin... [ FOUND ]  - Checking /usr/local/libexec... [ FOUND ]  - Checking /usr/libexec... [ FOUND ]  - Checking /usr/sfw/bin... [ NOT FOUND ]  - Checking /usr/sfw/sbin... [ NOT FOUND ]  - Checking /usr/sfw/libexec... [ NOT FOUND ]  - Checking /opt/sfw/bin... [ NOT FOUND ]  - Checking /opt/sfw/sbin... [ NOT FOUND ]  - Checking /opt/sfw/libexec... [ NOT FOUND ]  - Checking /usr/xpg4/bin... [ NOT FOUND ]  - Checking /usr/css/bin... [ NOT FOUND ]  - Checking /usr/ucb... [ NOT FOUND ] [ Press [ENTER] to continue, or [CTRL]+C to stop ] とまあこんな感じで、1ステップごとにキー入力を求められる。\nウンザリしてきたなら一度Ctrl+Cで止めて、-Qオプションで実行すればユーザ入力を待たずに一気にやってくれる。\n# lynis -Q [ Lynis 1.3.0 ] （中略） [+] Initializing program ------------------------------------  - Detecting OS... [ DONE ]  - Clearing log file (/var/log/lynis.log)... [ DONE ] （後略） サマリのみかた システム強度\n実行結果の一番最後の部分は下記のようになる。\n================================================================================  Files:  - Test and debug information : /var/log/lynis.log  - Report data : /var/log/lynis-report.dat ================================================================================  Hardening index : [28] [##### ] ================================================================================ lynisの動作に関わるログが/var/log/lynis.logに、レポート結果が/var/log/lynis-report.datに書き込まれているよ、と。\nHardening indexとは、監査対象ホストのセキュリティ強度を示す。\n上記の例だと28。28がどんなもんかは公式のドキュメントを見てもよく分からない。\n別マシンでやったら33だった。\nWarning/Suggestions\n上記のさらに上にはWarningsとSuggestionsが表示される。\n-[ Lynis 1.3.0 Results ]-  Tests performed: 120  Warnings:  ----------------------------  - [13:33:50] Warning: Multiple users with UID 0 found in passwd file [test:AUTH-9204] [impact:H] （中略）  Suggestions:  ----------------------------  - [13:33:50] Suggestion: Use vipw to delete the \u0026#39;toor\u0026#39; user if not used. [test:AUTH-9204]  - [13:33:50] Suggestion: Default umask in /etc/profile could be more strict like 027 [test:AUTH-9328] （略） Warningsから以下の一行を見てみよう。\n[13:33:50] Warning: Multiple users with UID 0 found in passwd file [test:AUTH-9204] [impact:H] 「UID 0(要するにスーパーユーザ)権限を持つユーザが複数いる」との指摘である。\nFreeBSDをお使いの方ならお分かりだろうが、これは\u0026ldquo;toor\u0026quot;ユーザのことである。\nLynisの監査項目にはすべてIDが与えられており、[test:AUTH-9204]のAUTH-9204がそれ。\n[impact:H]で、impactがHigh、つまり危ないぞと教えてくれている。\nSuggestionsでは、同じ[test:AUTH-9204]に対して、\u0026ldquo;toor\u0026quot;ユーザを使ってないならvipwで消してしまえと提案がある。\nSuggestion: Use vipw to delete the \u0026#39;toor\u0026#39; user if not used. [test:AUTH-9204] なおSuggestionはWarningと必ずペア、というわけではない。\n危険とまでは言わないけれども、やった方がよい対策も提案してくれる。\n以下の例だと、/etc/profileのumaskをもっと厳しくしたら？との提案。\nSuggestion: Default umask in /etc/profile could be more strict like 027 [test:AUTH-9328] 対策と再チェック lynisの結果を受けて、何らかの対策をしたら再チェックをする。\n充分なセキュリティを確保できたと判断できるまで、この繰り返しである。\nしかしその都度、あんなに長い結果を見せられるのは苦痛だろう。\nそういう場合には、-qオプションを与えればWarningだけを表示してくれる。\n# lynis -q  - Search administrator accounts... [ WARNING ]  - Checking UIDs... [ WARNING ]  - Checking login shells... [ WARNING ]  - Checking console TTYs... [ WARNING ]  - Querying UFS mount points (fstab)... [ WARNING ]  - Checking for a running NTP daemon or client... [ WARNING ] このあと、vipwでユーザtoorの行をコメントアウトし、もう一回実行すると、変化が現れる。\nadministrator accountsとUIDsのWarningが無くなっているのである。\n# lynis -q  - Checking login shells... [ WARNING ]  - Checking console TTYs... [ WARNING ]  - Querying UFS mount points (fstab)... [ WARNING ]  - Checking for a running NTP daemon or client... [ WARNING ] また、-qにしてもレポートはしっかり記録されるので、grepを使いながら対策をしていけばいい。\nまずレポートからWarningを探す。\n# grep warn /var/log/lynis-report.dat warning[]=SHLL-6202|M|Found unprotected console in /etc/ttys| warning[]=FILE-6329|L|No single UFS mount point found| suggestion[]=BANN-7122|Add legal banner to /etc/motd, to warn unauthorized users| warning[]=TIME-3104|M|No running NTP daemon or available client found| 監査項目SHLL-6202に注目し、今度はこのIDでgrep。\n# grep SHLL-6202 /var/log/lynis-report.dat warning[]=SHLL-6202|M|Found unprotected console in /etc/ttys| suggestion[]=SHLL-6202|Change the console line from \u0026#39;secure\u0026#39; to \u0026#39;insecure\u0026#39;.| 言われたとおりに/etc/ttysの設定を変えてまたlynis -qで確認。\nというように繰り返す。\nなお、以下のようにしてSHLL-6202だけ確認することも出来るが、出力が長いままなのであまり勧めない。\n# lynis --tests \u0026#34;SHLL-6202\u0026#34; -Q 指摘されてもどうしようもない項目の対処について\n例えば以下のWarning。\nwarning[]=FILE-6329|L|No single UFS mount point found| UFSマウントポイントが一つもないとの仰せであるが、監査対象マシンのファイルシステムは、実際のところすべてZFSであってUFSは一つもない。\nなので、これは筋違い。\nこういう場合は、監査項目を無効にする。\n具体的には、監視対象マシン向けに専用のプロファイルを作って対応する。\nProfileの設定。 FreeBSDだと、profileは以下の場所にある。\n/usr/local/etc/lynis\nデフォルトの状態では、default.prfというprofileがインストールされるはず。\nこれをたとえばthisHost.prfとしてコピーし、修正する。\n# cd /usr/local/etc/lynis # cp default.prf thisHost.prf ここに以下の一行を加えればよい。\nconfig:test_skip_always:FILE-6329: 文字通り、監査項目FILE-6329をスキップする、という指定。\nもし複数の監査項目をスキップしたい場合には、スペースで区切って書く。\nあとはlynis実行時に、作成したprofileを-profileに続けて指定すればよい。\n# lynis -q --profile copper.prf - Checking login shells... [ WARNING ] - Checking for a running NTP daemon or client... [ WARNING ] Querying UFS mount points (fstab)という出力が消えている。\nレポートの中身を見ても、以下のようにきれいさっぱり。\n# grep FILE-6329 /var/log/lynis-report.dat # # grep warn /var/log/lynis-report.dat suggestion[]=BANN-7122|Add legal banner to /etc/motd, to warn unauthorized users| warning[]=TIME-3104|M|No running NTP daemon or available client found| cronに設定したいとき。 以上の手順を繰り返し、満足な結果が得られたら、あとはcronにlynisを登録し、定期的にチェックしてもらおう。\ncronからlynisを呼ぶときは-cronjobを付けるよろし。\n--cronjob Perform automatic scan with cron safe options (no colors, no questions, no breaks). 以上\n","permalink":"https://nobwak.github.io/posts/2013-11-11-%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E7%9B%A3%E6%9F%BB%E3%83%84%E3%83%BC%E3%83%ABlynis/","summary":"Lynisとは Linux向けのセキュリティ監査ツール。 http://www.rootkit.nl/projects/lynis.html Linux向けではあるが、Linux以外でも使える。 FreeBSD, Solarisに加えてなんとO","title":"セキュリティ監査ツールLynis"},{"content":"Windowsでファイルのdiffを取りたければ、けっこうな数の選択肢がある。\n実際のところ、私もDF.exeなどを使っている。\nただ改めて調べてみたところ、Windows向けにMicrosoft自らdiffツール作ってたらしい。\nその名もWindiff.exe。（Vectorあたりにあるツールと名前かぶってるような）\n使ってみたので顛末を示す。\nとはいえ。\n結論としては、Microsoft製に価値を見出さないならサードパーティのdiffツールの方がいいかな。\nWindiff.exeにはxp用と7用がある・・・ようだ。\nxp用Windiff.exe xp用Windiff.exeは、microsoft.comに以下の記載が。\nWindiff.exe ユーティリティの使用方法\nhttp://support.microsoft.com/kb/159214/ja\n Windiff.exe は、Microsoft Windows 2000 以降のオリジナルの CD-ROM の Support\\Tools フォルダーに収められています。サポート ツールをインストールするには、Support\\Tools フォルダーの Setup.exe を実行します。Windiff.exe は、Support.cab ファイルにも収められています。Support.cab は、各 Service Pack に含まれています。\n ただ、上記のページをWindows 7で開くと、「この技術情報は、お客様がご利用の Windows とは異なるバージョン向けの情報です」とのこと。\nWindows 7向けのWindiff.exe technetで以下を発見。2003用のものを流用すればよさそう。\nWindiff for Windows 7\nhttp://social.technet.microsoft.com/Forums/exchange/en-US/0d51abcd-3b76-495b-84a4-45e188f6d9f6/windiff-for-windows-7\nWindows 7（32bit）でのインストールのしかた ※おそらくMicrosoftは公式には認めない方法です。\n自己責任でどうぞ。\nさっそく以下のページからWindowsServer2003-KB892777-SupportTools-x86-ENU.exe をダウンロード。\nWindows Server 2003 Service Pack 1 32-bit Support Tools\nhttp://www.microsoft.com/en-us/download/details.aspx?id=7911\nコマンドラインから実行する。\nオプションを二つ指定する。\n/Cで「展開のみインストールせず」、 /Tで展開先をフルパスで指定する。\nC:\\download\u0026gt;WindowsServer2003-KB892777-SupportTools-x86-ENU.exe /C /T:c:\\download\\supporttool 以上の例だとc:\\download\\supporttoolに内容物が展開される。\nそのうちのsupport.cabをダブルクリックすると、中にwindiff.exeがあるのでそれを取り出す。\nあとはパスの通ったところに置くとか、ランチャーに登録すればよい。\n初期設定 そのままだと日本語を表示できないので、Edit → Set Font でフォントを変える。\nメイリオとかにしとけ。\n使い方 個別ファイルの差分を調べる場合には、File → Compare Files でファイルを二つ選んでOKをクリック。\nディレクトリごと差分を調べる場合には、File → Compare Directoriesで出てきた画面に二つのディレクトリパスを貼りつけてOKをクリックする。\n調べたファイルが一覧で表示される。\n差分のあるファイルが赤く表示されるので、選択してExpandでファイルの中身を見られる。\nOutlineでファイル一覧に戻る。\nF7, F8で差分のある個所を順番に選んで行ける。\nPictureは左端に差分箇所を表してくれる。\n制限 シフトJISのファイルは読めるけど、UTF-8の日本語は読めないようだ。\n感想 使ってみたら分かるけど、ちょっと使いにくいかな…。\n","permalink":"https://nobwak.github.io/posts/2013-11-09-microsoft%E3%82%82windiff.exe%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%9F%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"Windowsでファイルのdiffを取りたければ、けっこうな数の選択肢がある。 実際のところ、私もDF.exeなどを使っている。 ただ改めて調べ","title":"MicrosoftもWindiff.exeを作ってた件について"},{"content":"pkgngの公式サイトがやっと復活した。\nhttp://lists.freebsd.org/pipermail/freebsd-current/2013-October/046055.html\nしたのだが、proxy越しだと動かない事があって、俺含む一部のユーザはとてもガッカリしている。\n原因ははっきりしていて、DNS上、SRVレコードを使っているからだ。\nSRVレコードにしたのはしかし理由があってのものなので、単にAレコードに追加すればよいという話でもない。\n公式MLでもえらく議論が続いているが、SRVレコードを使うというのは変わりそうにないようだ(2013/11/3現在）。\n（2013/12/19追記）\npkg-1.2.3で問題が解消された。\n（2013/12/19追記ここまで）\nというわけで、公式に沿ったpkgサイトの設定のしかたと、proxy越し等で公式pkgサイトのアドレス解決が出来ない場合の回避方法を示す。\n公式の設定方法 1. Ensure your pkg(8) is up-to-date. \u0026#39;pkg -v\u0026#39; should say at least  1.1.4_8. If it does not, first upgrade from ports. 2. Remove any repository-specific configuration from  /usr/local/etc/pkg.conf, such as PACKAGESITE, MIRROR_TYPE, PUBKEY.  If this leaves your pkg.conf empty, just remove it. 3. mkdir -p /usr/local/etc/pkg/repos 4. Create the file /usr/local/etc/pkg/repos/FreeBSD.conf with: FreeBSD: {  url: \u0026#34;http://pkg.FreeBSD.org/${ABI}/latest\u0026#34;,  mirror_type: \u0026#34;srv\u0026#34;,  enabled: \u0026#34;yes\u0026#34; } 事前準備 pkg-1.1.4_8にする。\nインストール済みの場合、公式などはpkg -vで確認しろというが、pkg -vで表示されるのは以下の通りで1.1.4_8かどうかはわからない。\n$ pkg -v 1.1.4 なので、pkg infoで調べよう。\n$ pkg info|grep pkg pkg-1.1.4_8 New generation package manager インストールしていなければ以下のように。\n※freebsd:10:x86:64はOSに合わせて変更する。\n# sh # PACKAGESITE=\u0026#34;http://pkg1.nyi.freebsd.org/freebsd:10:x86:64/latest/Latest/\u0026#34; pkg install pkg # pkg info|grep pkg 何らかの理由でpkgが死んでてpkgそのものが使えない場合。\npkg.txzをダウンロードして、手動で展開する。\nルート（/）にゴミが残るから後で掃除しとけ。\n# fetch http://pkg1.nyi.freebsd.org/freebsd%3A10%3Ax86%3A64/latest/Latest/pkg.txz # tar -C / -xvzf ./pkg.txz # pkg info | grep pkg # ls / +COMPACT_MANIFEST etc root +MANIFEST home sbin +MTREE_DIRS lib sys 設定ファイルの書き換え /usr/local/etc/pkg.confは捨てて/usr/local/etc/pkg/reposの下に設定ファイルを入れることになる。\n/usr/local/etc/pkg.confは捨てるかリネームする。\nディレクトリ/usr/local/etc/pkg/reposを作る。\nそこにFreeBSD.confというファイルを作る。\nただ末尾が.confであれば名前はなんでもよい。\n# sudo mv /usr/local/etc/pkg.conf /usr/local/etc/pkg.conf.obsolete # mkdir -p /usr/local/etc/pkg/repos # vi /usr/local/etc/pkg/repos/FreeBSD.conf 以下がファイル例。\nコメント部分は、まあお好きに。\n# # FreeBSD official pkg site # # See: # http://lists.freebsd.org/pipermail/freebsd-current/2013-October/046055.html # http://lists.freebsd.org/pipermail/freebsd-current/2013-November/046122.html # # ATTENTION! # pkg.freebsd.org is on SRV record, not on A record! # # $Id: FreeBSD.conf,v 1.1 2013/11/05 01:42:42 root Exp $ # FreeBSD: {  url: \u0026#34;http://pkg.FreeBSD.org/${ABI}/latest\u0026#34;,  mirror_type: \u0026#34;srv\u0026#34;,  enabled: \u0026#34;yes\u0026#34; } 準備完了\n実行 問題なければ、pkg update, pkg upgradeでファイルを取得できるはず。\n下記の通りであれば、毎週末～月曜くらいにpkg repositoryが更新されるようだ。\n （水曜01:00(UTC)にportsのスナップショットから\u0026quot;a few days\u0026quot;かけてパッケージ作成）\nPackages are built weekly from a snapshot of the Ports Collection every\nWednesday morning 01:00 UTC. They typically will be available in the\nrepository after a few days.\n \u0026ldquo;Service Unavailable\u0026rdquo; さて。\n以下のようになったら、あなたのproxyサーバかDNSはSRVレコードに対応していないということ。\n$ sudo pkg update Updating repository catalogue pkg: http://pkg.FreeBSD.org/freebsd:10:x86:64/latest/digests.txz: Service Unavailable pkg: No digest falling back on legacy catalog format pkg: http://pkg.FreeBSD.org/freebsd:10:x86:64/latest/repo.txz: Service Unavailable 対策（mirrorサイトを直接指定） 対策っても大したことはなくて、mirrorサイトを直接指定するだけ。\nこれで問題なく動くが、もちろん制限はある。\nmirrorサイトがダウンしたときには、手動で接続先を変える必要がある。\n今のところmirrorサイトは米国東西海岸、欧にしかない。\nゆくゆくは日本にもmirrorサーバが立つといいな。\nさて手順。\n以下に沿う。\nただ間違いがあって、そのままコピペすると失敗するので注意。\nhttp://lists.freebsd.org/pipermail/freebsd-current/2013-November/046122.html\n流れとしては、最初に作ったFreeBSD.confを無効にし、mirrorサイトを直接指定する設定ファイルを作る。\n/usr/local/etc/pkg/repos/FreeBSD.confをリネームする。\n（消してもいいけど、将来使うかもしれないし。）\n# cd /usr/local/etc/pkg/repos # mv FreeBSD.conf FreeBSD.conf.old 以下からmirrorサイトを選ぶ。\n日本からだったらUS Westですかね。\npkg0.isc.freebsd.org (US West)  pkg1.nyi.freebsd.org (US East)  pkg0.bme.freebsd.org (Europe) 設定ファイルを作る。\n例によって名前はなんでもよい。末尾が.confであれば。\n# cd /usr/local/etc/pkg/repos # vi us-west.conf ファイルの例。\nコメントはまあ適当に。\n# # freebsd pkg mirror server located on us-west # # $Id: us-west.conf,v 1.1 2013/11/05 00:27:05 root Exp root $ # # Since official pkg server is on SRV record, which is not # recognized by some of proxy servers, directly point a mirror # server. # # In case of this mirror server being down, we need to point # another mirror server from the following: # # pkg0.isc.freebsd.org (US West) # pkg1.nyi.freebsd.org (US East) # pkg0.bme.freebsd.org (Europe) # # See: # http://lists.freebsd.org/pipermail/freebsd-current/2013-November/046122.html # # /usr/local/etc/pkg/repos/ # us-west: {  url: \u0026#34;http://pkg0.isc.freebsd.org/${ABI}/latest\u0026#34;,  enabled: \u0026#34;yes\u0026#34;,  mirror_type: \u0026#34;none\u0026#34;, } あとはpkg update, pkg upgradeでよいでしょう。\n","permalink":"https://nobwak.github.io/posts/2013-11-06-pkgng%E3%81%8C%E5%BE%A9%E6%B4%BB%E3%81%97%E3%81%9F%E3%81%A8%E8%A8%80%E3%81%A3%E3%81%9F%E3%81%AAproxy%E8%B6%8A%E3%81%97%E3%81%AE%E5%A5%B4%E3%81%AB%E3%81%A8%E3%81%A3%E3%81%A6%E3%81%82%E3%82%8C%E3%81%AF%E5%98%98%E3%81%A0srv%E3%83%AC%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E7%BD%A0/","summary":"pkgngの公式サイトがやっと復活した。 http://lists.freebsd.org/pipermail/freebsd-current/2013-October/046055.html したのだが、proxy越しだと動かない事があって、俺含む一部のユーザはとてもガッカリしている。 原因","title":"pkgngが復活したと言ったな。（proxy越しの奴にとって）あれは嘘だ。(SRVレコードの罠）"},{"content":"結論 vim -pで複数ファイルをタブ表示できる。\n.profileにaliasを書いとけ。\n以上。\n-pオプション vimのmanを眺めていたらこんな記載が。\n-p[N] Open N tab pages. When N is omitted, open one tab page for  each file. なんですと。\nさっそく試そう！\nvim -p に続けて複数ファイルを指定 こんな感じ。\nもちろん*.confなんて指定のしかたもできるよ。\n# vim -p freebsd-update.conf inetd.conf rc.conf make.conf portsnap.conf すると開くファイルをズラッと表示してくれる。\nしかもreadonlyのファイルがあればそれもご丁寧に。\n\u0026#34;freebsd-update.conf\u0026#34; 76 lines, 2906 characters \u0026#34;inetd.conf\u0026#34; 118 lines, 5025 characters \u0026#34;rc.conf\u0026#34; [readonly] 31 lines, 662 characters \u0026#34;make.conf\u0026#34; [readonly] 4 lines, 127 characters \u0026#34;portsnap.conf\u0026#34; 35 lines, 1514 characters Press ENTER or type command to continue こんな感じ。\n一番上の行に指定したファイルが並んでいる。\n長いファイル名は表示できていないが。\n編集を終えて:qで抜けると次のファイルに移る。\n:qを使わなくとも\u0026quot;gt\u0026quot;, \u0026ldquo;gT\u0026quot;でファイルを映ることができる。\n\u0026ldquo;gt\u0026quot;で右へ、\u0026ldquo;gT\u0026quot;で左へ。\nalilasの設定 気に入ったらaliasを設定しておく。\nbashなら.profileに書き込んでおく。\nalias vim=\u0026#34;vim -p\u0026#34; ","permalink":"https://nobwak.github.io/posts/2013-11-04-vim%E3%81%A7%E3%81%BE%E3%81%95%E3%81%8B%E3%81%AE%E3%82%BF%E3%83%96%E8%A1%A8%E7%A4%BA/","summary":"結論 vim -pで複数ファイルをタブ表示できる。 .profileにaliasを書いとけ。 以上。 -pオプション vimのmanを眺めていたらこんな記載","title":"vimでまさかのタブ表示"},{"content":"FreeBSD 10.0は、ALPHAからBETA1まで怒涛のアップデートが続いたと思ったら、BETA2でいきなり足踏みがあった。\nこれは、freebsd-update(8)にバグがあったためで、結果として以下の問題があったようだ。\n①freebsd-updateでFreeBSD 10.0-BETA1へのアップグレードができない\n②FreeBSD 10.0-BETA1でfreebsd-updateを使えない。\nそれが2013/10/29（日本時間）に解決された。\n各OSバージョンでいったんfreebsd-updateし、最新の状態にしてから10.0-BETA2に更新すればよい。\n詳細は以下。\nMultiple freebsd-update bugs break upgrading to FreeBSD 10.0\n油断してるとpkgngが死ぬ もう一つ。\n今回のfreebsd-updateでは、freebsd-update installを3回求められた。\nあまり記憶がないのだが、前からこうだったかな..。\nただこの3回目のinstallが曲者である。\nメッセージ（後述）を見ると分かるが、古いライブラリを削除するもののようだ（make delete-old-libsのようなもの）。\nしたがって、ports, pkgでインストールしたソフトウェアは動かなくなる可能性がある。\n恐ろしいのは、pkgコマンド（pkgng）も対象であるということだ。\n告白すると、「面倒くせえ。そんなもん、後でゆっくりアップグレードするわい」と進めたら、pkgが死んでその他のソフトウェアもアップグレードできなくなって頭を抱えました。はい。\nさて以下に正しい手順を示す。\nアップグレード例（FreeBSD 10.0-BETA1からBETA2へ) ではまず現状の確認。\nupgradeすると失敗する。\n情報通りですな。\n# uname -a FreeBSD testsv 10.0-BETA1 FreeBSD 10.0-BETA1 #0 r256420: Sun Oct 13 01:43:07 UTC 2013 root@snap.freebsd.org:/usr/obj/usr/src/sys/GENERIC amd64 # freebsd-update upgrade -r 10.0-BETA2 Password: Looking up update.FreeBSD.org mirrors... none found. Fetching public key from update.FreeBSD.org... done. Fetching metadata signature for 10.0-BETA1 from update.FreeBSD.org... done. Fetching metadata index... done. Fetching 2 metadata files... done. The update metadata is correctly signed, but failed an integrity check. Cowardly refusing to proceed any further. # そこでupgradeではなく、いったんupdateするとfreebsd-updateが更新される。\n# freebsd-update fetch （略） The following files will be updated as part of updating to 10.0-BETA1-p1: /bin/freebsd-version /usr/sbin/freebsd-update /var/db/mergemaster.mtree WARNING: FreeBSD 10.0-BETA1 is approaching its End-of-Life date. It is strongly recommended that you upgrade to a newer release within the next 1 month. # freebsd-update install Installing updates... done. # フレッシュなfreebsd-updateで改めてアップグレード。\n今度は問題なし。\n# freebsd-update upgrade -r 10.0-BETA2 Looking up update.FreeBSD.org mirrors... none found. Fetching metadata signature for 10.0-BETA1 from update.FreeBSD.org... done. Fetching metadata index... done. Inspecting system... done. The following components of FreeBSD seem to be installed: kernel/generic src/src world/base world/games world/lib32 The following components of FreeBSD do not seem to be installed: world/doc Does this look reasonable (y/n)? （略） あとは指定されるままにinstall, reboot,もう一回installをすると以下のメッセージが。\n# freebsd-update install Password: Installing updates... Completing this upgrade requires removing old shared object files. Please rebuild all installed 3rd party software (e.g., programs installed from the ports tree) and then run \u0026#34;/usr/sbin/freebsd-update install\u0026#34; again to finish installing updates. ここで迂闊に3回目のfreebsd-updateをすると、先述の通り面倒なことになる。\npkgコマンドですべてのソフトウェアを強制再インストールする。\nman pkg-installしてもそれっぽいのが無かったので、以下のようにした。\n# pkg info|cut -f1 -d\u0026#34; \u0026#34;|xargs pkg install -fy Updating repository catalogue pkg: No packages matching \u0026#39;gettext-0.18.3.1\u0026#39; has been found in the repositories （略） [18/18] Reinstalling tmux-1.8_1... done #  （2013/11/18 追記)  pkg upgrade -fyですべてのpkgを再インストール可能 （2013/11/18 追記ここまで） freebsd-update installをもう一回して終了。\nfreebsd-updateの修正 以上、なのだが。\n今回のfreebsd-updateバグ回避方法にはもうひとつ、freebsd-updateそのものを更新する方法がある。\nその方法も試したので以下に示す。\n（正直に言うと、ERRATAの「Perform one of the following:」を読み飛ばし、freebsd-updateにパッチ当てるという余計な手間をかけた。悔しいので手順を示す）\nとはいえ、freebsd-updateの修正とOSアップデート手順は先述URLに丁寧に書かれている。\n英語ではあるけれども、鍛えられたFreeBSDソルジャーなら屁でもない。\nが、どこかに有用と感じてくれる人がいるかもしれない。\n以下は10.0-BETA1から10.0-BETA2にアップグレードした例。\n必要なものはsrc。\ngpgもあるといいけど、まあ要らない。\nsrcの展開 srcのある人はスキップしてよい。\nbsdconfigやら、DVDイメージ、DVDから展開する。\n以下はDVDから展開する例（実際は仮想マシンからディスクイメージ読んでるだけなんですけどね）。\n$ sudo mount -t cd9660 /dev/cd0 /mnt $ cd /mnt/usr/freebsd-dist $ sudo tar -C / -xvzpf ./src.txz （略） gnupgのインストール これも、まあ本気のサーバ管理をしている人以外は不要じゃないかな。\n以下はpkgでインストールする例。\n意外にたくさんのお友達を連れてきた。\n$ pkg search gnupg gnupg-1.4.15 gnupg-2.0.22 pecl-gnupg-1.3.3_1 py27-gnupg-1.2.3 qca-gnupg-2.0.0.b3_1 $ sudo pkg install gnupg-2.0.22 Updating repository catalogue The following 8 packages will be installed:  Installing libgpg-error: 1.12  Installing libgcrypt: 1.5.3  Installing libassuan: 2.1.1  Installing ca_root_nss: 3.15.1_1  Installing curl: 7.32.0  Installing pth: 2.0.7  Installing libksba: 1.3.0  Installing gnupg: 2.0.22 The installation will require 15 MB more space 3 MB to be downloaded (略) パッチの入手と適用 gnupgのない人は拡張子.ascのダウンロードは不要。\n$ fetch http://security.freebsd.org/patches/EN-13:04/freebsd-update.patch fetch: http://security.freebsd.org/patches/EN-13:04/freebsd-update.patch: size of remote file is not known freebsd-update.patch 2754 B 25 kBps 00m00s $ fetch http://security.freebsd.org/patches/EN-13:04/freebsd-update.patch.asc fetch: http://security.freebsd.org/patches/EN-13:04/freebsd-update.patch.asc: size of remote file is not known freebsd-update.patch.asc 801 B 3785 Bps 00m00s $ gpgでファイルの確認。\ngpgが無ければスキップしてよい。\n$ gpg --verify ./freebsd-update.patch.asc Warning: using insecure memory! gpg: Signature made Sun Oct 27 05:14:13 2013 JST using RSA key ID 5DCF6AE7 gpg: Good signature from \u0026#34;FreeBSD Security Officer \u0026lt;security-officer@FreeBSD.org\u0026gt;\u0026#34; gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: 1CF7 FF6F ADF5 CA9F BE1B 8CB2 ED67 ECD6 5DCF 6AE7 なんかWARNINGでてるけどまあいいでしょ。\nパッチ適用 $ cd /usr/src $ sudo patch \u0026lt; ~/somewhere/freebsd-update.patch Hmm... Looks like a unified diff to me... The text leading up to this was: -------------------------- |Index: usr.sbin/freebsd-update/freebsd-update.sh |=================================================================== |--- usr.sbin/freebsd-update/freebsd-update.sh |+++ usr.sbin/freebsd-update/freebsd-update.sh -------------------------- Patching file usr.sbin/freebsd-update/freebsd-update.sh using Plan A... Hunk #1 succeeded at 1200. Hunk #2 succeeded at 2814. Hunk #3 succeeded at 2852. Hunk #4 succeeded at 2876. done freebsd-updateのコンパイルとインストール $ cd /usr/src/usr.sbin/freebsd-update/ $ sudo make install -DWITHOUT_MAN install -o root -g wheel -m 555 freebsd-update.sh /usr/sbin/freebsd-update $ 10.0-BETA1のみ以下を実行\n$ sudo sed -i \u0026#39;\u0026#39; -e \u0026#39;s/%@/%~@/\u0026#39; /usr/sbin/freebsd-update freebsd-updateの修正は以上で完了。\n改めてfreebsd-updateを実行すればよい。\n以上\n","permalink":"https://nobwak.github.io/posts/2013-10-29-freebsd_10.0-beta2%E3%81%ABfreebsd-upgrade%E3%81%97%E3%81%9F%E3%82%89pkgng%E3%81%8C%E5%90%B9%E3%81%8D%E9%A3%9B%E3%82%93%E3%81%A0%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"FreeBSD 10.0は、ALPHAからBETA1まで怒涛のアップデートが続いたと思ったら、BETA2でいきなり足踏みがあった。 これは、freebsd-","title":"FreeBSD 10.0-BETA2にfreebsd-upgradeしたらpkgngが吹き飛んだ件について"},{"content":"rsyncの悩み ディレクトリの同期とくればrsyncが定番でありオンリーワンと言えよう。\nただこのrsync、久しぶりに使うとコマンド書式を忘れてて苦労するのですよ。\n「確かオプションは-avzだったかな」「リモートホストの指定方法はなんだっけ・・・」とmanとしばらく格闘するわけですな。\nディレクトリ指定の複雑さ 加えてディレクトリの指定の仕方も理解しにくい。\n例えば、二つのディレクトリを同期させたいとき。\nrsync -avz dirA dirBを実行すると、こんなことが起こる（確かこうだった…。スラッシュがあるかないかで違ったかも）。\n dirBがないとき\n→dirBが作られる。 すでにdirBがあるとき\n→dirB/dirAが作られる。  前者をイメージしていたのに、後者のパターンにゲンナリすることがよくある。\nそこで使えるのがcpdupである。\nお手軽ミラーユーティリティcpdup cpdupはファイルシステムのミラーを作るユーティリティである。\n「ファイルシステムの」と書いたのは、ハードリンク、ソフトリンク、デバイス、パーミッションなども面倒見てくれるからである。\nリモートホストと同期させる場合のプロトコルにはsshが使われる。\nまた、リモートホストにもインストールが必要。\nrsyncの代替にはならないけれども、手軽で、わかりやすいインタフェースを持つ。\nmanはこちら。\nhttp://linux.die.net/man/1/cpdup\ncpdupのインストール FreeBSDだと、portsならsysutils/cpdup。pkgでもOK。\nLinuxでもパッケージから手に入るでしょう。\nリモートと同期させる場合には、リモートホストにもcpdup入れておくこと。\ncpdup書式 書式は以下の通り。\nオプションは一部。全部見たいならmanでどうぞ。\ncpdup [-C] [-v[v]] [-d] [-I] [-i0] [-o] [-q] ＜ソースDir＞ ＜tターゲットDir＞ 通常的に使うオプションは、「-C -vv -d -I]でよいと思う。\n-C リモートホストとファイル送受をするとき、sshコネクションを圧縮する。 -vv 処理状況を表示させる。v一つだと変更のあったときしかメッセージが表示されないので、v二つがよい。 -d 処理の行われるディレクトリを表示させる。 -I 処理が終わったあとにサマリを表示させる。 -i0 確認せずにファイルやディレクトリを削除する。 -o 削除を一切しない。追加か上書きのみ。 -q 表示をさせない。 cpdup実行例 まず手元にファイルを含むディレクトリを作る。\n下記の例ではtestDirディレクトリに、a, b, c, d, e, fというファイルを作った。\n$ mkdir testDir $ cd testDir/ $ touch a b c d e f $ ls a b c d e f $ cd .. 典型例\nではこれをcpdupしてみよう。\nリモートの192.168.154.241にコピーする。\n基本の「-C -vv -d -I」で。\n出力がとても分かりやすい。\n$ cpdup -C -vv -d -I ./testDir 192.168.154.241:~/testDir Password: Handshaked with cal01 ~/testDir Scanning ./testDir ... ~/testDir/f copy-ok ~/testDir/a copy-ok ~/testDir/e copy-ok ~/testDir/b copy-ok ~/testDir/c copy-ok ~/testDir/d copy-ok cpdup completed successfully 0 bytes source, 0 src bytes read, 0 tgt bytes read 0 bytes written (nanX speedup) 6 source items, 6 items copied, 0 items linked, 0 things deleted 2.5 seconds 0 Kbytes/sec synced 0 Kbytes/sec scanned ターゲットにすでにディレクトリがあってもOK.\nそこでもう一度同じコマンドを実行してみる。\n何もコピーされない。\nこれがもしrsyncだと、testDir/testDirが作られることになる。\n$ cpdup -C -vv -d -I ./testDir 192.168.154.241:~/testDir Password: Handshaked with cal01 ~/testDir Scanning ./testDir ... cpdup completed successfully 0 bytes source, 0 src bytes read, 0 tgt bytes read 0 bytes written (nanX speedup) 6 source items, 0 items copied, 0 items linked, 0 things deleted 2.6 seconds 0 Kbytes/sec synced 0 Kbytes/sec scanned ターゲットのファイルを削除するときは確認あり。\nでは手元の./testDir/aを削除してもう一度。\nターゲットのtestDir/aを削除するか、聞いてくれる。\n$ rm ./testDir/a $ cpdup -C -vv -d -I ./testDir 192.168.154.241:~/testDir Password: Handshaked with cal01 ~/testDir Scanning ./testDir ... remove ~/testDir/a (Yes/No) [No]? yes cpdup completed successfully 0 bytes source, 0 src bytes read, 0 tgt bytes read 0 bytes written (nanX speedup) 5 source items, 0 items copied, 0 items linked, 1 things deleted 4.3 seconds 0 Kbytes/sec synced 0 Kbytes/sec scanned -i0で削除時の確認を抑制\n今度は手元の./testDir/bを削除し、-i0を付けてみる。\n確認なくターゲットのbを削除している。\n$ rm ./testDir/b $ $ cpdup -C -vv -d -I -i0 ./testDir 192.168.154.241:~/testDir Password: Handshaked with cal01 ~/testDir Scanning ./testDir ... ~/testDir/b remove-ok cpdup completed successfully 0 bytes source, 0 src bytes read, 0 tgt bytes read 0 bytes written (nanX speedup) 4 source items, 0 items copied, 0 items linked, 1 things deleted 2.6 seconds 0 Kbytes/sec synced 0 Kbytes/sec scanned -oでターゲットの削除を抑制\nさらに手元の./testDir/cを削除し、-oを付けてみる。\nターゲットのcの削除はされない。\n$ rm ./testDir/c $ $ cpdup -C -vv -d -I -o ./testDir 192.168.154.241:~/testDir Password: Handshaked with cal01 ~/testDir Scanning ./testDir ... ~/testDir/c not-removed cpdup completed successfully 0 bytes source, 0 src bytes read, 0 tgt bytes read 0 bytes written (nanX speedup) 3 source items, 0 items copied, 0 items linked, 0 things deleted 2.6 seconds 0 Kbytes/sec synced 0 Kbytes/sec scanned メッセージの抑制\nメッセージ表示のオプションをすべて外してみる。\n出力がかなり減った。\n$ cpdup -C -o ./testDir 192.168.154.241:~/testDir Password: Handshaked with cal01 $ さらに-qを付けてみる。\n出力が一切ない。\n$ cpdup -C -q -o ./testDir 192.168.154.241:~/testDir Password: $ たいへん結構。ではスピードは？ rsyncとどれくらい違うか、実験してみた。\nFreeBSD 9.2-RELEASEのソースをミラーリングしてみた。\n5696のディレクトリに52315のファイルがあり、サイズは800MBである。\nハードウェアのスペックは割愛。\nWindows上のVMがソース、古いDELLマシンがターゲットなので…。\nrsyncには-avzを、cpdupには-C -vv -d -Iを与えた。\n結果。\nrsyncは6分。\nsent 191011733 bytes received 1016783 bytes 518295.59 bytes/sec total size is 686599114 speedup is 3.58 real 6m10.328s user 0m38.497s sys 0m33.395s cpdupは30分。\n…30分!?\n686599114 bytes source, 686599114 src bytes read, 0 tgt bytes read 686599114 bytes written (1.0X speedup) 52315 source items, 58011 items copied, 0 items linked, 0 things deleted 1893.2 seconds 708 Kbytes/sec synced 354 Kbytes/sec scanned real 31m33.236s user 0m8.380s sys 0m16.133s ま、まあ、スピードの点では、cpdupはまったく話にならないですな…。\n（転送量を見るとcpdupの方はspeedupがあまり効いてないように見えるなあ。）\nミラーリングとは言っても、初回のフルコピーだから、差分コピーだとまた違った結果が得られるかもしれない。\nただちょっとここまで差があると試す気にもなりまへん。\nまとめ cpdupはちょっとしたミラーリングの時に使うには、手軽で書式もわかりやすいので有用、いっぽう、気合い入れてやるミラーリングはrsyncで、って事でいいんじゃないでしょうかね。\n","permalink":"https://nobwak.github.io/posts/2013-10-28-%E3%81%8A%E6%89%8B%E8%BB%BD%E3%83%9F%E3%83%A9%E3%83%BC%E3%83%A6%E3%83%BC%E3%83%86%E3%82%A3%E3%83%AA%E3%83%86%E3%82%A3cpdup/","summary":"rsyncの悩み ディレクトリの同期とくればrsyncが定番でありオンリーワンと言えよう。 ただこのrsync、久しぶりに使うとコマンド書式を忘","title":"お手軽ミラーユーティリティcpdup"},{"content":"カレンダーサーバのBaikalを試してみたので記す。\nここでのカレンダーサーバとは、Googleカレンダーのようなものですな。\n「だったらそんなのGoogleカレンダーでいいじゃないか」というのは仰るとおりだが、そもそも環境の都合上、Googleカレンダーへの接続ができないとか、PRISM以降、オンラインサービスを信用ならない向きには有用なサービスであります。\nカレンダーサーバの選択 とはいえ、カレンダーサーバ（以降、CalDAVサーバ）を選ぶにも、かなりの数が作られている。\nWikipedia（英語版）で調べてみると、各種CalDAVサーバが一覧にされた比較表が出てくる。\nこれを参考に選んでみよう。\nhttp://en.wikipedia.org/wiki/Comparison_of_CalDAV_and_CardDAV_implementations\nいろいろ眺めてみて、かつ、少しかじってみて、Baikalを選んだ。\nいずれのCalDavサーバも機能は一長一短なので、構築がとっても楽だったBaikalに決めた。\nBaikalとは。 SabreDAVをベースにしたCalDAV, CardDAVサーバである。\nオフィシャルサイトはこちら。\nしかしこのサイトにはドキュメントがまったくないので、GitHubのこちらを勧める。\nRequirementはPHP5.3以降にSQLite3、php-pdo。データベースにはMySQLも利用できる。\nWebDAVサーバも必要だが、apache, nginx, lighttpd等、どれでもいいでしょう。\nさっそくインストールしてみる。\nBaikalのインストール これはなんでもない。\nFreeBSDならpkgngにあるのでそれで。portsならwww/baikal 。\n依存も少なめで非常にいい。\nインストールが終わると以下のメッセージが表示される。\nTo finish installing Baikal:  1) Set up an httpd directive  See /usr/local/share/examples/baikal  2) touch /usr/local/www/baikal/Specific/ENABLE_INSTALL  3) Browse http://your.host.here/admin  4) rm /usr/local/www/baikal/Specific/ENABLE_INSTALL 上記メッセージに沿って進める。\nhttpサーバの設定 FreeBSDだと/usr/local/www/baikalにインストールされる。\nそれぞれのhttpサーバでbaikalのインストールされたディレクトリを公開する。\nただし公開するのはbaikalのhtmlディレクトリ。\n/usr/local/www/baikal/html/である。\n私の場合、/usr/local/www/dataがhttpサーバのドキュメントRootだった。\nwebサーバでaliasの設定をすべきだが、面倒なので横着してsymlink張った。\n# ln -s /usr/local/www/baikal/html /usr/local/www/data/baikal # ls /usr/local/www/data baikal index.html Baikalのセットアップ インストール時メッセージに沿う。\nSpecificフォルダにENABLE_INSTALLというファイルを作る。\n# touch /usr/local/www/baikal/Specific/ENABLE_INSTALL # ls /usr/local/www/baikal/Specific .htaccess ENABLE_INSTALL db その後、ブラウザで接続。\nhttp://＜baikalサーバ＞/baikal/admin へ。\nうまくすれば以下の画面になるはず。\nデータベースセットアップ。\nSQLiteならそのまま進む。\n一通りの設定が終わったのでダッシュボードへ。\n終わったらSpecific/ENABLE_INSTALLを削除すること。\nユーザ、カレンダの追加 上記からの流れでdashboardに移動しているはず。\nメニューバーのユーザ管理をクリックしていけばユーザ、カレンダー追加ができる。\nここでのパスワードは、あとあとカレンダーへアクセスするときに必要になるもの。\nユーザを作ったら、カレンダーをクリック。\nカレンダーが出来ていますね。\nカレンダーへのアクセス CalDAVに対応しているならなんでもいい。\nここのClient Implementationsにズラリと並んでいるどれでもOK.\niOS, Androidだって、よりどりみどり。\nここでは、ThunderbirdのLightningからアクセスする例を示す。\nCalDAVを選び、アドレスに以下を入れる。\nhttp://\u0026lt;IPアドレス\u0026gt;/baikal/cal.php/calendars/＜ユーザ＞/default たとえば、http://192.168.154.241/baikal/cal.php/calendars/doe/default\n以上。\n","permalink":"https://nobwak.github.io/posts/2013-10-25-%E3%82%89%E3%81%8F%E3%82%89%E3%81%8F%E6%A7%8B%E7%AF%89caldav%E3%82%B5%E3%83%BC%E3%83%90baikal/","summary":"カレンダーサーバのBaikalを試してみたので記す。 ここでのカレンダーサーバとは、Googleカレンダーのようなものですな。 「だったらそんな","title":"らくらく構築、CalDAVサーバBaikal"},{"content":"apacheは吊るしのFreeBSD pkgでphpを使えない。 10.0-BETA1にして曲がりなりにもpkgが普通に使えるようになって、あまりの便利さに感動し、追加ソフトウェアはすべてpkgにしようと決めたのだが。\napacheとphpでいきなり壁に当たりました。\napacheをpkgでインストールすると、phpのモジュールが付いてこないのである。\nphpモジュールが欲しいなら、apacheをportsからインストールしないといけない。\nもちろん、pkgngはportsと一緒に使えるよう考えて作られている。\napacheだけportsからインストールしたって何の問題もない。\nただ、あの巨大な/usr/portsディレクトリをメンテしていくのが億劫なわけですよ。\nならばよろしいapacheはもう捨てよう。\nたぶんまた、吊るしのpkgで使えないソフトウェアが出てくると思うが、その時はその時考えよう。\nnginx, lighttpdのどちらがよいか。 apacheの代替といってすぐに思い浮かぶのはnginxとlighttpdである。\n\u0026ldquo;nginx lighttpd comparison\u0026quot;などとググってみると、いくつかのもまとめがヒットする。\nhttp://www.wikivs.com/wiki/Lighttpd_vs_nginx\nhttp://wiki.dreamhost.com/Web_Server_Performance_Comparison\n軽く速く柔軟な設定が可能という点では同じだが、概観したところnginx優勢のようである。\nまた、lighttpdには品質面で気になる点もある。\nどうも長い間放置されているメモリリークがあるようだ。\nただlighttpdの設定のほうが分かりやすい、というのは皆の認めるところらしい。\nメモリリークは心配だが、さっさとhttpサーバを設定したいのでlighttpdを選択。\n以下、lighttpdでphpを、fastcgiで動かす。\n環境はFreeBSD 10.0-BETA1。pkgngでインストール。\n設定方法は他OSでも参考になる部分があるかも。\nlighttpd, php5のインストール pkgでインストール。\n簡単。\nlighttpdは依存も少ない。\n# pkg install php5 lighttpd （略） php5のバージョン確認 lighttpdを扱う前に、phpを確認する。\nfastcgi対応かどうか。\n\u0026ldquo;php5″でインストールされたのは5.4.20\n/usr/local/bin/php-cgiを確認すると、特に指定や追加のインストールの必要なくfastcgi対応であることが分かる。\n# php -v PHP 5.4.20 (cli) (built: Oct 3 2013 03:35:30) Copyright (c) 1997-2013 The PHP Group Zend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies # php-cgi -v PHP 5.4.20 (cgi-fcgi) (built: Oct 3 2013 03:35:34) Copyright (c) 1997-2013 The PHP Group Zend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies lighttpdのファイル配置 lighttpdとしてインストールされたファイルを確認する。\n設定ファイル\n/usr/local/etc/lighttpd下に。\n# cd /usr/local/etc/lighttpd/ # ls RCS lighttpd.conf.sample vhosts.d conf.d modules.conf lighttpd.conf modules.conf.sample ドキュメントルート\n初期状態では/usr/local/www/dataだが、ディレクトリは自分で作る必要がある。\nlighttpdのログファイル初期状態では/var/log/lighttpd下に。\n# cd /var/log/lighttpd/ # ls access.log error.log ファイルを確認したら、lighttpdの設定に移る。\nlighttpdの設定 流れとしては、\n lighttpd.confで全体の設定を、 modules.confで読み込むモジュールの設定を、 conf.d/下の*.confで各モジュールの設定を行う。  fastcgiを使うなら、\nlighttpd.confで設定ののち、\nmodules.confでfastcgiのモジュールを読み込む指定をし、\nconf.d/fastcgi.confでphpの指定をする、となる。\nなお、php.iniにも一部変更が必要。\nlighttpdオフィシャルのチュートリアルはここ。\n以下、/usr/local/etc/lighttpd下にある設定ファイルに手を加えていく。\nlighttpd.confの修正 lighttpd.conf.sampleから変えたのは以下の3行だけ。\nserver.use-ipv6 = \u0026#34;disable\u0026#34; server.bind = \u0026#34;192.168.154.241\u0026#34; $SERVER[\u0026#34;socket\u0026#34;] == \u0026#34;192.168.154.241:80\u0026#34; { } コメント行、空行を除いたlighttpd.confは以下の通り。\ninclude \u0026ldquo;modules.conf\u0026quot;と指定がある通り、ここでmoduleを読み込んでいる。\n# grep -v \u0026#34;^#\u0026#34; ./lighttpd.conf|grep -v \u0026#34;^$\u0026#34; var.log_root = \u0026#34;/var/log/lighttpd\u0026#34; var.server_root = \u0026#34;/usr/local/www/data\u0026#34; var.state_dir = \u0026#34;/var/run\u0026#34; var.home_dir = \u0026#34;/var/spool/lighttpd\u0026#34; var.conf_dir = \u0026#34;/usr/local/etc/lighttpd\u0026#34; var.vhosts_dir = server_root + \u0026#34;/vhosts\u0026#34; var.cache_dir = \u0026#34;/var/cache/lighttpd\u0026#34; var.socket_dir = home_dir + \u0026#34;/sockets\u0026#34; include \u0026#34;modules.conf\u0026#34; server.port = 80 server.use-ipv6 = \u0026#34;disable\u0026#34; server.bind = \u0026#34;192.168.154.241\u0026#34; server.username = \u0026#34;www\u0026#34; server.groupname = \u0026#34;www\u0026#34; server.core-files = \u0026#34;disable\u0026#34; server.document-root = \u0026#34;/usr/local/www/data/\u0026#34; server.tag = \u0026#34;lighttpd\u0026#34; server.pid-file = state_dir + \u0026#34;/lighttpd.pid\u0026#34; server.errorlog = log_root + \u0026#34;/error.log\u0026#34; include \u0026#34;conf.d/access_log.conf\u0026#34; include \u0026#34;conf.d/debug.conf\u0026#34; server.event-handler = \u0026#34;freebsd-kqueue\u0026#34; server.network-backend = \u0026#34;writev\u0026#34; server.max-fds = 2048 server.stat-cache-engine = \u0026#34;simple\u0026#34; server.max-connections = 1024 index-file.names += ( \u0026#34;index.xhtml\u0026#34;, \u0026#34;index.html\u0026#34;, \u0026#34;index.htm\u0026#34;, \u0026#34;default.htm\u0026#34;, \u0026#34;index.php\u0026#34; ) url.access-deny = ( \u0026#34;~\u0026#34;, \u0026#34;.inc\u0026#34; ) $HTTP[\u0026#34;url\u0026#34;] =~ \u0026#34;\\.pdf$\u0026#34; { server.range-requests = \u0026#34;disable\u0026#34; } static-file.exclude-extensions = ( \u0026#34;.php\u0026#34;, \u0026#34;.pl\u0026#34;, \u0026#34;.fcgi\u0026#34;, \u0026#34;.scgi\u0026#34; ) include \u0026#34;conf.d/mime.conf\u0026#34; include \u0026#34;conf.d/dirlisting.conf\u0026#34; server.follow-symlink = \u0026#34;enable\u0026#34; server.upload-dirs = ( \u0026#34;/var/tmp\u0026#34; ) $SERVER[\u0026#34;socket\u0026#34;] == \u0026#34;192.168.154.241:80\u0026#34; { } modules.conf lighttpd.confで指定されたmodules.confの設定。\nどんなmoduleを読み込むか。\n以下の行を有効にしただけ。\nつまりfastcgiを有効に。\nそのほかにも興味深そうなmoduleはあるがミニマルスタートが原則。\ninclude \u0026#34;conf.d/fastcgi.conf\u0026#34; コメント行、空行を除いたlighttpd.confは以下の通り。\n# grep -v \u0026#34;^#\u0026#34; ./modules.conf|grep -v \u0026#34;^$\u0026#34; server.modules = ( \u0026#34;mod_access\u0026#34;, ) include \u0026#34;conf.d/fastcgi.conf\u0026#34; conf.d/fastcgi.conf fastcgiの設定。\nphpをどう実行するかを指定できる。\nローカルのphp-cgiでもよいし、ローカルホストの別webサーバ（apacheとか）でもよいし、はたまた別ホストのwebサーバでもよい。\n詳細はこちら。\nここでは、ローカルの/usr/local/bin/php-cgiを使う。\nfastcgi対応のphpである。\nローカルなのでIPアドレスやTCP/IPポートの指定は不要で、UNIXドメインソケットして使うファイルを指定すればよい。\n最終的に以下の行を追加\nfastcgi.server = ( \u0026#34;.php\u0026#34; =\u0026gt;  ((\u0026#34;bin-path\u0026#34; =\u0026gt; \u0026#34;/usr/local/bin/php-cgi\u0026#34;,  \u0026#34;socket\u0026#34; =\u0026gt; \u0026#34;/tmp/php.socket\u0026#34;  ))  ) コメント行、空行を除いたlighttpd.confは以下の通り。\nserver.modules += ( \u0026#34;mod_fastcgi\u0026#34; ) fastcgi.server = ( \u0026#34;.php\u0026#34; =\u0026gt;  ((\u0026#34;bin-path\u0026#34; =\u0026gt; \u0026#34;/usr/local/bin/php-cgi\u0026#34;,  \u0026#34;socket\u0026#34; =\u0026gt; \u0026#34;/tmp/php.socket\u0026#34;  ))  ) 以上でlighttpdの設定は完了\nphp.iniの設定 lighttpdのドキュメントを見ると以下のように書いてあるので、php.iniを修正する。\n If you want to use PATH_INFO and PHP_SELF in you PHP scripts you have to configure php and lighttpd. The php.ini needs the option:\ncgi.fix_pathinfo = 1\n FreeBSDだとphp.iniは/usr/local/etcに置かれるべきもの。\n初期状態ではphp.iniが無いので、sampleからコピーする。\nsampleにはphp.ini-developmentとphp.ini-productionの二つがある。\ndevelopmentの方を選んだ。\n# cd /usr/local/etc/ # cp php.ini-development php.ini 以下の行のコメントを外す。\ncgi.fix_pathinfo=1 起動確認 /usr/local/www/dataを作り、\u0026ldquo;It works!\u0026ldquo;とでも書いたindex.htmlを作る。\n# mkdir /usr/local/www/data # echo \u0026#34;It works\u0026#34; \u0026gt; /usr/local/www/data/index.html FreeBSDなら/etc/rc.confに以下の行を追加。\n# enable lighttpd at boot lighttpd_enable=\u0026#34;YES\u0026#34; 起動。 # service lighttpd start Performing sanity check on lighttpd configuration: Syntax OK Starting lighttpd. ログに異常もなし。\n# tail /var/log/lighttpd/error.log 2013-10-22 21:30:20: (log.c.166) server started # ブラウザでつないで、index.htmlが表示されればOK。\n","permalink":"https://nobwak.github.io/posts/2013-10-23-nginx%E3%81%A8lighttpd%E3%81%A7%E6%82%A9%E3%82%93%E3%81%A7lighttpd_+_php5_+_fastcgi%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%A8%E8%A8%AD%E5%AE%9A%E3%81%B8/","summary":"apacheは吊るしのFreeBSD pkgでphpを使えない。 10.0-BETA1にして曲がりなりにもpkgが普通に使えるようになって、あま","title":"nginxとlighttpdで悩んでlighttpd + php5 + fastcgiのインストールと設定へ"},{"content":"サマリ pkg -jを使うと、ホストからjail内のpkgを操作できる。\nしかし、あらかじめjail内にpkgのインストールが必要。\npkg -j pkgのmanを見ると以下の記載が。\n-j \u0026lt;jail name or id\u0026gt;  pkg will execute in the given \u0026lt;jail name or id\u0026gt;, where name  matches ``jls name\u0026#39;\u0026#39; and id matches ``jls jid\u0026#39;\u0026#39;. See jail(8) and  jls(8). つまり、-jに続けてjail名あるいはjail idを指定すれば、ホストから当該jail内のpkgを操作できる、ということである。\nこれはさっそく試さねばなるまい。\nqjailを使ってexmaple02というjailを作った。\n$ sudo qjail create -n em0 -4 192.168.100.241 example02 Successfully created example02 [vanilla@yaryka ~]$ sudo qjail start example02 Jail successfully started example02 [vanilla@yaryka ~]$ sudo qjail list STA JID NIC IP Jailname --- ---- --- --------------- -------------------------------------------------- DR 1 em0 192.168.100.240 example01 DR 2 em0 192.168.100.241 example02 さっそく試してみるが…？\n$ sudo pkg -j example02 info $ sudo pkg -j example02 update Updating repository catalogue $ sudo pkg -j example02 install bash Updating repository catalogue $ まったく反応がない。\nいろいろ試した結果、jailにはpkgがあらかじめインストールされていなければならないのであった。\njailでpkgのインストール 仕方なくjailのコンソールに接続し、pkgをインストール。\n現時点ではpkgの公式リポジトリがないので、こちらの通りに進める。\n$ sudo qjail console example02 FreeBSD 10.0-BETA1 (GENERIC) #0 r256420: Sun Oct 13 01:43:07 UTC 2013 Welcome to your FreeBSD jail. example02 /root \u0026gt;sh # PACKAGESITE=\u0026#34;http://96.47.72.120/pkg-test-freebsd:10:x86:64/latest\u0026#34; pkg The package management tool is not yet installed on your system. Do you want to fetch and install it now? [y/N]: y Bootstrapping pkg please wait Installing pkg-1.1.4_6... done If you are upgrading from the old package format, first run: （略） もう一度ホストからpkgを実行。\n今度は問題なく進んだ。\n$ sudo pkg -j example02 update Updating repository catalogue digests.txz 100% 955KB 191.0KB/s 214.8KB/s 00:05 packagesite.txz 100% 5209KB 226.5KB/s 28.6KB/s 00:23 Incremental update completed, 0 packages processed: 0 packages updated, 0 removed and 21607 added. $ jailの外からpkg -jでpkg操作 ではjailの外からインストールを。\n$ sudo pkg -j example02 install bash Updating repository catalogue The following 2 packages will be installed:  Installing gettext: 0.18.3  Installing bash: 4.2.45 The installation will require 14 MB more space 3 MB to be downloaded Proceed with installing packages [y/N]: y gettext-0.18.3.txz 100% 2086KB 231.8KB/s 85.9KB/s 00:09 bash-4.2.45.txz 100% 890KB 222.6KB/s 410.2KB/s 00:04 Checking integrity... done [1/2] Installing gettext-0.18.3... done [2/2] Installing bash-4.2.45... done $ -jオプションを付けるだけで、まったく同じように使える。\ninfoで一覧も得られるし、auditでセキュリティチェックもできる。upgradeもできそうだ。\n$ sudo pkg -j example02 audit -F auditfile.tbz 100% 90KB 90.3KB/s 90.3KB/s 00:00 0 problem(s) in your installed packages found. $ sudo pkg -j example02 info Password: bash-4.2.45 The GNU Project\u0026#39;s Bourne Again SHell gettext-0.18.3 GNU gettext package pkg-1.1.4_6 New generation package manager $ sudo pkg -j example02 upgrade Updating repository catalogue Nothing to do $ こいつは便利でございますな。\n","permalink":"https://nobwak.github.io/posts/2013-10-21-freebsd_pkg_-j_%E3%81%A7jail%E3%81%AE%E5%A4%96%E3%81%8B%E3%82%89pkgng%E6%93%8D%E4%BD%9C%E3%82%92/","summary":"サマリ pkg -jを使うと、ホストからjail内のpkgを操作できる。 しかし、あらかじめjail内にpkgのインストールが必要。 pkg -j pkgのman","title":"[FreeBSD] pkg -j でjailの「外から」pkgng操作を。"},{"content":"せっかく覚えたezjailが息してない jailの設定ファイルが、rc.conf,/etc/rc.d/jailからjail.confに変わる。\nhttps://twitter.com/m_bird/status/386369822751076352\nそのせいか10.0-BETA1にしたら、ezjail使うたび怒られるようになった。\n具体的にはezjail-adminでjailをうまく起動できない。\nezjail覚えたばっかなのに…。\n「手動でなんとかしろよ」とエラーメッセージが出るのだが、jailの仕組みはとても複雑で、jail.confの書式も良くわからないしsampleもない。\n「rc.d, rc.confをそのままコピー\u0026amp;ペーストしたらいいんだよ」とは言うのだけど、そもそもrc.d, rc.confを自分で書くのが嫌でezjail使ってたのに。\nしょうがないんで、あんまり深く追いかけずに別のラッパーであるqjailを試した。\nなかなか独特のテイストが感じられるのだが、思ったより手軽で、ドキュメントも（時にはウンザリするくらい）充実している。\nもちろんjail.confにも安心対応。\n数十個ものjailを作ることも出来たり、一度作成したjailをテンプレートにする機能もあったりして驚く。\nググった感触でいうとあんまり人気ないみたいだけど、結構いい。\n細けえ事はどうでもいいからjailを使わせろという諸兄にはおすすめである。\nqjailのインストール 2013/10/18時点で2.2と3.2がある。\njail.confに対応しているのは3.2。\n話は前後するが、qjail3.2のman qjail(8)から抜粋すると;\n This version of qjail has been converted from using the legacy rc.d\nrc.conf method of jail definition as used in all pervious versions of\nqjail, to using the jail(8) jail.conf method which became available in\n9.1-RELEASE.\n よって3.2をインストール。\nなお、以下でqjailをインストールするFreeBSDは10.0-BETA1でございますので、pkgngを使います。\n$ pkg search qjail qjail-2.2 qjail-3.2 $ sudo pkg install qjail-3.2 Password: Updating repository catalogue The following 1 packages will be installed:  Installing qjail: 3.2 The installation will require 416 KB more space 116 KB to be downloaded Proceed with installing packages [y/N]: y qjail-3.2.txz 100% 116KB 115.9KB/s 115.9KB/s 00:01 Checking integrity... done [1/1] Installing qjail-3.2... done ######################################################################## Use the qjail utility to deploy small or large numbers of jails quickly. First issue \u0026#34;rehash\u0026#34; command to enable the qjail command (if using csh). Then issue \u0026#34;man qjail-intro\u0026#34; to read the qjail introduction. After reading that do \u0026#34;man qjail\u0026#34; for the usage details. For the BIG PICTURE issue \u0026#34;man qjail-howto\u0026#34;. ######################################################################## For instructions on upgrading jail filesystems Read /usr/local/share/examples/qjail/upgrade-info.txt $ qjailでの初期設定 まずはjailのひな形、ベース環境を作る。\nqjail installでよい。\nひな形取得先のftpサーバを変更するならオプションで指定する。\n書式は以下。\nqjail install -h ftp2.jp.freebsd.org RELEASE以外でのqjail install しかし、ftpサーバからダウンロードできるのはRELEASEのみ。\nBETA, RC, ALPHA, STABLE等々だとダメ。\n回避方法は二つ。\n①なんでもいいのでRELEASEで作っておいてアップグレードする\n②ダウンロードしたディスクイメージを使う。\n今回は②にした。\n①はman qjail参照。\n②をもう少し細かく書くと、ディスクイメージをマウントし、base.txzなどのある「ディレクトリ」をqjail install -fに続けて指定する。\n「ディレクトリ」とわざわざ書いたのは、cdで行けるところ、というのを強調したかったから。\nディスクイメージの直接指定はできないし、ftpサーバのディレクトリ指定もダメ。\nガッカリ。\n(追記)RELEASE以外でのqjail install 「RELEASE以外」というのは、実はRELEASE-p2といったような、パッチレベルが0以外の場合も該当する。\nつまりfreebsd-updateでパッチを当てた状態でqjail installすると失敗する。\nこれは、qjailは自ホストのOSバージョンをもとにディレクトリを移動するから。\nOSバージョンが10.1-RELEASE-p16だったら、ftpサーバの10.1-RELEASE-p16などを見に行ってしまう。\nしかし、ftpサーバはパッチレベルごとにはディレクトリが作られないので、参照先がなく失敗する。\nところで、ここでのOSバージョンとは、具体的には環境変数UNAME_rである。\nということは、qjail installのときだけUNAME_rを変更すればパッチレベルが変わっていようがよいのである。\n以下、10.1-RELEASE-p16で実行した例。\nroot@kraken:/usr/local # setenv UNAME_r \u0026#34;10.1-RELEASE\u0026#34; root@kraken:/usr/local # qjail install -h ftp2.jp.freebsd.org Trying 202.232.140.170:21 ... Connected to ftp.iij.ad.jp. 220 IIJ FTP server ready (IPv4 client). 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. 200 Switching to Binary mode. 250 Directory successfully changed. local: base.txz remote: base.txz 229 Entering Extended Passive Mode (|||52115|). 150 Opening BINARY mode data connection for base.txz (66173780 bytes).  85% |***************************** | 54994 KiB 999.68 KiB/s 00:09 ETA 226 Transfer complete. 66173780 bytes received in 01:03 (0.99 MiB/s) 221 Goodbye. The RELEASE distribution files are populating template. Est LT 1 minute elapse time for this to complete. Successfully installed qjail system. 追記ここまで\nダウンロードしたディスクイメージからqjail install 仕方がないので淡々と進める。\n10.0-BETA1のイメージダウンロードして、ローカルでマウント。\n$ fetch ftp://ftp.iij.ad.jp/pub/FreeBSD/releases/ISO-IMAGES/10.0/FreeBSD-10.0-BETA1-amd64-disc1.iso FreeBSD-10.0-BETA1-amd64-disc1.iso 100% of 693 MB 8138 kBps 01m27s $ $ sudo mdconfig -a -t vnode -f ./FreeBSD-10.0-BETA1-amd64-disc1.iso -u 0 $ sudo mount -t cd9660 /dev/md0 /mnt /mntにマウントしたとすると、/mnt/usr/freebsd-dist/が目的の場所。\n$ ls /mnt COPYRIGHT etc mnt sbin var bin lib proc sys boot libexec rescue tmp dev media root usr $ ls /mnt/usr bin include libdata obj src freebsd-dist lib libexec sbin tests games lib32 local share $ ls /mnt/usr/freebsd-dist/ MANIFEST doc.txz kernel.txz src.txz base.txz games.txz lib32.txz $ qjail install -fで実行。\n終わったらマウントも外そう。\n$ sudo qjail install -f /mnt/usr/freebsd-dist/ The RELEASE distribution files are populating template. Est LT 1 minute elapse time for this to complete. sharedfs is being populated. Est LT 1 minute elapse time for this to complete. Successfully installed qjail system. $ $ sudo umount /mnt $ sudo mdconfig -d -u 0 qjailの構成 /usr/jailsにいくつかのディレクトリが生まれる。\nまた、設定ファイルが/usr/local/etc/に格納される。\n/usr/jails下は以下の通り。\n$ ls /usr/jails archive flavors sharedfs template sharedfs:\nOSの実行ファイル、ライブラリ。全Jailで共有される。\n$ ls /usr/jails/sharedfs/ bin lib libexec sbin sys usr template:\nOS configuration fileがある。設定変えようと思ったらここかな。\n$ ls /usr/jails/template/ COPYRIGHT home mnt sharedfs var bin lib proc sys dev libexec root tmp etc media sbin usr archive:\n初期状態では空。\nqjail archiveコマンドで作成されるアーカイブが格納される。\nflavors:\nflavorですな。defaultとssh-defaultの二つがある。\n$ ls /usr/jails/flavors/ default ssh-default そのほか、/usr/local/etc/下に以下のようなファイル、ディレクトリがたくさん出来る。\njailを作ると今度はこのディレクトリの下にjail名でファイルができる。\nglobal, local, vnetの意味が、想像はできるもののよく分からない。\n$ ls /usr/local/etc/qjail* /usr/local/etc/qjail.portsnap.conf /usr/local/etc/qjail.fstab: /usr/local/etc/qjail.global: /usr/local/etc/qjail.local: /usr/local/etc/qjail.vnet: jailの作成 書式。代表的なもののみ。\nqjail create -n \u0026lt;NIC name\u0026gt; -f \u0026lt;flavor\u0026gt; -a \u0026lt;アーカイブ\u0026gt; \\  -4 \u0026lt;割り当てるIPアドレス\u0026gt; jailname -fと-aは一緒に使えない。\n実際に作ってみる。\nあっさりと出来上がる。\nあっさりしすぎて逆に不安なくらい。\n$ sudo qjail create -n em0 -4 192.168.100.240 example01 Successfully created example01 気がつくと、/etc/jail.confが生まれている!\nexample01 { host.hostname = \u0026#34;exmaple01\u0026#34;; path = \u0026#34;/usr/jails/exmaple01\u0026#34;; mount.fstab = \u0026#34;/usr/local/etc/qjail.fstab/exmaple01\u0026#34;; exec.start = \u0026#34;/bin/sh /etc/rc\u0026#34;; exec.stop = \u0026#34;/bin/sh /etc/rc.shutdown\u0026#34;; exec.consolelog = \u0026#34;/var/log/qjail.exmaple01.console.log\u0026#34;; devfs_ruleset = \u0026#34;4\u0026#34;; allow.mount.devfs; mount.devfs = \u0026#34;1\u0026#34;; ip4.addr = 192.168.100.240; interface = \u0026#34;em0\u0026#34;; } jail起動…の前に、qjail listで確認。\nqjail list 作成済みのjailはqjail listで確認できる。\n$ sudo qjail list STA JID NIC IP Jailname --- ---- --- --------------- -------------------------------------------------- DS N/A em0 192.168.100.240 example01 最初のカラムのSTAはStatusの略。\n一文字め:Jailの種別  D: ディレクトリベースのjail.  I: イメージベースのjail. 二文字め:状態  R: 実行中  S: 停止中 JIDはjail IDのこと。そのほかは見たまま。\nqjail start qjail startでjailを起動。\nqjail listの表示も変わり、ネットワークインタフェースへのaliasも実行してくれている。\n$ sudo qjail start example01 Jail successfully started example01 $ $ sudo qjail list STA JID NIC IP Jailname --- ---- --- --------------- -------------------------------------------------- DR N/A em0 192.168.100.240 example01 $ ifconfig em0 em0: flags=8843\u0026lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST\u0026gt; metric 0 mtu 1500  options=9b\u0026lt;RXCSUM,TXCSUM,VLAN_MTU,VLAN_HWTAGGING,VLAN_HWCSUM\u0026gt;  ether 08:00:27:a1:d7:05  inet 192.168.100.110 netmask 0xffffff00 broadcast 192.168.100.255  inet 192.168.100.240 netmask 0xffffffff broadcast 192.168.100.240  nd6 options=29\u0026lt;PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL\u0026gt;  media: Ethernet autoselect (1000baseT \u0026lt;full-duplex\u0026gt;)  status: active qjail consoleでjailの中へ qjail consoleでコンソールにアクセスできる。\n$ sudo qjail console example01 FreeBSD 10.0-BETA1 (GENERIC) #0 r256420: Sun Oct 13 01:43:07 UTC 2013 Welcome to your FreeBSD jail. example01 /root \u0026gt; 特に何もしていないけど、/etc/localtimeと/etc/resolv.confは作ってくれた。wall_cmos_clockはなかった。\nexmaple01 /root \u0026gt;ls /etc | egrep \u0026#34;resolv|clock|localtime\u0026#34; localtime resolv.conf qjail stopで止めて、archiveでアーカイブ、deleteで削除完了 単純にstopしてdeleteするのは面白くないから、deleteの前にarchiveしてみた。\n/usr/jails/archiveの下に\u0026lt;jail名\u0026gt;@日付秒.tarというファイルが出来ている。\nまた、deleteしてもjail.confには記載が残っているようだ。\n$ sudo qjail stop example01 Jail successfully stopped example01 $ sudo qjail archive example01 Successfully archived example01 $ ls /usr/jails/archive/ example01@201310182327.36.tar $ sudo qjail delete example01 Successfully deleted example01 $ sudo qjail list STA JID NIC IP Jailname --- ---- --- --------------- -------------------------------------------------- $ $ cat /etc/jail.conf example01 { host.hostname = \u0026#34;example01\u0026#34;; （後略） qjail restoreでarchive済みのjailを復活可能ッ！ ためしにrestoreしてみたら何事もなかったかのように復活して驚いた。\nこれはスナップショット的に使えますね。\n$ sudo qjail restore example01 Successfully restored example01 $ sudo qjail list STA JID NIC IP Jailname --- ---- --- --------------- -------------------------------------------------- DS N/A em0 192.168.100.240 example01 $ $ sudo qjail start example01 Jail successfully started example01 [vanilla@yaryka ~]$ sudo qjail console example01 Last login: Thu Oct 17 23:50:08 on pts/3 FreeBSD 10.0-BETA1 (GENERIC) #0 r256420: Sun Oct 13 01:43:07 UTC 2013 Welcome to your FreeBSD jail. example01 /root \u0026gt; qjail、便利だよね？ ご覧の通り、qjailはjailをマクロなレベルで扱うことに長けているようで、とても便利に感じる。\nqjailにはほかにもqjail configというコマンドがあり、既存のjailの設定（たとえばIPアドレスとか）を変えたりできるし、jailのOSアップデートも手軽にできるようだ。\nそのあたりはまた試すとして、しばらくjailはqjailでメンテしようと思った。\n","permalink":"https://nobwak.github.io/posts/2013-10-19-10.0-beta1%E3%81%A7ezjail%E3%81%8C%E6%81%AF%E3%81%97%E3%81%A6%E3%81%AA%E3%81%84qjail%E3%81%AB%E4%B9%97%E3%82%8A%E6%8F%9B%E3%81%88%E3%81%9F/","summary":"せっかく覚えたezjailが息してない jailの設定ファイルが、rc.conf,/etc/rc.d/jailからjail.confに変わる。","title":"10.0-BETA1でezjailが息してない→qjailに乗り換えた。"},{"content":"FreeBSD 10.0でsvnliteというのが生まれた。\nこれが何なのか、調べたので。\nsvnliteってなに？ 端的に言って、cvsup, csupの代わり。\n以前、FreeBSDのsrcアップデートにはcsupを使っていたけれども、FreeBSDの公式リポジトリがCVSからSubversionに移行したのでそれに伴う処置。\nだからして、FreeBSDソースコードのチェックアウトに使われるもの。あるいはコミットにも。\nそんなわけで、通常のsvnと違い後述のような性質を持ち、プラグインを多用する場合のsvn用途には使わない方がよい。\nsvnliteの特徴  ライブラリはすべてスタティックでリンクされる。 インストール直後からすぐに使えるし、単体で動く。しかし機能制限はあって: python/perl等のプラグインやAPIのサポートがない。つまり: python/perlに依存しないのでコンパイルはすぐに終わるし, python, perlのバージョンアップに影響を受けない。 注: subversionの依存は凄まじく、普通にインストールすると沢山のお友達を連れてくる都合上、/usr/local配下で238Mバイト消費。 デフォルトでは\u0026quot;svnlite\u0026quot;としてインストールされる。\u0026ldquo;svn\u0026quot;ではない。だから: subversionを別にインストールしても安心。 make.confでWITH_SVNとすると、svnとしてインストールされる。 make.confでWITHOUT_SVNLITEとすると、svnliteは無効に。  詳細は以下。\nhttp://svnweb.freebsd.org/base?view=revision\u0026amp;revision=251886\nあるいは下記から始まる熱い議論。\nhttp://lists.freebsd.org/pipermail/svn-src-all/2013-June/070250.html\nFreeBSD 10.0-BETA1では1.8.1相当。\n$ svnlite --version svn, version 1.8.1 (r1503906) compiled Oct 13 2013, 01:33:45 on bikeshed-green-indigo-orange-freebsd 似たものにsvnupがあるが、2013年6月の時点で問題がありベースシステムへのマージは見送り。（問題にはコアダンプも含まれる…）\n","permalink":"https://nobwak.github.io/posts/2013-10-18-freebsd%E3%83%A1%E3%83%A2_svnlite%E3%81%A3%E3%81%A6%E3%81%AA%E3%82%93%E3%81%A0/","summary":"FreeBSD 10.0でsvnliteというのが生まれた。 これが何なのか、調べたので。 svnliteってなに？ 端的に言って、cvsup, csupの代わり","title":"[FreeBSD][メモ] svnliteってなんだ?"},{"content":"freebsd-version(1) 10.0-BETA1で、freebsd-versionというFreeBSDのパッチレベルを教えてくれるコマンドが生まれた。\n便利なコマンドなのでメモ。\nFreeBSDには、freebsd-updateというバイナリアップデートコマンドがある。\nmake buildworld, buildkernelしなくても、必要なファイルだけを更新してくれる優れもののコマンド。\nセキュリティ更新があった場合や、アップグレードにとても便利なのだが、困ったことが一つ。\nあるセキュリティ更新が、カーネルに影響せず、ユーザランドのファイルのみ対象だった場合。\n仮にここで9.2-RELEASEのユーザランド、たとえばbindにのみ更新があり9.2-RELEASE-p1になったとする。\nそのFreeBSDのパッチレベルを確認しようとunameコマンドを使っても、返ってくるのは9.2-RELEASEである。\nつまりunameはカーネルしか見ていない。\nこれでは本当にfreebsd-updateが完了したか不安になる。\nカーネルを再コンパイルすればきちんと9.2-RELEASE-p1と返してくれるようになるが、これでは何のためのfreebsd-updateなのか分からなくなる。\n今回のfreebsd-versionは、このfreebsd-updateの困ったことを解決してくれるコマンドである。\n使い方 $ freebsd-version 10.0-BETA1 $ which freebsd-version /bin/freebsd-version $ file /bin/freebsd-version /bin/freebsd-version: POSIX shell script, UTF-8 Unicode text executable freebsd-updateは10.0-BETA1で入ったもの。\n/binの下にある。\nご覧の通りシェルスクリプトである。\nfreebsd-versionに-kオプションを与えると、カーネルのパッチレベルを返す。\nuname -rと同じように見えるが、以下の点で違う。\nfreebsd-updateなどでパッチを適用し、リブートして「いない」状態であっても、新しいカーネルのパッチレベルを返してくれる。\nリブートするまえに確認できるから便利ですな。\nオプションなし、あるいは-uオプションを付けると、ユーザランドのパッチレベルを返してくれる。\n-kuとつけると、最初にカーネルのバージョン、次にユーザランドのバージョンを返してくれる。\n以下が実行例だが、ユーザランドに更新のない10.0-BETA1だけに違いが分からない…。\n$ freebsd-version -k 10.0-BETA1 $ freebsd-version -u 10.0-BETA1 $ freebsd-version 10.0-BETA1 $ freebsd-version -ku 10.0-BETA1 10.0-BETA1 詳細はman freebsd-version。\n環境変数ROOTでpathを与えると、freebsd-versionはそこを基準にしてカーネルやユーザランドのパッチレベルを教えてくれる例など載っているので。\nEXAMPLES To determine the version of the currently running userland: /bin/freebsd-version -u To inspect a system being repaired using a live CD: mount -rt ufs /dev/ada0p2 /mnt env ROOT=/mnt /mnt/bin/freebsd-version -ku SEE ALSO uname(1), loader.conf(5), freebsd-version$1n uname -U, uname -K と、この記事をまとめた後（この記事は予約投稿なのです）に、HEADに修正が入った。\nunameに新しいオプションが追加される。-Uと-K。\n-Uがユーザランドの、-Kがカーネルのバージョンを返す。\nHEADだから11.0に入るのかな。\nしかしそうなるとfreebsd-versionの立場は…。と思ったけど、コミット理由に「important for jail/chroot environments」と書いてありますな。\n","permalink":"https://nobwak.github.io/posts/2013-10-17-freebsdfreebsd-update%E3%81%99%E3%82%8B%E3%81%AA%E3%82%89freebsd-version%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86/","summary":"freebsd-version(1) 10.0-BETA1で、freebsd-versionというFreeBSDのパッチレベルを教えてくれるコマンドが生まれた。 便利なコマンドな","title":"[FreeBSD]freebsd-updateするならfreebsd-versionを使おう"},{"content":"FreeBSD 10.0もBETA1がリリースされた。\nウホッとばかり突撃して、pkg_*の無いのに仰け反り、それなのにpkgではインストールのしようが無い現状に絶望した日本のFreeBSDユーザの方（絶対に少ねえ）に捧げます。\n改めて背景を。\n10.0からは、従来のパッケージ管理システムであるpkg_*に代わり、pkgngが登場する。\nしかし。\n2013/10/15現在、いまだ公式のpkgng向けPACKAGESITEが用意されていないのである。\nなぜ、というのはここでも触れたとおり。\nとなれば、現時点ではportsからしか各種ソフトウェアをインストール出来ない。\nうわ面倒くせえ。\nPACKAGESITEは、さすがに10.0-RELEASEのときまでには準備がなされるはずであるが、現時点で外部のミラーサイトを参照せずにpkgngを使う方法を示す。\n（追記:2013/11/7）\n公式のpkgngが公開されている。詳しくは以下を。\n../../../?p=2357\n（追記ここまで）\nその名もpkg-test.freebsd.org。しかし。 実は、ゆくゆくオフィシャルなPACKAGESITEになる予定のサーバはもうある。\nそれがpkg-test.freebsd.orgである。\nじゃ、これをPACKAGESITEに指定すればいいじゃないか。\nしかしですね、ブラウザでpkg-test.freebsd.orgに繋ごうとすると分かるが、No address recordとなるわけですよ。\nというのも、pkg-test.freebsd.orgはDNS上、AレコードではなくSRVレコードだそうであり、かつRFCに沿ってないからだという、もうほんといい加減にせえよ…。\n詳細は下記を。\nWhere is pkg repository for 9.2-RELEASE (amd64)?\nよろしい。ではIPアドレス直打ちでどうだということで、まっさらのFreeBSD 10.0-BETA1でpkgngを使う方法を示す。\nさいしょの一歩(pkgコマンドのインストール) 何はともあれ、まずはpkgコマンドそのものをインストールしなければならない。\npkgと叩けばいいのだが、さっそくこれですよ。\n# pkg The package management tool is not yet installed on your system. Do you want to fetch and install it now? [y/N]: y Bootstrapping pkg please wait pkg: Error fetching http://pkg.FreeBSD.org/freebsd:10:x86:64/latest/Latest/pkg.txz: No address record A pre-built version of pkg could not be found for your system. Consider changing PACKAGESITE or installing it from ports: \u0026#39;ports-mgmt/pkg\u0026#39;. そこで、環境変数PACKAGESITEに以下のアドレスを与えてpkgコマンドを実行。\n下記の例ではhttp://96.47.72.120/pkg-test-freebsd:10:x86:64/latestである。\n96.47.72.120はpkg-test.freebsd.orgのIPアドレス。\ni386だったら、http://96.47.72.120/pkg-test-freebsd:10:x86:32/latestにしてね。\nもちろん、pkg-test.freebsd.orgが参照しているpkg1.nyi.freebsd.orgでもOK。\n# sh # PACKAGESITE=\u0026#34;http://96.47.72.120/pkg-test-freebsd:10:x86:64/latest\u0026#34; pkg The package management tool is not yet installed on your system. Do you want to fetch and install it now? [y/N]: y Bootstrapping pkg please wait Installing pkg-1.1.4_6... done If you are upgrading from the old package format, first run: （中略） Commands provided by plugins: For more information on the different commands see \u0026#39;pkg help \u0026lt;command\u0026gt;\u0026#39;. # これでpkgコマンドがインストールされた。\nつぎはpkgコマンドの設定。\npkgの設定 /usr/local/etc/pkg.confというファイルが出来ているはず。\nここのPACKAGESITEを確認。\nちなみに書式はYAML。\n以下のようになっているはず。\npackagesite: http://96.47.72.120/pkg-test-freebsd:10:x86:64/latest 今後のことを考えて、以下のように書き換えておきましょう。\nPACKAGESITE : http://96.47.72.120/pkg-test-${ABI}/latest オフィシャルのPACKAGESITE（きっとpkg.freebsd.orgになるはず）が準備出来たら、ここはすぐに書き換えること。\nなお、/etc/make.confへのWITH_PKGNG= yesは要りません。\n必要なのはFreeBSD 10.0より前のバージョン。\nFreeBSD HandBookより\n To ensure that the FreeBSD Ports Collection registers new software with pkgng, and not the traditional packages format, FreeBSD versions earlier than 10.X require this line in /etc/make.conf\n そうしたらpkg updateしておしまい。\npkg updateとpkgのインストール # pkg update Updating repository catalogue digests.txz 100% 955KB 238.7KB/s 214.8KB/s 00:04 packagesite.txz 100% 5209KB 274.1KB/s 418.6KB/s 00:19 Incremental update completed, 0 packages processed: 0 packages updated, 0 removed and 21607 added. 2013/10/15の時点で約21000のパッケージがあるようですな。\n念のためpkg upgrade。\n# pkg upgrade Updating repository catalogue Nothing to do # まあ何もないよね。\n試しにいくつかパッケージをインストールしてみましょう。\n# pkg install bash tmux sudo portaudit Updating repository catalogue The following 6 packages will be installed:  Installing gettext: 0.18.3  Installing libevent: 1.4.14b_2  Installing sudo: 1.8.7_1  Installing portaudit: 0.6.1  Installing bash: 4.2.45  Installing tmux: 1.8_1 The installation will require 18 MB more space 4 MB to be downloaded Proceed with installing packages [y/N]: y gettext-0.18.3.txz 100% 2086KB 231.8KB/s 285.9KB/s 00:09 libevent-1.4.14b_2.txz 100% 125KB 124.5KB/s 124.5KB/s 00:01 sudo-1.8.7_1.txz 100% 652KB 217.4KB/s 392.2KB/s 00:03 portaudit-0.6.1.txz 100% 10KB 10.1KB/s 10.1KB/s 00:00 bash-4.2.45.txz 100% 890KB 222.6KB/s 360.2KB/s 00:04 tmux-1.8_1.txz 100% 203KB 203.3KB/s 193.3KB/s 00:01 Checking integrity... done [1/6] Installing gettext-0.18.3... done [2/6] Installing libevent-1.4.14b_2... done [3/6] Installing sudo-1.8.7_1... done [4/6] Installing portaudit-0.6.1... ===\u0026gt; To check your installed ports for known vulnerabilities now, do:  /usr/local/sbin/portaudit -Fda  done [5/6] Installing bash-4.2.45... done [6/6] Installing tmux-1.8_1... done パッケージも新しく、pkg auditで確認しても脆弱性の報告はない。\n# pkg audit -F auditfile.tbz 100% 90KB 90.0KB/s 90.0KB/s 00:01 0 problem(s) in your installed packages found. # というわけで、いろいろ問題はあるけれど、pkg-test.freebsd.orgは現時点で十分使えるということでございます。\n","permalink":"https://nobwak.github.io/posts/2013-10-16-freebsd_10.0-beta1%E3%81%A7ports%E3%82%84%E3%83%9F%E3%83%A9%E3%83%BC%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E9%A0%BC%E3%82%89%E3%81%9Apkgng%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AB%E3%81%AF2013_10_15%E7%8F%BE%E5%9C%A8/","summary":"FreeBSD 10.0もBETA1がリリースされた。 ウホッとばかり突撃して、pkg_*の無いのに仰け反り、それなのにpkgではインストールのしようが無い","title":"FreeBSD 10.0-BETA1でportsやミラーサイトに頼らずpkgngを使うには（2013/10/15現在）"},{"content":"FreeBSD 10.0-RELEASEから、インストールの際にファイルシステムとしてZFSが選べるようになる。\nシステムの置かれるファイルシステムをZFSにする、ということは、今までも出来ないことはなかったけど、そりゃもう面倒な手順を経る必要があった。\nそれがインストールの時の選択ひとつで出来るようになったというのは、けっこうすごいこと。\nまた、システムをZFSに置けると、まずパーティションの切り方に悩まなくて済む。\nあとで/varが足らないとか/usr/localがとかそういったことが無くなる。\nそのうえで、システムまるごとzfsのアドバンテージを満喫できる。\nまるまるスナップショット取れたりするからね。\nただ、2012/10/10現在、いまだテスト中のところであり、10.0-BETA1あたりに入るかも、という状態。(2013/10/15追記; 10.0-BETA1に入ってました）\nそんな状態で試してみた顛末を記す。\nなお一次情報は以下の通り。\nインストーラでのzfs on rootを試す 前提:FreeBSD 10.0-ALPHA5, zfsbootonly.2013-10-09.isoをvirtualboxで試しています。\n注意: 先述の通りテストの真っ最中なので、下記の内容が変わる可能性は十分にあります。\nAllan Jude氏のページからインストーラをダウンロードする。\n通常通り起動し、10.0になっても相変わらず愛想のかけらもないメニューを選択して進むと、以下の通りフォーマットのところでZFSが選べる。\nZFSを選ぶとこのように。\n使うディスクを選び、進む。\nあとは通常通り。\nunameはこの通り。\nFreeBSD yaryka 10.0-ALPHA5 FreeBSD 10.0-ALPHA5 #0 r256092: Sun Oct 6 22:30:23 UTC 2013 root@snap.freebsd.org:/usr/obj/usr/src/sys/GENERIC amd64 カーネルモジュールがこのように組み込まれている。\n$ kldstat Id Refs Address Size Name  1 10 0xffffffff80200000 17fbc88 kernel  2 1 0xffffffff819fc000 2b66d0 zfs.ko  3 2 0xffffffff81cb3000 8098 opensolaris.ko ディスクの内容はこのように。\n$ df -h Filesystem Size Used Avail Capacity Mounted on zroot/bootenv/default 61G 856M 60G 1% / devfs 1.0k 1.0k 0B 100% /dev zroot/tmp 60G 176k 60G 0% /tmp zroot/usr/home 60G 184k 60G 0% /usr/home zroot/usr/local 60G 144k 60G 0% /usr/local zroot/usr/obj 60G 144k 60G 0% /usr/obj zroot/usr/ports 60G 160k 60G 0% /usr/ports zroot/usr/ports/distfiles 60G 144k 60G 0% /usr/ports/distfiles zroot/usr/ports/packages 60G 144k 60G 0% /usr/ports/packages zroot/usr/src 60G 144k 60G 0% /usr/src zroot/var 60G 452k 60G 0% /var zroot/var/crash 60G 148k 60G 0% /var/crash zroot/var/db 60G 240k 60G 0% /var/db zroot/var/db/pkg 60G 144k 60G 0% /var/db/pkg zroot/var/empty 60G 144k 60G 0% /var/empty zroot/var/log 60G 196k 60G 0% /var/log zroot/var/mail 60G 144k 60G 0% /var/mail zroot/var/run 60G 228k 60G 0% /var/run zroot/var/tmp 60G 152k 60G 0% /var/tmp ","permalink":"https://nobwak.github.io/posts/2013-10-14-freebsd_10%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%A9%E3%81%8B%E3%82%89%E3%81%AEzfs_on_root%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%88%E3%83%BC/","summary":"FreeBSD 10.0-RELEASEから、インストールの際にファイルシステムとしてZFSが選べるようになる。 システムの置かれるファイルシステムをZFS","title":"FreeBSD 10インストーラからのzfs on rootを試してみたよー"},{"content":"前回の続き\n前提\n以下、「ホスト」とはjailを動かすおおもとのマシンを表す。親。\n「Jailホスト」はjail環境で動くホストを表す。子。\n今回の範囲 本記事では二つ目以降を扱う。\n一つ目まではホストOSでの設定作業だったが、今回は実際にflavoursに設定を書き込むことになる。\n ホストで動かしたいサービス\n→sshdのみ。 Jailホストで動かしたいサービス\n→apache, sshd Jailホストに追加するユーザ/グループ\n→vanilla:vanilla Jailホストで使用するソフトウェア\n→apache22, sudo, bash, portaudit, portmaster, tmux  flavoursを作ってみる 設定変更せずezjail-admin installしたなら、flavoursは/usr/jails/flavoursの下にある。\nflavoursの下には、設定サンプルとしてexampleというディレクトリがある。\nexample flavoursをコピーして、\u0026ldquo;testsv\u0026quot;というflavoursを作る。\n$ cd /usr/jails/flavours/ $ ls example $ sudo cp -pR ./example ./testsv $ cd /usr/jails/flavours/ $ ls example testsv $ flavourの中身 testsvの下は以下のようなディレクトリ構成で、flavourとして使うファイルがあらかじめ格納される。\n※以下、断りのない限り、./etc/rc.conf などと記載した場合には、ホストのではなく、flavourのファイルとする。\n./etc: make.conf periodic.conf rc.conf rc.d ./etc/rc.d: ezjail.flavour.example ./usr/local/etc: sudoers このうち、ezjail.flavour.exampleはjailホスト初回起動時に実行されるスクリプト。\nユーザ追加やpkgの追加はここで行う。\nまた、rc.confの中を見てみると、sendmailやrpcbindを停止する設定や、syslogdがsocketを掴まないようにする設定が最初から書かれている。\n# Pretuned by German Engineers # No network interfaces in jails network_interfaces=\u0026#34;\u0026#34; # Prevent rpc rpcbind_enable=\u0026#34;NO\u0026#34; # Prevent loads of jails doing their cron jobs at the same time cron_flags=\u0026#34;$cron_flags -J 15\u0026#34; # Prevent syslog to open sockets syslogd_flags=\u0026#34;-ss\u0026#34; # Prevent sendmail to try to connect to localhost sendmail_enable=\u0026#34;NO\u0026#34; sendmail_submit_enable=\u0026#34;NO\u0026#34; sendmail_outbound_enable=\u0026#34;NO\u0026#34; sendmail_msp_queue_enable=\u0026#34;NO\u0026#34; # Bring up sshd, it takes some time and uses some entropy on first startup # sshd_enable=\u0026#34;YES\u0026#34; flavourの設定 ではtest flavourの設定を始める。\n必要に応じてrc.confなどの設定ファイルを書き換えるのと、ezjail.flavour.exampleに、jailホストの初期設定スクリプトを書き込んでいく。\n設定ファイルの書き換えには、ホストのファイルを参考にするとよいでしょう。\n各種設定ファイルの書き換え jailホストで動かしたいのはsshdとapache。\nよって./etc/rc.confに以下二行を加えた。\napache22_enable=\u0026#34;YES\u0026#34; sshd_enable=\u0026#34;YES\u0026#34; また./usr/local/etc/sudoersに以下を追加。\nここはお好みで。\nDefaults env_keep += \u0026#34;HTTP_PROXY FTP_PROXY\u0026#34; Defaults env_keep += \u0026#34;PKG_PATH PKG_DBDIR PKG_TMPDIR TMPDIR PACKAGEROOT PACKAGESITE PKGDIR FTP_PASSIVE_MODE\u0026#34; Defaults env_keep += \u0026#34;PORTSDIR PORTS_INDEX PORTS_DBDIR PACKAGES PKGTOOLS_CONF\u0026#34; apache22の設定は\u0026hellip;、これはjailホストが起動してからでいいか。\nezjail.flavour.exampleでのユーザ/グループ追加 ユーザvanilla、グループvanillaを追加する。\nuid, gidは10010にし、vanillaはwheelグループに加える。\n以下をezjail.flavour.exampleに追加\nユーザ追加スクリプトの詳細はこちら。\nなお、グループ追加を先にすること。\nユーザ追加のときにグループ指定をするから。\npw groupadd -q -n vanilla -g 10010 echo -n \u0026#39;$6$SALTsalt$gH47I0mRGadJVVlIpeTxVlYw.SjkPOZ7lJoGkqOyhyeUJ7PV5QWuYpIG6D5ggew6RXLpl1eA72TpgX5pGDpr/.\u0026#39; |\\ pw useradd -n vanilla -u 10010 -s /bin/sh \\ -m -d /home/vanilla -G vanilla -c \u0026#39;vanilla user\u0026#39; \\ -H 0 pw usermod vanilla -G wheel ezjail.flavour.exampleでのpkg追加 pkg_add -rで必要なpkgを並べる。\n./pkgにpkgを置いておく方法もあるのだが、依存関係も考慮して必要なpkgを揃えるのは面倒。\nportsの場合は、basejailにportsのディレクトリを作っておく必要がある。今回は触れない。\n以下のようにpkgを取得するサーバを指定してからpkg_add。\nproxyが必要なら、それも。\n#HTTP_PROXY=\u0026#34;http://proxyserver:80/\u0026#34;; export HTTP_PROXY PACKAGEROOT=\u0026#34;ftp://ftp2.jp.freebsd.org/\u0026#34;; export PACKAGEROOT pkg_add -r apache22 sudo bash portaudit portmaster tmux シェルの変更 ユーザvanillaのシェルをbashに変えておくために以下を追加。\nchpass -s /usr/local/bin/bash vanilla rootパスワードの変更 rootのパスワードも変える。\nnologinにすると、あとあとezjail-admin consoleでrootログインすることができなくなる。\necho -n \u0026#39;$6$SALTsalt$gH47I0mRGadJVVlIpeTxVlYw.SjkPOZ7lJoGkqOyhyeUJ7PV5QWuYpIG6D5 ggew6RXLpl1eA72TpgX5pGDpr/.\u0026#39; |\\ pw mod user root \\ -H 0 これでflavoursの設定は終わり。\nflavourでjailホスト作成。 あとは簡単。\njailホストを作成するときに、-fでflavourを指定すればいいだけ。\n$ sudo ezjail-admin create -f testsv example01 \u0026#39;em0|192.168.200.1\u0026#39; /usr/jails/example01/. /usr/jails/example01/./dev /usr/jails/example01/./.cshrc （中略） /usr/jails/example01/./usr/local/etc/sudoers 18 blocks $ 起動。pkg_add -rのせいで少し時間がかかる。\n$ sudo ezjail-admin start example01 Configuring jails:. Starting jails: example01. $ consoleに入ってみると、ユーザvanillaやpkgの追加がなされていることが確認できる。\n同時にsshdも起動している。\napacheは設定も何もしていないので動いてないけど。\n$ sudo ezjail-admin console example01 （中略） root@example01:~ # finger vanilla Login: vanilla Name: vanilla user Directory: /home/vanilla Shell: /usr/local/bin/bash No Mail. No Plan. root@example01:~ # pkg_info apache22-2.2.25 Version 2.2.x of Apache web server with prefork MPM. apr-1.4.8.1.5.2 Apache Portability Library bash-4.2.45 The GNU Project\u0026#39;s Bourne Again SHell db42-4.2.52_5 The Berkeley DB package, revision 4.2 expat-2.1.0 XML 1.0 parser written in C gdbm-1.10 GNU database manager gettext-0.18.3 GNU gettext package libevent-1.4.14b_2 Provides an API to execute callback functions on certain ev libiconv-1.14_1 A character set conversion library pcre-8.33 Perl Compatible Regular Expressions library perl-5.14.4 Practical Extraction and Report Language portaudit-0.6.1 Checks installed ports against a list of security vulnerabi portmaster-3.17.1 Manage your ports without external databases or languages sudo-1.8.7_1 Allow others to run commands as root tmux-1.8_1 A Terminal Multiplexer root@example01:~ # service sshd status sshd is running as pid 2945. root@example01:~ # あとは、testsvをさらにコピーし、インストールするpkgを変えればどんどん使い回せる。\nもちろん、その時はユーザやパスワードも変えよう。\nセキュリティのためにjail使ってるのに、同じユーザ同じパスワードだったら全く意味がないし。\n以上、flavoursの作り方。\n","permalink":"https://nobwak.github.io/posts/2013-10-10-ezjail%E3%81%AEflavours%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86_%E3%81%9D%E3%81%AE2/","summary":"前回の続き 前提 以下、「ホスト」とはjailを動かすおおもとのマシンを表す。親。 「Jailホスト」はjail環境で動くホストを表す。子。 今回の","title":"ezjailのflavoursを使ってみよう その2"},{"content":"[FreeBSD] ezjailを試そう\nezjailで作るjailの基本設定を変えよう\nからの続き\n以下、「ホスト」とはjailを動かすおおもとのマシンを表す。親。\n「Jailホスト」はjail環境で動くホストを表す。子。\nezjailのflavoursとは。 新しいJailは、真っ新（まっさら）のFreeBSDで作られる。ezjailは、Jailホストの面倒な設定作業を簡素化する仕組みがある。これがflavoursである。\nflavoursでは、予め設定された内容に従って、ファイルをコピーしたり、パッケージをインストールしたり、スクリプトを実行できる。\nたとえば、rc.conf, make.conf, periodic.confやsudoersなどである。\n以下より意訳。\nhttp://erdgeist.org/arts/software/ezjail/#Flavours\n「flavours」の場所 特に指定をしなければ、ezjail-admin installで/usr/jails/flavoursに格納される。\n初期状態では、サンプルとして/usr/jails/flavours/exampleが用意されている。\nこれを参考に自分用のflavoursを作ればよい。\n「flavours」の中身 exampleの中をのぞくと、/usr/jails/flavours/exampleを起点に、以下のファイルがある。\n./usr/local/etc/sudoers ./etc/make.conf ./etc/periodic.conf ./etc/rc.conf ./etc/rc.d/ezjail.flavour.example ./etcや./usr/local/etcに必要なファイルを入れておけばよいというわけ。\nところでezjail.flavour.exampleだけは特殊。\n「ezjail.flavour.example」とは jailホストが初めて起動する際に実行されるスクリプト。\nここに初期設定で必要なこと、たとえばユーザ・グループの追加やら、パッケージの追加やら、つらつら書いておけばよい。\n（中身を見ればわかるがezjail.flavour.example自体を消す処理も入っている）\njailホストの仕様検討 実際にflavousの作成に入る前に。\n同じHW上で複数のサービスを行うため、jailホストを稼働させるまえに何点か考えておかないといけないことがある。\n仕様検討というのは仰々しいが、あとあと効いてくるので真面目にやる。\nとりあえず以下を決めておけばよいかな、と。\n ホストで動かしたいサービス Jailホストで動かしたいサービス Jailホストに追加するユーザ/グループ Jailホストで使用するソフトウェア  一番注意すべきことは、ポートのListenである。\nホストとJailホストには別々のIPアドレスを付与するものの、サーバソフトウェアが個々のIPアドレスを意識するとは限らない。\nだからして「動かしたいサービス」はJailホストだけでなく、ホストも含めて考えることが必要だし、それぞれで動かすサーバソフトウェアには、ListenするIPアドレスを明示する必要がある。\n以下のように設定した。\n ホストで動かしたいサービス\n→sshdのみ。 Jailホストで動かしたいサービス\n→apache, sshd Jailホストに追加するユーザ/グループ\n→vanilla:vanilla Jailホストで使用するソフトウェア\n→apache22, sudo, bash, portaudit, portmaster, tmux  このうち、最初の件を除いた残りの三つは、すべてflavoursで設定する。\nではひとつずつ。\nホストで動かしたいサービス sshdだけで良いとした。\nではホストで動いているサービスはなんだろうか。sockstat -l4でリストできる。\n$ sockstat -l4 USER COMMAND PID FD PROTO LOCAL ADDRESS FOREIGN ADDRESS root sendmail 1002 3 tcp4 127.0.0.1:25 *:* root sshd 992 4 tcp4 *:22 *:* root syslogd 904 7 udp4 *:514 *:* sendmailが動いている。これは不要。\nsshdは動いてても構わないが、Local Addressが*:22になっている。\nこれはIPアドレスを意識せず、ポート22に届いたものはすべて自分宛と認識するということ。Jailホストに来た接続もこちらに繋がってしまう。これはまずい。\nsyslogdも*:514で動いている。これも何らかの対応が必要。\nホストのサービスの調整（sshd） sshdはsshd_configで以下の行を追加し、ホストのIPアドレスでのみListenするように。\nListenAddress ＜ホストのIPアドレス＞ sshdを再起動するとsockstat -l4の表示が変わる。\n$ sudo service sshd restart Stopping sshd. Starting sshd. $ sockstat -l4 USER COMMAND PID FD PROTO LOCAL ADDRESS FOREIGN ADDRESS root sshd 1845 3 tcp4 192.168.154.128:22 *:* root sendmail 1002 3 tcp4 127.0.0.1:25 *:* root syslogd 904 7 udp4 *:514 *:* ホストのサービスの調整（sendmail） sendmailの停止はこちらを参照。\n再起動、あるいはservice sendmail stopでよい。\n$ sudo service sendmail stop Stopping sendmail. Stopping sendmail_clientmqueue. $ sockstat -l4 USER COMMAND PID FD PROTO LOCAL ADDRESS FOREIGN ADDRESS root sshd 1845 3 tcp4 192.168.154.128:22 *:* root syslogd 904 7 udp4 *:514 *:* $ ホストのサービスの調整（syslogd） syslogdは、デフォルトだと\u0026quot;-s\u0026quot;オプションで動いているはず。\n\u0026ldquo;-s\u0026quot;は、「リモートマシンからのログを受け取らない」というもの。\nこれで不自由してないのなら、\u0026quot;-ss\u0026quot;にしてポートすら開けないようにしてもいい。\n\u0026ldquo;-ss\u0026quot;にしないのなら、念のため\u0026rdquo;-b\u0026quot;オプションでホストのIPアドレスを明示しておくとよい。\nSYSLOGD(8) FreeBSD System Manager\u0026#39;s Manual SYSLOGD(8) NAME syslogd -- log systems messages -s Operate in secure mode. Do not log messages from remote machines. If specified twice, no network socket will be opened at all, which also disables logging to remote machines. -b :service Bind to a specific address and/or port. The address can be spec- ified as a hostname, and the port as a service name. If an IPv6 address is specified, it should be enclosed with `[\u0026#39; and `]\u0026#39;. The default service is `syslog\u0026#39;. /etc/rc.confに以下を追記する場合\nsyslogd_flags=\u0026#34;-ss\u0026#34; $ sudo service syslogd restart Stopping syslogd. Starting syslogd. $ sockstat -l4 USER COMMAND PID FD PROTO LOCAL ADDRESS FOREIGN ADDRESS root sshd 992 3 tcp4 192.168.154.128:22 *:* $ 以下を追記した場合\nsyslogd_flags=\u0026#34;-b 192.168.154.128\u0026#34; $ sockstat -l4 USER COMMAND PID FD PROTO LOCAL ADDRESS FOREIGN ADDRESS root syslogd 1540 6 udp4 192.168.154.128:514 *:* root sshd 992 3 tcp4 192.168.154.128:22 *:* ホストのサービスの調整（inetd.conf） もしホストでinetd.confを動かしているのなら、-aオプションでホストのIPアドレスを与えること。\nINETD(8) FreeBSD System Manager\u0026#39;s Manual INETD(8) NAME inetd -- internet ``super-server\u0026#39;\u0026#39; -a Specify one specific IP address to bind to. Alternatively, a hostname can be specified, in which case the IPv4 or IPv6 address which corresponds to that hostname is used. Usually a hostname is specified when inetd is run inside a jail(8), in which case the hostname corresponds to that of the jail(8) environment. inetdのデフォルトオプションは\u0026rdquo;-wW -C 60″なので、以下のようにして/etc/rc.confに追加\ninetd_flags=\u0026#34;-wW -C 60 -a ＜ホストのIPアドレス＞\u0026#34; サンプルrc.conf # kill sendmail sendmail_enable=\u0026#34;NO\u0026#34; # Run the sendmail inbound daemon (YES/NO). sendmail_submit_enable=\u0026#34;NO\u0026#34; # Start a localhost-only MTA for mail submission sendmail_outbound_enable=\u0026#34;NO\u0026#34; # Dequeue stuck mail (YES/NO). sendmail_msp_queue_enable=\u0026#34;NO\u0026#34; # Dequeue stuck clientmqueue mail (YES/NO). # prohibit syslog to open a socket syslogd_flags=\u0026#34;-ss\u0026#34; # make syslog listen on specific ip address # syslogd_flags=\u0026#34;-b x.x.x.x\u0026#34; # make inetd listen on specific ip address # inetd_flags=\u0026#34;-wW -C 60 -a x.x.x.x\u0026#34; 意外に長くなったのでここまで。\n続きは以下。\nezjailのflavoursを使ってみよう その2\n","permalink":"https://nobwak.github.io/posts/2013-10-08-ezjail%E3%81%AEflavours%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86_%E3%81%9D%E3%81%AE1/","summary":"[FreeBSD] ezjailを試そう ezjailで作るjailの基本設定を変えよう からの続き 以下、「ホスト」とはjailを動かすおおもとのマシンを表す。親","title":"ezjailのflavoursを使ってみよう その1"},{"content":"[FreeBSD] ezjailを試そう の続き\n以下、「ホスト」とはjailを動かすおおもとのマシンを表す。親。\n「Jailホスト」はjail環境で動くホストを表す。子。\nezjailにはflavoursという仕組みがある。\nezjailのflavoursとは。 以下より意訳。\nhttp://erdgeist.org/arts/software/ezjail/#Flavours\n新しいJailは、真っ新（まっさら）のFreeBSDとして作られる。ezjailは、Jailホストの面倒な設定作業を簡素化する仕組みがある。これがflavoursである。\nflavoursでは、予め設定された内容に従って、ファイルをコピーしたり、パッケージをインストールしたり、スクリプトを実行できる。\nたとえば、rc.conf, make.conf, periodic.confやsudoersなどである。\n\u0026ldquo;flavour\u0026quot;ではない基本の味付け flavourとは言ってみれば「風味」のこと。\n新しいjailを作る時の「風味づけ」に使われるものだから、逆に言うと基本の味付けには不適切である。\n具体的に言うと、新しいjailを作る際に必ず設定したいものは、flavoursではなく、基本設定に含めるべき、ということになる。\nでは基本設定はどこでするのか、というと、まずezjailの仕組みを確認してから。\nezjailの仕組み /usr/jails/basejailというディレクトリがある。\nこれはFreeBSD環境のコピーで、ホスト上で作られたJailが使う。\n共有して使うので、読み取り専用でマウントしている。\nこれとは別に/usr/jails/newjailというディレクトリがある。\nこちらは、新しいjailを作るときのテンプレートである。\nということは、セキュリティパッチの適用やOSアップグレードはbasejailに対して行い、新しいjailホストを作る時の基本設定はnewjailに対して行えばよい。\n基本の味付けに必要なものは？ パターンは二つある。\n何らかのファイルを追加する場合と、ファイルを書き換える場合。\n追加するファイルには、/etc/resolv.conf、/etc/localtime、/etc/wall_cmos_clockは必須。\nただし、ホストの時刻がUTCなら/etc/wall_cmos_clock不要。\nresolv.confは名前解決（リゾルバ）のためのファイル、localtime, wall_cmos_clockはタイムゾーン関連ファイル。\nそのほか、/etc/hosts, /etc/nsswitch.confも必要であれば。\nファイル書き換えの場合には、例えばportsnap.confを国内のportsnapサーバに向けておきたいとか、rootの.cshrcに手を入れておきたいとか、そういったもの。\nユーザの追加や、pkgの追加はbasejailにはできない（と思う）。\nこういうのはflavoursで。\n基本味付け 前章で挙げたファイルは、端からnewjailに放り込んでいけばよい。\nID, group, パーミッションを保持するために-pオプションはつけましょう。\n$ sudo cp -p /etc/resolv.conf /etc/localtime /etc/wall_cmos_clock /usr/jails/newjail/etc/ $ 書き換え系は、newjail/etcの下のファイルをご自由に\n例えば、/usr/jails/newjail/etc/portsnap.confのSERVERNAMEを以下のように。\nSERVERNAME=portsnap.allbsd.org 試してみよう example01というjailを作ってみる。\n$ sudo ezjail-admin create example01 \u0026#39;em0|192.168.200.1\u0026#39; $ sudo ezjail-admin start example01 Configuring jails:. Starting jails: example01. $ $ sudo ezjail-admin console example01 コンソールログインして試してみると、日付もJSTになっているし、resolv.confも正しく設定されている。\nroot@example01:~ # date Tue Oct 1 12:52:38 JST 2013 root@example01:~ # cat /etc/resolv.conf # Generated by resolvconf search localdomain nameserver 192.168.154.2 root@example01:/ # grep SERVER /etc/portsnap.conf SERVERNAME=portsnap.allbsd.org root@example01:/ # flavoursの使い方はまた今度。\nezjailのflavoursを使ってみよう その1\nezjailのflavoursを使ってみよう その2\n","permalink":"https://nobwak.github.io/posts/2013-10-03-ezjail%E3%81%A7%E4%BD%9C%E3%82%8Bjail%E3%81%AE%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E3%82%92%E5%A4%89%E3%81%88%E3%82%88%E3%81%86/","summary":"[FreeBSD] ezjailを試そう の続き 以下、「ホスト」とはjailを動かすおおもとのマシンを表す。親。 「Jailホスト」はjail環境で動くホストを表","title":"ezjailで作るjailの基本設定を変えよう"},{"content":"タイトルそのままである。\nたぶんGoogle様あたりが始めたのだと思うけど、何かの認証の際にスマートフォンをトークンキーとして使う仕組みはとても便利である。\n二要素認証、つまりパスワード/パスフレーズに加えトークンキーも必須にすることで、セキュリティは段違いに向上する。\nしかし、ちょっと前までトークンキーと言えばRSAのハードウェアで、手軽に使えるとは言えない代物だった。\nそれがスマートフォンで出来るんだから問答無用で便利なんである。\nそんなgoogleの2段階認証を、自分のサーバのログインにも使えると聞いて驚愕して試して感動したので下記に顛末を記す。\nなお、FreeBSDで試しているが、Linuxでも大丈夫。Mintでの結果を末尾に追記。\n事前準備（スマートフォン側） Android、あるいはiOSにgoogle authenticatorをインストールし、2段階認証プロセスの準備をしておく。\n2段階認証プロセスについて\nhttps://support.google.com/accounts/answer/180744?hl=ja\n事前準備（サーバ側） googleの2段階認証プロセス用のソフトウェアをインストールする。\ngraphics/libqrencode\nsecurity/pam_google_authenticator\n以上二つ。\nけっこう依存がありそうなのでpkgでインストールした方がよいかも。\n2段階認証の設定…の前に。 さて今度はスマートフォンとサーバの括り付けを行う段。\nなお、以下の作業はマシンの目の前で行うこと。\n認証の設定を変えるわけだから、遠隔で作業して失敗した日にはログインできなくなって詰む。\n2段階認証の設定 google-authenticatorを実行する。\nあらかじめ書いておくと、実行したらいきなり画面いっぱいにQRコードが表示される。\nその巨大さに動揺しないで、手元のスマートフォンでgoogle authenticatorを起動し、QRコードを読み取ること。\nQRコードではなく手入力でももちろん出来るけれど、QRコードの方がはるかに楽。\nまた、初回起動時にはいろいろと質問される。\n以下に私訳も併記する。\n$ google-authenticator Do you want authentication tokens to be time-based (y/n) y （俺訳: 認証トークンを時間ベースにしますか？他にはカウンタベースがあります。） このあと、どーんと以下のようなQRコードが。\nQRコードを、以下はiOSでの例だが、右上のペンをクリックしてから読み取ると、以下のようにコードが追加される。\nYour new secret key is: xxxxxxxxxxxx Your verification code is xxxx Your emergency scratch codes are: xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx スマートフォンで読み取ったら、続いて細かな設定。\n質問に答えるだけでよい。\ngoogle-authenticatorの設定 私訳を併記。\n私の場合、有効時間を延ばすかどうかにだけNoと答えた。\nなお、以下の最初の質問でyと答えて初めて先ほどのキーがサーバに登録される = ~/.google_authenticatorに登録される。\nnと答えてしまったら、QRコード読み取りからやり直し。\nDo you want me to update your \u0026#34;/home/vanilla/.google_authenticator\u0026#34; file (y/n) y （俺訳: google認証の設定を更新しますか？） Do you want to disallow multiple uses of the same authentication token? This restricts you to one login about every 30s, but it increases your chances to notice or even prevent man-in-the-middle attacks (y/n) y （俺訳: トークンを同時に使えるユーザの数を制限しますか？ 「あなた」も30秒に1回しかログインできなくなりますが、攻撃に 気づいたり、防ぐことが出来るようになるでしょう。） By default, tokens are good for 30 seconds and in order to compensate for possible time-skew between the client and the server, we allow an extra token before and after the current time. If you experience problems with poor time synchronization, you can increase the window from its default size of 1:30min to about 4min. Do you want to do so (y/n) n （俺訳: デフォルトではトークンの有効時間は30秒ですが、サーバとクライアントの 時刻ずれを考慮して、さらにその前後30秒の猶予を設けています。 時刻ずれがひどいようであれば4分まで延長することができます。 そうしますか？） If the computer that you are logging into isn\u0026#39;t hardened against brute-force login attempts, you can enable rate-limiting for the authentication module. By default, this limits attackers to no more than 3 login attempts every 30s. Do you want to enable rate-limiting (y/n) y （俺訳: もしあなたのコンピュータが、ログインのブルートフォース攻撃に対して 十分な防御が出来ないなら、時間当たりのログイン試行数を制限できます。 デフォルトでは30秒につき3回までしかログイン試行できません。 制限を有効にしますか？） 終わると~/.google-authenticatorというファイルができるはず。\nパーミッションは400。まあ当然ですな。\nsshdで二段階認証を有効にする /etc/pam.d/sshdの一番下に以下の行を追加する。\n一番下だと、認証の際にパスワードを訊かれてからトークンキーの入力。\n一番上にすると、トークンキーが先になる。\nauth required /usr/local/lib/pam_google_authenticator.so sshdを再起動。\nこれ以降、sshログインで2段階認証が有効になるので注意。\nくれぐれもマシンの目の前ですること。\n$ sudo service sshd restart Performing sanity check on sshd configuration. Stopping sshd. Performing sanity check on sshd configuration. Starting sshd. $ 2段階認証を試してみよう さっそく試してみると、パスワード認証のあとにトークンの入力を求められるようになった。\nああ…。なんだろうこの守られてる感。素敵だ。\nlogin as: vanilla Using keyboard-interactive authentication. Password for vanilla@fireelement: Using keyboard-interactive authentication. Verification code: LinuxでもOK 結局のところ、googleの2段階認証は、pamモジュールとして公開されているので、Linuxでだって動く。\n以下はlinux mint 15 Oliviaで試した結果。\nauthenticatorのインストール libpam-google-authenticatorをインストールする。ソフトウェアマネジャーでもapt-getでも。\n設定方法は上で述べたものと変わりないので割愛。\nsshdの設定変更 Linux Mintではsshdの設定に変更が必要だった。\n/etc/ssh/sshd_configでChallengeResponseAuthenticationをyesにする。\n# Change to yes to enable challenge-response passwords (beware issues with # some PAM modules and threads) ChallengeResponseAuthentication yes 認証方法の変更 これもFreeBSDと同じ。/etc/pam.d/sshdを修正する。\nauth required pam_google_authenticator.so sshdの再起動 Linux mintではsshdではなくsshなんだなあ。\nsudo service ssh restart ","permalink":"https://nobwak.github.io/posts/2013-09-30-%E8%87%AA%E5%89%8D%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AEssh%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%ABgoogle%E3%81%AE2%E6%AE%B5%E9%9A%8E%E8%AA%8D%E8%A8%BC%E3%81%8C%E4%BD%BF%E3%81%88%E3%81%A6%E7%A7%8B%E3%81%AE%E5%A4%9C%E9%95%B7%E3%81%AB%E6%84%9F%E5%8B%95%E3%81%97%E3%81%9F%E8%BF%BD%E8%A8%98%E3%81%82%E3%82%8A/","summary":"タイトルそのままである。 たぶんGoogle様あたりが始めたのだと思うけど、何かの認証の際にスマートフォンをトークンキーとして使う仕組みはとて","title":"自前サーバのSSHログインにgoogleの2段階認証が使えて秋の夜長に感動した(追記あり)。"},{"content":"FreeBSD 10が年明けあたりにリリースされる。\n今回のメジャーバージョンアップは、普段と比べて大きな変更があって、とても注目している。\nその変更点を以下にまとめる。あくまでも本日時点。\nなお元ネタはhttps://wiki.freebsd.org/WhatsNew/FreeBSD10\nFreeBSD 10での変更点 システム\npkg\nサーバソフトウェア  仮想化  ファイルシステム  起動  その他  ","permalink":"https://nobwak.github.io/posts/2013-09-23-%E3%83%A1%E3%83%A2freebsd_10%E3%81%AE%E6%96%B0%E6%A9%9F%E8%83%BD/","summary":"FreeBSD 10が年明けあたりにリリースされる。 今回のメジャーバージョンアップは、普段と比べて大きな変更があって、とても注目している。 その変更点を以下","title":"メモ: FreeBSD 10の新機能"},{"content":"Jail FreeBSDにはJailという技術がある。\nJailとは、OSレベルの仮想化技術だ。\nJailを使うと、FreeBSDマシン上にいくつもの独立したシステムを構築できる。\nたとえば、一つのFreeBSDのうえに、Samba, Apacheをそれぞれ独立させて構築させることができる。\n独立、というのは、Apache側のシステムで何が起こっても、Samba側のシステム、ホストのFreeBSDには何の影響もないということ。\nもっと深いところで仮想化するESXiやらXenやらと比べると、オーバーヘッドが小さいという利点がある（と思ってます）。\nこれらの方法だと、各サービスを独立させたいときには、OSごとインストールする必要があるから。\n（仮にあるマシン上でDHCPサーバ, DNS, Samba, Apacheを動かすとして、それぞれ向けにOSをインストール、というのはさすがに辛い。）\n詳しくは下記。\nhttp://ja.wikipedia.org/wiki/FreeBSD_jail\n Jailの利点\n仮想化: 各jailはホストマシン上で動く仮想機械であり、独自のファイルシステムやプロセス空間、ユーザーアカウントを持つ。jailの中のプロセスからは実際のシステムなのかjailの中なのかはほぼ区別できない。\n安全性: 各jailは他のjailにアクセスできないようになっており、安全性が高まっている。\n権限委譲の簡素化: 管理者権限のスコープがjail内に制限されているため、システムの管理者は本来管理者権限が必要な仕事を、計算機全体を操作する権限を渡すことなく行わせることが出来る。\n Jail\u0026hellip;でなくezjailにしよう。 FreeBSD Handbookより抜粋する。\n Jailのセットアップには、FreeBSDとその使用方法についての高度な経験が必要である。\n下記に示す手順が複雑と感じるならば、sysutils/ezjailなどの、より簡単なシステムを検討せよ\n16.6.1.1. Design\nhttp://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/jails-application.html\n ひとめ見てウンザリしたのでezjailにする。\nezjailたったこれだけ（インストールと設定）。 チュートリアルはここにある。\nhttp://erdgeist.org/arts/software/ezjail/\nインストールはpkgから。\n# pkg_add ezjail そして最低限の前準備。\n/etc/rc.confへの追加。\n# ezjail ezjail_enable=\u0026#34;YES\u0026#34; ezjail.confへの追記。\nezjail_ftphost=ftp2.jp.freebsd.org ezjailはFreeBSDの各種データをftpサーバからダウンロードする。\nデフォルトだと本家のftpサーバに繋がってしまうので、最寄りのftpサーバを指定する。\nJailたったこれだけ（Jail環境の構築） ここまで来たら、Jail環境そのものの初期設定をする。\nezjail-admin installが初回設定用のコマンドで、使用するのは原則、一回だけでよい。\nこのコマンドで、Jail関連のディレクトリやらベース環境が作られる。\n$ sudo ezjail-admin install Your system is 9.2-RC3. Normally FTP-servers don\u0026#39;t provide non-RELEASE-builds. Querying your ftp-server... The ftp server you specified (ftp2.jp.freebsd.org) seems to provide the following builds: drwxr-xr-x 2 ftp ftp 4096 Sep 13 15:43 10.0-ALPHA1 lrwxrwxrwx 1 ftp ftp 14 Feb 16 2013 8.3-RELEASE -\u0026gt; ../8.3-RELEASE drwxr-xr-x 2 ftp ftp 4096 May 22 12:59 9.1-RELEASE drwxr-xr-x 2 ftp ftp 4096 Aug 16 20:47 9.2-RC2 drwxr-xr-x 2 ftp ftp 4096 Sep 11 22:14 9.2-RC4 drwxr-xr-x 6 ftp ftp 4096 Sep 13 16:35 ISO-IMAGES Release [ 9.2-RC3 ]: ezjailはホストOSと同じバージョンで環境を作ろうとする。\nしかしホストOSがRELEASEビルドでない場合、言い換えるとホストOSのバージョンがftpサーバに存在しない場合には、上記の通り自分で指定をしなければならない。\nこの状態なら9.2-RC4でしょうなあ。\nなお、バージョンをどのように判定しているかというと、ホストOSでuname -rを実行したときの出力と、ftpサーバのディレクトリとのマッチングである。\nRelease [ 9.2-RC3 ]:9.2-RC4 (中略) /usr/jails/basejail/usr/lib32/libalias_pptp.a /usr/jails/basejail/usr/lib32/libusb_p.a /usr/jails/basejail/usr/lib32/libalias_ftp.so 110276 blocks Note: a non-standard /etc/make.conf was copied to the template jail in order to get the ports collection running inside jails. $ デフォルト設定では、/usr/jailsに各種ファイルが作られる。\n$ ls /usr/jails/ basejail flavours newjail Jailたったこれだけ（Jailホストの構築と起動） たったこれだけと言いつつJailホストの構築までが長かった。\nezjail-admin createでjailホストを作り、ezjail-admin startでjailホストを起動する。\nezjail-admin consoleでjailホストのコンソールにアクセスする。\nと言う流れ。\nJailホストに192.168.1.199というIPアドレスを付与するとし、また、ホストマシンのネットワークIFがem0であるとして、以下のように。\n$ sudo ezjail-admin create example \u0026#39;em0|192.168.1.199\u0026#39; （中略） /usr/jails/example/./sys /usr/jails/example/./basejail 3146 blocks Warning: IP em0|192.168.100.201 not configured on a local interface. $ /usr/jailsの下にexampleとして作られたことが分かる。\n$ ls /usr/jails basejail example flavours newjail そして起動\n$ sudo ezjail-admin start example Configuring jails:. Starting jails: example. $ コンソールへ\n$ sudo ezjail-admin console example FreeBSD 9.2-RC3 (GENERIC) #0 r254795: Sat Aug 24 20:25:04 UTC 2013 Welcome to FreeBSD! （中略） root@example:~ # root@example:~# uname -a FreeBSD example 9.2-RC3 FreeBSD 9.2-RC3 #0 r254795: Sat Aug 24 20:25:04 UTC 2013 root@bake.isc.freebsd.org:/usr/obj/usr/src/sys/GENERIC amd64 Jailたったこれだけ、とは言うけれど。 jailホストは起動したけれども、ご覧のようにネットには出ていけない。これはresolv.confがないから。\n時刻もUTCになっている。\nまた、驚くことにrc.confもない。\nroot@example:~ # ftp ftp2.jp.freebsd.org ftp: Can\u0026#39;t lookup `ftp2.jp.freebsd.org:ftp\u0026#39;: hostname nor servname provided, or not known ftp\u0026gt; bye root@example:~ # date Sun Sep 15 13:51:21 UTC 2013 root@example:~ # cat /etc/rc.conf cat: /etc/rc.conf: No such file or directory root@example:~ # Listenポートを調べてみると、あーあ、sendmailやsyslogdがListenしてしまっている。\nroot@example:~ # sockstat -l4 USER COMMAND PID FD PROTO LOCAL ADDRESS FOREIGN ADDRESS root sendmail 1322 3 tcp4 192.168.100.201:25 *:* root syslogd 1268 6 udp4 192.168.100.201:514 *:* root@example:~ # 先述のチュートリアルにあるQuickStartは早いものの、かように設定が足りません。\nそのため、けっこう基本的なところから自分で構築していかなければならない。\nということで、ezjailの設定を詰めることにして、試しに作ったjailホストは消してしまおう。\njailホストからlogoutし、ezjail-adminでstopし、deleteすればOK。\nroot@example:~ # logout $ sudo ezjail-admin stop example パスワード: Stopping jails: example. $ sudo ezjail-admin delete -w example $ ls /usr/jails basejail flavours newjail $ deleteのときに-wを付け忘れると、/usr/jails/exampleが残る。\nもちろん手動で消すこともできるが、schgフラグが立っているので簡単には消せない。\n$ sudo ezjail-admin delete example $ ls basejail example flavours newjail $ sudo rm -Rf ./example rm: ./example/var/empty: Operation not permitted rm: ./example/var: Directory not empty rm: ./example: Directory not empty $ こういう場合には、schgフラグを消してからrmすること。\n$ sudo chflags -R noschg ./example $ sudo rm -Rf ./example $ ls basejail flavours newjail $ また、deleteの際に-wfとすると、jailを止めてから削除してくれる。\nezjail-admin delete -wf example ezjailの設定は記事を改めてまとめる。\n","permalink":"https://nobwak.github.io/posts/2013-09-16-freebsd_ezjail%E3%82%92%E8%A9%A6%E3%81%9D%E3%81%86/","summary":"Jail FreeBSDにはJailという技術がある。 Jailとは、OSレベルの仮想化技術だ。 Jailを使うと、FreeBSDマシン上にいくつもの独","title":"[FreeBSD] ezjailを試そう"},{"content":"仮想化全盛のこの世の中、OSインストール直後の各種設定はなるだけ無人化したい。\nそこでFreeBSDでのユーザ設定の無人化について。\npw(8) pwを使う。\nman pwすると画面いっぱいに広がるSYNOPSISにまずのけぞる。\nそのくらい、たくさんのことができるpwコマンドであるが、使うのは二つだけ。\npw groupadd pw useradd グループ追加とユーザ追加ですな。\npwでのグループ追加 書式は以下の通り\npw groupadd -q -n \u0026lt;グループ名\u0026gt; -g \u0026lt;GID\u0026gt; -qはエラーメッセージの抑制。\nじゃ実際にエラーが発生したらどうすんだ、って話になるが、そこはステータスコードを使う。\nグループ:testgをgroup ID:10010で追加するなら、以下の通り。\npw groupadd -q -n testg -g 10010 pwでのユーザ追加 グループ追加に比べ、こちらはちょっと複雑。\n書式は以下の通り。\npw useradd -n \u0026lt;ユーザ名\u0026gt; -u \u0026lt;UID\u0026gt; -s \u0026lt;シェル\u0026gt; \\ -m -d \u0026lt;ホームディレクトリ\u0026gt; -G \u0026lt;グループ名\u0026gt; \\ -c \u0026lt;コメント\u0026gt; 特に-mを除いて説明の必要はないと思う。\n-mはホームディレクトリを新規に作る、という意味。\nしかしこれだけだとパスワードを訊かれてしまう。\nパスワード設定も無人でしたい。 パスワード設定も自動化するには、以下のようにする。\necho -n \u0026#39;\u0026lt;パスワード\u0026gt;\u0026#39; |\\ pw useradd -n \u0026lt;ユーザ名\u0026gt; -u \u0026lt;UID\u0026gt; -s \u0026lt;シェル\u0026gt; \\ -m -d \u0026lt;ホームディレクトリ\u0026gt; -G \u0026lt;グループ名\u0026gt; \\ -c \u0026lt;コメント\u0026gt; \\ -h 0 -h 0をオプションとして与えると、pw はパスワード設定を標準入力から受け付けてくれる。\nつまり、パスワードをechoし、その標準入力を-h 0オプションを与えたpw useraddにパイプすればよい。\nパスワードにtest, uidに10010, シェルに/bin/sh, ホームディレクトリは/home/test, グループ:testに所属するユーザtestを作成するには、以下のように。\necho -n \u0026#39;test\u0026#39; |\\ pw useradd -n test -u 10010 -s /bin/sh \\ -m -d /home/test -G test -c \u0026#39;test user\u0026#39; \\ -h 0 いや、でもさあ、パスワード丸見えじゃないか。\nそう思ったあなたは正しい。\n上記のスクリプトは使うべきでない。\n暗号化済みのパスワードを無人で設定するには。 前章で追加した-hオプションを-Hにすれば、pwは暗号化済みのパスワードを受け付けてくれる。\nこうしておけば、仮にスクリプトを覗かれたって、パスワードを平文で書いてあるよりははるかに危険度は少ない。\nパスワードにtest, uidに10010, シェルに/bin/sh, ホームディレクトリは/home/test, グループ:testに所属するユーザtestを作成するケースを考える。\nこの記事で触れた方法でパスワードを暗号化する。この例ではsaltは\u0026quot;SALTsalt\u0026quot;。\n$ perl -e \u0026#39;print crypt(\u0026#34;test\u0026#34;, \u0026#34;\\$6\\$SALTsalt\u0026#34;);\u0026#39; $6$SALTsalt$gH47I0mRGadJVVlIpeTxVlYw.SjkPOZ7lJoGkqOyhyeUJ7PV5QWuYpIG6D5ggew6RXLpl1eA72TpgX5pGDpr/. 得た文字列をechoしてpwに渡す。※文字列長いので省略してます。\necho -n \u0026#39;\u0026lt;暗号化済みパスワード\u0026gt;\u0026#39; |\\ pw useradd -n test -u 10010 -s /bin/sh \\ -m -d /home/test -G test -c \u0026#39;test user\u0026#39; \\ -H 0 自分のシステムがどの方法でパスワードを暗号化しているか、確認するのを忘れないこと。\nMD5ならまずどのシステムでも大丈夫だが、MD5は今じゃちょっと危ないからね。\n以上\n","permalink":"https://nobwak.github.io/posts/2013-09-09-freebsd_%E7%84%A1%E4%BA%BA%E3%81%A7%E3%81%AE%E3%83%A6%E3%83%BC%E3%82%B6%E8%BF%BD%E5%8A%A0/","summary":"仮想化全盛のこの世の中、OSインストール直後の各種設定はなるだけ無人化したい。 そこでFreeBSDでのユーザ設定の無人化について。 pw(8) pwを使","title":"[FreeBSD] 無人でのユーザ追加"},{"content":"バッチファイルにパスワードを書くときの悩み ユーザの追加や、属性の変更をバッチファイルで処理したいことがある。\nしかしこういった作業には、しばしばパスワードの操作が含まれる。\nしかしパスワードを平文のまま扱うわけにもいかない。\nパスワードの設定・変更をするコマンドが、暗号化されたパスワードも受け付けるようになっているのは、そのためだ。\nたとえばLinuxにはchpasswdというコマンドがある。chpasswdは暗号化されたパスワードを受け付ける。\nもしバッチファイルを覗かれても、パスワードが暗号化されていれば、まあ大丈夫と言える。\nMD5からSHA512へ ところで、こちらの記事でも触れたとおり、MD5は今そこにある危機であるからして、パスワードのハッシュ方法をSHA512に変えるOSもぼちぼち出てきた。\nそういったOSにおいて、暗号化したパスワードでユーザ情報の操作をするには、とうぜんパスワードをSHA512で暗号化しなければならない。\nということで、ある文字列をSHA512暗号化する方法を示す。\nパスワードの書式での暗号化 SHA512で暗号化だなんていうのは簡単なのだが、しかし、パスワードファイルで使われる形式での暗号化となると、ちょっと工夫が必要だ。\nパスワードファイルの形式は以下の通り。\n$＜ハッシュ方式＞$＜salt＞$＜ハッシュ後のパスワード＞ 要するにこういう形式での出力をしてくれるコマンドなりスクリプトでなければならない。\n代表的なものでは、opensslコマンド。\nOpensslコマンドのつかいかた openssl passwdという書式で使う。\n$ openssl version OpenSSL 0.9.8y 5 Feb 2013 ＜中略＞ Usage: passwd [options] [passwords] where options are -crypt standard Unix password algorithm (default) -1 MD5-based password algorithm -apr1 MD5-based password algorithm, Apache variant -salt string use provided salt -in file read passwords from file -stdin read passwords from stdin -noverify never verify when reading password from terminal -quiet no warnings -table format output as table -reverse switch table columns だからたとえば、MD5形式で、saltを\u0026quot;SALTsalt\u0026quot;とし、パスワードを\u0026quot;test\u0026quot;とするならば、 以下のようにする。\n$ openssl passwd -1 -salt \u0026#34;SALTsalt\u0026#34; \u0026#34;test\u0026#34; $1$SALTsalt$CEvzkj.qgOcLTyU2B5Kg3. しかし上述のオプション一覧を見ると分かるのだが、sha512形式には対応していない。\nSHA512は…いまならperlとかpython ここまで引っ張ってナニだが、一発でSHA512ハッシュしてくれるコマンドは見つけられなかった。\nLinuxのmkpasswdも新しければ対応しているようなのだがまだ一般的ではない。\nそこでperl, pythonを使う。\n以下のようにする。\nsaltを\u0026quot;SALTsalt\u0026quot;とし、パスワードを\u0026quot;test\u0026quot;とする。\nperl\n$ perl -e \u0026#39;print crypt(\u0026#34;test\u0026#34;, \u0026#34;\\$6\\$SALTsalt\u0026#34;);\u0026#39; $6$SALTsalt$gH47I0mRGadJVVlIpeTxVlYw.SjkPOZ7lJoGkqOyhyeUJ7PV5QWuYpIG6D5ggew6RXLpl1eA72TpgX5pGDpr/. python\n$ python -c \u0026#34;import crypt, getpass, pwd; print crypt.crypt(\u0026#39;test\u0026#39;,\u0026#39;\\$6\\$SALTsalt\\$\u0026#39;)\u0026#34; $6$SALTsalt$gH47I0mRGadJVVlIpeTxVlYw.SjkPOZ7lJoGkqOyhyeUJ7PV5QWuYpIG6D5ggew6RXLpl1eA72TpgX5pGDpr/. FreeBSDにおける実際の使いどころは以下の記事にて。\n[FreeBSD] 無人でのユーザ追加\nおしまい。\n","permalink":"https://nobwak.github.io/posts/2013-09-07-sha512%E3%81%A7%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E3%81%95%E3%82%8C%E3%81%9Fsalt%E3%81%A4%E3%81%8D%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"バッチファイルにパスワードを書くときの悩み ユーザの追加や、属性の変更をバッチファイルで処理したいことがある。 しかしこういった作業には、しばし","title":"sha512でハッシュされたsaltつきパスワードを生成するには"},{"content":"あちこちで話題になっておりますが、FreeBSDを9.2-RC3に上げたらブート時のロゴがこうなりました。\n元ネタはダイ・ハードですな。\nFreeBSD fireelement 9.2-RC3 FreeBSD 9.2-RC3 #0 r254795: Sat Aug 24 20:25:04 UTC 2013 root@bake.isc.freebsd.org:/usr/obj/usr/src/sys/GENERIC amd64``` ","permalink":"https://nobwak.github.io/posts/2013-09-06-freebsd_9.2-rc3%E3%81%AE%E3%83%96%E3%83%BC%E3%83%88%E6%99%82%E3%83%AD%E3%82%B4%E3%81%8C%E3%83%80%E3%82%A4%E3%83%8F%E3%83%BC%E3%83%89%E3%81%AB/","summary":"あちこちで話題になっておりますが、FreeBSDを9.2-RC3に上げたらブート時のロゴがこうなりました。 元ネタはダイ・ハードですな。 FreeBSD fireelement 9.2-RC3","title":"[FreeBSD] 9.2-RC3のブート時ロゴがダイ・ハードに。"},{"content":"Windows xpには標準でバックアップツールが付属している。\nntbackup.exeというツールである。\n使い方は以下のサイトに詳しい。\n差分バックアップと増分バックアップの違い\nhttp://www.atmarkit.co.jp/fwin2k/win2ktips/305butype/butype.html\nしかし、ntbackup.exeには大きな穴がある。\nそれは、ntbackup.exeで作成したバックアップファイル（拡張子.bkf。以降.bkfファイル）をWindows 7で読めないこと。\nこれは大ダメージ。\nなんでも、ntbackup.exeが標準装備だったのはxp, server 2003が最後だったそうである。\nさてどうやってリストアするか。\n結論として、Windows 7 home editionしか持っていないのだったら、xpを抹殺してはいけない。\nすくなくともライセンスは持っておくこと。\n以下、詳細。\n対策1: MSのツールを使う。 Microsoftから.bkfリストア専用のツールが公開されているので、それを使えばよい。\nもともと、.bkfファイルを読めるツールは、Vista, Server 2008用には公開されていた。\nxpから7に、Vistaを飛び越してアップグレードするユーザが多いため、7, Server 2008R2用にも公開された、という経緯がある。\nNT Backup Restore Utility\nしかし。\nMSツールの制限（Enterprise edition以上じゃないとダメ） そのツールは以下から入手できる。\nWindows 7 および Windows Server 2008 R2 用の Windows NT バックアップ/復元ユーティリティについて\nただし以下のような条件がある。\n 「この更新プログラムを適用するには、コンピューターに以下のいずれかのオペレーティング システムが搭載されている必要があります。\n•英語版の Windows 7 または Windows Server 2008 R2\n•EN-US 言語パックがインストールされている、英語版以外の Windows 7 またはWindows Server 2008 R2」\n 「EN-US 言語パック」が必要なのだが、UltimateかEnterpriseいずれかにしかインストールできないという・・・。\nLanguage packs\nInstall language packs using Windows Update\nWindows 7言語パックの仕組み 厳密に言うと、言語パックにはMUI (Multi-language User Interface) と LIP (Language Interface Pack)の二つがある。\nMUIはUltimate, Enterpriseにしかインストールできない。\nLIPにはどのeditionにもインストールできる。\nしかしLIPは基本の言語（parent language）を変えることができない。\nというのも、LIPは複数言語が使われる国のために作られているものだから。\nたとえば、スペインのWindows 7ではLIPでバスク語に変更できる。\nこういった目的であるから、日本語版Home editionにEN-USをインストールすることはできない。\nMUIがUltimate, Enterpriseにのみ許可されている理由は、複数の国で事業を展開する「ビジネス向け」の機能だから。\n詳細（原文）は以下。\nLanguage pack for Windows 7 Home Edition\nMSツールのさらなる制限（WSUSで許可されてなかったら詰み） よろしい私のWindows 7はEnterprise版である。\nだからインストールしようではないかという方。\nしかし仮にWindows 7がEnterprise版だとしても、これらのツールは原則、Windows Update経由で入手する必要がある。\n個人使用のPCならともかく、企業内LANで使用しているPCだと、セキュリティポリシーってものがある。\n調べた限り、上記の.bkfリストアツール、EN-US 言語パックのうち、少なくとも言語パックはWindows Update経由でしかインストールができない。\n企業内からのWindows UpdateがWSUSサービスで管理されている場合、この言語パックがWSUSで許可されていないとインストールができないのである。\nHome Editionしか持っていなければ即時、Enterprise Edition以上でも言語パックが入手できなければ詰みである。\n対策2: xpからntbackup.exeを持ってきて動かす こうなったらもうxpを使うしかない。\nxpがあればxpで.bkfからリストアして、そのファイルを7に移す。\nあるいは、xpからntbackup.exeを持ってきて動かす。\n後者の場合、systemフォルダにあるntbackup.exe他、以下のファイルを持ってきて、Windows 7で実行する。\nありがたいことに、何とか動く。\nさっさとリストアして.bkfは捨ててしまおう。\nntbackup.exe ntmsapi.dll vssapi.dll というわけで、バックアップはリストア出来る事を確認できて初めてバックアップということを改めて思い知らされた次第である。\n","permalink":"https://nobwak.github.io/posts/2013-09-02-windows_xp%E3%81%AEntbackup.exe%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%82%92windows_7%E3%81%A7%E3%83%AA%E3%82%B9%E3%83%88%E3%82%A2%E3%81%99%E3%82%8B/","summary":"Windows xpには標準でバックアップツールが付属している。 ntbackup.exeというツールである。 使い方は以下のサイトに詳しい。 差分バックアップ","title":"Windows xpのntbackup.exeで作ったバックアップをWindows 7でリストアする"},{"content":"一人だけで管理しているサーバの設定ファイルを更新するとき、皆さんはどのように管理しているだろうか。\n私は以下のようにしていた。\n例えば、httpd.confを2013/8/25に変更しようとするとき。\n# vi httpd.conf # cp -p httpd.conf httpd.conf.20130825 経験のある方はご存じだろうが、長い間これを続けると、ディレクトリが散らかって酷い事になる。\nではバージョン管理を導入すべきか？\nでも、一人で管理しているサーバなのに、わざわざsubversionを入れる？それはちょっと。\nというのが長らくの悩みであったのだが、実はrcsという簡便なリビジョン管理ツールがあることを知った。今さらではあるが。\nしかし、これがまた実に快適であった。\n快適すぎて、今ではどこのディレクトリでもRCSディレクトリ（後述）を掘ってしまうくらいになってしまった。\nそんなRCSについて以下に記す。\nRCSとは。 RCSとはRevision Control System。\nきわめて軽量単純なGNU製のリビジョン管理システムである。\n一人で使う分には十分（いちおう、ロック機能はあるよ！）。\nだいたいのUNIX系OSには最初から入っている。\nFreeBSDはベースシステムに入っているので、インストール不要。これはポイント。\nもちろんLinuxにも（Redhatの5にあることは確認）\nコマンドの使い方を示す。FreeBSD環境下のもの。\nLinux向けmanはこちら。\nhttp://linuxjm.sourceforge.jp/html/GNU_rcs/man1/co.1.html\nRCSのコマンド 使うコマンドはおおよそ以下のようなもの。\n詳しくはman。\nco - check out RCS revisions ci - check in RCS revisions rlog - print log messages and other information about RCS files rcsdiff - compare RCS revisions RCSへの登録 ためしに、/etc/rc.confを、RCSで管理してみる。\n最初にやることはRCSに登録すること。\nci(check in)コマンドを使う。\nciにrc.confを渡してやるだけ。\n初回は「ファイルの説明を入れろ」と聞いてくるので、\u0026ldquo;System Setting file\u0026quot;などと入れてみる。\nドット「.」を入れれば完了。\n$ cd /etc $ sudo ci rc.conf Password: rc.conf,v \u0026lt;-- rc.conf enter description, terminated with single \u0026#39;.\u0026#39; or end of file: NOTE: This is NOT the log message! \u0026gt;\u0026gt; System Setting File \u0026gt;\u0026gt; . initial revision: 1.1 done 最初のバージョンは1.1になる。\n初回チェックインの注意 驚くことに、初めてチェックインするとファイルが消える。\n代わりと言ってはなんだが、ファイル名末尾に「,v」と付いたファイルが現れる。\n$ ls -l rc.conf ls: rc.conf: No such file or directory $ ls -l rc.conf* -r--r--r-- 1 root wheel 353 Aug 25 12:50 rc.conf,v RCSはそれぞれのファイルを、この「,v」ファイルで管理しているのである。\nしかしrc.confが無くなられては困る。\nそこでco(check out)コマンドにより、「,v」からrc.confを取り出す。\n$ sudo co rc.conf rc.conf,v --\u0026gt; rc.conf revision 1.1 done $ ls -l rc.conf* -r--r--r-- 1 root wheel 156 Aug 25 12:55 rc.conf -r--r--r-- 1 root wheel 353 Aug 25 12:50 rc.conf,v 並べてみると「,v」には管理情報が含まれているせいでサイズが少し増えている。\nしかしちょっと待て。\n「,v」が散らかる→RCSディレクトリで解決 新しいファイルをRCSに登録する都度、「,v」が増えていくのではたまらない。\nしかし、そこはさすがに考えられていて、同じディレクトリにRCSというディレクトリがあれば、その下に「,v」を作ってくれる。\nさきほど作ったrc.conf,vを消してから試してみる。\n$ sudo rm rc.conf,v $ sudo mkdir RCS $ sudo ci ./rc.conf ./RCS/rc.conf,v \u0026lt;-- ./rc.conf (略) initial revision: 1.1 done $ ls ./RCS rc.conf,v と、ご覧の通り/etc/RCSの下に「,v」が作られる。\nこうしておけば「,v」ファイルが散らかって困ることはない。\n忘れずにチェックアウト。\nRCS/rc.conf,vから取り出されていることが分かる。\n$ sudo co rc.conf RCS/rc.conf,v --\u0026gt; rc.conf revision 1.1 done ファイルの更新（チェックアウト） 今度はファイルを更新してみる。\n修正したファイルをチェックイン（ci）するだけなのだが、それに先立つチェックアウト（co）の時に考慮すべきことがある。\nそれはファイルのロック。\n単にcoしただけのrc.confのパーミッションを見てみると、読み取り専用（444）になってしまっている（本来は644）。\n$ ls -l rc.conf -r--r--r-- 1 root wheel 156 Aug 25 12:55 rc.conf なにも無計画にしているわけではない。\n「RCSで管理しているファイルを迂闊に書き換えないように」というRCS師匠のありがたい配慮である。\nこれを避けるには、ファイルのロックをしてからチェックアウトをすればよい。\ncoの際に-lオプション（lock）を与えるだけ。\n$ sudo co -l rc.conf Password: RCS/rc.conf,v --\u0026gt; rc.conf revision 1.1 (locked) done $ ls -l ./rc.conf -rw-r--r-- 1 root wheel 156 Aug 25 12:56 ./rc.conf （locked）という表示が増えている。\nまた、パーミッションも644になっている。\nこれでファイル変更の準備ができた。\nファイルの更新（チェックイン） 修正が済んだらチェックイン。\nチェックアウトの時と同じように、ロックの考慮が必要。\n端的に言えばロックを解除する。\nciの際に-uオプション（unlock）を与える。\n$ sudo ci -u ./rc.conf ./RCS/rc.conf,v \u0026lt;-- ./rc.conf new revision: 1.2; previous revision: 1.1 enter log message, terminated with single \u0026#39;.\u0026#39; or end of file: \u0026gt;\u0026gt; disable sendmail on boot \u0026gt;\u0026gt; . done $ log message、つまり修正内容の記入が求められるので書き入れたのちドット「.」で終了。\nそしてロック解除したために、再びファイルのバーミッションが444に戻っている。\n$ ls -l ./rc.conf -r--r--r-- 1 root wheel 283 Aug 25 19:29 ./rc.conf 履歴の確認 RCSで管理しているファイルに対しrlogを発行すると履歴が表示される。\n$ rlog ./rc.conf RCS file: ./RCS/rc.conf,v Working file: ./rc.conf head: 1.2 branch: locks: strict access list: symbolic names: keyword substitution: kv total revisions: 2; selected revisions: 2 description: System configuration file ---------------------------- revision 1.2 date: 2013/08/25 10:29:49; author: root; state: Exp; lines: +6 -0 disable sendmail on boot ---------------------------- revision 1.1 date: 2013/08/25 04:07:09; author: root; state: Exp; Initial revision ---------------------------- ============================================================================= revisoin 1.2では9行追加されていることを示している。\nデフォルトではタイムスタンプがUTC。\nこれは分かりにくいので、ローカルタイムで表示する。\nそのためには-zLTを与える。\n$ rlog -zLT ./rc.conf RCS file: ./RCS/rc.conf,v Working file: ./rc.conf head: 1.2 branch: locks: strict access list: symbolic names: keyword substitution: kv total revisions: 2; selected revisions: 2 description: System setting file ---------------------------- revision 1.2 date: 2013-08-25 19:29:49+09; author: root; state: Exp; lines: +6 -0 disable sendmail on boot ---------------------------- revision 1.1 date: 2013-08-25 13:07:09+09; author: root; state: Exp; Initial revision ---------------------------- ============================================================================= 差分の確認 二つのバージョン間の差分を確認するには、rcsdiffを使う。\n$ rcsdiff -r1.1 -r1.2 ./rc.conf =================================================================== RCS file: ./RCS/rc.conf,v retrieving revision 1.1 retrieving revision 1.2 diff -r1.1 -r1.2 6a7,12 \u0026gt; \u0026gt; # kill sendmail \u0026gt; sendmail_enable=\u0026#34;NO\u0026#34; \u0026gt; sendmail_submit_enable=\u0026#34;NO\u0026#34; \u0026gt; sendmail_outbound_enable=\u0026#34;NO\u0026#34; \u0026gt; sendmail_msp_queue_enable=\u0026#34;NO\u0026#34; 特定のバージョンを取り出す。 coに-rオプションでバージョンナンバを指定する。\n1.1を取り出したいなら-r1.1。\n$ sudo co -r1.1 rc.conf RCS/rc.conf,v --\u0026gt; rc.conf revision 1.1 done しかしこれでは手元にあるファイルが上書きされる。\n都合が悪い場合には-pオプションを使う。\n-pオプションは結果を標準出力に表示させるもの。\n$ sudo co -p -r1.1 rc.conf \u0026gt; /tmp/rc.conf RCS/rc.conf,v --\u0026gt; standard output revision 1.1 ident文字列の埋め込み ファイルを特定しやすくするための仕組みがident文字列。\nある文字列を埋め込んでおくと、RCSが自動的に置換・更新をしてくれる。\n実際に見てもらった方が早い。\nrc.confに埋め込んでみる。\nident文字列には何種類かあるが、ここでは「$Id$」を使う。\nしかし、$Id$といきなり書いてはいけない。コメントとして埋め込もう。\nすなわち、#のあとに続ける。\n（同様に、たとえばxmlなら\u0026rdquo;\u0026lt;!-\u0026ldquo;と\u0026rdquo;-\u0026gt;\u0026ldquo;の間、というようにフォーマットに合わせたコメント文に埋め込むとよい）\nrc.confの例\n#$Id$ hostname=\u0026#34;hogehoge\u0026#34; keymap=\u0026#34;jp.106.kbd\u0026#34; ifconfig_em0=\u0026#34;DHCP\u0026#34; sshd_enable=\u0026#34;YES\u0026#34; これをチェックインすると、自動的に以下のように変換してくれる。\n$ head -1 /etc/rc.conf #$Id: rc.conf,v 1.2 2013/08/24 10:52:27 root Exp $ これは便利である。\n実はこの文字列、よく見かけたのだが、やっとその秘密が分かった。\nしかしタイムスタンプはUTCである。\nチェックインのときに-zLTと指定すればローカルタイムで置換してくれる。\n$ sudo ci -u -zLT ./rc.conf ./RCS/rc.conf,v \u0026lt;-- ./rc.conf new revision: 1.4; previous revision: 1.3 enter log message, terminated with single \u0026#39;.\u0026#39; or end of file: \u0026gt;\u0026gt; update timestamp from UTC to LT \u0026gt;\u0026gt; . done $ head -1 ./rc.conf #$Id: rc.conf,v 1.4 2013-08-24 20:18:36+09 root Exp $ ident文字列のちょっとしたノウハウ ident文字列の場所はどこでもよい。\nしかし、1行目か2行目がよいでしょう。\nident文字列はファイルのIDとして埋め込んでいる。\nIDの場所がバージョンごとに違うと、のちのち差分を確認するときに見にくくなってしまうから。\n","permalink":"https://nobwak.github.io/posts/2013-08-29-%E3%83%AA%E3%83%93%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86rcs%E3%81%AE%E3%81%99%E3%81%99%E3%82%81xxx.conf.20130829%E3%81%A8%E3%81%8B%E3%81%AF%E3%82%82%E3%81%86%E6%AD%A2%E3%82%81%E3%82%88%E3%81%86/","summary":"一人だけで管理しているサーバの設定ファイルを更新するとき、皆さんはどのように管理しているだろうか。 私は以下のようにしていた。 例えば、http","title":"リビジョン管理rcsのすすめ（xxx.conf.20130829とかはもう止めよう）"},{"content":"Plexというメディア共有ソフトウェア群がある。\nPlex Media ServerとPlex Media Clientの二つから成っている。\nPlex Media Serverというサーバを立てておけば、Plex Media Centerのインストールされた端末から動画や音楽を視聴することができる。\nもっと具体的に言うと、自宅でPlex Media Serverを立てておけば、宅内はもちろん、外出先のモバイル端末からでもメディアへアクセスできる。\n動画や音楽をため込んでいるNASにPlex Media Centerをインストールできればとても便利というわけ。\nクライアントは、Windows, Linux, iOS, Android向けに用意されており、PS3, XBOX360はデフォルトで対応。\nしかしiOSやAndroid向けのアプリは\\450と、なかなかのお値段であって、そこまでして外出先で見たいか？と一考する余地はあると思う。\n私も買ってません。\n(追記）2015/8 にjailにインストールしたときの顛末はここ\nPlex Media ServerがFreeBSD/FreeNASに対応 Plex Media Serverは長らくWindows/OS X/Linuxにしか対応していなかったのだが、近ごろFreeBSDにも対応した。\nFreeBSDに対応ということはつまりFreeNASにも対応したということである。\nすなわち冒頭で書いたような、「NASに動画や音楽をため込んで、しかもNASに動画共有させる」事が出来る。\n以下、FreeBSDでのインストール、設定方法を示す。\nインストール FreeBSD対応がなされたばかりであるため、なるべくportsから、それも最新のportsからインストールすることを勧める。\nいずれにしても、Plex Media Serverはクローズドなので、大したコンパイル時間は発生しない。\n$ cd /usr/ports/multimedia/plexmediaserver $ sudo make install clean すぐ終わるはず。\n起動 /usr/local/etc/rc.dに起動スクリプトがインストールされる。\nサーバ起動時にPlex Media Serverも起動するには、/etc/rc.confに以下の一行を追加する。\nplexmediaserver_enable=\u0026#34;YES\u0026#34; ただ今回は実験のため以下のようにして起動。\n$ sudo service plexmediaserver onestart $ $ service plexmediaserver onestatus plexmediaserver is running with pid: 789 $ 設定\nplex media serverを動かしているサーバにブラウザで繋ぐ。\nサーバが192.168.1.1なら以下のように。\nhttp://192.168.1.1:32400/manage/index.html こんな画面になるはず。\nまあ、agreeですな。\n開始。\nFriendly Nameを入れろと言われる。\nFriendly Nameとは、クライアントからPlex Media Serverを見つけやすいように付ける名前。たとえばPlex Serverとか。\nブランクのままにすれば、サーバのホスト名がそのまま使われる。\nあとはまあ、言われたとおりに。\nmyPlexアカウントを入れろ、と言われる。\n外出先のモバイル端末からPlex Media Serverにアクセスするなら、Plexのサイトに行って作ったアカウントをここに入れる。\n自宅内だけで共有するなら、skipしてもOK.\nアクセス Plex Media Serverにアクセスする方法はいくつかある。\n Plex Media CenterをインストールしたWindows, OS X, Linuxからアクセス PlexをインストールしたiOS, Androidからアクセス PS3, XBOX360からアクセス ブラウザからアクセス  ここでは4の方法だけ示す。\nブラウザでのアクセスには「:32400/web/index.html」へ繋ぐ。\nサーバが192.168.1.1なら以下のように。\nhttp://192.168.1.1:32400/manage/index.html たとえばps3だと、XMCのフォト、ミュージック、ビデオにサーバが表示されるようになるので、そこから。\n","permalink":"https://nobwak.github.io/posts/2013-08-24-freebsdfreenas%E3%81%ABplex_media_server%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"Plexというメディア共有ソフトウェア群がある。 Plex Media ServerとPlex Media Clientの二つから成っている。 Plex Media Serverというサーバを","title":"FreeBSD(FreeNAS)にPlex Media Serverをインストール"},{"content":"ここで書いたように、自宅サーバーのroot宛メールをすべてgmailに転送しているのだが、ある日気が付くと、以下のようなメッセージがログに表示されている。\nsSMTP[1044]: Unable to locate smtp.gmail.com 気が付かなかったくらいだから、メールの転送に問題はない。\nないのだけど気持ち悪いので対策しよう。\n原因はmailグループにrootのないこと。\nだから単純に/etc/groupでmailにrootを加えればOK。\nmail:*:6:clamav,root 参考\nForwarding Root’s Mail to a Gmail Account using SSMTP\n","permalink":"https://nobwak.github.io/posts/2013-08-20-ssmtp%E3%81%A7unable_to_locate_smtp.gmail.com%E3%81%8C%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%82%8B/","summary":"ここで書いたように、自宅サーバーのroot宛メールをすべてgmailに転送しているのだが、ある日気が付くと、以下のようなメッセージがログに表","title":"ssmtpでUnable to locate smtp.gmail.comが表示される。"},{"content":"VMware Playerにはsnapshot機能がない。\n仮想マシンを使う目的の一つは、本番マシンではできない、いろいろな実験をすることだ。\nsnapshot機能がないと実験が途端に面倒になる。\nこればかりはどうしようもない。仕方がないので、手元の仮想マシンはすべてVirtualBoxに移行する。\nそのときのメモ。\n全体の流れ  VMWare Player付属のツールでOVFに変換する。 それをVirtualBoxでインポート。  OVFとはOpen Virtualization Formatのこと。詳しくはWikipedia。\nVMWare Player付属のovftool.exeについて\nVMWareのイメージをOVFフォーマットに変換するツール。\nコマンドプロンプトで使う。\n書式は以下の通り。\novftool \u0026lt;変換元イメージ\u0026gt; \u0026lt;変換先イメージ\u0026gt; 実際にやってみる。\nOVFへの変換。 ovftool.exeはVMWare Playerのインストールフォルダにある。\n作業はコマンドプロンプトで行う。\nいちいちcdしていくのが面倒なので、以下のようにしてコマンドプロンプトを開く。\nそして変換元ディスクイメージの指定も面倒なので、いったんエクスプローラに戻り、パスを取得する。\nコマンドプロンプトに戻って貼り付け。その後、変換先イメージの場所を指定。\nVirtualBoxでのインポート 大して難しいことはない。\nが、注意点が一つだけ。\nOVFファイルのあるフォルダに、拡張子.mfを持つファイルがある。\nVirtualBoxでのインポート前に削除しておくこと。\n.mfとはManifestファイルであり、これがあるとインポートに失敗する。\n後は素直に。英語ならpretty straightforwardとかいうでしょうか。\nファイル→仮想アプライアンスのインポート。\n変換してできたovfを選ぶと、設定が表示される。\nメモリ256MBってなんだよ\u0026hellip;。あとで設定を変えよう。\nできあがり。\nこのあと設定を変えればVirtualBoxで使えます。\nなお、OVFファイルは捨ててしまっても問題なし。\n","permalink":"https://nobwak.github.io/posts/2013-08-18-vm_vmware%E3%81%AE%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%82%92virtualbox%E3%81%A7%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80%E3%81%AB%E3%81%AFovf%E7%B5%8C%E7%94%B1%E3%81%A7%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF/","summary":"VMware Playerにはsnapshot機能がない。 仮想マシンを使う目的の一つは、本番マシンではできない、いろいろな実験をすることだ。 snapsh","title":"[VM] VMWareのイメージをVirtualBoxで読み込むには（OVF経由での読み込み）"},{"content":"Hadoopへのノードの追加 hadoopの長所は、処理量に応じて簡単にスケールできる点にある。\n処理がおっつかなくなってきたら、データノードを追加するだけ。\n擬似分散モードから完全分散モードへの移行は、データノードの追加と同じ。\nもう少し詳しく言うと、最初の1台をnamenode/jobtrackerのままにして、datanode/tasktrackerを追加する。\n※FreeBSDで、hadoop-1.0.0です。\n背景 namenode, datanodeはHDFSのノード種別を表し、namenodeはファイルのメタデータを扱い、datanodeは実データを扱う。\nnamenodeはhadoopクラスタに原則1台。datanodeは1台以上必要。\njobtracker, tasktrackerはMapReduceでのノード種別を表し、jobtrackerは作業の分担を、tasktrackerは作業の実施を行う。\njobtrackerはhadoopクラスタに原則1台。tasktrackerは1台以上必要。\nhadoopクラスタに参加しているノードは、4つの役割のいずれかを担う。複数の役割をこなすのも可。\nただしdatanodeとtasktrackerは必ずセット。\nイメージを示す。\n設定ファイル 再掲になるが。\nどのノードがnamenodeかを指定するのは、core-site.xml 。\nどのノードがjobtrackerかを指定するのは、mapred-site.xml 。\nどのノードがdatanode/tasktrackerかを指定するのは、slaves 。\n擬似分散モードでは、以上3つのファイルに1ノードしか書かれていなかった。\nノードを追加するなら、slavesにdatanode/tasktrackerを追記すればよい。\n擬似分散モードの状態からjobtrackerを分離するには、mapred-site.xmlを書き換えればよい。\n擬似分散モードの状態からnamenodeを分離するには、core-site.xmlを書き換えればよいけど、HDFS上にすでにファイルを置いている状態でそんなことするとファイルが吹き飛ぶので止めよう。\nそしてこれら設定ファイルは、クラスタ内のノードで同じものを使う。\n作業の流れ。 datanode/tasktrackerを追加してみる。\n擬似分散モードを仮想マシンで動かしている場合には、それをまるまるコピーしてしまえばよい。\n私の場合は、ESXi上でHadoop環境を作ったので、それをコピーし、別マシンのESXiに移し替えた。\nもちろんホスト名は別のものにする。\nESXiなどを挟まない場合にはもう一度セットアップ。\nほんとに面倒くさいので、chefやらpuppetなどを使うことになるでしょう。\nなお、ESXiは使わない方がパフォーマンスは良い。これは当たり前。\n追加ノードの注意点 便宜上、擬似分散モードを動かしたノードをoriginal、追加するノードをaddとする。\naddを追加するときの注意点は以下の通り。\n/etc/hostsの設定。\noriginal, addの/etc/hostsには、original, addの名前解決ができるようにしておくこと。\n時刻同期\noriginal, addで時刻を合わせておくこと。\nslavesへの追記\noriginal, addそれぞれでslavesにaddと追記しておく。\nSSHログインの確認\noriginalからaddへsshログインできることを確認しておく。\ndatanode/jobtrackerの制御はsshでされるため。\nreplication数の変更\nHDFS上でデータのコピーをどれだけ作成するかの設定。\n擬似分散ではreplicationを1にしていた。\nせっかくなのでこれを2に変更する。\nデフォルトは3。\ndatanodeをさらに増やしたなら、ここの上限をとりあえず3として増やそう。\nノード追加の反映 ノードの追加が初めてならstop-all.shで止めて、start-all.shでまるまる再起動するのがいいでしょう。\n当然ながら、hadoop上で何かしらの作業が動いていたらやり直しになってしまう。\n通常は、namenodeでhadoop dfsadmin -refreshNodesを実行。\nさらにhadoop dfsadmin -reportで確認する。\n[hadoop@vfbsd ~]$ hadoop dfsadmin -refreshNodes [hadoop@vfbsd ~]$ hadoop dfsadmin -report Configured Capacity: 96683511808 (90.04 GB) Present Capacity: 57517137920 (53.57 GB) DFS Remaining: 28587847680 (26.62 GB) DFS Used: 28929290240 (26.94 GB) DFS Used%: 50.3% Under replicated blocks: 5 Blocks with corrupt replicas: 0 Missing blocks: 0 ------------------------------------------------- Datanodes available: 2 (2 total, 0 dead) Name: 192.168.200.1:50010 Decommission Status : Normal Configured Capacity: 65501978624 (61 GB) DFS Used: 28920520704 (26.93 GB) Non DFS Used: 35444080640 (33.01 GB) DFS Remaining: 1137377280(1.06 GB) DFS Used%: 44.15% DFS Remaining%: 1.74% Last contact: Mon Aug 12 22:19:15 JST 2013 Name: 192.168.200.100:50010 Decommission Status : Normal Configured Capacity: 31181533184 (29.04 GB) DFS Used: 8769536 (8.36 MB) Non DFS Used: 3722293248 (3.47 GB) DFS Remaining: 27450470400(25.57 GB) DFS Used%: 0.03% DFS Remaining%: 88.03% Last contact: Mon Aug 12 22:19:17 JST 2013 上記の例で言えば、192.168.200.100が追加したdatanode。\n使用量がまだ8MBしかないことが分かるだろうか。\nreplication数を2にしたので、ゆくゆくは192.168.200.1と同じ程度の使用量になるはず。\nしばらく放置が必要。\n（いま気がついたけど、\u0026ldquo;Under replicated blocks”、つまり所定のreplicationに満たないblockの数が5\u0026hellip;）\n擬似分散→擬似分散+1の効果 効果は劇的。\nもともと2時間半かかっていたものが1時間半に短縮できた。\n下記はtimeの結果。上が擬似分散、下が擬似分散+1。\nreal 147m34.258s user 0m6.835s sys 0m2.233s real 82m59.557s user 0m5.624s sys 0m1.604s ああもっとdatanode増やしたい。\n関連エントリ\n[FreeBSD] Hadoopのportsからのインストール\n[FreeBSD] portsのHadoopで分散（x-distributed）モードを動かす準備\n[Hadoop]Hadoop 擬似分散（Psuedo-distributed）モードの設定\n[Hadoop]擬似分散モードで実験\n","permalink":"https://nobwak.github.io/posts/2013-08-13-hadoop_%E6%93%AC%E4%BC%BC%E5%88%86%E6%95%A3%E3%83%A2%E3%83%BC%E3%83%89%E3%81%8B%E3%82%89%E5%AE%8C%E5%85%A8%E5%88%86%E6%95%A3%E3%83%A2%E3%83%BC%E3%83%89%E3%81%B8%E3%83%87%E3%83%BC%E3%82%BF%E3%83%8E%E3%83%BC%E3%83%89%E3%81%AE%E8%BF%BD%E5%8A%A0/","summary":"Hadoopへのノードの追加 hadoopの長所は、処理量に応じて簡単にスケールできる点にある。 処理がおっつかなくなってきたら、データノードを","title":"[Hadoop] 擬似分散モードから完全分散モードへ（データノードの追加）"},{"content":"※hadoop-1.0.0です。\nhadoop streamingで困ること。 作業データ（たとえばログ）を与えると、Hadoopはまず分割をする。\n分割されたものはinput splits, あるいは単にsplitsと呼ばれる。\nsplitsのサイズはデフォルトで64MBytesだ。\nHadoop（JobTracker）は作業ノード（TaskTracker）にsplitsを割り当てる。\n作業ノードはsplitsに対してmapタスクを行う。\nなお、作業ノードの割り当てにあたっては、splitsの物理的な場所との近さも考慮される。\n要するにsplitsの実データが置かれている作業ノードが選ばれる。\nこれは素晴らしい仕組みなのだが、困ることもある。\n例えば以下のような場合。\n ファイルの冒頭にあるヘッダが処理に必要な場合。\n→分割されると、ヘッダのないsplitsが出来てしまう。 ログ上の2点間の時間差分を知りたい場合。\n→2点の間で分割されると計算できない。   回避策 下記の通り。\nHow do I process files, one per map?\nつまり、hadoopへの入力に、いきなり「ファイルの内容」を送り込むのではなく、「ファイルのリスト」を渡す。\nファイルのリストだから、いくら分割してもファイル自体は分割されない。\nなるほど。\n回避策とはいっても。 しかし、この場合mapper側に工夫が必要になる。\n通常であれば、標準入力からファイルの中身がドバドバやってくる。\nPythonだろうとRubyだろうとstdinをforループで読むだけ。\n楽ちん。\nところがこの回避策だと、ファイルリストが入力されるわけだから、ファイルを開くことから始めなければならない。\nそしてファイルを開くには、mapperスクリプト内で「hadoop dfs -cat ＜ファイル＞」しないといけない\n（ファイルがHDFSにあるとして）。\nそれも面倒だし、加えて、無駄な通信が発生する可能性がある点も懸念。\n先述の通り、Hadoopは作業の振り分けにあたって、実データに近い作業ノードを選ぶ。\nしかしファイル「リスト」を渡すということは、ファイル「リスト」と作業ノードの近さは考慮してくれるものの、リストに書かれたファイルと作業ノードの近さは考慮外になるということ。\nつまり、作業ノードと実際のデータのある場所が一致するとは限らない。\n一致しなければ、作業ノードはデータを別ノードからダウンロードしなければならない。\nノード間通信はコスト高なのでなるべく避けよう、というHadoopの思想にはそぐわない。\nmapperの例 しかし選択肢はないので進める。\n以下はpythonでファイルリストを受けた場合の処理例。\n作業データはHDFS上にあるので、subprocessで「hadoop dfs -cat ＜ファイル＞」する。\n#!/usr/bin/env python # -*- coding: utf-8 -*- import sys os subprocess for line in sys.stdin:  line.strip(\u0026#34;\\n\u0026#34;)  filename = line  cat = subprocess.Popen([\u0026#34;hadoop\u0026#34;,\u0026#34;dfs\u0026#34;,\u0026#34;-cat\u0026#34;,filename],stdout=subprocess.PIPE)  for logline in cat.stdout: \t#処理 \tprint line 大したことではないけれど、下記のように必ずテストしてからhdoopに投入すること。\n$ cat filelist.txt | mapper.py | sort | reducer.py hadoopは自前mapper, reducerが失敗しても、エラー内容を教えてはくれないので（たぶん）。\n注意点 HDFS上にファイルを置いている場合、絶対パスで指定すること。\n相対パスではダメだった。\nまた、HDFSでは「/user/hadoop/input」のように、「user」であって「usr」でないことに注意。\n作業データがローカルディスクにあるなら、hadoop dfs -getとか。\nしかしそうするとすべての作業ノードがローカルディスクにアクセスしてくることになる。\nそれは避けたいので、HDFS上に置いた方がよいでしょう。\n","permalink":"https://nobwak.github.io/posts/2013-08-09-hadoop_hadoop_streaming%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%88%86%E5%89%B2%E3%81%95%E3%81%9B%E3%81%AA%E3%81%84%E3%81%9F%E3%82%81%E3%81%AB%E3%81%AF/","summary":"※hadoop-1.0.0です。 hadoop streamingで困ること。 作業データ（たとえばログ）を与えると、Hadoopはまず分割をする。 分割され","title":"[hadoop] hadoop streamingでファイルを分割させないためには。"},{"content":"Windows Updateはすごく重い。\nなにか作業している裏で走られるとストレスだ。\n加えて「パッチを入れろ入れろ」と鬱陶しいことこの上ない。\n会社のPCだったりすると問答無用でインストールまでされて、思わぬ瞬間に再起動されることだってある。\n問題は何かといえば、こちらの意図しないタイミングでHDDをガリガリやられたり再起動されることだ。\nということで、自分でWindows Updateを走らせる。\n会社のPCだと、パッチはWSUS経由で、通常のWindows Updateからではインストールできない事がある。\nそこでwuaucltコマンドを使う。\nWindowsの更新があるか確認するには、以下のコマンドを実行する。\nwuauclt /detectnow WSUSサーバ経由でWindows Updateしてるなら、以下のようにすると、サーバ側Cookieを破棄させる。詳細は後述のリンク。\n※オプションの順番はこの通りでないとダメ。\nwuauclt /resetauthorization /detectnow さらにさらに、クライアントのWindows Updateサービスを再起動すればより確実に。\nnet stop wuauserv net start wuauserv wuauclt /resetauthorization /detectnow ログは以下の場所に。\n%systemroot%\\WindowsUpdate.log 参考\nコマンド ライン オプションを使用して自動更新の動作を調整する\n","permalink":"https://nobwak.github.io/posts/2013-08-08-windows_update%E9%96%A2%E9%80%A3%E3%83%A1%E3%83%A2%E8%87%AA%E5%88%86%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%A7wsus%E3%81%8B%E3%82%89%E3%83%91%E3%83%83%E3%83%81%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89/","summary":"Windows Updateはすごく重い。 なにか作業している裏で走られるとストレスだ。 加えて「パッチを入れろ入れろ」と鬱陶しいことこの上ない。 会社のPCだ","title":"Windows Update関連メモ（自分のタイミングでWSUSからパッチダウンロード）"},{"content":"\u0026ldquo;$HADOOP_HOME is deprecated\u0026quot;が鬱陶しい。\n※本記事ではhadoop 1.00を使ってます。\nhadoopを実行すると\u0026rdquo;$HADOOP_HOME is deprecated\u0026quot;と表示されることがある。\nHADOOP_HOMEはもう使われなくなり、代わりにHADOOP_PREFIXにするよう推奨されている。\nこれを抑制するには、以下二つのうち、いずれかをすればよい。\n”$HADOOP_HOME is deprecated\u0026quot;を抑制するには。  HADOOP_HOMEをHADOOP_PREFIXに置き換える。あるいは。 HADOOP_HOME_WARN_SUPPRESS=YESと宣言する。  hadoopのバージョンアップをするつもりがないなら、②が楽でしょうかね。\n具体的には、hadoopを使うユーザの.profileあたりで宣言しておけばOK。\nエラーメッセージの原因 なお、HADOOP関連のスクリプトを当該メッセージでgrepすると、hadoop-config.shに以下の記載がある。\nhadoop-config.sh\nif [ \u0026#34;$HADOOP_HOME_WARN_SUPPRESS\u0026#34; == \u0026#34;\u0026#34; ] \u0026amp;\u0026amp; [ \u0026#34;$HADOOP_HOME\u0026#34; != \u0026#34;\u0026#34; ]; then  echo \u0026#34;Warning: \\$HADOOP_HOME is deprecated.\u0026#34; 1\u0026gt;\u0026amp;2  echo 1\u0026gt;\u0026amp;2 fi つまりHADOOP_HOMEに何か設定されていれば、メッセージを表示する。\nしかし、HADOOP_HOME_WARN_SUPPRESSに何か設定されていれば、そのメッセージを抑制する、というわけ。\n上記ではHADOOP_HOME_WARN_SUPPRESS=\u0026ldquo;YES\u0026quot;にしているが、実際のところ中身はなんだってよい。\n","permalink":"https://nobwak.github.io/posts/2013-08-05-hadoop_hadoop_home_is_deprecated%E3%81%AE%E5%AF%BE%E5%87%A6/","summary":"\u0026ldquo;$HADOOP_HOME is deprecated\u0026quot;が鬱陶しい。 ※本記事ではhadoop 1.00を使ってます。 hadoopを実行すると\u0026rdquo;$HAD","title":"[Hadoop] $HADOOP_HOME is deprecatedの対処"},{"content":"VMWare PlayerのイメージをESXi用に変換するには VMWareが提供しているコンバータを使う。\n以下、まとめ。\nなお、動機としては、「手元のVMware Playerで手軽にいろいろ検証をして、出来上がったものをESXiに移す」ことが出来るようにしたい、というもの。\nしかし最後に書くように、変換してもVMware Player上と同じようにESXi上でも動くとは限らない。\n可能なら最初からESXi上で検証したほうがよいようだ。\nVMware vCenter Converterとは。  「VMware vCenter Converter は、物理マシンから仮想マシンへの変換のほか、仮想マシン フォーマット間の変換を自動化および簡素化します。 VMware vCenter Converter では、直感的なウィザード形式のインターフェイスを使用して、物理マシンを仮想マシンに変換できます。」\n vmware.comを見ると、「物理マシンから仮想マシンへ変換」なんてすごい事が書いてある（2013/8/1現在）。\nさらにvmware.comから引く。\n VMware vCenter Converter は、さまざまなハードウェア上で実行でき、最も広く使用されている Microsoft Windows と Linux オペレーティング システムの各バージョンに対応します。 この堅牢なエンタープライズ クラスの移行ツールにより、次のことが可能になります。\nシステム停止やダウンタイムなしで、ローカルおよびリモートの物理マシンを迅速かつ確実に仮想マシンに変換できます。\n統合管理コンソールと直感的な変換ウィザードにより、複数の変換を同時に実行します。\nMicrosoft Hyper-V、Microsoft Virtual PC、Microsoft Virtual Server など、サードパーティの仮想マシン フォーマットのほか、Symantec Backup Exec System Recovery や Norton Ghost など、物理マシンのバックアップ イメージを VMware の仮想マシンに変換します。\n 入手 http://www.vmware.com/jp/products/converter\n手順 ここでは5.0.0ビルド 470252を使用している。\nメニューから変換を選ぶ\n 「ソースのタイプを選択」→「VMware Workstation またはその他の VMware 仮想マシン」を選ぶ 仮想マシンファイルで変換したいvmxファイルを選ぶ。 「ターゲットのタイプを選択」→「VMware Infrastructure 仮想マシン」 VMware Infrastructure サーバの詳細で、ESXiマシンの詳細を入れる。  ESXi上での名前を決めて、あとは適当に。\n100MのEternetで2GBytes程度の仮想イメージを転送したところ、10分強かかった。\nまた、ESXi上で起動するときもいくつか聞かれるが、それも適当に。\n愚痴 本記事が、とてもやる気のない感じになっているのは、VMware Playerで問題のなかった仮想マシンが、ESXiに移したら途端に調子が悪くなったから。\n具体的には、FreeBSD 9.1-RELEASE(amd64)をESXiに移したら、ira16から割り込みの嵐が発生してまともにパフォーマンスがでなかった。\n新規で同じOSを入れたら事象発生せず（vmstat -iを見たら割り込みを発生させたデバイスがない）。\nぐぐっても解決策なし。\nがっかり。\n","permalink":"https://nobwak.github.io/posts/2013-08-04-%E4%BB%AE%E6%83%B3%E3%83%9E%E3%82%B7%E3%83%B3%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%AE%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"VMWare PlayerのイメージをESXi用に変換するには VMWareが提供しているコンバータを使う。 以下、まとめ。 なお、動機としては、「手元のVM","title":"仮想マシンイメージの変換について"},{"content":"FreeBSD起動時のsendmailを止める方法はこの通り。\nこれで確かに止まる。\nしかしFreeBSDにはcronでmailサーバの状況を調べるスクリプトが動いていて、明示的に指定しない限り毎日毎日mailqの情報とかを送り付けてくる。\nたとえばこんな感じ\nMail in local queue: mailq: Mail queue is empty Mail in submit queue: mailq: Mail queue is empty Security check:  (output mailed separately) Checking for rejected mail hosts: 邪魔なのでこれを止める。\n方法は簡単。/etc/periodic.confに以下を追加するだけ。\ndaily_clean_hoststat_enable=\u0026#34;NO\u0026#34; daily_status_mail_rejects_enable=\u0026#34;NO\u0026#34; daily_status_include_submit_mailq=\u0026#34;NO\u0026#34; daily_submit_queuerun=\u0026#34;NO\u0026#34; ","permalink":"https://nobwak.github.io/posts/2013-08-01-freebsd_sendmail%E3%82%92%E3%81%95%E3%82%89%E3%81%AB%E9%BB%99%E3%82%89%E3%81%9B%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"FreeBSD起動時のsendmailを止める方法はこの通り。 これで確かに止まる。 しかしFreeBSDにはcronでmailサーバの状況を調","title":"[FreeBSD] sendmailをさらに黙らせるには"},{"content":"HadoopはJavaで作られている。\nだからHadoopに何か操作をさせたい場合には、通常、Javaで記述する必要がある。\nしかしHadoopにはHadoop Streamingという仕組みがあり、早い話UNIXのStandard Stream要するに標準入出力を扱うことができる。\nすなわち、UNIXの標準入出力の流儀に則ってさえいれば、お好きな言語で操作ができる。\nJavaがまったく合わない私としては、Hadoop Streamはとてもありがたい。\nこれがなければHadoopに手を付ける気にはならなかった。\nHadoop Streamに必要なもの。 mapperとreducerを、好きな言語で書くだけ。\nべつにmapperだけでもよいけど。\n私はPython。\nHadoop streamにおけるmapperとreducerの概要。 mapperは何らかの入力を得て、キーと値（key, value）を出力する。\nreducerはmapperからのkey, valueを受けて、keyごとにvalueを処理する。\nなお、mapperの出力がreducerに渡されるとき、Hadoopがkeyごとにソートしてくれる。\nこの点はreducerの処理を簡単にする。詳細は後述。\n試しにやってみること。 LAN向けのApacheのアクセス状況をカウントしてみる。\nIPアドレスごとのアクセス回数だ。\nログは以下のようなもの。\nアクセス元はすべてIPアドレスで記録されている。\n192.168.100.106 - - [24/Jul/2013:22:35:26 +0900] \u0026#34;GET /MT/js/common/Editor/Iframe.js?v=5.14-ja HTTP/1.1\u0026#34; 304 - \u0026#34;http://192.168.100.5/MTcgi/mt.cgi?__mode=view\u0026amp;_type=entry\u0026amp;blog_id=2\u0026amp;id=330\u0026#34; \u0026#34;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:22.0) Gecko/20100101 Firefox/22.0\u0026#34; 192.168.100.106 - - [24/Jul/2013:22:35:26 +0900] \u0026#34;GET /MT/js/common/Editor/Textarea.js?v=5.14-ja HTTP/1.1\u0026#34; 304 - \u0026#34;http://192.168.100.5/MTcgi/mt.cgi?__mode=view\u0026amp;_type=entry\u0026amp;blog_id=2\u0026amp;id=330\u0026#34; \u0026#34;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:22.0) Gecko/20100101 Firefox/22.0\u0026#34; 192.168.100.106 - - [24/Jul/2013:22:35:26 +0900] \u0026#34;GET /MT/mt.js?v=5.14-ja HTTP/1.1\u0026#34; 304 - \u0026#34;http://192.168.100.5/MTcgi/mt.cgi?__mode=view\u0026amp;_type=entry\u0026amp;blog_id=2\u0026amp;id=330\u0026#34; \u0026#34;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:22.0) Gecko/20100101 Firefox/22.0\u0026#34; 処理の流れ 1.mapperは、アクセスログからIPアドレスを抜き出す。\nそして「＜IPアドレス＞＜タブ＞1」を出力する。\nこれは、たとえば「192.168.1.1」から「1」回アクセスがあったよ、という意味。\n2.hadoopがIPアドレスをキーにソート。\n3.reducerは、IPアドレスごとに回数をカウントし、\n「＜IPアドレス＞＜タブ＞＜集計回数＞」を出力する。\nmapper.py IPアドレスは、Apacheログにおいて、スペースを区切りにした第一フィールドに記載される。\nだから一行ずつログを読んで、行頭のIPアドレスを抜き出し、その都度「＜IPアドレス＞＜タブ＞1」を出力する。\n「if \u0026ldquo;newsyslog\u0026rdquo; not in line:」は、システムメッセージ行を読み飛ばすため。\n#!/usr/bin/env python import sys for line in sys.stdin:  if \u0026#34;newsyslog\u0026#34; not in line:  fields = line.strip().split()  print \u0026#39;%s\\t%s\u0026#39; % (fields[0],1) 実行権限も忘れずにつける。\n$ chmod a+x ./mapper.py 実験。意図したとおり動いていますね。\n$ cat ../input/httpd-access.log |./mapper.py 192.168.100.107 1 192.168.100.106 1 192.168.100.110 1 192.168.100.107 1 192.168.100.107 1 192.168.100.107 1 reducer.py mapper.pyからの出力は、ソートされてreducer.pyに入力される。\n上記のmapper.py出力例は、以下のようにソートされる。\n192.168.100.106 1 192.168.100.107 1 192.168.100.107 1 192.168.100.107 1 192.168.100.107 1 192.168.100.110 1 だからreducerとしては、第一フィールドを上から読んでいって、keyが変化したら、そこまでのカウント数を出力する。\nそしてそのkeyの事は、さっぱり忘れて次のkeyのカウントに移ることができる。\nもしソートがなされていないならば、入力の終わりまですべてのkeyを保持しなければならない。Hadoopに感謝である。\n#!/usr/bin/env python import sys (last_key, count) = (None, 0) for line in sys.stdin:  (key, val) = line.strip().split(\u0026#34;\\t\u0026#34;)  if last_key and last_key != key:  print \u0026#34;%s\\t%s\u0026#34; % (last_key, count)  (last_key, count) = (key,int(val))  else:  last_key = key  count += int(val) if last_key:  print \u0026#34;%s\\t%s\u0026#34; % (last_key, count) 実行権限を付ける。\n$ chmod a+x reducer.py 実験。間にsortを入れること。\n問題なし。\n$ cat ../input/httpd-access.log |./mapper.py |sort|./reducer.py 127.0.0.1 567 192.168.100.106 327 192.168.100.107 671 192.168.100.109 2 192.168.100.150 193 Hadoopで動かしてみよう。 まずカウント対象となるログをHDFSにコピーする。\n[hadoop@isis ~]$ hadoop dfs -put apachelog apachelog [hadoop@isis ~]$ [hadoop@isis ~]$ hadoop dfs -ls Found 1 items drwxr-xr-x - hadoop supergroup 0 2013-07-28 12:57 /user/hadoop/apachelog [hadoop@isis ~]$ [hadoop@isis ~]$ hadoop dfs -ls apachelog Found 1 items -rw-r--r-- 1 hadoop supergroup 999290 2013-07-28 12:57 /user/hadoop/apachelog/httpd-access.log [hadoop@isis ~]$ 実行。\nhadoopにhadoop-streaming-1.0.0.jarを与え、input、outputのほかに、mapperとreducerも指定する。\n-mapper -reducerとしてローカルファイルシステムでのパスを与える。\n同時に、-fileでそれぞれのスクリプトを指定すると、スクリプトファイルをリモートのノードへ送ってくれる。\nコマンドはすごく長くなる。\nエスケープシーケンスを使って適宜改行し、見やすくしてタイプミスを防ぐ。\nhadoop jar \\ /usr/local/share/hadoop/contrib/streaming/hadoop-streaming-1.0.0.jar \\  -input apachelog \\  -output apachelog.out \\  -mapper /home/hadoop/sandbox/mapper/mapper.py \\  -reducer /home/hadoop/sandbox/mapper/reducer.py \\  -file /home/hadoop/sandbox/mapper/mapper.py \\  -file /home/hadoop/sandbox/mapper/reducer.py 実際のログ\n[hadoop@isis ~]$ hadoop jar \\ \u0026gt; -output apachelog.out \\ \u0026gt; -mapper /home/hadoop/sandbox/mapper/mapper.py \\ \u0026gt; /usr/local/share/hadoop/contrib/streaming/hadoop-streaming-1.0.0.jar \\ \u0026gt; -file /home/hadoop/sandbox/mapper/mapper.py \\ \u0026gt; -file /home/hadoop/sandbox/mapper/reducer.py \\ \u0026gt; -input apachelog \\ \u0026gt; -output apachelog.out \\ \u0026gt; -mapper /home/hadoop/sandbox/mapper/mapper.py \\ \u0026gt; -reducer /home/hadoop/sandbox/mapper/reducer.py \\ \u0026gt; -file /home/hadoop/sandbox/mapper/mapper.py \\ \u0026gt; -file /home/hadoop/sandbox/mapper/reducer.py packageJobJar: [/home/hadoop/sandbox/mapper/mapper.py, /home/hadoop/sandbox/mapper/reducer.py, /tmp/hadoop-hadoop/hadoop-unjar1190814954490199586/] [] /tmp/streamjob8960127756596123730.jar tmpDir=null 13/07/28 13:30:15 INFO mapred.FileInputFormat: Total input paths to process : 1 13/07/28 13:30:43 INFO streaming.StreamJob: getLocalDirs(): [/tmp/hadoop-hadoop/mapred/local] 13/07/28 13:30:43 INFO streaming.StreamJob: Running job: job_201307281252_0001 13/07/28 13:30:43 INFO streaming.StreamJob: To kill this job, run: 13/07/28 13:30:43 INFO streaming.StreamJob: /usr/local/share/hadoop/bin/../bin/hadoop job -Dmapred.job.tracker=localhost:8021 -kill job_201307281252_0001 13/07/28 13:30:43 INFO streaming.StreamJob: Tracking URL: http://localhost:50030/jobdetails.jsp?jobid=job_201307281252_0001 13/07/28 13:30:46 INFO streaming.StreamJob: map 0% reduce 0% 13/07/28 13:39:14 INFO streaming.StreamJob: map 100% reduce 0% 13/07/28 13:40:27 INFO streaming.StreamJob: map 100% reduce 33% 13/07/28 13:40:33 INFO streaming.StreamJob: map 100% reduce 67% 13/07/28 13:40:49 INFO streaming.StreamJob: map 100% reduce 100% 13/07/28 13:42:39 INFO streaming.StreamJob: Job complete: job_201307281252_0001 13/07/28 13:42:41 INFO streaming.StreamJob: Output: apachelog.out 結果の確認 hadoop dfs -catなどで。\n[hadoop@isis ~]$ hadoop dfs -ls Found 2 items drwxr-xr-x - hadoop supergroup 0 2013-07-28 12:57 /user/hadoop/apachelog drwxr-xr-x - hadoop supergroup 0 2013-07-28 13:42 /user/hadoop/apachelog.out [hadoop@isis ~]$ [hadoop@isis ~]$ hadoop dfs -ls apachelog.out Found 3 items -rw-r--r-- 1 hadoop supergroup 0 2013-07-28 13:42 /user/hadoop/apachelog.out/_SUCCESS drwxr-xr-x - hadoop supergroup 0 2013-07-28 13:30 /user/hadoop/apachelog.out/_logs -rw-r--r-- 1 hadoop supergroup 1438 2013-07-28 13:40 /user/hadoop/apachelog.out/part-00000 [hadoop@isis ~]$ [hadoop@isis ~]$ hadoop dfs -cat apachelog.out/part-00000 127.0.0.1 567 192.168.100.106 327 192.168.100.107 671 192.168.100.109 2 192.168.100.150 193 [hadoop@isis ~]$ 以上\n","permalink":"https://nobwak.github.io/posts/2013-07-29-hadoop_hadoop_streaming___mapper%E3%81%A8reducer%E3%81%ABpython%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B/","summary":"HadoopはJavaで作られている。 だからHadoopに何か操作をさせたい場合には、通常、Javaで記述する必要がある。 しかしHadoop","title":"[Hadoop] Hadoop Streaming / mapperとreducerにPythonを使ってみる。"},{"content":"sprunge.usというサービスがあるのを、いまさら知って驚いてそして大感謝した。\n以下に顛末を記す。\nsprunge.usってなんだ。 ブラウザでsprunge.usを開くと、manページのような見てくれで何か間違えたかと二度見するようなサイトなのだが、よく見ると凄い事が書いてある。\n何らかのコマンドの標準出力をsprunge.usに食わすと、URLが返る。\nそのURLへアクセスすると、先の出力結果が見えるというわけ。\nsprunge.usの使い方 使い方といっても上記の通りなんだが、やってみるのが早い。\nuname -aの結果を食べさせてみる。\n$ uname -a | curl -F \u0026#39;sprunge=\u0026lt;-\u0026#39; http://sprunge.us http://sprunge.us/CTQL 返ってきたURL、http://sprunge.us/CTQLにアクセスしていただくと、uname -aの結果、すなわち我輩の鯖の詳細が分かる。\n使いどころ このサービスの何が便利なのか。\nsprunge.usを使うことで、エラーや設定ファイル、ちょっとしたスクリプト、ソースを手軽に共有できる。\nたとえば私が、あるサーバが意図した動作をせず困っているときに、助けを求めるとする。\n助けを求める相手が、twitterにいるとする。\ntwitterには140文字しか書けないので、エラー、使用している設定ファイルの中身をすべて貼り付けるのは無理がある。\nではどこかのサイト（いわゆるアップローダと言われているサイトなど）にアップロードするか？それも面倒。\nそこでコマンドラインからsprunge.usにアップロードし、そのURLを相手に送る。\nこれは便利じゃありませんかみなさん。\nまあ、助けを求める相手がいる限りにおいてですが。\nいつまで残るの・・・？ sprungeに載せた内容はいつまで残るのか。\n調べてみたけど、ちょっと分からなかった。\n末尾で触れるpastebinだと、残す期間を選べたりするのだが。\nやってもうた時は？ 共有すべきでない内容をsprunge.usしてしまった時はどうするのだろうか。\nこれも検索したけど分からない。\nセンシティブな情報、IDとかパスワードとかが含まれそうな場合は、後述のpastbinの方がよいかも。\nsprungeをもっと便利に使う。 まずですね、aliasを設定しましょう。\nこんな長いの、いちいちタイプできんですよ。\n設定したらすぐ確かめるのが紳士のたしなみ。ここだとaliasを引数なしですぐさま叩く。\n$ alias sprunge=\u0026#34;curl -F \u0026#39;sprunge=\u0026lt;-\u0026#39; http://sprunge.us\u0026#34; $ alias alias sprunge=\u0026#39;curl -F \u0026#39;\\\u0026#39;\u0026#39;sprunge=\u0026lt;-\u0026#39;\\\u0026#39;\u0026#39; http://sprunge.us\u0026#39; テストして問題なければ、シェルに合わせた初期設定ファイルに書き込んでおく。\n~/.profileとか。\nsprungeはファイルの内容だってOK。 sprungeは標準出力を受け付けるので、ファイルの内容だって貼り付けられる。\nFreeBSDのftpd起動シェルスクリプトで試してみよう。\nどうせなら、上記で作成したaliasで。\n$ cat /etc/rc.d/ftpd | sprunge http://sprunge.us/LQCZ http://sprunge.us/LQCZ どうだろうか。\n構文強調と行番号表示もできる。 sprunge.usに以下のように書いてある。\nadd ?\u0026lt;lang\u0026gt; to resulting url for line numbers and syntax highlighting  use this form to paste from a browser 上記のftpdシェルスクリプトを例に引く。\nシェルスクリプトなので、「sh」を?に続けてURLに加えればよい。\nhttp://sprunge.us/LQCZ?sh\nsprungeに意地悪をしてみる。 知る人ぞ知るコマンドにslがある。\nこれはlsをslとタイプミスしてしまったとき、アスキーアートのSL機関車がターミナルを爆走する豪快なコマンドだ。\nslコマンドをご存じなく、UNIX系マシンをお持ちの方はぜひインストールしてその目で確かめてほしい。\nちなみにFreeBSDではportsに収録されている。games/slからどうぞ。\nで、これをsprungeに食わせてみた。\n$ sl | sprunge http://sprunge.us/Sijg http://sprunge.us/Sijg \u0026hellip;うん。まあ。仕方ないね。\n同様の別サービス sprunge.usと同様のサービスにpastbinがある。\nhttp://pastebin.com/\n世間的にはsprunge.usよりこちらの方が有名な様子。\nCUIから使うためにwgetpastといったツールもある。\n","permalink":"https://nobwak.github.io/posts/2013-07-28-%E3%82%B3%E3%83%BC%E3%83%89%E3%82%A8%E3%83%A9%E3%83%BC%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%85%B1%E6%9C%89%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AE%E3%81%99%E3%81%99%E3%82%81/","summary":"sprunge.usというサービスがあるのを、いまさら知って驚いてそして大感謝した。 以下に顛末を記す。 sprunge.usってなんだ。 ブラウ","title":"コード、エラー、設定ファイル共有サイトのすすめ"},{"content":"擬似分散モードで実験してみる。\nHadoopには、単語を数えるデモが付いてくるのでこれを使う。\nカウント対象テキストの準備 以下のようなファイルを作る。\n[hadoop@isis ~/sandbox/input]$ ls test.txt [hadoop@isis ~/sandbox]$ cat ./input/test.txt aa bb cc aa bb ファイルのHDFSへの格納 上で作ったファイルをHDFSに置く。\nこういったファイル操作は、hadoopコマンドにdfsを付けて、-putとか-lsとか叩く。\nhadoop dfsとやれば使用できるコマンドの一覧が表示される。-catとか-rmとかも使える。ディレクトリの削除は-rmr。\n下記の例では、カレントディレクトリにあるinputディレクトリを、HDFSのinputディレクトリに-putでコピーしている。\ninputディレクトリには、先に作ったtest.txtが入っている。\n[hadoop@isis ~/sandbox]$ hadoop dfs -put input input [hadoop@isis ~/sandbox]$ [hadoop@isis ~/sandbox]$ hadoop dfs -ls Found 1 items drwxr-xr-x - hadoop supergroup 0 2013-07-27 23:51 /user/hadoop/input [hadoop@isis ~/sandbox]$ [hadoop@isis ~/sandbox]$ hadoop dfs -ls input Found 1 items -rw-r--r-- 1 hadoop supergroup 15 2013-07-27 23:51 /user/hadoop/input/test.txt 送り先には絶対パスを付けなくても自動的に/usr/hadoopの下になっていることが分かる。\nすなわち、~/sandboxにいるときに、送り元、送り先双方にinputを指定すると、ローカルの~/hadoop/sandbox/inputが、HDFS上の/usr/hadoop/inputにコピーされる。\nwordcountの実行 hadoop-examples-1.0.0.jarにwordcountと続け、カウント対象のファイルが置かれるディレクトリ、カウント結果のファイルが置かれるディレクトリを指定する。\n下記の例では先にコピーしたinputを、結果をoutputとして指定する。\noutputはこの時点では無くてOK。\n「outputがすでにあるよ」と言われたら中身を確認してからhadoop dfs -rmr outputなどとして消す。\nhadoopの実行は何かとコマンドが長くなりがちなので、\\を使って見やすく複数行にしたほうがよいでしょう。\n[hadoop@isis ~/sandbox]$ hadoop jar \\ /usr/local/share/examples/hadoop/hadoop-examples-1.0.0.jar \\ wordcount input output 13/07/28 00:02:27 INFO input.FileInputFormat: Total input paths to process : 1 13/07/28 00:02:45 INFO mapred.JobClient: Running job: job_201307272333_0001 13/07/28 00:02:46 INFO mapred.JobClient: map 0% reduce 0% 13/07/28 00:06:44 INFO mapred.JobClient: map 100% reduce 0% 13/07/28 00:08:01 INFO mapred.JobClient: map 100% reduce 66% 13/07/28 00:08:11 INFO mapred.JobClient: map 100% reduce 100% 13/07/28 00:09:15 INFO mapred.JobClient: Job complete: job_201307272333_0001 13/07/28 00:09:26 INFO mapred.JobClient: Counters: 26 13/07/28 00:09:26 INFO mapred.JobClient: Job Counters 13/07/28 00:09:26 INFO mapred.JobClient: Launched reduce tasks=1 13/07/28 00:09:26 INFO mapred.JobClient: SLOTS_MILLIS_MAPS=159745 13/07/28 00:09:26 INFO mapred.JobClient: Total time spent by all reduces waiting after reserving slots (ms)=0 13/07/28 00:09:26 INFO mapred.JobClient: Total time spent by all maps waiting after reserving slots (ms)=0 13/07/28 00:09:26 INFO mapred.JobClient: Launched map tasks=1 13/07/28 00:09:26 INFO mapred.JobClient: Data-local map tasks=1 13/07/28 00:09:26 INFO mapred.JobClient: SLOTS_MILLIS_REDUCES=66457 13/07/28 00:09:26 INFO mapred.JobClient: File Output Format Counters 13/07/28 00:09:26 INFO mapred.JobClient: Bytes Written=15 13/07/28 00:09:26 INFO mapred.JobClient: FileSystemCounters 13/07/28 00:09:26 INFO mapred.JobClient: FILE_BYTES_READ=33 13/07/28 00:09:26 INFO mapred.JobClient: HDFS_BYTES_READ=123 13/07/28 00:09:26 INFO mapred.JobClient: FILE_BYTES_WRITTEN=43099 13/07/28 00:09:26 INFO mapred.JobClient: HDFS_BYTES_WRITTEN=15 13/07/28 00:09:26 INFO mapred.JobClient: File Input Format Counters 13/07/28 00:09:26 INFO mapred.JobClient: Bytes Read=15 13/07/28 00:09:26 INFO mapred.JobClient: Map-Reduce Framework 13/07/28 00:09:26 INFO mapred.JobClient: Map output materialized bytes=33 13/07/28 00:09:26 INFO mapred.JobClient: Map input records=5 13/07/28 00:09:26 INFO mapred.JobClient: Reduce shuffle bytes=0 13/07/28 00:09:26 INFO mapred.JobClient: Spilled Records=6 13/07/28 00:09:26 INFO mapred.JobClient: Map output bytes=35 13/07/28 00:09:26 INFO mapred.JobClient: Total committed heap usage (bytes)=209518592 13/07/28 00:09:26 INFO mapred.JobClient: Combine input records=5 13/07/28 00:09:26 INFO mapred.JobClient: SPLIT_RAW_BYTES=108 13/07/28 00:09:26 INFO mapred.JobClient: Reduce input records=3 13/07/28 00:09:26 INFO mapred.JobClient: Reduce input groups=3 13/07/28 00:09:26 INFO mapred.JobClient: Combine output records=3 13/07/28 00:09:26 INFO mapred.JobClient: Reduce output records=3 13/07/28 00:09:26 INFO mapred.JobClient: Map output records=5 [hadoop@isis ~/sandbox]$ 仮想環境上とはいえ7分てどういうこと。\n結果の確認 結果は。指定したディレクトリ、outputに格納される。\noutputの中身を見ると、処理の成功したことを示す_SUCCESSというファイルに、結果の書き込まれるpart-r-00000が格納されている。\nhadoop dfs -catで中身を確認すると、各単語の数がリストされている。\n[hadoop@isis ~/sandbox]$ hadoop dfs -ls Found 2 items drwxr-xr-x - hadoop supergroup 0 2013-07-27 23:51 /user/hadoop/input drwxr-xr-x - hadoop supergroup 0 2013-07-28 00:08 /user/hadoop/output [hadoop@isis ~/sandbox]$ hadoop dfs -ls output Warning: $HADOOP_HOME is deprecated. Found 3 items -rw-r--r-- 1 hadoop supergroup 0 2013-07-28 00:08 /user/hadoop/output/_SUCCESS drwxr-xr-x - hadoop supergroup 0 2013-07-28 00:02 /user/hadoop/output/_logs -rw-r--r-- 1 hadoop supergroup 15 2013-07-28 00:08 /user/hadoop/output/part-r-00000 [hadoop@isis ~/sandbox]$ [hadoop@isis ~/sandbox]$ hadoop dfs -cat output/part-r-00000 aa 2 bb 2 cc 1 [hadoop@isis ~/sandbox]$ これだけのために7分とは。\n実マシン、かつもっともっと大きなログで試してみたいところ。\n","permalink":"https://nobwak.github.io/posts/2013-07-28-hadoop%E6%93%AC%E4%BC%BC%E5%88%86%E6%95%A3%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A7%E5%AE%9F%E9%A8%93/","summary":"擬似分散モードで実験してみる。 Hadoopには、単語を数えるデモが付いてくるのでこれを使う。 カウント対象テキストの準備 以下のようなファイルを","title":"[Hadoop]擬似分散モードで実験"},{"content":"Standaloneモードでは、複数のホストを使った処理は行わない。デーモンも動かさない。\nしかしHadoopは分散処理をしてナンボである。\n分散処理をする場合には、複数のホストでいくつかのデーモンを動作させる必要がある。\nそれはまあ当然。\nただ、いきなり複数ホストを使うのはハードルが高い。\nそこで、「Hadoopは複数ホストで動いているつもりだけど実際は1台のホストで動いている」モードで設定の確認をする。\nこれが擬似分散（Psuedo-distributed）モード。\n擬似分散モードに必要な各設定の意味 擬似分散（Psuedo-distributed）モードの動作には以下、四つの設定が必要。\n完全分散（Full distributed）モードでも変わらないんだけどね。\n HDFSのメタデータを格納するnamenodeの設定 データをいくつ複製(replication)するかの設定（デフォルトで3） タスク分散を受け持つJobTrackerの設定 実データを格納し、タスクを実行するdatanodeかつTaskTrackerの設定  1と3と4にそれぞれlocalhostを指定する（なおこれを別ホストにすればFull distributedモードに）。\n2では1を指定する。\nデフォルトのままだと、複製を3つ作ろうとする。ひいてはホストが3つ必要になってしまう。\n擬似分散モードでは自ホストしか使わないわけだから1を指定するというわけ。\nnamenode, replication, JobTrackerの設定 以下、三つのファイルを変更する。\n前章の1,2,3に対応する。\n core-site.xml（namenode設定） hdfs-site.xml（replication設定） mapred-site.xml（JobTracker設定）  FreeBSDでportsから入れたなら/usr/local/etc/hadoopにある。\ncore-site.xml\n\u0026lt;configuration\u0026gt;  \u0026lt;property\u0026gt;  \u0026lt;name\u0026gt;fs.default.name\u0026lt;/name\u0026gt;  \u0026lt;value\u0026gt;hdfs://localhost/\u0026lt;/value\u0026gt;  \u0026lt;/property\u0026gt; \u0026lt;/configuration\u0026gt; hdfs-site.xml\n\u0026lt;configuration\u0026gt;  \u0026lt;property\u0026gt;  \u0026lt;name\u0026gt;dfs.replication\u0026lt;/name\u0026gt;  \u0026lt;value\u0026gt;1\u0026lt;/value\u0026gt;  \u0026lt;/property\u0026gt; \u0026lt;/configuration\u0026gt; mapred-site.xml\n\u0026lt;configuration\u0026gt;  \u0026lt;property\u0026gt;  \u0026lt;name\u0026gt;mapred.job.tracker\u0026lt;/name\u0026gt;  \u0026lt;value\u0026gt;localhost:8021\u0026lt;/value\u0026gt;  \u0026lt;/property\u0026gt; \u0026lt;/configuration\u0026gt; datanode, TaskTrackerの設定 /usr/local/etc/hadoopの下にmasters, slavesというファイルを作る。\nここでsecondary namenode, datanode, TaskTrackerを指定する。\nsecondary namenodeとは、namenodeのデータをバックアップするノード。\ndatanode、TaskTrackerとは、HDFSの実データが置かれ、JobTrackerから指定されたタスクをこなすノード。\nmastersというファイルには、secondary namenodeを書く。\nslavesというファイルには、datanodeかつTaskTrackerとなるホストを書く。\n擬似分散モードでは、secondary namenodeの指定は不要。\nmastersという空ファイルだけ作っておけばよい。\nslavesには、localhostと書いておく。\n$ cd /usr/local/etc/hadoop/ $ sudo touch slaves masters $ sudo sh -c \u0026#39;echo \u0026#34;localhost\u0026#34; \u0026gt;\u0026gt; ./slaves\u0026#39; $ cat masters $ $ cat slaves localhost $ HDFSのフォーマット 初回に限り、HDFSのフォーマットが必要である。\nHDFSにはメタデータを保存するnamenodeと、実データの保存されるdatanodeがある。\nここでの「HDFSのフォーマット」とは、実際のところnamenodeの初期化を意味する。\nなので、datanodeはこのフォーマットとは無関係。不要。\nしかもdatanodeを追加したり削除したときだって、namenodeでの設定変更、フォーマットは不要。\n拍子抜けするくらいである。\nだが。裏を返すとnamenodeが壊れればすべてのデータが死亡することを意味する。\n実運用の際には、secondaly namenodeを立てるなどして事故に備えることになる。\nしかし今は擬似分散モードなので気軽に進める。\nHDFSのフォーマットは以下のようにして行う。\n※フォーマットは、実際にHadoopを使うユーザで行うこと。FreeBSDでportsから入れた場合は注意。\n$ hadoop namenode -format Warning: $HADOOP_HOME is deprecated. 13/07/23 20:12:16 INFO namenode.NameNode: STARTUP_MSG: /************************************************************ STARTUP_MSG: Starting NameNode STARTUP_MSG: host = localhost/127.0.0.1 STARTUP_MSG: args = [-format] STARTUP_MSG: version = 1.0.0 STARTUP_MSG: build = https://svn.apache.org/repos/asf/hadoop/common/branches/branch-1.0 -r 1214675; compiled by \u0026#39;hortonfo\u0026#39; on Thu Dec 15 16:36:35 UTC 2011 ************************************************************/ 13/07/23 20:12:18 INFO util.GSet: VM type = 64-bit 13/07/23 20:12:18 INFO util.GSet: 2% max memory = 19.33375 MB 13/07/23 20:12:18 INFO util.GSet: capacity = 2^21 = 2097152 entries 13/07/23 20:12:18 INFO util.GSet: recommended=2097152, actual=2097152 13/07/23 20:12:19 INFO namenode.FSNamesystem: fsOwner=vanilla 13/07/23 20:12:20 INFO namenode.FSNamesystem: supergroup=supergroup 13/07/23 20:12:20 INFO namenode.FSNamesystem: isPermissionEnabled=true 13/07/23 20:12:20 INFO namenode.FSNamesystem: dfs.block.invalidate.limit=100 13/07/23 20:12:20 INFO namenode.FSNamesystem: isAccessTokenEnabled=false accessKeyUpdateInterval=0 min(s), accessTokenLifetime=0 min(s) 13/07/23 20:12:20 INFO namenode.NameNode: Caching file names occuring more than 10 times 13/07/23 20:12:20 INFO common.Storage: Image file of size 113 saved in 0 seconds. 13/07/23 20:12:20 INFO common.Storage: Storage directory /tmp/hadoop-vanilla/dfs/name has been successfully formatted. 13/07/23 20:12:20 INFO namenode.NameNode: SHUTDOWN_MSG: /************************************************************ SHUTDOWN_MSG: Shutting down NameNode at localhost/127.0.0.1 ************************************************************/ HDFSの場所 上記のログにもある通り、デフォルトでは/tmpの下に作られる。\n厳密に言えば、/tmp/hadoop-${user.name} に作られる。\nnamenodeでも、datanodeでも同じ。\n/tmpディレクトリだと、システムが消したりするので実運用では場所を変えたほうがよい。\nこれらの場所は、hdfs-site.xmlで制御できる。\nhadoop.tmp.dirがprefixなので、これを変えればよい。\nあるいは、dfs.name.dir（namenode向け）、dfs.data.dir（datanode向け）で明示してもよい。\nHadoopの起動 start-all.shで起動させる。\n$ sudo su - hadoop [hadoop@isis ~]$ [hadoop@isis ~]$ [hadoop@isis ~]$ start-all.sh Warning: $HADOOP_HOME is deprecated. starting namenode, logging to /var/log/hadoop/hadoop-hadoop-namenode-isis.out localhost: Warning: $HADOOP_HOME is deprecated. localhost: localhost: starting datanode, logging to /var/log/hadoop/hadoop-hadoop-datanode-isis.out starting jobtracker, logging to /var/log/hadoop/hadoop-hadoop-jobtracker-isis.out localhost: Warning: $HADOOP_HOME is deprecated. localhost: localhost: starting tasktracker, logging to /var/log/hadoop/hadoop-hadoop-tasktracker-isis.out [hadoop@isis ~]$ HADOOP_HOMEについて文句をつけられている。スクリプトを見れば分かるが、これは無視してよい。この点については別途。\nnamenode, datanode, jobtracker, tasktrackerの4つを起動しようと試みていることが分かる。\nさて実際に起動しているか。jpsで確認。動いていますな。\n[hadoop@isis ~]$ jps 2135 DataNode 2324 TaskTracker 2057 NameNode 2377 Jps 2229 JobTracker [hadoop@isis ~]$ そしてこれらのプロセスは、ポート待ち受けをする。調べてみる。\n[hadoop@isis ~]$ sockstat -l4|grep hadoop hadoop java 1746 55 tcp4 6 *:24923 *:* hadoop java 1746 60 tcp4 127.0.0.1:8021 *:* hadoop java 1746 71 tcp4 6 *:50030 *:* hadoop java 1621 55 tcp4 6 *:64722 *:* hadoop java 1621 63 tcp4 127.0.0.1:8020 *:* hadoop java 1621 74 tcp4 6 *:50070 *:* [hadoop@isis ~]$ 50030はJobTrackerの、50070はnamenodeの管理Web用ポート、8020はnamenodeの、8021はdatanodeのポート。\nnamenodeに対し、ブラウザで前二者のポートにアクセスするとステータスが分かる。\n実際に動かすのは今度。\n","permalink":"https://nobwak.github.io/posts/2013-07-28-hadoophadoop_%E6%93%AC%E4%BC%BC%E5%88%86%E6%95%A3psuedo-distributed%E3%83%A2%E3%83%BC%E3%83%89%E3%81%AE%E8%A8%AD%E5%AE%9A/","summary":"Standaloneモードでは、複数のホストを使った処理は行わない。デーモンも動かさない。 しかしHadoopは分散処理をしてナンボである。 分","title":"[Hadoop]Hadoop 擬似分散（Psuedo-distributed）モードの設定"},{"content":"Hadoopを動かすには、いくつか環境変数の設定が必要である。\nJAVA_HOMEとか、HADOOP_PREFIXとか。\nまた同時に、複数ノードの制御のために、sshやrsyncだって使う。\n以上のことを考えると、専用のユーザを作っておくのが便利である。\nところで、Hadoopをportsから入れると、ユーザhadoopが作られる。\nユーザhadoopを使うのがよさそうだが、しかしこのユーザhadoopはそのままでは使えない。\nシェルに/sbin/nologinが設定されているから。\nHadoopをportsからインストールしたとき、そういったことも併せて、擬似分散モード、完全分散モードで動かす準備をまとめる。\n準備は大きく分けて二段階。ユーザhadoopの環境設定と、sshdの設定変更。\nユーザhadoopのホームディレクトリ、シェル情報の変更 vipwでhadoopの行を以下のように書き換える。\nhadoop:*:955:955::0:0:hadoop user:/nonexistent:/usr/sbin/nologin ※以下のように書き換え hadoop:*:955:955::0:0:hadoop user:/home/hadoop:/usr/local/bin/bash パスワードは変えなくてもよい。\nsudo su - hadoopしたらいいし、リモートから直接hadoopとしてログインしたい場合には鍵を使うから。\nユーザhadoopのホームディレクトリと.profileの作成 ホームディレクトリを作り、HADOOP関連の環境変数を.profileに書き込む。\n追加でHADOOP_PREFIXという変数も加えておく。\n$ sudo mkdir /home/hadoop $ sudo sh -c \u0026#39;cat /usr/local/etc/hadoop/envvars.d/* \u0026gt;\u0026gt; /home/hadoop/.profile\u0026#39; $ sudo sh -c \u0026#39;echo \u0026#34;PATH=$PATH:/usr/local/share/hadoop/bin;export PATH\u0026#34; \u0026gt;\u0026gt; /home/hadoop/.profile\u0026#39; $ sudo sh -c \u0026#39;echo \u0026#34;export HADOOP_PREFIX=/usr/local/share/hadoop\u0026#34; \u0026gt;\u0026gt; /home/hadoop/.profile\u0026#39; $ 上記の手順を踏むと、.profileの中身は以下のように。\n$ cat /home/hadoop/.profile export JAVA_HOME=${JAVA_HOME:-/usr/local/openjdk6} export HADOOP_HOME=/usr/local/share/hadoop export HADOOP_CONF_DIR=/usr/local/etc/hadoop export HADOOP_LOG_DIR=/var/log/hadoop export HADOOP_PID_DIR=/var/run/hadoop PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/games:/usr/local/sbin:/usr/local/bin:/home/doe/bin:/usr/local/share/hadoop/bin;export PATH export HADOOP_PREFIX=/usr/local/share/hadoop 実際にログインして環境変数が設定されているか確認。\nなってますな。\n$ sudo su - hadoop [hadoop@vanilla ~]$ env | egrep \u0026#39;JAVA|HADOOP|PATH\u0026#39; HADOOP_LOG_DIR=/var/log/hadoop HADOOP_HOME=/usr/local/share/hadoop HADOOP_PID_DIR=/var/run/hadoop HADOOP_PREFIX=/usr/local/share/hadoop PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/games:/usr/local/sbin:/usr/local/bin:/home/hadoop/bin:/usr/local/share/hadoop/bin JAVA_HOME=/usr/local/openjdk6 HADOOP_CONF_DIR=/usr/local/etc/hadoop ユーザhadoopのssh設定。 これは複数ノードの制御のため。\nポイントは二つある。\n・パスワードなしでssh接続できるようにしておく。\n・リモート接続したときにも環境変数が有効になるようにしておく。\nパスワードなしのssh接続。 鍵を作っておいて、パスワードなしでリモートノードに接続できるようにしておく。\n（セキュリティ的にはおおらかですな。もちろんセキュリティ向上の取り組みはなされているようだけど）\nこれはもうお決まりの手順。\n$ sudo su - hadoop [hadoop@vanilla ~]$ [hadoop@vanilla ~]$ ssh-keygen -t dsa -P \u0026#39;\u0026#39; -f ~/.ssh/id_dsa Generating public/private dsa key pair. Created directory \u0026#39;/home/hadoop/.ssh\u0026#39;. Your identification has been saved in /home/hadoop/.ssh/id_dsa. Your public key has been saved in /home/hadoop/.ssh/id_dsa.pub. The key fingerprint is: bf:69:a7:7f:73:af:ed:2d:d7:02:5a:05:ce:08:a1:44 hadoop@isis The key\u0026#39;s randomart image is: +--[ DSA 1024]----+ | .E .. | | . .. . | | . . + . | | . o . | | S . | | . o | | .o . .| | oo. =.=| | .++...O*| +-----------------+ [hadoop@vanilla ~]$ [hadoop@vanilla ~]$ cat ~/.ssh/id_dsa.pub \u0026gt;\u0026gt; ~/.ssh/authorized_keys [hadoop@vanilla ~]$ [hadoop@vanilla ~]$ ssh localhost The authenticity of host \u0026#39;localhost (127.0.0.1)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is fc:b3:5c:28:1f:2f:32:21:0a:ba:1c:51:00:95:47:7a. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added \u0026#39;localhost\u0026#39; (ECDSA) to the list of known hosts. FreeBSD 9.1-RELEASE-p4 (GENERIC) #0: Mon Jun 17 11:42:37 UTC 2013 Welcome to FreeBSD! いったん抜ける\nリモート制御（コマンド実行）のためのssh設定 ここでまとめた通り、~/.ssh/environment環境変数の記載をする。\n$PATHとかの表記をしない。exportも省く。\n[hadoop@vanilla ~]$ cat ~hadoop/.ssh/environment JAVA_HOME=/usr/local/openjdk6 HADOOP_HOME=/usr/local/share/hadoop HADOOP_CONF_DIR=/usr/local/etc/hadoop HADOOP_LOG_DIR=/var/log/hadoop HADOOP_PID_DIR=/var/run/hadoop PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/games:/usr/local/sbin:/usr/local/bin:/home/doe/bin:/usr/local/share/hadoop/bin HADOOP_PREFIX=/usr/local/share/hadoop リモート制御（コマンド実行）のためのssh「d」設定 おなじく、sshdの設定を変える。\n$ sudo cp /etc/ssh/sshd_config{,.org} $ sudo vi /etc/ssh/sshd_config ※以下のように書き換え #PermitUserEnvironment no PermitUserEnvironment yes $ sudo service sshd restart Stopping sshd. Starting sshd. $ 確認。\nパスワードなしでログインできて、環境変数もOK.\n$ sudo su - hadoop [hadoop@vanilla ~]$ [hadoop@vanilla ~]$ ssh localhost env | egrep \u0026#39;JAVA|HADOOP|PATH\u0026#39; HADOOP_LOG_DIR=/var/log/hadoop HADOOP_HOME=/usr/local/share/hadoop HADOOP_PID_DIR=/var/run/hadoop HADOOP_PREFIX=/usr/local/share/hadoop PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/games:/usr/local/sbin:/usr/local/bin:/home/hadoop/bin:/usr/local/share/hadoop/bin JAVA_HOME=/usr/local/openjdk6 HADOOP_CONF_DIR=/usr/local/etc/hadoop [hadoop@vanilla ~]$ 以上\n関連エントリ。\n[FreeBSD] Hadoopのportsからのインストール\n[Hadoop]Hadoop 擬似分散（Psuedo-distributed）モードの設定\n[Hadoop]擬似分散モードで実験\n[Hadoop] 擬似分散モードから完全分散モードへ（データノードの追加）\n","permalink":"https://nobwak.github.io/posts/2013-07-26-freebsd_ports%E3%81%AEhadoop%E3%81%A7%E5%88%86%E6%95%A3x-distributed%E3%83%A2%E3%83%BC%E3%83%89%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99%E6%BA%96%E5%82%99/","summary":"Hadoopを動かすには、いくつか環境変数の設定が必要である。 JAVA_HOMEとか、HADOOP_PREFIXとか。 また同時に、複数ノード","title":"[FreeBSD] portsのHadoopで分散（x-distributed）モードを動かす準備"},{"content":"ssh経由bashでコマンド実行するときの環境変数を有効にするには。\n以下のようにして、リモートホストでコマンドを実行する場合、リモートでの環境変数が有効にならない事がある。\n$ ssh user@remotehost /path/command これはbashの仕様が原因で、解決にはsshdとリモートユーザの設定が必要。\nおそらくshでも同じと思うが、ひとくちにshと言ってもいろんな変種があるので調べていない。\n以下にまとめる。\nなお、複数ホストを用意するのが面倒なので、本記事で実例を示す場合には接続先をlocalhostしている。\nsshでコマンド実行すると環境変数が有効にならない。 試しに、user01のprofile、ここでは~user01/.profileでTESTENVという環境変数を設定する。\nsudo su - して通常のログインを擬似してみると、意図した通りTESTENVが設定されている。\nしかしsshでいきなりコマンド実行した場合（ここではenvコマンド）には、TESTENVは設定されない。\n[vanilla@vanilla ~]$ grep TESTENV ~user01/.profile TESTENV=testenv; export TESTENV [vanilla@vanilla ~]$ [vanilla@vanilla ~]$ sudo su - user01 [user01@vanilla ~]$ [user01@vanilla ~]$ env | grep TESTENV TESTENV=testenv [user01@vanilla ~]$ ssh localhost env|grep TESTENV [user01@vanilla ~]$ ``` `\nbashの仕様が原因 ssh経由でコマンド実行した場合、bashはnon-intractive（非対話モード） modeで起動し、.profile等を読み込まない。\nこれが原因で環境変数が設定できない。\n対策には、①コマンド実行時に一手間かける ②sshdの設定を変える の二つがある。\n対策の前にbashのマニュアル抜粋を示す。\nhttp://linuxjm.sourceforge.jp/html/GNU_bash/man1/bash.1.html\n bash が対話的なログインシェルとして起動されるか、 -login オプション付きの非対話的シェルとして起動されると、 /etc/profile ファイルが存在すれば、 bash はまずここからコマンドを読み込んで実行します。 このファイルを読んだ後、 bash は ~/.bash_profile, ~/.bash_login, ~/.profile をこの 順番で探します。\n（中略）\n(例えばシェルスクリプトを実行するために) 非対話的に起動されると、 bash は環境変数 BASH_ENV を調べ、この変数が定義されていればその値を展開し、 得られた値をファイル名とみなして、 そこからコマンドの読み込みと実行を行います。\n 対策①:コマンド実行時にprofile読み込みを明示 コマンド実行時に以下のようにしてprofile読み込みを明示する。\n$ ssh user@host \u0026#34;source ~/.profile; /path/to/command\u0026#34; ご覧の通り。\n``\n[user01@vanilla ~]$ ssh localhost \u0026#34;source ~/.profile; env\u0026#34;|grep TESTENV TESTENV=testenv [user01@vanilla ~]$ 後述の対策②を採れない場合、つまりsshdの設定ファイルを変更する権限がない場合には有効。\nその一方で、sshで実行するスクリプトが大量にある場合には、それら全部に対して修正が必要になるので、きびしい。\n単発向けの対策と考えるのがよさそう。\n対策②: sshdの設定PermitUserEnvironmentを変える。 sshdの設定を変えて、環境変数を読むようにする。\n以下、sshd_configのマニュアルより抜粋。\n\u0026lt;br /\u0026gt; PermitUserEnvironment\u0026lt;br /\u0026gt; Specifies whether ~/.ssh/environment and environment= options in\u0026lt;br /\u0026gt; ~/.ssh/authorized_keys are processed by sshd(8). The default is\u0026lt;br /\u0026gt; ``no''. Enabling environment processing may enable users to\u0026lt;br /\u0026gt; bypass access restrictions in some configurations using mecha-\u0026lt;br /\u0026gt; nisms such as LD_PRELOAD.\n~/.ssh/environmentを作っておき、sshd設定でPermitUserEnvironmentをYesに設定すると、その中身を読んでくれる。\nデフォルトではNoになっている。\nセキュリティ上の穴になる可能性があるので推奨はされない。\n加えて、先述の通りサーバのsshd設定を書き換える権限が必要。\nそれらがクリアできれば、クライアント側では何も意識しなくてよいので楽。\n対策②-1:sshd設定変更 sshd_configでPermitUserEnvironment yesにする。\n``\n$ sudo vi /etc/ssh/sshd_config #PermitUserEnvironment no PermitUserEnvironment yes sshdを再起動。\n\u0026lt;br /\u0026gt; \n$ sudo service sshd restart Stopping sshd. Starting sshd. $ 対策②-2:environmentの作成 ~/.ssh/environmentを作る。\nここで注意点。\nenvironmentは下記の書式しか受け付けない。詳細は実例で後述。\nenvironment=value 再びTESTENVに登場いただき試す。\n意図した通り、environmentの内容が反映されている。\n``\n$ sudo su - user01 [user01@vanilla ~]$ [user01@vanilla ~]$ echo \u0026#34;TESTENV=testenv\u0026#34; \u0026gt;\u0026gt; ~/.ssh/environment [user01@vanilla ~]$ cat ~/.ssh/environment TESTENV=testenv [user01@vanilla ~]$ [user01@vanilla ~]$ ssh localhost env|grep TESTENV TESTENV=testenv [user01@vanilla ~]$ しかし$PATHを与えても展開されずそのまま。\n$ echo \u0026#39;TESTENV01=$PATH\u0026#39; \u0026gt;\u0026gt; ~/.ssh/environment [user01@vanilla ~]$ grep 01 ~/.ssh/environment TESTENV01=$PATH [user01@vanilla ~]$ ssh localhost env|grep 01 TESTENV01=$PATH [user01@vanilla ~]$  \n.profileのつもりで書くと大変なことに。\n[user01@vanilla ~]$ echo \u0026#39;TESTENV02=$PATH; export TESTENV02\u0026#39; \u0026gt;\u0026gt; ~/.ssh/environment [user01@vanilla ~]$ grep 02 ~/.ssh/environment TESTENV02=$PATH; export TESTENV02 [user01@vanilla ~]$ ssh localhost env|grep 02 TESTENV02=$PATH; export TESTENV02 [user01@vanilla ~]$ environmentのvalueには変数を使わない。exportも使わないこと。\n \n以上\n","permalink":"https://nobwak.github.io/posts/2013-07-25-freebsdlinux_ssh%E7%B5%8C%E7%94%B1%E3%81%A7%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E3%81%A8%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%82%92%E8%AA%AD%E3%81%BE%E3%81%AA%E3%81%84%E3%81%A7%E3%81%94%E3%81%96%E3%82%8B/","summary":"\u003cp\u003essh経由bashでコマンド実行するときの環境変数を有効にするには。\u003c/p\u003e\n\u003cp\u003e以下のようにして、リモートホストでコマンドを実行する場合、リモートでの環境変数が有効にならない事がある。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ ssh user@remotehost /path/command\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこれはbashの仕様が原因で、解決にはsshdとリモートユーザの設定が必要。\u003cbr\u003e\nおそらくshでも同じと思うが、ひとくちにshと言ってもいろんな変種があるので調べていない。\u003cbr\u003e\n以下にまとめる。\u003c/p\u003e\n\u003cp\u003eなお、複数ホストを用意するのが面倒なので、本記事で実例を示す場合には接続先をlocalhostしている。\u003c/p\u003e","title":"[FreeBSD][Linux] ssh経由でコマンド実行すると環境変数を読まないでござる"},{"content":"Hadoopをインストールしたのでメモ。\n野良HadoopとportsのHadoop Hadoopを野良で入れるか、portsから入れるか。\n結局portsにした。その訳は。\nhadoopはJavaで動作する。\nということは、Javaさえ入っていれば、インストールに特殊な手間の必要なくhadoopが動作するはず。\nだからインストールを扱う記事、blog等々はhadoopをダウンロードしてtarで展開して\u0026hellip;、というものがほとんど。\nFreeBSDでだってそれは同じ。\nしかしFreeBSDでは、hadoopがportsに収録されている。\nportsだと依存するportsを一括で入れてくれるし、ユーザ追加や権限設定なども自動でしてくれる。\n便利な一方、世の中の記事とは違うところ（おもにファイル配置）が出てきたり、ひょっとすると最新版を使えないリスクもある。\nどっちもどっちだが、hadoopが初めてならportsから入れるのが良いと判断した。\nJavaなど依存portsのインストールが面倒だし、そもそもやりたいことはHadoopのセットアップではなくてその先にあるわけだから。\nなお2013/7/23時点でportsのhadoopは1.0.0の模様。\nhadoopのインストール ports、と言っておきながらなんだけど、けっこう量があるのでスピード重視でpackageから入れた。\nまずpackageの入手先を近所のftpに設定する。~/.profileに書いとけ。\nPACKAGEROOT=\u0026#34;ftp://ftp2.jp.freebsd.org\u0026#34;;export PACKAGEROOT sudoを使うならvisudoで以下の行をアンコメントしておく。\nDefaults env_keep += \u0026#34;PKG_PATH PKG_DBDIR PKG_TMPDIR TMPDIR PACKAGEROOT PACKAGESITE PKGDIR FTP_PASSIVE_MODE\u0026#34; インストール。あそうそう、bashとrsyncも忘れずにね。\n$ sudo pkg_add -r bash rsync hadoop しばらく放置。\n事前準備 一式が入ったのだが、hadoopを動かす前に準備がいる。\nOpenJDK向け設定、ホスト名の設定、JAVA_HOMEの設定。\nOpenJDK向けの設定 OpenJDKをインストールすると以下の表示が現れる。\n素直に設定する。\n=============================================================== This OpenJDK implementation requires fdescfs(5) mounted on /dev/fd and procfs(5) mounted on /proc. If you have not done it yet, please do the following: mount -t fdescfs fdesc /dev/fd mount -t procfs proc /proc To make it permanent, you need the following lines in /etc/fstab: fdesc /dev/fd fdescfs rw 0 0 proc /proc procfs rw 0 0 =============================================================== 以下のように。\n$ sudo mount -t fdescfs fdesc /dev/fd $ sudo mount -t procfs proc /proc $ mount /dev/da0p2 on / (ufs, local, journaled soft-updates) devfs on /dev (devfs, local, multilabel) fdescfs on /dev/fd (fdescfs) procfs on /proc (procfs, local) /etc/fstabにも以下の通り記載しておく（空白はタブで）\nfdesc /dev/fd fdescfs rw 0 0 proc /proc procfs rw 0 0 ホスト名の設定 hadoopはhostnameが解決できないと動作しない。\n/etc/hostsにhostnameの記載があるか確認して、なければ加える。\nDHCPでIPアドレス取得しているなら、127.0.0.1のところにホスト名を入れる。\n以下はhostnameがvanillaの場合\n127.0.0.1 localhost localhost.my.domain vanilla JAVA_HOMEの設定 portsからHadoopをインストールしているなら不要。\n/usr/local/etc/hadoop/envvars.d/000.java_home.envでJAVA_HOMEを設定している。\nそして000.java_home.envは起動の都度、読み込まれる(後述)。\nexport JAVA_HOME=${JAVA_HOME:-/usr/local/openjdk6} portsから入れていないんだったら、hadoopを使うユーザの~/.profileで設定しておく。\nJAVA_HOME=/usr/local/openjdk6;export JAVA_HOME ファイル配置 ファイル配置の確認。\nportsから入れると、FreeBSDの流儀に沿ってファイルが配置される。\nopenjdk6の場所\n/usr/local/openjdk6 hadoop関連\n各ディレクトリの中身\nopenjdk6\n$ ls /usr/local/openjdk6/ ASSEMBLY_EXCEPTION demo man LICENSE include sample THIRD_PARTY_README jre src.zip bin lib hadoop関連ファイル\n$ ls /usr/local/etc/hadoop capacity-scheduler.xml hadoop-policy.xml configuration.xsl hdfs-site.xml core-site.xml log4j.properties envvars.d mapred-queue-acls.xml fair-scheduler.xml mapred-site.xml hadoop-env.sh taskcontroller.cfg hadoop-metrics2.properties $ ls /usr/local/share/hadoop/ bin hadoop-core-1.0.0.jar lib contrib hadoop-test-1.0.0.jar webapps hadoop-ant-1.0.0.jar hadoop-tools-1.0.0.jar $ ls /usr/local/share/examples/hadoop/ conf hdfs-default.xml core-default.xml mapred-default.xml hadoop-examples-1.0.0.jar これでインストールはおしまい。\nhadoopはこれだけでも動く。しかしその前に。\n/usr/local/bin/hadoopってなんだ FreeBSDのports特有のものと思うけど、/usr/local/bin/hadoopについて。\n/usr/local/bin/hadoopを便宜的にhadoopコマンドと呼ぶ。\nhadoop一式は/usr/local/share/hadoop下にあるのに一体これはなんだろう。\n中身を見ればすぐ分かる。hadoopコマンドの正体はbashスクリプト。\nもう少し見ると、環境変数を設定してからhadoopの実体を呼ぶwrapperであると分かる。\nと同時に、環境変数の設定は/usr/local/etc/hadoop/envvars.dの下に置いておけばよいと言う点も分かる。\n#!/usr/bin/env bash for i in `ls /usr/local/etc/hadoop/envvars.d/*.env` do . ${i} done exec /usr/local/share/hadoop/bin/hadoop $@ 続き\n[FreeBSD] portsのHadoopで分散（x-distributed）モードを動かす準備\n[Hadoop]Hadoop 擬似分散（Psuedo-distributed）モードの設定\n[Hadoop]擬似分散モードで実験\n[Hadoop] 擬似分散モードから完全分散モードへ（データノードの追加）\n","permalink":"https://nobwak.github.io/posts/2013-07-23-freebsd_hadoop%E3%81%AEports%E3%81%8B%E3%82%89%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"Hadoopをインストールしたのでメモ。 野良HadoopとportsのHadoop Hadoopを野良で入れるか、portsから入れるか。 結局","title":"[FreeBSD] Hadoopのportsからのインストール"},{"content":"PDFをKindle PaperWhiteで読もうとすると、字が小さくなるうえにアンチエイリアスがかかってモヤっとした表示になり読みにくいことこの上ない。\nそこでk2optpdfを使ってみた。\n結論。\nk2optpdfはやめて、横画面モード（Landscape Mode）にして読んでる。\nk2optpdfとは http://www.willus.com/k2pdfopt/\nPDFを読みたい端末の解像度、画面サイズに合わせて表示を最適化してくれるツール。\nなおここでのPDFとは、テキストデータが埋め込まれているものであって、画像データのPDF、要するに自炊PDFは対象外（のはず）\nアウトプットのイメージは上記サイトの通り。\n入手方法\nhttp://www.willus.com/k2pdfopt/download/\nここで、左側のCapchaに数字を入れてから、使用しているコンピュータに対応したバージョンをダウンロードする。\nスタンドアロンのプログラムなので、ダウンロードしたらそのまま使える。\n使い方 http://www.willus.com/k2pdfopt/help/\nダウンロードしたファイルに、変換したいPDFをドラッグアンドドロップし、上記URLを参考に選択肢を選ぶだけ。\nWindowsだとコマンドプロンプトが開いてメニューが表示される。\nそこで変換先デバイスを選ぶ。dを押してから4を押す。\nそしてもう一回Enterを押せばOK。\n微妙な調整 上記で普通は問題ないはずだが、それでも変換結果に納得いかない場合がある。\n以下にその例と対策を示す。\nやっぱり字が小さい\n途中で落ちる。\nやっぱり微妙\u0026hellip;。 そうしてこうして頑張って変換したけど、やっぱり使いにくい。\nその理由を以下に列挙\n 所詮は自動変換。段組みによって無茶苦茶な変換をする。 変換したら格段にファイルサイズが増える。（画像データになるから） テキストを選択できない。（画像データになるから。 native PDFオプションもあるにはあるが） 落ちまくる。ストレス。  最終的に 冒頭で書いたとおり、そのままPDFを横画面モードで読んでます。\n","permalink":"https://nobwak.github.io/posts/2013-07-19-pdf%E3%82%92kindle_paperwhite%E3%81%A7%E8%AA%AD%E3%81%BF%E3%82%84%E3%81%99%E3%81%8F/","summary":"PDFをKindle PaperWhiteで読もうとすると、字が小さくなるうえにアンチエイリアスがかかってモヤっとした表示になり読みにくいこと","title":"PDFをKindle PaperWhiteで読みやすく"},{"content":"DHCPサーバのIPアドレス数を監視したい。\n具体的には、リースしているIPアドレス数と、空いているIPアドレス数のそれぞれである。\n基になるデータはdhcpd.leasesにあるのだが、そのままでは使えない。\nmanなど読めば分かるのだが、ここにはIPアドレスの貸与、更新、破棄が末尾にだらだらと追記されていくので、同じクライアントが複数回出てきたりする。\nだからリースされたもの、空いているものを数えようとすると意外に手間取るのである。\n同じ悩みを持つ方はいるようで、少し検索すると、こういったIPアドレス数を数えるスクリプトはいくつか見つかる。\n調べてみた結果を記す。\nなお先に結論を言っておくと、どこかの誰かが作ってくれたawkスクリプトを使用することにした。\nいくつかのスクリプト いずれも判で押したようにperlスクリプトである。\n繰り返すがここにあるものは使っていない。\n DHCPstatus http://dhcpstatus.sourceforge.net/ dhcp-leasecount http://www.net-track.ch/opensource/dhcp-leasecount/(死亡確認) reportdhcp.pl http://www.omar.org/opensource/reportdhcp/  DHCPstatus 面倒くさい。\nサイトからファイルをダウンロードして展開するとこのように。\n$ ls\u0026lt;br /\u0026gt; INSTALL README libraries.tar dhcpstatus.ini\u0026lt;br /\u0026gt; LICENSE VERSION scripts\nここにあるibraries.tarを展開すると、dhcpstatusというディレクトリが出来る。\nそれを/usr/local/にコピー。\nつまり/usr/local/dhcpstatusというディレクトリが出来る。\nさらに、dhcpstatus.iniも/usr/local/dhcpstatusの下へコピー。\nそしてdhcpstatus.iniを修正\ndhcpdの設定ファイル、leaseファイルの場所を指定する。\n複数のサブネットを運用しているのでなければ、show_whole_subnetを1に変更\n# location of the .conf file.\u0026lt;br /\u0026gt; conf_file=/usr/local/etc/dhcpd.conf\u0026lt;br /\u0026gt; leases_file=/var/db/dhcpd/dhcpd.leases\u0026lt;br /\u0026gt; show_whole_subnet=1\u0026lt;br /\u0026gt; \nそして実行\n$ perl ./scripts/dhcpstatus\u0026lt;br /\u0026gt; Legacy library timelocal.pl will be removed from the Perl core distribution in the next major release. Please install it from the CPAN distribution Perl4::CoreLibs. It is being used at dhcpstatus/dhcpstatus.pm, line 26.\u0026lt;br /\u0026gt; DHCP Subnet Information\nSubnet: 192.168.100.0 Netmask: 255.255.255.0\u0026lt;br /\u0026gt; IP range: 192.168.10.101 - 192.168.10.199 Router: 192.168.10.254\u0026lt;br /\u0026gt; IPs defined: 99 IPs used: 21 IPs free: 78\nベースにしているPerlが古すぎるので却下。\nDHCP leasecount こんな感じ。\n$ ./dhcp-leasecount -l /var/db/dhcpd/dhcpd.leases 172.29.16.0-172.29.16.255\u0026lt;br /\u0026gt; defined(%hash) is deprecated at ./dhcp-leasecount line 100.\u0026lt;br /\u0026gt; (Maybe you should just omit the defined()?)\u0026lt;br /\u0026gt; defined(%hash) is deprecated at ./dhcp-leasecount line 102.\u0026lt;br /\u0026gt; (Maybe you should just omit the defined()?)\u0026lt;br /\u0026gt; defined(%hash) is deprecated at ./dhcp-leasecount line 104.\u0026lt;br /\u0026gt; (Maybe you should just omit the defined()?)\u0026lt;br /\u0026gt; Total available addresses: 256\u0026lt;br /\u0026gt; Active leases: 37 (14.5%)\u0026lt;br /\u0026gt; Expired leases: 75 (29.3%)\u0026lt;br /\u0026gt; Available addresses: 144 (56.2%)\nなんかこれも間もなく使えなくなりそうな予感。perlスクリプト修正するのやだし。\nReport DHCP 出力がhtmlなのですぐにやる気をなくした。\n結局awkで。 こういうawkスクリプトを使うことにした。stackoverflow.comとかで見つけたと思う。\n例えばgetDhcpStatus.shとして保存しておく。\n#!/bin/sh\u0026lt;br /\u0026gt; awk '/^lease / { curlease = $2; } /^ binding state/ { lstates[curlease] = $3; } END { for (curl in lstates) { tstates[lstates[curl]]++; } for (curs in tstates) { print curs, tstates[curs]; } }' /var/db/dhcpd/dhcpd.leases\n出力結果は例えば以下のように。\nactive; 66\u0026lt;br /\u0026gt; free; 275\nうーん。minimalでよろしい。\n出力をMRTGに。 でこれをMRTGに食わせる場合には、さらに以下のようなスクリプトを使ってMRTGから呼ぶ。\n#!/bin/sh\n~/bin/mrtg/getDhcpStatus.sh | cut -f2 -d\u0026quot; \u0026quot;|head -2\u0026lt;br /\u0026gt; uptime | awk '{print $3}' | sed \u0026quot;s/,//\u0026quot;\u0026lt;br /\u0026gt; echo \u0026quot;leased, free IP addresses\u0026quot;\n","permalink":"https://nobwak.github.io/posts/2013-06-17-freebsdlinux_dhcp%E3%82%B5%E3%83%BC%E3%83%90isc-dhcpd%E3%81%A7%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%97%E3%81%A6%E3%81%84%E3%82%8Bip%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%AE%E6%95%B0%E3%82%92%E7%9B%A3%E8%A6%96%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"DHCPサーバのIPアドレス数を監視したい。 具体的には、リースしているIPアドレス数と、空いているIPアドレス数のそれぞれである。 基になるデ","title":"[FreeBSD][Linux] DHCPサーバ(isc-dhcpd)でリースしているIPアドレスの数を監視するには"},{"content":"MacPortsとHomebrewの違いについてざっと調べた。\n双方を比較するとおおよそ以下の事が言えるようだ。\nMacPorts\n 対応ソフトウェア: 多 消費ディスク: 多 インストール時時間: 多 default path: /opt/local システムへの依存度: 小 OS update時影響: 少  Homebrew\n 対応ソフトウェア: 少 消費ディスク: 少 インストール時時間: 少 defaultpath: /usr/local/cellar システムへの依存度: 大 OS update時影響: 大  ベースシステムとの独立性、という点ではMacPortsに惹かれるが、サーバ用途じゃなければ手軽そうなHomebrewでいいかな…。\n","permalink":"https://nobwak.github.io/posts/2013-06-16-osx_%E3%83%A1%E3%83%A2macports%E3%81%A8homebrew/","summary":"MacPortsとHomebrewの違いについてざっと調べた。 双方を比較するとおおよそ以下の事が言えるようだ。 MacPorts 対応ソフトウェア: 多 消費ディ","title":"[OSX] メモ: MacPortsとHomebrew"},{"content":"VMWareのESXiは大変便利なのだが、インストーラをCDに書き込む必要のあるのが玉に瑕。\n今更CD-R/DVD-Rなんて持ってないよ。\nUSBメモリにインストーラをインストールする方法を調べたのでまとめる。\nなおESXiはVMWareからダウンロードしている前提。\nUNetbootinの入手 以下より、OSに合わせたUNetbootinをダウンロード。\nhttp://unetbootin.sourceforge.net/\nWindows、Macのほか、各種Linux向けにも用意されているし、インストールの必要なく動作するので、Windowsのレジストリだって汚れないよ！\nUSBメモリの準備 USBメモリはFAT32でフォーマットしておく。\nWindowsでは「クイックフォーマット」は選んだりしないこと。\nUSBメモリへの書き込み USBメモリを挿してから、USBUNetbootinを起動。\nディスクイメージ→ISO→ESXiのインストーラISOイメージを選択\nタイプでUSBメモリを選択\nOKをクリック\n[\n以下のようになれば完成。\nママも安心ESXiインストーラ入りUSBメモリの出来上がり。\n以上\n","permalink":"https://nobwak.github.io/posts/2013-06-06-vmware_vsphere5.0esxi5.0%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%A9%E3%82%92usb%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%8B%E3%82%89%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"VMWareのESXiは大変便利なのだが、インストーラをCDに書き込む必要のあるのが玉に瑕。 今更CD-R/DVD-Rなんて持ってないよ。 US","title":"VMWare vSphere5.0(ESXi5.0)インストーラをUSBメモリ「から」起動するには"},{"content":"Pythonが面白くてしょうがいない。\nのだが、Windowsで使った場合、文字コードとか改行コードとかパスのデリミタのせいでいろいろと手間がかかる。\nWindows固有の手間をここにまとめる。\nなお、私の使っているのはPython2。\n\u0026lt;br /\u0026gt; ActivePython 2.7.2.5 (ActiveState Software Inc.) based on\u0026lt;br /\u0026gt; Python 2.7.2 (default, Jun 24 2011, 12:22:14) [MSC v.1500 64 bit (AMD64)] on win32\n文字コード設定 Python2を使っていて扱うファイルがShift-JISばかりなら、PythonもShift-JISで通したほうが楽。\nだってほら、いちいち変換とか面倒ですよ。\nPythonスクリプトファイルの1行目あるいは2行目には以下を記載する。\n# coding: ms932\n# -*- coding:という書式もあるがemacsを使わないならこれでよい。\n詳細は下記リンク\nhttp://docs.python.org/2/reference/lexical_analysis.html#encoding-declarations\ndefault encodingの設定 デフォルトのencodingもms932にしておく。\nいま現在のencodingを確かめるにはimport sysしてからsys.getdefaultencoding()する。\n何もしていなければasciiのはず。\n\u0026gt;\u0026gt;\u0026gt; import sys \u0026gt;\u0026gt;\u0026gt; sys.getdefaultencoding() \u0026#39;ascii\u0026#39; \u0026gt;\u0026gt;\u0026gt; C:\\Python27\\Lib\\の下にsitecustomize.pyを作って以下の内容を書き込む。\nimport sys sys.setdefaultencoding(\u0026#39;cp932\u0026#39;) もう一度確かめればデフォルトのencodingが変わっていると分かる。\n\u0026gt;\u0026gt;\u0026gt; import sys \u0026gt;\u0026gt;\u0026gt; sys.getdefaultencoding() \u0026#39;cp932\u0026#39; \u0026gt;\u0026gt;\u0026gt; パスの扱い方（頭にrを付ける） Windowsのパス表記はバックスラッシュを使うが、これをそのまま使うとエスケープシーケンスとして扱われてしまう。\nそこでrを頭につける。\nするとrawリテラルとして扱ってくれる。\n`\u0026raquo;\u0026gt; print \u0026lsquo;c:\\nowhere\u0026rsquo;c:owhere   print r\u0026rsquo;c:\\nowhere\u0026rsquo;c:\\nowhere`\n   http://docs.python.org/2/reference/lexical_analysis.html#string-literals\nWindowsでのCSV書き込み。改行コードに注意。 Windows上PythonからCSV書き出し→ExcelなどWindowsの各種プログラムで開く→一行ごとに空行ができている＼(^o^)／\nCSV書き出し時改行コードのデフォルトが\\r\\nになっているせい。\n下記のように改行コードを指定すればOK。\nなお読み込みのときは指定不要。\nhttp://docs.python.jp/2/library/csv.html#csv.Dialect.lineterminator\nimport csv\u0026lt;br /\u0026gt; csvhandler = csv.writer(open(r'C:\\nowhere\\output.csv','w'),delimiter=',',lineterminator=\u0026quot;\\n\u0026quot;)\nShift-JISでのsqlite3 SQLite3のTEXTデータタイプはデフォルトでUTF-8。\nSQLite3コネクションオブジェクトの.text_factoryアトリビュートをstrにすると、バイトストリングとして扱ってくれる。\nhttp://docs.python.org/2/library/sqlite3.html#sqlite3.Connection.text_factory\nimport sqlite\u0026lt;br /\u0026gt; conn = sqlite3.connect(dbfile)\u0026lt;br /\u0026gt; conn.text_factory = str\npylab(Matplotlib)のグラフで日本語表示 pylabで作ったグラフは、UTF-8でないとダメなようだ。\nこればかりはunicodeにエンコードしてpylabに入力する。\nしかしUTF-８であっても、そのままでは日本語を表示してくれない。\n下記のようにフォントを指定する。\nimport pylab\u0026lt;br /\u0026gt; pylab.rcParams['font.family'] = 'VL Gothic'\u0026lt;br /\u0026gt; pylab.rcParams['font.size'] = 12\n更新履歴\n2013/5/17 初版\n2013/5/10 sqlite3のtextでUTF-8でなくバイトストリングを扱う方法を追記\n2013/5/24 pylabグラフで日本語使うときの注意を追記\n2013/9/12 default encodingの件を追加\n","permalink":"https://nobwak.github.io/posts/2013-05-17-python_windows%E3%81%A7%E3%81%AEpython2/","summary":"Pythonが面白くてしょうがいない。 のだが、Windowsで使った場合、文字コードとか改行コードとかパスのデリミタのせいでいろいろと手間が","title":"[python] WindowsでのPython2"},{"content":"MIT(マサチューセッツ工科大学）のオンラン講義、John Guttag先生のIntroduction to Computer Science and Programmingを視聴して感動したのでPythonをいじってるのである。\nWindowsにおいて、最初はPortableAppのPythonを使っていたのだが、本格的に試してみたくなった。\nのだが、実際のインストールを考えると、選択肢は二つあって、公式PythonとActiveStateのActivePythonがあるようだ。\n違いは何か。\n端的に言えば、両者に違いはそうそうなくて、ActivePythonには最初からいろいろなものが付いてくるので楽、といったところ。\n自分の場合、職場PCにインストールが許容されているActivePythonをインストールしたのだが、zipなどのよく使うモジュールは最初から入ってるし、SQLite3もついてきた。\nセキュリティポリシー上、インターネットへの接続や、インストールできるソフトウェアが制限されるケースでは、これは便利ではないだろうか。\n追記:\nと思ったら、ActivePythonにはPylab(Matplotlib)がない（Windows 64bit)。これは痛い\nなお、idleはWindowsならC:\\Python27\\Lib\\idlelib\\idle.batから起動できる。\nWhy does ActivePython exist?\n\nWhat is the difference between active python and python?\nPythonが普及しない原因 ＜大げさ\n","permalink":"https://nobwak.github.io/posts/2013-05-15-python_python%E3%81%A8activepython/","summary":"MIT(マサチューセッツ工科大学）のオンラン講義、John Guttag先生のIntroduction to Computer Science and Programmingを視聴して","title":"[Python] PythonとActivePython"},{"content":"（追記:2013/11/7）\n公式のpkgngが公開されている。詳しくは以下を。\n../../../?p=2357\n（追記ここまで）\nFreeBSDの新ソフトウェア管理ツールであるpkgngだが、FreeBSD公式サイトの不正アクセス食らったせいでpkgを配布するpackage repositoryが停止されている。\nそこでこんな事をしてしのいでいたわけだが、今月の初め、改めてPC-BSDからこのような周知があり、FreeBSDのpkgng使いはこぞって大感謝した。\nPC-BSD Announces Package Repository for PC-BSD and FreeBSD 9.1\nFreeBSD PKGngパッケージリポジトリ，iXsystems提供開始\nところがここ数日、どうもレポジトリが壊れているようなんである。\n曰く、i386用のrepoなのに、amd64のが混じってるぞ、と。\nしたがって、二週間もすれば対策されるような気もする。\n$ sudo pkg upgrade Updating repository catalogue repo.txz 100% 14MB 791.6KB / s 1.0MB / s 00:18 pkg: At least one of the packages provided by the repository is not compatible with your ABI: Your ABI: freebsd: 9: x86: 32 Incompatible ABIs found: freebsd: 9: x86: 64 しかし二週間も待ってられない。ググったら対策が出てきた。\nここにメモしとく。\nrepo.sqlite（レポジトリカタログ）をローカルで修正する。 レポジトリカタログとは、そのレポジトリ（ftp.pcbsd.org）にあるpkgの情報を一覧にしたもの。\nレポジトリの修正はできないから、レポジトリカタログを修正する。\nすなわち、カタログからamd64向けのものを削除するわけ。\nまずはrepo.txzをダウンロードする。\n$ fetch http://ftp.pcbsd.org/pub/mirror/packages/9.1-RELEASE/i386/repo.txz repo.txz 32% of 13 MB 230 kBps 00m42s txzをtarで展開して、sqlite3で開く。\npackagsテーブルをサーチしてみると、wineが悪さをしていることが分かる。\n$ sqlite3 ./repo.sqlite sqlite\u0026gt; .tables categories licenses packages pkg_licenses shlibs deps options pkg_categories pkg_shlibs sqlite\u0026gt; select * from packages where arch=\u0026#34;freebsd:9:x86:64\u0026#34;; 11394|emulators/i386-wine-devel|i386-wine|1.5.27,1|Microsoft Windows compatibility environment|Wine is a Microsoft Windows compatibility layer (or program loader) capable of running Windows applications on i386 and compatible CPUs. Windows programs running in Wine act as native programs would, running without the performance or memory usage penalties of an emulator, with a similar look and feel to other applications on your desktop. Many applications already work, more or less, including versions of Microsoft Office and several games. WWW: http://www.winehq.org/ Gerald Pfeifer \u0026lt;gerald@FreeBSD.org\u0026gt;||freebsd:9:x86:64|gerald@FreeBSD.org|http://www.winehq.org/|/usr/local|18801412|144704625|124|36710abf23920911a3fb2bdd34ab8643b55d6f5a1f4a3ba565c0edf4229a101d|All/i386-wine-1.5.27,1.txz| たしかに「freebsd:9:x86:64」とありますな。\nそして当該行を削除。\nsqlite\u0026gt; delete from packages where arch=\u0026#34;freebsd:9:x86:64\u0026#34;; sqlite\u0026gt; select * from packages where arch=\u0026#34;freebsd:9:x86:64\u0026#34;; sqlite\u0026gt; sqlite\u0026gt; .quit これで修正はおしまい。\n修正したrepoでアップデートを試みる。 そうしてできたカタログをローカルの/var/db/pkg/へ移す。\nまずもともとのカタログを消す。\n$ cd /var/db/pkg. $ ls repo* repo.sqlite repo.sqlite.unchecked $ sudo rm repo.* $ 修正済みのカタログを移す。\n$ sudo cp ./repo.sqlite /var/db/pkg/ $ そうしたら、あとは-Uオプションを付けて実行するだけ。\n-Uオプションはrepoカタログの更新をスキップするもの。\n-U Skip updating the repository catalogues with pkg-update (8). Use the local cache only. pkg upgrade will always print out the list of packages with available updates. $ sudo pkg upgrade -U The following packages will be upgraded: Upgrading libiconv: 1.14 -\u0026gt; 1.14_1 Upgrading gettext: 0.18.1.1 -\u0026gt; 0.18.1.1_1 Upgrading perl: 5.14.2_2 -\u0026gt; 5.14.2_3 Upgrading pkgconf: 0.8.9 -\u0026gt; 0.9.1_2 Upgrading libffi: 3.0.12 -\u0026gt; 3.0.13 無事にできました。\nうっかり-Uを付け忘れて、カタログが上書きされちゃったら、もう一回やればOK。\n","permalink":"https://nobwak.github.io/posts/2013-04-26-freebsd_pc-bsd%E3%81%8Cfreebsd%E5%90%91%E3%81%91pkg_repo%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%8F%E3%82%8C%E3%81%9F%E3%81%91%E3%81%A9%E5%8B%95%E3%81%8B%E3%81%AA%E3%81%84%E3%81%A7%E3%81%94%E3%81%96%E3%82%8B2013_4_27%E7%8F%BE%E5%9C%A8/","summary":"（追記:2013/11/7） 公式のpkgngが公開されている。詳しくは以下を。 ../../../?p=2357 （追記ここまで） FreeBSDの新ソフトウェア管理ツールであ","title":"[FreeBSD] PC-BSDがFreeBSD向けpkg repo作ってくれたけど動かないでござる(2013/4/27現在)"},{"content":"私的なことだけど、ここ最近は非ルーチンの仕事が増えた。\nそのせいか、金曜日になるとぐったりする。\nルーチンと仕事 思えば、仕事には、特に勤めびとにはルーチン作業が沢山ある。\n日、週、四半期、半年、一年といった、ある時間的な区切りで周期的に同じタスクを繰り返している。\nこれは何のためか。\n理由はいろいろあるだろう。\nけど、ここで言いたいのは一つの理由だけ。\nすなわち、ルーチンは認知の負荷を低く抑えるためだろう、ということ。\nルーチン、つまり定形のタスクがなくて、毎日が非日常だなんて、詩人でもないかぎり願い下げだろう。\n少ない労力で一定以上のアウトプットを継続的に出すには、仕事を定形タスクにしなければやってられない。\nだから、逆説的に言えば、仕事って非定形のタスクを定形に変えることだし、労力、集中力を可能な限りセーブし、ここ一番の仕事にドカッと振り向ける、ということだ。\n小さいところではメールの書き方のような数十秒レベルのタスクから、大きなところでは四半期ごと、一年ごとのプロジェクトの進め方まで、さまざまなタイムフレームで定型化したルーチン作業をしているはずだ。\n無意識領域に追いやられた仕事たち しかしここで書きたいのは、むしろルーチンのことである。\nこれらのタスクは定形化されてしまっている。\n極端な話、簡単な作業レベルのルーチンであれば頭で他のことを考えていても出来てしまう。\nもちろん、プロジェクトレベルの大きなタスクだって、疑いもせず当然のこととして前例にしたがって作業を進めるだろう。\nこれらのルーチンは意識の地平に登ることはない。\nむしろそのためにやっているのだから。\n状況変わってないか？ しかし。しかしである。\nこの世の中、状況だけはどんどん変わる。\nそのルーチンが、実は非効率になっていたり、そもそも不要になっていることだって、あるのだ。\nところが前述のように、これらのルーチンが意識されることはない。\nしたがって再評価のタイミングは、無いかごくごく限られるんである。\nダメなルーチンに気がつくとき 再評価のタイミングはたぶん３つ。\n 定期的に定形業務を棚卸しし、再評価する。 手遅れになって気がつく。 他者からの指摘。  1.の出来る人はこの先を読む必要がありません。お帰りください。\n2.で気づくのは避けたいところ。\nそこで3.である。\nこれを大事にしたいと思うんである。\n他人からの指摘を大事にしようNE！（当たり前か？） 他人からの指摘は大事だなんて、これ以上当たり前の話はない。\nただここまで連々、書いたのは目的がある。\nルーチンについて他人から指摘を受けた時、たとえば「なんでそんなことやってるの？」とか、「それって意味あるの？」\nと言われた時、俺達は通常、どう反応するだろうか。\nそこに狼狽はないだろうか。\nそして必要な理由を、実はその場で探しながら相手にまくし立てたり、しないだろうか。\n俺はしょっちゅうだ。\nなぜか。\n先述の通り、ルーチンなんて無意識でやってるからもう妥当性なんて忘却の彼方なんである。\nもうそこには「だって毎回やってたから」以上の意味はないんである。\nだから指摘されたら慌てるのも、当然なんである。\n古いスーツのように 俺はできるだけこう思うことにした。\nルーチンとは古いスーツだと。\nつまり、他人からの指摘は、いわば「意識もせず同じスーツを何年も着てたら、友人から『君のスーツ、パンツがダボダボだ。いまどき誰もそんなの穿いてないぞ』と言われた」ようなものだと。\nもっと極端に「何年も同じジーンズ穿いてたら、友人から『そのケミカルウォッシュ（若い人はググってくれ）もうやめなよ』と言われた」という例えのほうが恥ずかしさが伝わるだろうか。\nとにかく、そういう指摘を受けたら、赤面して家にダッシュで帰って古いスーツ、古いジーンズは捨ててしまうのがよい。\nルーチンもそうしよう。\nそして指摘してくれた人を大事にしよう。\n","permalink":"https://nobwak.github.io/posts/2013-04-21-thoughts_%E3%83%AB%E3%83%BC%E3%83%81%E3%83%B3%E3%81%A8%E5%8F%A4%E3%81%84%E3%82%B9%E3%83%BC%E3%83%84/","summary":"私的なことだけど、ここ最近は非ルーチンの仕事が増えた。 そのせいか、金曜日になるとぐったりする。 ルーチンと仕事 思えば、仕事には、特に勤めびとに","title":"[thoughts] ルーチンと古いスーツ"},{"content":"ボストンのテロでは、一時「リモート爆破を防ぐため携帯電話サービスが停止された」と報道が流れた。\nCell Phone Service Has Been Suspended in Boston (Update: It’s Just Overloaded)\nああ。輻輳してるだけでした。 なーんだ輻輳していただけか、という話では終わらなかった。\n米国では実際に当局が携帯電話サービスの停止を命令出来るんである。\nStandard Operating Procedure 303, 略してSOP303という手続きがある。\nなんでも、特殊な状況下において必要と判断した場合、当局はNCC（National Coordinating Center for Telecommunications）を通してキャリアに対してサービス停止を命令できるのだそうな。\nしかしこの手続きにはいろいろと問題がある。\n「特殊な状況下」が明確でないし、NCCが当局の命令が妥当かのチェック責任を追っているようなのだが、チェック方法もよく分からない。\n2011年にはカリフォルニアで起こったデモに対して携帯電話を止めたケースがあったと。\nそりゃ揉めるよなあ。\nIs it legal to shut down cellular networks in an emergency?\nYes, but the FCC has been trying to clarify how and when it should happen\n","permalink":"https://nobwak.github.io/posts/2013-04-18-teleco_%E7%B1%B3%E5%9B%BD%E3%81%A7%E3%81%AF%E5%BD%93%E5%B1%80%E3%81%8C%E6%90%BA%E5%B8%AF%E9%9B%BB%E8%A9%B1%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E5%81%9C%E6%AD%A2%E3%82%92%E5%91%BD%E4%BB%A4%E3%81%A7%E3%81%8D%E3%82%8B/","summary":"ボストンのテロでは、一時「リモート爆破を防ぐため携帯電話サービスが停止された」と報道が流れた。 Cell Phone Service Has Been Suspended in Boston (Update: It’s Just Overloaded) ああ。輻輳してる","title":"[teleco] 米国では当局が携帯電話サービスの停止を命令できる"},{"content":"WirelessWireNewsに、「AT\u0026amp;T、HD Voice（VoLTE）サービスを今年中に開始へ」という記事があり、なんとそこで「HD VoiceまたはVoLTEは、通話のノイズが減少し、音質が飛躍的に向上する音声サービスとされている。」という驚きの記述がされていたのでコーヒーを吹いて調べた結果を記す。\n結論としてやっぱり別の話じゃねーか安心した。\nVoLTEってなんだ。\n****ざっくり言うと、LTE上で音声通話をするもの。IMSベースであり、IP網においては音声通話に適した優先制御がなされ、無線区間でも同じく音声通話に適したスケジューリング(TTI Bundling, Semi Persistent Scheduling)がなされるもの。\n一方でHD Voiceとは。\n****名前からも想像はつくけれども、従来は、人の声の200Hzから3,300Hzまでをサンプリングできなかったのに対し、HD Voiceでは50Hzから7,000Hzまでを対象にできる。\nEricssonのこの記事で示される図がわかりやすい。\n結果として「格段に聞き取りやすく」なるそうだ。本記事最後にデモへのリンクを置く。\nあまり感動はしなかったんだが、sとかfとかの、無声音とでも言うんでしょうか、そういう音がある言語では重宝するのですかね。\nHD Voice = Codec HD Voiceを実現するのは端的に言ってCodecである。\n具体的には、AMR-WB(Adaptive Multi-Rate Wideband)だ。\nVoLTEとHD Voiceは同じか？ GSMAやドコモの情報からすると、VoLTEではHD Voiceを実現するAWR-WBを必須とはしておらず、オプション扱いである。\nいずれもPDF注意\nhttp://www.gsma.com/newsroom/wp-content/uploads/2012/06/IR9230.pdf\nhttp://www.nttdocomo.co.jp/binary/pdf/corporate/technology/rd/technical_journal/bn/vol19_4/vol19_4_045jp.pdf\nつまり携帯電話側の能力によるので、LTE上の音声通話であろうとも、HD Voiceができるもの、できないものがある。\nだからしてVoLTEとHD Voiceはイコールではありません。\nなおWIREDの記事を見ると、 iPhone 5, Samsung S III (and IV), HTC One, Nokia Lumia 920, Sony Xperia Zは対応しているようだ。\nHow HD Voice Works to Make Your Calls Sound Drastically Better\nそのほか参考になるリンク HD Voiceデモ\n\u0026hellip;しかしこれは、比較対照のが悪すぎやしないか？\nhttp://www.gsma.com/technicalprojects/hd-voice-sound-demonstration/\nHD Voice\nhttp://www.webopedia.com/TERM/H/HD_voice.html\nTip: Wideband vs. narrowband VoIP codecs\nhttp://www.eetimes.com/design/signal-processing-dsp/4017506/Tip-Wideband-vs-narrowband-VoIP-codecs/\n","permalink":"https://nobwak.github.io/posts/2013-04-08-telecom_hd_voice%E3%81%A3%E3%81%A6%E3%81%AA%E3%82%93%E3%81%A0/","summary":"WirelessWireNewsに、「AT\u0026amp;T、HD Voice（VoLTE）サービスを今年中に開始へ」という記事があり、なんとそこで","title":"[telecom] HD Voiceってなんだ"},{"content":"pkgngをインターネット接続していないマシンでも使いたい。\nそういう場合には、他のマシンでpkgを作って持っていくというのが一番簡単な方法。\n自前のPKGSITEを作る方法もあるようだが、軽く調べたところ根こそぎすべてのpkgを作る方法のようだ。\nそれはきつい。\nまた、pkgを作ったうえで、自前のrepo.txzを作ってもいいけど、やっぱり手間。\nやっぱり必要なものだけ作って持っていくのが良いと思う。\n私がよくやるのは以下の方法。\n インターネット接続できるマシン上で、仮想マシンに構築する。 仮想マシンでターゲットとなるマシンと同じ環境を作る。 仮想マシンで使ったpkgを全部ターゲットマシンに持っていく。  pkgの持ち運びには、pkg createを使う。 pkg createの使い方。\npkg help createでだいたい分かるけれども;\n-oオプションで作成場所を選べる。\n-aオプションだとそのマシンにインストール済みのpkgを全部作る。\n-nオプションを付けるとすでにあるものは作らない。\n以下、コマンド例。\nああそうそう、pkg createはroot権限でやること。スーパーユーザでないとアクセスできないファイルもあるので。\n# pkg create -o ./ bash Creating package for bash-4.2.42 # pkg create -n -o ./ bash bash-4.2.42 already packaged, skipping... # pkg create -a -o ./pkg Loading package list... Creating package for GentiumBasic-110 Creating package for GeoIP-1.4.8_3 Creating package for ORBit2-2.14.19 そして出来上がったpkgをターゲットマシンに持っていく。\nターゲットマシンでpkgをインストールするには、pkg addを使う。pkg installではダメなことに注意。\npkg add なんにも難しいことはない。\n以下のようにすればOK。\npkg add ./xorg-7.5.2.txz なお、pkg addで追加するpkgはローカルにある必要はなくて、ftp, http, https経由でアクセスできる場所にあればよい。\npkg help addで出てくるように、pkg add ftp://somewhere/some/dir/pkg-nameとかすればよい。\npkg createが遅え。 ところでpkg createは遅い。すごく遅い。\nこれはファイルをxzで圧縮しているから。\n今回の用途では、スピードの方が大事なので、わざわざxzを使ってもらわなくてよい。\npkg createは-fオプションで圧縮方法を決定できる。\ntxz（デフォルト）, tgz, tbzから選ぶ。\ntgzとtxzだと、bash程度でもtgz: 1.5秒、txz: 5秒と、時間に結構な差がでる。\nもちろんそのぶん、サイズもtgz: 1.5MB、txz: 900KBとxz形式の面目躍如。\n# time pkg create -f tgz -o ./ bash Creating package for bash-4.2.42 real 0m1.526s user 0m1.415s sys 0m0.098s # time pkg create -o ./ bash Creating package for bash-4.2.42 real 0m4.985s user 0m1.070s sys 0m3.861s $ du -sh ./bash* 1.5M ./bash-4.2.42.tgz 896k ./bash-4.2.42.txz``` ","permalink":"https://nobwak.github.io/posts/2013-03-20-freebsd_%E3%82%AA%E3%83%95%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%A7%E3%81%AEpkgng%E6%97%A5%E5%B8%B8%E4%BD%BF%E3%81%84%E3%81%AEpkgng_%E3%81%9D%E3%81%AE2/","summary":"pkgngをインターネット接続していないマシンでも使いたい。 そういう場合には、他のマシンでpkgを作って持っていくというのが一番簡単な方法。","title":"[FreeBSD] オフラインマシンでのpkgng（日常使いのpkgng その2）"},{"content":"pkgngをしばらく使ってみて感じるのは、情報を十分に与えてくれること。\n適当に使っても、あれしろ、これしろ、と教えてくれるから戸惑いが少ない。\nそれでも、pkgngでやりたいこと別にまとめておくのは有用だと思うので記す。\npkgngへの移行についてはこちら。\nまずやること。 /etc/periodic.confに以下を追加しよう。\nperiodic.confがなければ/etc/defaults/periodic.confを/etc/peridoc.confとしてコピーして末尾に追加。\ndaily_backup_pkgng_enable=\u0026#34;YES\u0026#34; daily_status_security_pkgaudit_enable=\u0026#34;YES\u0026#34; 1行目はpkgngのdbを/var/db/backupsにバックアップさせるもの。\n2行目はインストール済みのpkgにセキュリティの問題がないかを確認し、メールで報告させるもの。\n詳しくは以下スクリプトを。\n/usr/local/etc/periodic/daily/411.pkg-backup /usr/local/etc/periodic/security/410.pkg-audit インストール済みのpkgをアップグレードするには。 pkg upgradeを叩くだけでOK。\npkg upgradeを実行すると、まずpkg updateしてからインストール済みpkgに更新がないかをチェックする。\nupdateとはrepository catalogueをアップデートすることで、repository catalogueとは、pkgダウンロード先サイトのpkg一覧がsqliteのDBでまとまっているもの。\n$ sudo pkg update Updating repository catalogue repo.txz $ sudo pkg upgrade Updating repository catalogue Repository catalogue is up-to-date, no need to fetch fresh copy The following packages will be upgraded:  Upgrading p5-Tie-IxHash: 1.22 -\u0026gt; 1.23  Upgrading xterm: 290 -\u0026gt; 291 The installation will require 402 B more space 255 kB to be downloaded Proceed with upgrading packages [y/N]:Proceed with upgrading packages [y/N]: y p5-Tie-IxHash-1.23.txz 100% 11KB 10.6KB/s 10.6KB/s 00:00 xterm-291.txz 100% 245KB 244.7KB/s 244.7KB/s 00:00 Checking integrity... done Upgrading p5-Tie-IxHash from 1.22 to 1.23... done Upgrading xterm from 290 to 291... done 不要なpkgを削除したい。 autoremoveを使う。\npkg_cutleavesのようなものですな。\n$ sudo pkg autoremove パスワード: Packages to be autoremoved: linux_base-f10-10_5 nvidia-settings-310.14 nvidia-xconfig-310.14 The autoremoval will free 136 MB Proceed with autoremoval of packages [y/N]: y Deleting linux_base-f10-10_5... You may need to do by hand: o unmount linprocfs if mounted o delete /compat/linux/proc if present o remove/comment linprocfs from /etc/fstab if present done Deleting nvidia-settings-310.14... done Deleting nvidia-xconfig-310.14... done あるpkgが依存している他のpkgを調べるには。 -dオプションを与える。DependのDなので覚えやすい。もうこれで間違えないよ！\nRとrで意味を違えるどこかのシステムは猛省していただきたいものである。\n$ pkg info -d bash bash-4.2.42 depends on: libiconv-1.14 gettext-0.18.1.1 あるpkgに、どのpkgが依存しているかを調べるには。 requiredのrですな。\n$ pkg info -r bash bash-4.2.42 is required by: gnome-doc-utils-0.20.3 rarian-0.8.1 gnome-desktop-2.32.1_2 policykit-gnome-0.9.2_6 pkgngにおけるportaudit的なものはないの? pkg auditを使う。-Fとセットがいいでしょうな。\npackage nameを与えるとそのpkgだけをチェックしてくれる。\nただ、package nameはバージョンまで指定しないとダメな模様。\n問題なければ何も出力されない。これはちょっとさみしい。\nまあこれは冒頭で触れたように、periodic.confからやるものですなあ。\n$ pkg audit pkg: unable to open audit file, try running \u0026#39;pkg audit -F\u0026#39; first $ sudo pkg audit -F パスワード: auditfile.tbz 100% 85KB 85.2KB/s 85.2KB/s 00:00 apache22-2.2.23_4 is vulnerable: apache22 -- several vulnerabilities $ sudo pkg audit -F bash Audit file up-to-date. pkg: bad package name format: bash: No such file or directory $ pkg info|grep bash bash-4.2.42 The GNU Project\u0026#39;s Bourne Again SHell $ sudo pkg audit -F bash-4.2.42 Audit file up-to-date. $ うわapache\u0026hellip;\n（追記）日常使いのpkgその2\n","permalink":"https://nobwak.github.io/posts/2013-03-15-freebsd_%E6%97%A5%E5%B8%B8%E4%BD%BF%E3%81%84%E3%81%AEpkgng_%E3%81%9D%E3%81%AE1/","summary":"pkgngをしばらく使ってみて感じるのは、情報を十分に与えてくれること。 適当に使っても、あれしろ、これしろ、と教えてくれるから戸惑いが少ない","title":"[FreeBSD] 日常使いのpkgng その1"},{"content":"pkgngが大変によくて、あちこちのFreeBSDサーバで使い始めた。\nのだが、特定のマシンで以下のメッセージが表示され使えない。\nUndefined symbol \u0026#34;pkg_init\u0026#34; 端的に言えばこれはFreeBSDシステムを更新したせいで古いライブラリが残っているせい。\n/usr/srcで以下を実行すればOK。\nmake delete-old-libs delete-old-libsを忘れてる時はdelete-oldも忘れてる。\nまた、いちいち「消していいか？」と聞かれて面倒なとき、覚悟があれば以下でよし;\n# yes | make delete-old # yes | make delete-old-libs ","permalink":"https://nobwak.github.io/posts/2013-03-12-freebsd_pkg%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%89undefined_symbol_#8220pkg_init%238221%E3%81%A8%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%81%A6%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84%E3%81%A7%E3%81%94%E3%81%96%E3%82%8B/","summary":"pkgngが大変によくて、あちこちのFreeBSDサーバで使い始めた。 のだが、特定のマシンで以下のメッセージが表示され使えない。 Undefined symbol \u0026#34;pkg_init\u0026#34; 端的に","title":"[FreeBSD] pkgを使ったらUndefined symbol \"pkg_init\"と表示されて使えないでござる。"},{"content":"さきに結論。SIPベースのVoIP端末/VoLTE端末が、相互接続で四苦八苦している間に、ブラウザベースでの音声通話に席巻されてしまうんじゃないだろうかという話。\nもちろん、これは後述の文章中で引用する記事、データをもとにつらつら書くだけのもの。本当に詳しい人からすれば床屋談義レベルかもしれない。\nと、逃げ道をつくったところで。\nVoIPとは。\nSIPあるいはH.323などをセッションプロトコルに使い、IP（インターネットプロトコル）でリアルタイムに音声を伝送するもの、とする。\nhttp://ja.wikipedia.org/wiki/VOIP\nそして携帯電話をVoIP端末にするのなら、どこのキャリアもLTEを選びたいだろう。\nというのも2G、3Gでは荷が重すぎるから。つまりVoLTE(Voice Over LTE)。\nVoLTEとは。 これも定義が難しいけれど、セッションプロトコルにSIPを使い、無線アクセス区間、有線区間では音声用リアルタイム伝送のためのチューニングを加えたものとする。\nVoLTEへすすめー！ 携帯各社にとっては、データ通信が急速に伸びている以上、電波を効率的に使えるLTEへ移行したい。\nしかし音声通話はダウントレンドであるものの面倒は見なければいけない。\nではいかにしてLTE上で音声通話を実現するか、の一つの解が先述のVoLTEである。\n検索してみて驚いたのだが、VoLTEは総務省推しだったりもする。2012年7月の記事\n 総務省がVoLTE技術基準策定、LTE通信・音声通話の一本化で省電力や災害時対策などにメリット\nhttp://appllio.com/news/20120707-2289-volte\n 船頭多くして\u0026hellip;相互接続(InterOperability)の悩み しかし、である。\nVoIP, VoLTEのセッションプロトコルで使われているSIPは、どうも相互接続に難があるようなんである。\n SIP is hard, let\u0026rsquo;s go shopping!\nhttp://www.slideshare.net/saghul/sip-is-hard-lets-go-shopping\nDoes WebRTC Standardization Matter?\nhttp://lphs.acmepacket.com/blog/bid/172081/Does-WebRTC-Standardization-Matter\nWebRTC Browser Interoperability: Heroic. Important. And\u0026hellip;Expected\nhttp://www.nojitter.com/post/240147955/webrtc-browser-interoperability-heroic-important-andexpected\n SIPはとても複雑なうえに、たくさんのベンダが関わっているので、いつまで経っても相互接続試験が進まない、ということ。\nそして後ろ二つの記事で推されているWebRTC、である。\nWebRTC WebRTCは簡単に言ってしまえばブラウザ間で音声通話してしまうことである。\n(音声通話以外も出来る）\nhttp://ja.wikipedia.org/wiki/WebRTC\nSIPと違って、Googleがさっさとコード書いてオープンソースにしてしまったので、まさにいまグイグイと流行りだしている。\nSIPと比べて有利な点はなんといっても相互接続である。\n要はブラウザさえあればよく、相互接続と言ったってたかが知れている。\n先述のnojitterで触れられている通り、相互接続試験に参加するのはブラウザ\u0026quot;ベンダ\u0026quot;である以下の5社。5社といえどこれだけ確認してもらえば問題ないでしょう。\n音声通話のYoutube いうまでもなくWebRTCはアプリレイヤのサービスである。\nオーバーヘッドは大きいし、低いレイヤでは他のデータ通信と変わらず扱われる訳だから、遅延は欠落はあるだろう。\n携帯キャリア、ベンダからしてみれば、通話品質は噴飯ものかもしれない。\nまた呼制御の点でも、ブラウザで電話だなんて、携帯「電話」キャリアからしたら大雑把すぎて許せないかもしれない。\nしかし、この世の中グズグズ画質/音質の動画サイトが賑わっているのを見ると、WebRTCほかXMPP, RCSなどが破壊的技術になってもおかしくないんじゃなかろうか。\n携帯電話キャリア自ら無料通話アプリを始めるとこだって出てきてるのである。\n Orange launches smartphone app for free calls, texts\nhttp://uk.mobile.reuters.com/article/idUKBRE8AL0B720121122?irpc=932\n ","permalink":"https://nobwak.github.io/posts/2013-03-10-teleco%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%AFvoip_volte%E3%82%92%E6%89%93%E3%81%A1%E8%B2%A0%E3%81%8B%E3%81%99%E7%A0%B4%E5%A3%8A%E7%9A%84%E6%8A%80%E8%A1%93%E3%81%8B/","summary":"さきに結論。SIPベースのVoIP端末/VoLTE端末が、相互接続で四苦八苦している間に、ブラウザベースでの音声通話に席巻されてしまうんじゃ","title":"[teleco]ブラウザはVoIP/VoLTEを打ち負かす破壊的技術か？"},{"content":"apache22, sudoに脆弱性ありとのこと。\n（みんな、FreeBSDが毎日送ってくれるsecurity run outputはしっかり見ようね！）\nChecking for packages with security vulnerabilities: Affected package: apache22-2.2.23_3 Type of problem: apache22 -- several vulnerabilities. Reference: http://portaudit.FreeBSD.org/9c88d8a8-8372-11e2-a010-20cf30e32f6d.html Affected package: sudo-1.8.6.p3_1 Type of problem: sudo -- Authentication bypass when clock is reset. Reference: http://portaudit.FreeBSD.org/764344fb-8214-11e2-9273-902b343deec9.html Affected package: sudo-1.8.6.p3_1 Type of problem: sudo -- Potential bypass of tty_tickets constraints. Reference: http://portaudit.FreeBSD.org/82cfd919-8213-11e2-9273-902b343deec9.html さっさとsudo portsnap fetch updateしてからpkg_replace sudo apache22して、service apache22 restartしておしまい。\nこのサーバはまだports運用。pkgngにしようかしら。portsnap fetch updateだるいし。\nでもまあ、試験環境でpkgngをしばらく使ってからかな。\n","permalink":"https://nobwak.github.io/posts/2013-03-05-freebsd_apache22_sudo%E3%81%AB%E8%84%86%E5%BC%B1%E6%80%A7/","summary":"apache22, sudoに脆弱性ありとのこと。 （みんな、FreeBSDが毎日送ってくれるsecurity run outputはしっかり見ようね！） Checking for packages with security vulnerabilities: Affected","title":"[FreeBSD] apache22, sudoに脆弱性"},{"content":"pythonの統合開発環境であるIDLEを起動しようとしてidleと叩くと以下のメッセージが表示される。\n** IDLE can\u0026#39;t import Tkinter. Your Python may not be configured for Tk. ** 「あーpkgngで入れたしなあ。やっぱりportsでmake configしてから入れないとダメか」と思ってたのだが、追加でpkg py27-tkinter-2.7.3_3 を入れるだけでいいみたい。\n備忘として残す。\n$ pkg search tkinter py27-tkinter-2.7.3_3 Python bindings to the Tk widget set $ sudo pkg install py27-tkinter Updating repository catalogue Repository catalogue is up-to-date, no need to fetch fresh copy The following packages will be installed: Installing tcl: 8.5.13 Installing tk: 8.5.13 Installing py27-tkinter: 2.7.3_3 The installation will require 9 MB more space 1 MB to be downloaded Proceed with installing packages [y/N]: y tcl-8.5.13.txz 100% 925KB 925.0KB/s 925.0KB/s 00:00 tk-8.5.13.txz 100% 869KB 868.7KB/s 868.7KB/s 00:00 py27-tkinter-2.7.3_3.txz 100% 19KB 18.7KB/s 18.7KB/s 00:00 Checking integrity... done Installing tcl-8.5.13... done Installing tk-8.5.13... done Installing py27-tkinter-2.7.3_3... done これでMITのOpen Courseware 6.00も安心。\n","permalink":"https://nobwak.github.io/posts/2013-03-04-freebsd_freebsd%E3%81%A7python%E3%81%AEidle%E7%B5%B1%E5%90%88%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AB%E3%81%AF/","summary":"pythonの統合開発環境であるIDLEを起動しようとしてidleと叩くと以下のメッセージが表示される。 ** IDLE can\u0026#39;t import Tkinter. Your Python may not be configured for Tk. ** 「あーp","title":"[FreeBSD] FreeBSDでPythonのIDLE(統合開発環境)を使うには"},{"content":"pkgngはpkg_*に変わるFreeBSDの簡単で手軽なバイナリパッケージ管理ツール。\nFreeBSDでサードパーティのソフトウェアをインストールする場合、コンパイル済みのpackageか、ソースからコンパイルするportsの２つの手段がある。\nこのうち、前者を扱うには「pkg_」を接頭辞に持つコマンド群を使いこなす必要があり、Linuxのapt-getなどと比べるとイケてない感は否めなかった。\nそれでも、FreeBSDには「ベースシステムにないものはportsでインストールしようぜ自分で好きなコンパイルオプションも設定できるしさあ」とか「pkg_*なんて女子供に使わせとけや」という空気があって（感じるのは私だけかもしれないが）、この点にはあまりリソースを割かれていないようだった。\nじっさい、後述するように、いまpkgngは公式には使えない状況になっているのだが、あんまり騒がれてなくて、やっぱりみんな興味がないのかなあと感じる。\nとはいえ、pkg_*を不便に感じる人はやっぱりいるもので、Baptiste Daroussinという偉い人が作ってくれたのがpkgngである。\n前置きが長くなったが、このpkgngがとてもとても便利なので、使ってみた内容をここに記す。\npkgngとは。 wiki、FreeBSD Handbookがあるのでそちらを参照。\nportmasterやportupgradeの代替ではないことに注意。\nportmasterやportupgradeはバイナリパッケージとports双方を扱えるが、pkgngはバイナリパッケージのみ。\n代替するのはpkg_*。\n9.1-RELEASE以降であればベースシステムにある。\n$ uname -r 9.1-RELEASE $ which pkg /usr/sbin/pkg それ以前のシステムであればports/ports-mgmt/pkgにあるが、7.xと8.0では対応していない。\n初めてpkgngを使うとインストールされる。\n# pkg help install The package management tool is not yet installed on your system. Do you want to fetch and install it now? [y/N]: y Bootstrapping pkg please wait Installing pkg-1.0.2... done If you are upgrading from the old package format, first run: # pkg2ng もし、いくつかバイナリパッケージやportsからインストールしていたなら、pkg_dbの変換が必要でpkg2ngを実行しろ、と出てますな。\nもうportsやpkgをインストールしていたら。 root権限でpkg2ngを叩けばよい。\n# pkg2ng Conversion has been successfully finished Your old packages database has been moved to: /var/db/pkg.bak. make.confに追加 FreeBSD 10.0より前のシステムであれば、handbookの通りに。\nWITH_PKGNG=\tyes  To ensure the FreeBSD Ports Collection registers new software with pkgng, and not pkg_install, FreeBSD versions earlier than 10.X require this line in /etc/make.conf\n これで準備万端！\u0026hellip;ではないのであった。 2012年11月、FreeBSD.orgへ何者かが侵入する事件があり、pkgngの公式サイトもしばらく閉鎖\u0026hellip;。\n「もう三ヶ月も経つじゃねーか何してやがんだこのxxxx」と言いたくなるが、こればかりはどうにもならない。\nと、ここでPC-BSDの皆様が「俺んとこのを使えよ」と言ってくださったそうなので、ありがたく使おう。\n（追記:2013/11/7）\n公式のpkgngが公開されている。詳しくは以下を。\n../../../?p=2357\n（追記ここまで）\npkgngの取得先をPC-BSDサイトへ振り向ける pkg.confを書き換える。\npackagesiteはオリジナルのサイトではなく、日本のミラーにすること。\n日本のミラーは下記の２つ。いずれも有名どころですな。\nもちろん、RELEASEバージョン、アーキテクチャは自分のシステムに合わせること。\nftp://pub.allbsd.org/pub/pcbsd/packages/9.1-RELEASE/i386/ http://ftp.jaist.ac.jp/pub/PC-BSD/packages/9.1-RELEASE/i386/ このあと、PC-BSDミラーからpkgngのデータベースをダウンロードする。\n# pkg update -f Updating repository catalogue repo.txz 100% 7201KB 1.4MB/s 861.0KB/s 00:05 PC-BSDサイト向けの設定はこれでおしまい。\n使ってみようぜ 使い方はhandbookを。\nsudoをインストールするので、まず探してみる。\n# pkg search sudo sudoscript-2.1.2 Audited shells in Perl with sudo(8) and script(1) sudoku-1.0.2 Console based Sudoku games sudosh2-1.0.4 Second version of the sudo shell sudo-1.8.6.p5 Allow others to run commands as root sudoku_solver-1.20 A Sudoku Solver in C sudosh-1.8.2_5 A sudo shell sshsudo-1.0 A bash script to run sudo command on multiple remote computers そしてインストール、しようと思ったら「お前のpkgは古い。まず1.0.8にしろよ」とのお達し。FreeBSDにおいてこれは新鮮である。正直驚いた。\n# pkg install sudo Updating repository catalogue Repository catalogue is up-to-date, no need to fetch fresh copy New version of pkg detected; it needs to be installed first. After this upgrade it is recommended that you do a full upgrade using: \u0026#39;pkg upgrade\u0026#39; The following packages will be installed: Upgrading pkg: 1.0.2 -\u0026gt; 1.0.8 The installation will free 10 MB 1 MB to be downloaded Proceed with installing packages [y/N]: y pkg-1.0.8.txz 100% 1397KB 1.4MB/s 856.9KB/s 00:01 Checking integrity... done Upgrading pkg from 1.0.2 to 1.0.8... done pkg upgradeしろよ、と言うので素直に。\n# pkg upgrade Updating repository catalogue repo.txz 100% 7201KB 1.8MB/s 231.0KB/s 00:04 Nothing to do 改めてsudoをインストール。\n# pkg install sudo Updating repository catalogue Repository catalogue is up-to-date, no need to fetch fresh copy The following packages will be installed: Installing libiconv: 1.14 Installing gettext: 0.18.1.1 Installing openldap-client: 2.4.33_1 Installing sudo: 1.8.6.p5 The installation will require 22 MB more space 7 MB to be downloaded Proceed with installing packages [y/N]: y libiconv-1.14.txz 100% 595KB 595.4KB/s 595.4KB/s 00:00 gettext-0.18.1.1.txz 100% 4958KB 1.6MB/s 727.7KB/s 00:03 openldap-client-2.4.33_1.txz 100% 1188KB 1.2MB/s 1.2MB/s 00:00 sudo-1.8.6.p5.txz 100% 609KB 609.2KB/s 609.2KB/s 00:00 Checking integrity... done Installing libiconv-1.14... done Installing gettext-0.18.1.1... done Installing openldap-client-2.4.33_1... done Installing sudo-1.8.6.p5... done 使ってみて感じたこと pkgngの第一印象はすごくいい。\n検索が出来るだけでかなり違う。\nまた、ここにはログを上げなかったけれど、インストール済みのパッケージに更新があったら、驚くくらいさっさとやってくれる。\nそれにpkgngは依存関係を担保してくれてるようなのも安心。\nただ、まだ使い始めたばかりなので、実はいろいろと不便なところがあるのかもしれない。まあ、そこはおいおいと。\n（追記）しばらく使った結果はこちらとこちら。\n","permalink":"https://nobwak.github.io/posts/2013-03-01-freebsd_pkg_%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E6%8D%A8%E3%81%A6%E3%82%8B%E3%81%AE%E3%81%AF%E3%81%84%E3%81%A4%E4%BB%8A%E3%81%A7%E3%81%97%E3%82%87pkgng%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"pkgngはpkg_*に変わるFreeBSDの簡単で手軽なバイナリパッケージ管理ツール。 FreeBSDでサードパーティのソフトウェアをインス","title":"[FreeBSD] pkg_*システム捨てるのはいつ？今でしょ！（pkgngについて）"},{"content":"携帯電話業界にいると、「我々インフラ業者は」という言説がよく用いられるように思う。\nたしかに、携帯電話はもはや私たちの生活になくてはならないもの、かもしれない。\nでも、「携帯電話はインフラである」と言ったときに、「はいそうですね」とは素直に頷けない違和感が私の中にある。\n違和感の原因はなんだろう？\n端的に言えば、インフラとしてすぐに頭に浮かぶ電気上下水道ガスと、携帯電話を同列に扱う据わりの悪さだ。\nモヤモヤとしたまま、あれやこれや調べ考えた事をまとめる。\nインフラってなんだ？ そもそもインフラとは何であろうか。Wikipediaによれば社会や企業の運用に必要な物理的かつ組織的な構造体、または経済活動に必要なサービス、施設を指し、一般的には道路や橋、電気上下水道、電話を指す、とのこと。\n確かに、Wikipediaに示される定義に沿えば、電話も、ひいては携帯電話もインフラだろう。企業運用や経済活動には必須だから。\nモヤモヤの正体 しかし私が「インフラ」から受ける印象は、人間が生活するにあたって必須のもの、というものだ。端的に言えば電気ガス水道。そこが間違ってると言えばそうなんだが、結局のところ私がモヤモヤしているのは、果たして携帯電話は電気ガス水道と同じように生活に必須のものかどうかということ。\nじゃあそれで追っかけてみよう。\nNeedsかWantsか マーケティング用語にNeedsとWantsという便利な分類がある。（もう一つdemandsがあるけど割愛）\nNeedsとは、それなしでは人が生きられないもので、放っておいても人が買うもの。\nWantsとは、必須ではないけどあったらいいもの。\nこの分類で電気ガス水道、携帯電話を比べてみよう。\n水道はNeedsでしょう。\nガスは？最近は電気で代替できるけれども、暖房、調理（、照明）でまあNeeds。\n電気は？照明、冷暖房、調理、そのほか電化製品でNeedsでしょう。\nでは携帯電話は？難しいところであります。加えて携帯電話には電話という側面と、モバイルインターネット/ブロードバンドという側面があるし。\nしかしここでNeedsインフラである電気で考えてみる。電気をNeedsたらしめているものは何かといえば、私たちが深く依存している数々の電化製品のためである。\n電気ガス水道の歴史 ローマ時代からあった水道と比べて、電気、ガスは比較的新しいインフラである。\nこれまたWikipediaで調べてみたら、ガスは1810年頃、電気は1870年頃からインフラとしての利用が始まったようだ。\nガスは当初、照明として利用されたが、燃料だけに取り扱いが難しく、電気に代替された。\n電気も最初は照明で使われたのだが、こちらは抜群に取り回しが効くエネルギーである。照明以外にもあらゆる分野で使われるようになった。\n携帯電話の活用は始まったばかり？ 電気の歴史を眺めてみると、携帯電話はWantsからNeedsの変わり目にいるように感じる。\n携帯電話がモバイルインターネットになって、4Gでモバイルブロードバンドになり、電話以外での活用が始まったばかり。あと何年かして、携帯電話システムの上でいろんなサービスが花開くと、私もすっきり「はい。携帯電話はインフラです」と言えるようになるのだろうと思う。\nしかし携帯電話がインフラになるには大きな障害があるように思う。有り体に言えば高すぎるように思う。\nインフラ支出比較 これは各家庭が電気、ガス、上下水道、通信に月々いくら払っているかを示す。\n総世帯ではまだまだ電気が優勢だが、4人家族を見ると\\15,000を超えてくる。高い。\nしかし「通信」なんてくくられてるとよく分からん。\nいろいろ調べてみると、移動電話通資料として月々どれだけ払っているかを世帯主年齢別かつ推移で示す統計があった。それがこちら。\nこれを見ると60歳の上と下でくっきりと分かれていて（この強烈な落差には興味が湧きますな）、60歳未満が世帯主の家庭では携帯電話料金として月々1万円超を払っていることが分かる。\n安価さもインフラの定義じゃないだろうか。 こういった統計をつらつら見るにですね、まだまだ携帯電話料金てすごく高いのではないかと思うのだ。\nモバイルブロードバンドとしてほんのわずかしか活用できてないのに、月々1万超ですよ。電気なんてあんなに使えて1万弱。仮に電気代がいまの3倍だったらどうだろうか。\n言わずもがな、携帯電話はまだまだ新しく、過渡的な時期だと思う。\nしかし。少なくとも今の電気代くらいに料金をそれほど気にせず使えるようになった時こそ、携帯電話はNeedsという意味のインフラになるんじゃないだろうかと思った。\n統計は下記を参照した。\nhttp://www.stat.go.jp/data/kakei/sokuhou/nen/index.htm\nhttp://www.soumu.go.jp/johotsusintokei/field/kojin02.html\n","permalink":"https://nobwak.github.io/posts/2013-02-23-%E6%90%BA%E5%B8%AF%E9%9B%BB%E8%A9%B1%E3%81%AF%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E3%81%8B/","summary":"携帯電話業界にいると、「我々インフラ業者は」という言説がよく用いられるように思う。 たしかに、携帯電話はもはや私たちの生活になくてはならないも","title":"携帯電話はインフラか？"},{"content":"FreeBSDのSecurity Advisory（以降, SA）。bind, libcに問題あり。\nせっかくなので久しぶりにメモっておく。\n BIND remote DoS with deliberately crafted DNS64 query（FreeBSD 9.x以降のみ）\nhttp://www.freebsd.org/security/advisories/FreeBSD-SA-13:01.bind.asc\nglob(3) related resource exhaustion\nhttp://www.freebsd.org/security/advisories/FreeBSD-SA-13:02.libc.asc\n 淡々とHandbook、およびSA沿って作業すればよろし。\nV. Solution Perform one of the following: （略） 3) To update your vulnerable system via a binary patch: Systems running a RELEASE version of FreeBSD on the i386 or amd64 platforms can be updated via the freebsd-update(8) utility: # freebsd-update fetch # freebsd-update install Restart all daemons, or reboot the system. Restart all daemonsは面倒なので再起動しておしまい。\nなおkernelにパッチがなければuname -aなどで表示されるパッチレベルやリビジョン番号は変わらない。\n本当にパッチがシステムに適用されてるか不安なら、/usr/src/sys/conf/newvers.shのBRANCHを見ればまあよし。\n$ grep \u0026#34;^BRANCH\u0026#34; /usr/src/sys/conf/newvers.sh BRANCH=\u0026#34;RELEASE-p1\u0026#34; しかしbindはしょっちゅうSA発表されるなあ。\n","permalink":"https://nobwak.github.io/posts/2013-02-19-freebsd%E3%81%AEsecurity_advisory%E5%AF%BE%E5%BF%9C%E6%96%B9%E6%B3%95/","summary":"FreeBSDのSecurity Advisory（以降, SA）。bind, libcに問題あり。 せっかくなので久しぶりにメモっておく。 BIND remote DoS with","title":"FreeBSDのSecurity Advisory対応方法"},{"content":"QCサークルというのをご存知だろうか。\nQCとはQuality Controlの略。\n職場を共にする少人数グループで行う品質管理活動のこと。有り体に言えばトヨタのカイゼンである。\nhttp://ja.wikipedia.org/wiki/QCサークル\nhttp://www.juse.or.jp/qc/\n良い事例については共有し、他の職場でも活用してもらいたい、というのは会社として当然のこと。そこで活動結果の発表会が催される事になる。なんと全国大会もあるのですよ。\n私の勤める会社でもQCサークルがあり（どちらかといえばQCサークルは製造業向けで私の会社にはややそぐわない気もするのだが）、活動結果の発表会もある。\nで、私はこの発表会が大嫌いなのであった。\nもう少し詳しく言うと、発表会で一般的なフォーマットが嫌いなのだ。\nそのフォーマットとは。\nたとえばここを見てほしいが、まずグループや職場の紹介から始まるのである。\n「誰々と誰々がいて、彼は気は優しくて力持ちです」\n「とても楽しい職場です」\n次に活動のテーマ選定をどう選んだか。\nそれから目標設定、現状把握。\nいつまで経っても結論に至らないのである。\nいま流行りのロジカルシンキングで言えば、例えばまず最初に「これこれの問題がありましたが、改善活動の結果、このような対策を講じてこれこれの効果を得ました。改善活動の内容について説明いたします」と言うべきだろう。\nそう考える私にとっては、改善活動の事例発表を聞くのは苦痛以外の何物でもない。\nが。\nあるときふと、これは敢えてやっているんじゃないだろうか、という疑念が湧いた。\n端的に言えば、事例発表会は物語の共有じゃないか、ということ。\n人間がものごとを認知する方法には二つのモードがある、と言われる。\nブルナーという人が言い出したことらしいが、一つは論理モード（Paradigmatic Mode）であり、もうひとつは、ストーリーモード（Narrative Mode）である。\n前者はすなわちロジカルシンキング手法であり、後者は物語だ。\n効率性で言えば断然に前者だろう。物語だなんてまどろっこしいこと言ってられるか。\nしかしドナルド・ノーマンは「人を賢くする道具で、以下のように述べる。  「物語には，形式的な解決手段が置き去りにしてしまう要素を的確に捉えてくれる素晴らしい能力がある。論理は一般化しようとする。結論を特定の文脈から切り離したり，主観的な感情に左右されないようにしようとするのである。物語は文脈を捉え，感情を捉える。論理は一般化し，物語は特殊化する。論理を使えば，文脈に依存しない凡庸な結論を導き出すことができる。物語を使えば，個人的な視点でその結論が関係者にどんなインパクトを与えるか理解できるのである。」\n 中原淳、金井壽宏の「リフレクティブ・マネジャー」ではこんな話が紹介されていた。\nコピー機の修理をする部隊を調査した。学びには何が一番役に立ったか。\nなんとそれは、研修や技術書などではなく、同僚との他愛もないおしゃべりだったという。\n「先日、どこどこのこんな故障をこのようにして切り抜けた」\n「こういう操作をしたらひどい目にあった」\nといった何気ない成功談、失敗談から最も多く学んだというのである。\n物語で認知する、という機能が私たちに備わっていることは、何千年も残る神話が証明している。\nそして21世紀になった今でも、その機能を利用した大きな大きな商業装置がある。\nハリウッド映画である。\n大塚英志の「ストーリーメーカー」では、多くのハリウッド映画が神話の形式に則っていることが示される。\n有名どころではスターウォーズがそうだし、当該本ではバイオハザードを例題に詳しく説明している。\n私が最近に観た映画で言えばTrue Gritがそうであった。\nすなわち主人公は冒頭で何かを失い、異界へ赴き、そして結果を得るが、代償として何らかの「しるし」を身に負う（実際はもっといろいろなパーツがある）。\nこの形式に沿えば、私たちは全体を自然に認知できるし、「形式的な解決手段が置き去りにしてしまう要素を的確に捉え」（ノーマンの前述書）られるのだ。\n翻って、退屈で仕方がなかったQCサークルの事例発表である。\n今にして思えば巧妙に計算された結果の神話フォーマットなのではないか。\nどうでしょう皆さん。\nなお念のためノーマンの本から続けて引用する。\n「物語が論理より優れているわけではない。また，論理が物語より優れているわけでもない。二つは別のものなのだ。各々が別の観点を採用しているだけである。」\n","permalink":"https://nobwak.github.io/posts/2013-02-16-qc%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E3%81%A8%E7%A5%9E%E8%A9%B1/","summary":"QCサークルというのをご存知だろうか。 QCとはQuality Controlの略。 職場を共にする少人数グループで行う品質管理活動のこと。有り体","title":"QCサークルと神話"},{"content":"備忘のために残す。\n2013/2/12現在、FreeBSDで何も考えずにRubyをインストールすると1.8になってしまう。\nしかし世の中はもう1.9で動いているのでこれでは困るのである。\nところが、デフォルトとはちょっと変わった事をやりだすといろいろ面倒の発生するのがports。\nRuby 1.9をインストールする「前」に即すべきこと。\nおもむろに/etc/make.confを開き、以下の二行を加えよ。\nRUBY_VERSION=1.9.3\u0026lt;br /\u0026gt; RUBY_DEFAULT_VER=1.9  一行目の意味は、/usr/local/bin/rubyを作るという意味。\n意味が分からないかもしれないが、ほんとう。\nというのも、現時点でRuby 1.9をインストールすると、/usr/local/bin/ruby19が作成され、/usr/local/bin/rubyは出来ない。\n一行目の記載をしておけばインストール時にruby19から「ハードリンク」を張ってくれる。\nsymlink張ってもいいのだが、こういうのはシステム側にやらせておいた方がいい。\nちなみに、検索するとmake.confにこう書け、と教えてくれるページはいくらでもあるのだが、根拠は見つけられなかった。\n根拠、つまりインストール前にこういうところを見ておけばいい、というのが分からないので、今後もまず躓いてから考える事になる。これは\u0026hellip;。\n二行目は、その名の通り、システムデフォルトをRuby1.9にするということ。\nこれがないと、例えばRuby Gemsをインストールするとき、Ruby1.9がインストール済みでも問答無用でRuby 1.8をインストールし始めるので注意。\nなおこちらは/usr/ports/UPDATINGに記載があった。\nただこれをインストール前に知る事が出来るのだろうか。「UPDATING」じゃないか。アップデートするときに読むものじゃないか。\nRubyそのほか\nmake.confに追記したら、lang/ruby19をインストール。\nRuby on Railsが必要であれば、続いてdevel/ruby-gems, www/rubygem-railsをインストールする。\n","permalink":"https://nobwak.github.io/posts/2013-02-12-freebsd%E3%81%AB%E7%8F%BE%E7%8A%B6%E3%81%A7default%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84ruby1.9%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"備忘のために残す。 2013/2/12現在、FreeBSDで何も考えずにRubyをインストールすると1.8になってしまう。 しかし世の中はもう1","title":"FreeBSDに、現状でdefaultではないRuby1.9をインストールするには"},{"content":"lz4という圧縮形式があることを知った。\nなんでも、なかなかの圧縮効率を誇るわりには、圧縮伸長が速いとのこと。\n公式サイト通りにいえば、圧縮では1.5倍程度、身長では1.8倍程度速い、と（\u0026gt;50% faster on compression, \u0026gt;80% faster on decompression）。\n速いアーカイバはなぜ嬉しいか。\n速いアーカイバはなぜ嬉しいか。\n端的に言えば圧縮されたバックアップからの書き戻し時間の短縮化であり、言ってみればMTTRというか、何らかの障害からの復旧速度に効いてくるからである。\nというのも。\nいくらHDDが安くなったとはいうものの、あればあるだけ使ってしまうせいで、バックアップにはいつまで経っても追いつかない。\nそこでディスク容量をかせぐために、古いデータはしかたなく圧縮して保存するのだが、そうするといざ必要になったときには伸長待ちでえらく待たされる。\nで、そういう古いデータが必要になるときというのは、高確率で緊急復旧が必要な時なんである。\nみなさん、いつまで経っても終わらない伸長をジリジリしながら待ったことはあるだろうか。\nユーザが今か今かと待ってるプレッシャーを背中に感じて作業した事があるだろうか。\n何年も前の私はほとほと痛い目を見たので、持っておける世代数は減るものの、原則として圧縮しないでtarで固めるだけにした（高い授業料であった）。\nむろんディスクもっと買えとか、速いディスクにしろよとか、ディスク構成考えろとかあるけど、この世の中、インフラエリアにはなかなかお金を使ってもらえないよね。\nというわけで、そこそこの圧縮効率があり、しかし速度がめっぽう速いとなれば気にならないわけがないのだ。\nなお、速いアーカイバを活かせる道はもうひとつあって、それは圧縮ファイルシステム。\nじっさい、lz4を知ったのも、ZFSに入れるよーという話から。\n各種ポインタ\nlz4のソース置き場はこちら。\nhttp://code.google.com/p/lz4/\nlz4については以下のslideshareを。ほー。ドラクエですか。\nhttp://www.slideshare.net/komiyaatsushi/dsirnlp-3-lz4\n 入れてみよう！\nFreeBSDのportsには入ってないのでsvnでgooglecodeからダウンロード。\nコンパイルにはcmakeが必要なので注意。\ncmakeディレクトリを引数にcmakeを実行し、さらにmakeを実行する。\n$ svn checkout http://lz4.googlecode.com/svn/trunk/ lz4\u0026lt;br /\u0026gt; （略）\u0026lt;br /\u0026gt; Checked out revision 88.\u0026lt;br /\u0026gt; $ cd ./lz4\u0026lt;br /\u0026gt; $ cmake ./cmake/\u0026lt;br /\u0026gt; $ make\u0026lt;br /\u0026gt; Scanning dependencies of target lz4demo32\u0026lt;br /\u0026gt; [ 12%] Building C object CMakeFiles/lz4demo32.dir/lz4.c.o\u0026lt;br /\u0026gt; [ 25%] Building C object CMakeFiles/lz4demo32.dir/lz4hc.c.o\u0026lt;br /\u0026gt; [ 37%] Building C object CMakeFiles/lz4demo32.dir/bench.c.o\u0026lt;br /\u0026gt; [ 50%] Building C object CMakeFiles/lz4demo32.dir/lz4demo.c.o\u0026lt;br /\u0026gt; Linking C executable lz4demo32\u0026lt;br /\u0026gt; [ 50%] Built target lz4demo32\u0026lt;br /\u0026gt; Scanning dependencies of target lz4demo64\u0026lt;br /\u0026gt; [ 62%] Building C object CMakeFiles/lz4demo64.dir/lz4.c.o\u0026lt;br /\u0026gt; [ 75%] Building C object CMakeFiles/lz4demo64.dir/lz4hc.c.o\u0026lt;br /\u0026gt; [ 87%] Building C object CMakeFiles/lz4demo64.dir/bench.c.o\u0026lt;br /\u0026gt; [100%] Building C object CMakeFiles/lz4demo64.dir/lz4demo.c.o\u0026lt;br /\u0026gt; Linking C executable lz4demo64\u0026lt;br /\u0026gt; [100%] Built target lz4demo64  すると同じディレクトリにlz4demo64, lz4demo32という実行ファイルができる。\nこのあとinstallとかするんだろうが、システムに入れたくはないので、自分の/binフォルダに入れる。64bitアーキテクチャなのでlz4demo64のほうを。\n$ cp ./lz4demo64 ~/bin/lz4  helpを与えてみるとこんな感じ。\n$ lz4 -h\u0026lt;br /\u0026gt; *** Compression CLI using LZ4 algorithm , by Yann Collet (Feb 11 2013) ***\u0026lt;br /\u0026gt; Usage :\u0026lt;br /\u0026gt; ./lz4demo64 [arg] input output\u0026lt;br /\u0026gt; Arguments :\u0026lt;br /\u0026gt; -c0: Fast compression (default)\u0026lt;br /\u0026gt; -c1: High compression\u0026lt;br /\u0026gt; -d : decompression\u0026lt;br /\u0026gt; -b#: Benchmark files, using # compression level\u0026lt;br /\u0026gt; -t : check compressed file\u0026lt;br /\u0026gt; -h : help (this text)\u0026lt;br /\u0026gt; input : can be -stdin' (pipe) or a filename\u0026lt;br /\u0026gt; output : can be -stdout'(pipe) or a filename or -null'  試してみよう！\n手元にあった685MBytesのFreeBSDインストールディスクイメージをgzip, bzip2, lz4の三種で圧縮、伸長し、その速度と圧縮効率をグラフにしてみた。\n青が圧縮時、緑が伸張時にかかった秒数を左軸で示す。\n圧縮後、どれくらいのサイズに縮んだかを黄色、右の軸で示す。\ngzip, bzip2で6割程度のサイズにまで圧縮したのに対し、lz4は75%に留まる。\nそして気になる圧縮伸長では。\nlz4が圧縮ではほぼぶっちぎりである。\nしかし一方の伸張ではgzipと同じくらいで公式サイトの額面通りには行かなかった。\nただ、圧縮したものがインストールディスク、つまり中身は圧縮済みデータが多かろう点には注意が必要かもしれない。\n仮想マシンのディスクイメージだったらまた面白い結果が出たかもしれないけど時間切れである。\nえ？lzmaですか？試したけど明らかに遅くて途中でやめた。\nそれからマシン負荷も気になって三種アーカイバのload averageも記録したけどグラフにするの面倒でやめた。\nまとめ\n伸張の方はまだまだ使わないと分からないけど、圧縮は本当に速い。\nあっという間に終わってリアルで「えっ？」と言ったほど。\nただ、弱点があって、それはoutputのファイル名を指定しないといけないこと。\nzcatのようなもので、これは弱点というよりそういう仕様なんで何とも言えない。\n本記事のマクラに出したバックアップへの利用にもちょっと。\nでも速いぞ。おまえらも一度使ってみろ。\n","permalink":"https://nobwak.github.io/posts/2013-02-11-%E3%82%A2%E3%83%BC%E3%82%AB%E3%82%A4%E3%83%90lz4%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%89%E5%9C%A7%E7%B8%AE%E3%81%AF%E9%80%9F%E3%81%99%E3%81%8E%E7%AC%91%E3%81%A3%E3%81%9F/","summary":"lz4という圧縮形式があることを知った。 なんでも、なかなかの圧縮効率を誇るわりには、圧縮伸長が速いとのこと。 公式サイト通りにいえば、圧縮では","title":"アーカイバlz4を試してみたら（圧縮は）速すぎ笑った"},{"content":"先日もTwitterをつらつらと眺めておりましたら立て続けに二つのTweetが。\n 池谷裕二 (@yuji_ikegaya)　01/28 12:14:35\n歳をとると睡眠が短くなるのはホントです。今朝の『ネイチャー神経科学』誌より→ http://t.co/t0kDHeD7 とくにノンレム睡眠が減ってしまうので、海馬が活性化しっぱなしになり、その結果、記憶力にも悪影響がでます\n なおリンク先の記事はAbstractであっても何が書いてあるかさっぱりわからん。\nそしてもう一つ。\n Shane Parrish (@farnamstreet)　01/28 02:37:43\nGreat performers typically sleep significantly more than the rest of us. http://t.co/MBd68xvy\n 上手いバイオリニストは8時間しっかり寝てることに加え、昼寝もすると。\n特にトップバイオリニストは一に練習、二に睡眠とまで言うそうな。\nリンク先からさらにリンクされているHBRのブログでは、睡眠不足は一般的におまえらが思うよりもパフォーマンスに影響するのだと言うことがつらつらと書かれている。\nそして、望ましい睡眠時間は7~8時間程度であろうとのこと。これは平均睡眠時間が7時間という研究結果とも齟齬はなさそう。（ただし記事を書いた人は8~9時間との意見）\nただ。\n俺が思うには、「じゃあたくさん寝ようぜ」ってのは早計じゃないかと思うのだ。\nそもそも上記の記事のうち、少なくとも後者はバイオリンの技巧と睡眠時間には相関があるということしか伝えていない。\n（Natureの論文にはそのへんキッチリ書いてあるのかもしれないが理解できん）\nまったくの推測だが、これはむしろ「バイオリンをひたすら練習したからよく眠れる」という因果関係を示すものじゃないかと思うんだな。\n時間の分子生物学 (講談社現代新書) という、タイトルからはちょっと推測できない睡眠に関する面白い本がある。\nこちらによれば、眠りというのは、疲れることで受動的に引き起こされる生理現象だと言う。\nつまり、上手なバイオリニストは、毎日毎日ハードな練習をしており、そのためによく眠れるということじゃあないだろうか。\nじゃあ年寄りの睡眠が短いのは？\nもちろん加齢による脳組織の萎縮もあろうが、経験が蓄積されているせいで反射だけで過ごす時間が多くなり、脳に十分な負荷を与えていないせいじゃないだろうか？\n非日常や不確実性を嫌い、ルーチンばかりの毎日を送りがちなせいじゃないだろうか？\nといったような事を考えたのであった。\nしょせん根拠もない世迷いごとなんだけれども、年取っても驚き泣き笑い怒り、もしそれで夜はよく寝れるなら、それはそれでいいじゃないか。\n海馬も休まるしな。\n","permalink":"https://nobwak.github.io/posts/2013-02-05-%E3%81%8A%E3%81%BE%E3%81%88%E3%82%89%E3%82%88%E3%81%8F%E9%81%8A%E3%82%93%E3%81%A7%E9%A9%9A%E3%81%8D%E7%AC%91%E3%81%84%E6%B3%A3%E3%81%8D%E3%82%88%E3%81%8F%E5%AF%9D%E3%81%A6%E6%B5%B7%E9%A6%AC%E3%82%92%E4%BC%91%E3%82%81%E3%82%8D/","summary":"先日もTwitterをつらつらと眺めておりましたら立て続けに二つのTweetが。 池谷裕二 (@yuji_ikegaya) 01/28 12:14:35 歳をとると睡眠が短くなるのはホントです。今朝の","title":"おまえらよく遊んで驚き笑い泣き、よく寝て海馬を休めろ"},{"content":"数日前、こんなニュースが見かけて個人として思ったことをつらつらと書く。\n音声電話の死: 携帯電話での通話、50%減\nVodafone が調べたところによると、彼らの市場（おそらくヨーロッパ圏）で音声通話の平均時間はこの5年で半減し、たかだか1分40秒程度になったとのこと。\n別の調査会社も、去年、同様の報告をしている。\n減る音声通話: テキストメッセージのトレンドをOfcomが示す\n二つの記事が示すのは、成熟した携帯電話市場では、人々は音声通話よりもSMS, SNS, IMなどに移るということ。\nそれは単にインターネット接続が一般的になり、代替手段が増えただけのことと言ってしまえばそうだろう。\n言うまでもなく「電話」は双方が同時に参加しなければならない。双方ともに負担のある通信手段である。\n特に時間に制限のある状況で、扱う話題のプライオリティが双方で異なるのに電話を使ったりすると、一方はとてもストレスを感じる。\n誰しも「そんな用件で電話かけてくるんじゃねえ。こっちは忙しいんだ」と感じたことはあるはずだ。電話に出て用件を聞くまでプライオリティは分からないし。\nそれだけに不要不急の通信はメッセージングサービスに移っていくのは自然とも思う。\n一方で、例えば緊急時の安否確認をする場合、プライオリティの事前共有が済んでいる場合、あるいは通信内容に意味はなく、単に時間を共有したい場合など、電話は比率を下げながらも使われていくはずだ。\n上記の話を踏まえて携帯電話キャリアの話になるのだが、実は彼らにとって電話のような「同期サービス」と、メッセージングサービスのような「非同期サービス」を同時に提供しなければいけないのはとても悩ましい問題だ。\nご存知の通りここ何年か、データ通信が爆発的に増加している。\nそれを捌くために、各社ともLTEに移行していて、さらにはできるだけ周波数を割り当てたい。となれば邪魔なのは3Gだ。\nが、電話のニーズがある以上、すぐには撤去できない。\nなぜか？\nLTEは大量のデータを短期間で送ることを想定して作られている（データ通信の発生したユーザに一時的に広い帯域を割り当てさっさと終わらせる）。\n音声のような、ほそぼそとしたデータを送ることには向いていないのだ。（なお、同じ理由でM2Mのような、ごく少量のデータを大量の端末で扱うパターンも苦手）\nだからVoLTEとして根本的な仕様から標準化を進めている。\nじゃあそれをさっさと導入する？\nしかしVoLTEにはまだまだ制限がたくさんある。110, 119などの緊急呼の扱いもそうだし、一番のネックは端末のバッテリーを急速に消費すること。とてもすぐには導入できない。\nというわけで、しばらく電話は3Gを使ってもらうしかないだろう。ただしユーザは高い通話料金を請求されるかもしれない。\nだって3G設備は古くなるし、保守費もかかる。電話の使用がダウントレンドなら、キャリアは今さら追い金も払えないから。\nいやなら少々品質が悪くてもSkype, Facetime、LINE、WhatsAppなどのOTT音声サービスを使え、ということになるのかも。\nでも、youtubeが賑わっているところをみると、ほとんどのユーザはそれで十分なのかもしれない。\n","permalink":"https://nobwak.github.io/posts/2013-02-04-telecom_%E6%90%BA%E5%B8%AF%E9%9B%BB%E8%A9%B1%E3%81%A7%E3%81%AE%E9%9F%B3%E5%A3%B0%E9%80%9A%E8%A9%B1%E3%81%AF%E9%AB%98%E3%81%8F%E3%81%AA%E3%82%8B%E3%81%AE%E3%81%8B%E3%81%97%E3%82%89%E3%82%93/","summary":"数日前、こんなニュースが見かけて個人として思ったことをつらつらと書く。 音声電話の死: 携帯電話での通話、50%減 Vodafone が調べたところによると、彼ら","title":"[telecom] 携帯電話での音声通話は高くなるのかしらん"},{"content":"NTTドコモ、au、ソフトバンクモバイルはどれだけ研究開発にカネを使っているのだろうか。かるく調べてみたのだがこいつを見てくれどう思う。\n左軸は3者の研究開発費を示す。単位は億円。\n右軸は、「契約者は各社の研究開発に月々いくら払っているか」を示す。単位は円。\nドコモが飛び抜けている、というかおいソフトバンクどうなってんだ。\n四捨五入されて9になってるけど、実際には8.6億円でありしかもこれはソフトバンクモバイルではなくソフトバンクの研究開発費である。つまり携帯電話システムへの費用はもっと少ないはず。\n端的に言えば「ドコモは派手に、auはそこそこ研究開発をしており、ソフトバンクは出来合いを買ってきている」ということを表しているわけですな。\nそれ以上のコメントは差し控えるとして、データ自体は2011年度、2012年度のものを使っています。かるーく調べただけなので、あくまでも概要ってことで。\n◆参照\nhttp://www.softbank.co.jp/ja/irinfo/policy/development/\nhttp://www.ullet.com/%EF%BC%AB%EF%BC%A4%EF%BC%A4%EF%BC%A9/%E6%A6%82%E8%A6%81/type/rd\nhttp://www.kddi.com/corporate/ir/library/presentation/2013/index.html\nhttp://www.nttdocomo.co.jp/corporate/ir/finance/highlight/\nhttp://www.nttdocomo.co.jp/corporate/ir/finance/indicator/index.html\n◆契約者数\nhttp://www.tca.or.jp/database/2012/12/\n","permalink":"https://nobwak.github.io/posts/2013-01-31-telecom_%E5%9B%BD%E5%86%85%E6%90%BA%E5%B8%AF3%E3%82%AD%E3%83%A3%E3%83%AA%E3%82%A2%E3%81%AE%E7%A0%94%E7%A9%B6%E9%96%8B%E7%99%BA%E8%B2%BB%E3%81%82%E3%82%8B%E3%81%84%E3%81%AF%E8%87%AA%E5%89%8D%E3%81%8B%E5%87%BA%E6%9D%A5%E5%90%88%E3%81%84%E3%81%8B/","summary":"NTTドコモ、au、ソフトバンクモバイルはどれだけ研究開発にカネを使っているのだろうか。かるく調べてみたのだがこいつを見てくれどう思う。 左軸","title":"[telecom] 国内携帯3キャリアの研究開発費あるいは自前か出来合いか"},{"content":"出遅れ感があるが、2012年のドコモ、2013年のau通信障害に関して、個人的にまとめていたものを公開。\nドコモ、障害で会見「スマホ信号量の見極め甘かった。ユーザーの信頼損ねた」\nKDDIが4G LTE通信障害の詳細を説明――設計・判断ミスが原因\n2012年の1月にはドコモが、そして今年2013年1月にはauで通信障害が発生したが、これらはいずれも加入者の情報を扱うHLR(Home Location Register)に起因する。\n実はこのHLR、日本だけではなく、世界中のキャリアをなぎ倒した歴戦の勇者なのである。\nその輝かしい戦績は後述するが、これを見るとHLRという設計思想そのものに考慮が足らなかったように感じるがどうなんだろうか。\nどのキャリアにしても、ちょいと輻輳したらHLRが死亡して大惨事というのは百も承知でこの有様なだけに。\n◆ドイツ　T-Mobile Deutschland GmbH,\n2009/4\nHLR死亡により4000万人に影響。\nNSN製。\n◆アメリカ Verizon\n2011/4\nHSS（HLRのようなもの）の断続的な障害。\nHSSはNSN製。\n◆ノルウェー Terenor ASA\n2011/7\n（装置種別は不明）装置の更新でサービス断\n300万に影響\n◆フランス orange\n2012/7\nHLR更新でデータ不整合→過負荷発生→サービス断の黄金リレー\n2600万人に影響\nHLRはAlcatel-Lucent\n◆イギリス O2（Telefonica UK）\n2012/7\nHLRダウンにより700万人に影響。いまだに原因判明せず。HLRはEricsson製\n2012/10\nHLRダウン。\n対策のため現在までに1600万ドル突っ込んでてEricssonに対しては「俺の怒りが有頂天」状態。\n","permalink":"https://nobwak.github.io/posts/2013-01-24-telecom_hlr%E5%8A%A0%E5%85%A5%E8%80%85%E6%83%85%E5%A0%B1db%E7%84%A1%E5%8F%8C%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"出遅れ感があるが、2012年のドコモ、2013年のau通信障害に関して、個人的にまとめていたものを公開。 ドコモ、障害で会見「スマホ信号量の見","title":"[telecom] HLR（加入者情報DB）無双について"},{"content":"おおよそのUNIX-likeシステムでは、パスワードファイルはMD5でハッシュされるのが一般的だ（った）。 しかし、MD5は1996年に脆弱性が見つかって以来、あまり推奨される方式ではなくなっている。 [Wikipedia](http://ja.wikipedia.org/wiki/MD5)で調べてみても「パソコンレベルで、数10分程度で、同一ハッシュ値の非ユニークなデータ列を生成できる実装が広まっている」などと恐ろしい事が書かれている。 つまり暗号化されていてもMD5ハッシュだと総あたりで易々と破られてしまうということになる。 こういった情勢のもと、多くのシステムでは、パスワードファイルのハッシュ方法を変えたり、または自由に変えられるようになっているので、もしお前らがUNIX-likeシステムを管理しているなら、いますぐ確認しろ。 じゃあ何に変えたらいいの→SHA-2かBlowfishおすすめ。 代替のハッシュ方法としては、[Blowfish](http://ja.wikipedia.org/wiki/Blowfish), [SHA-2](http://ja.wikipedia.org/wiki/SHA)などが挙げられ、強度としてはBlowfishの方が高いようだが、そのアルゴリズムがNIST(アメリカ国立標準技術研究所)の承認をまだ受けてない事から、SHA-2を選択するケースが多い。 そのシステムがどのハッシュを採っているかは、ハッシュ文字列先頭から判断できる。   $1$: MD5 $2?$: Blowfish. ?はaかyかx. $5$: SHA-2(SHA-256) $6$: SHA-2(SHA-512)  FreeBSD 9.1-RELEASEはsha512(SHA-2)がデフォルト。手元にLinuxがないので確認できないのだが、UbuntuはまだMD5のよう。 しかしFreeBSDはCVSを見ると2012年の7/15に[変わっている](http://www.freebsd.org/cgi/cvsweb.cgi/src/etc/login.conf.diff?r1=1.54;r2=1.54.2.2)。9系列で言えば9.1-RELEASEからデフォルトが変更されているようだ。 なお、9.1-RELEASEだから安心と思ったあなた。もしあなたが9.0以前から使い続けているなら注意が必要だ。これについては後述。 FreeBSDでハッシュ方法を変えるには FreeBSDでは/etc/login.confで制御する。 以下の行を書き換えればOK。  :passwd_format=sha512:\u0026amp;#92; md5ならmd5, SHA-2ならsha512, Blowfishならblfである。 書き換えた後、以下のコマンドでlogin.conf.dbを作り直すこと。  cap_mkdb /etc/login.conf パスワードを再設定しないと新ハッシュになりません! 注意。上記設定をしたあと、もう一回パスワード設定しないと反映されません。 なんと不親切な、と思ったけど、よく考えたらそらそうだ。 もし自動的に変更しようとしたら、たとえばmd5でハッシュされた文字列を、いったん元に戻す必要がある。 元に戻させないようにわざわざハッシュしているんだから、自動でできるわけがない。 だから面倒でも、passwordコマンドを叩いて再設定すること。 同じパスワードであっても構わないが、まあ今回の作業の性質を考えると、このタイミングでパスワード変えた方がいいと思う。 9.0以前から使い続けていた人は注意 ということで、もしあなたのFreeBSDが9.1で、デフォルトのハッシュがSHA-2になっていたとしても、9.0以前にパスワード設定してそのままなら、ハッシュはmd5のままである。 実際に俺のマシンは9.0で新規インストールし、ついこの間9.1にアップグレードした。  $ uname -a FreeBSD sylph 9.1-RELEASE FreeBSD 9.1-RELEASE #0 r243825: Tue Dec 4 09:23:10 UTC 2012 root@farrell.cse.buffalo.edu:/usr/obj/usr/src/sys/GENERIC amd64 $ grep passwd /etc/login.conf|grep -v \u0026amp;#34;^#\u0026amp;#34; :passwd_format=sha512:\u0026amp;#92; とまあこの通り、SHA-2になっている。しかし以下のログで示すように、先頭が$1$になっておりMD5ハッシュであることを示している。 cap_mkdbしても同じ。（なおハッシュの核心部分はさすがにマスクしている）  $ sudo grep harukiya /etc/master.passwd パスワード: harukiya:$1$xxxxxxxx:1001:1001::0:0::/home/harukiya:/usr/local/bin/bash $ sudo cap_mkdb /etc/login.conf $ sudo grep doe /etc/master.passwd harukiya:$1$xxxxxxx:1001:1001::0:0::/home/harukiya:/usr/local/bin/bash で、passwdコマンドでパスワードを設定してやると、めでたく先頭が$6$に変化した。 （なおここではマスクしているが、実際にやってみるとハッシュがmd5に比べて長くなっていることが分かる）  $ passwd Changing local password for harukiya Old Password: New Password: Retype New Password: $ sudo grep harukiya /etc/master.passwd harukiya:$6$xxxxxxxxxx:1001:1001::0:0::/home/harukiya:/usr/local/bin/bash このままでもいいけど、せっかくだからblowfishに変更。/etc/login.confでsha512をblfへ。  :passwd_format=blf:\u0026amp;#92; めでたくハッシュ先頭が$2a$に。  $ sudo cap_mkdb /etc/login.conf $ passwd Changing local password for harukiya Old Password: New Password: Retype New Password: $ sudo grep harukiya /etc/master.passwd harukiya:$2a$xxxxxxxxxx:1001:1001::0:0::/home/harukiya:/usr/local/bin/bash もちろん、このあとrootのパスワードも設定しました。  ","permalink":"https://nobwak.github.io/posts/2013-01-13-%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E3%81%ABmd5%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AE%E3%81%AF%E5%B0%8F%E5%AD%A6%E7%94%9F%E3%81%BE%E3%81%A7%E3%81%A0%E3%82%88%E3%81%AD%E3%83%BC/","summary":"おおよそのUNIX-likeシステムでは、パスワードファイルはMD5でハッシュされるのが一般的だ（った）。 しかし、MD5は1996年に脆弱性","title":"パスワードハッシュにmd5を使うのは小学生までだよねー"},{"content":"遅れに遅れた9.1-RELEASEがついに。 もともとの進捗が悪いうえに、freebsd.orgに[不正アクセスのあったこと](http://www.freebsd.org/news/2012-compromise.html)も遅れをさらに助長した。 加えて後者の要因は、遅れまくった9.1のリリースにあたってもpackageをほとんど揃えられない事態を引き起こしていて、ああやっと出たと思った俺含む一部のユーザを困惑させた訳である。 2013/5/15追記packagesがやっと復活した。\u0026lt;br /\u0026gt; [[FreeBSD-Announce] Binary Packages Are Available Again](http://lists.freebsd.org/pipermail/freebsd-announce/2013-May/001476.html)\u0026lt;br /\u0026gt; 追記ここまで というのも。 FreeBSDは、apacheやらMySQLやらから、Perlなどの言語系までの、ベースシステムに含まれないソフトウェアを別途インストールする必要がある。 それにはpackage、つまりコンパイル済みバイナリを使うか、portsから自前コンパイルするかのおおよそ二通り。 で、OSメジャーバージョン更新などのイベントでは全ソフトウェアも更新が必要だ。 こういうときにPackageがあるととっても楽なわけだ。 すべて自前コンパイルするとえらく時間がかかるから。 そこで今回の件のように、ごくごく一部のpackageしかありません。欲しけりゃDVDイメージ落としてくださいねと言われるととっても困るわけ。 ただまあ、俺の場合9.0からのアップグレードなので、全更新は必須ではないのだけど、長く使っているうちにぐちゃぐちゃになるportsの依存関係（名前が変わったとか場所が変わったとか）をスッキリさせたいので自発的にやってる。 で、公式ページにある通り、packageのリリース目処は立っていないようなのであきらめて全コンパイルする。 （と思ったけど、一部9-stableのpackageを使った） 以下はそのログ。 [公式ページの指示](http://www.freebsd.org/releases/9.1R/installation.html)に従って作業。 準備 インストール済みpackageを「更新」するといろいろと面倒な事が起こるので、いったん全削除して再インストールする。 そのためにインストール済みpackageリストを作っておき、全削除。 （全削除するとsudoも使えなくなるから、suしてから）  $ pkg_info \u0026gt; pkg.list.txt $ su Password: # pkg_info | cut -f1 -d\u0026#34; \u0026#34; | xargs -n1 pkg_delete -f 手順1. ファイルダウンロード 必要なファイルをダウンロードする。  # freebsd-update -r 9.1-RELEASE upgrade Looking up update3.freebsd.org mirrors... none found. Fetching metadata signature for 9.0-RELEASE from update3.freebsd.org... done. Fetching metadata index... done. Inspecting system... done. The following components of FreeBSD seem to be installed: kernel/generic src/src world/base world/games world/lib32 The following components of FreeBSD do not seem to be installed: world/doc Does this look reasonable (y/n)?y yと答える。  Fetching metadata signature for 9.1-RELEASE from update3.freebsd.org... done. Fetching metadata index... done. Fetching 1 metadata patches. done. Applying metadata patches... done. Fetching 1 metadata files... done. Inspecting system... done. Fetching files from 9.0-RELEASE for merging... done. Preparing to download files... done. Fetching 37716 patches.....10....20....30....40....50....60....70....80....90....100....110....120....130....140....150....160....170....180....190....200....210....220....230....240....250....260....270....280....290....300....310....320....330....340....350....360....370....380....390....400....410....420....430....440....450....460....470....480....490....500....510....520....530....540....550....560....570....580....590....600....610....620....630....640....650....660....670....680....690....700....710... \u0026lt;snip\u0026gt; .37560....37570....37580....37590....37600....37610....37620....37630....37640....37650....37660....37670....37680....37690....37700....37710... done. Applying patches...Fetching 1758 files... done. Attempting to automatically merge changes in files... done. The following changes, which occurred between FreeBSD 9.0-RELEASE and FreeBSD 9.1-RELEASE have been merged into /etc/defaults/periodic.conf: /var/yp/Makefile.dist To install the downloaded upgrades, run \u0026#34;/usr/sbin/freebsd-update install\u0026#34;. 手順2. Kernel差し替えと再起動 インストール。 一回目はカーネルの差し替え。ここから緊張するところ。 これがうまく行ったら、次はユーザランドの更新だが、まずは。  # freebsd-update install Installing updates... Kernel updates have been installed. Please reboot and run \u0026#34;/usr/sbin/freebsd-update install\u0026#34; again to finish installing updates. 再起動前。  # shutdown -r now 手順3. ユーザランド更新と再起動  # freebsd-update install Installing updates... # shutdown -r now 手順4. unameの確認と...  # uname -a FreeBSD sylph 9.1-RELEASE FreeBSD 9.1-RELEASE #0 r243825: Tue Dec 4 09:23:10 UTC 2012 root@farrell.cse.buffalo.edu:/usr/obj/usr/src/sys/GENERIC amd64 で、ここからpackageの再インストール...  pkg_add -r ftp://ftp2.jp.freebsd.org/pub/FreeBSD/ports/amd64/packages-9-stable/shells/bash-4.2.37.tbz pkg_add -r ftp://ftp2.jp.freebsd.org/pub/FreeBSD/ports/amd64/packages-9-stable/security/sudo-1.8.6.p3_1.tbz pkg_add -r ftp://ftp2.jp.freebsd.org/pub/FreeBSD/ports/amd64/packages-9-stable/All/perl-5.12.4_4.tbz 以降はガチコンパイル。  ","permalink":"https://nobwak.github.io/posts/2013-01-03-freebsd_9.1-release_%E3%81%9F%E3%81%A0%E3%81%97package%E3%81%8C%E3%81%9D%E3%82%8D%E3%81%A3%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E3%81%AE%E3%81%A7%E6%B3%A8%E6%84%8F2013_5_15_%E8%BF%BD%E8%A8%98/","summary":"遅れに遅れた9.1-RELEASEがついに。 もともとの進捗が悪いうえに、freebsd.orgに[不正アクセスのあったこと](http://","title":"FreeBSD 9.1-RELEASE! ただしpackageがそろっていないので注意!(2013/5/15 追記)"},{"content":"ZFS運用を始めてはや数か月。なんの問題もなく使っておりますが、 「scrubって定期的にやるといいらしいよ」 「なんかね、fsckみたいなこと、やってくれるらしいよ」 などという話を聞いた。 全くそんなことやってないので、慌てて調べてみた。 結論として、やっといた方がいいけど、なんか「fsckみたいな」と表現するのはおかしいよな、との理解に至った次第。 ZFSのおさらい ZFSのキモのひとつは、セルフヒーリングにある。 格納されているデータに対して、強力なチェックサムを持っていて、不整合があっても勝手に修復する。 勝手に、というのはどういうことかというと、不整合を見つけ「次第」、つまりアクセスしたファイルに不整合があったらその場で修復してしまう、というところ。 だから、[http://docs.oracle.com/cd/E19253-01/819-6260/gbbxi/index.html](http://docs.oracle.com/cd/E19253-01/819-6260/gbbxi/index.html)　のとおり   データの不一致が ZFS 構成内のディスク上で発生するとすれば、それはハードウェア障害が発生した場合か、ZFS ソフトウェアにバグが存在する場合だけ  なので、ZFSソフトウェアバグはさておき、論理的なデータ不一致の発生リスクについてはとくに手だて不要というわけだ。 ハードウェア障害ならもうそこは物理的なディスクの冗長でなんとかせい、ということになる。 言い換えると、ZFS上のファイルにアクセスできない場合には、もうこれは尋常ではない障害が起こっているということであり、あなたはヘビーな状況下にいるということである。(その場合はこちら。) [http://docs.oracle.com/cd/E19253-01/819-6260/gbctt/index.html](http://docs.oracle.com/cd/E19253-01/819-6260/gbctt/index.html) じゃあscrubってなによ そういった仕組みを踏まえてscrubというツール。 これは、上述の「不整合があったら修復する」というのを全データに対して行うだけ。 …ということは。 scrubをすれば全データのチェックはする。するけれども、そもそもscrubしてようがしてまいが、そんなことはお構いなしに、個々のファイルにアクセスしたらそのときに不整合チェックはされる。 カブってるじゃないか。 むしろscrub頻繁にやったらディスクに無用な負荷かけないか? となるとscrubのメリットは何か。 [http://docs.oracle.com/cd/E19253-01/819-6260/gbbyd/index.html](http://docs.oracle.com/cd/E19253-01/819-6260/gbbyd/index.html)   ZFS では、すべての不一致を定期的にチェックする機構が用意されています。この 機能は「スクラブ」と呼ばれ、メモリーやほかのシステム内で、ハードウェアまたはソフトウェア障害が発生する前にエラーを検出および回避する手段として一 般的に使用されます。 定期的にスクラブを実行すると、システム上のすべてのディスクへの継続的な入出力が保証されます。 スクラブを行なっているときまたは必要なファイルにアクセスしているときにエラーが発生した場合には、そのエラーが内部でログに記録されるので、そのプールで認識されているすべてのエラーの概要をすぐに確認できます。  とのこと。 「scrubすれば不整合があっても修復される」というのは、まあ間違ってはいないけど、むしろscrubの主目的はそこよりも、障害の予兆をつかむことにあると理解している。 たとえば。 scrubの定期的な実行をしないとする。 するとデータ不整合チェックは、個々のファイルアクセス契機で行われる。 不整合があればその都度、解消されるだろうし、解消されない場合には、ヘビーな状況だとして障害復旧を行うだろう。 しかし、滅多にアクセスしないファイルで致命的な、おそらく物理的な障害が発生し、影響が徐々に広がっていくような場合、このスタイルでは検知が遅れる可能性がある。 それを防ぐには、定期的にscrubで全ファイルをチェックし、「そのプールで認識されているすべてのエラーの概要」も定期的にチェックすればよい。 結果、「ハードウェアまたはソフトウェア障害が発生する前にエラーを検出および回避」できる可能性が高くなる、と。 scrubの使い方 というわけで使ってみた。まあコマンド例はいくらでもあるから淡々と。  $ zpool list NAME SIZE ALLOC FREE CAP DEDUP HEALTH ALTROOT vault 2.27T 1.30T 990G 57% 1.00x ONLINE - このpoolに対して実行。  $ sudo zpool scrub vault $ （すぐプロンプトが返ってくる）  $ sudo zpool status -v pool: vault state: ONLINE scan: scrub in progress since Tue Dec 18 22:53:46 2012 154M scanned out of 1.30T at 5.70M/s, 66h19m to go 0 repaired, 0.01% done config: NAME STATE READ WRITE CKSUM vault ONLINE 0 0 0 ada1 ONLINE 0 0 0 errors: No known data errors えっ66時間かかるの? （いまだに冗長化してないのが恥ずかしい。今回scrub調べてほんとに危ないのでディスク買わねばと思った）  $ sudo zpool status -v パスワード: pool: vault state: ONLINE scan: scrub in progress since Tue Dec 18 22:53:46 2012 239G scanned out of 1.30T at 81.4M/s, 3h48m to go 0 repaired, 17.95% done config: NAME STATE READ WRITE CKSUM vault ONLINE 0 0 0 ada1 ONLINE 0 0 0 errors: No known data errors OKOK。 なお、エラーが発生すれば、このstatusのほかに、syslogに表示されるし、たとえばFreeBSDならroot宛のメールにZFS poolsの状態も記載される。こんな感じに;   Checking status of zfs pools: all pools are healthy  vaultに対するログにもきっちりと（こういうとこZFSって素敵だ）  $ sudo zpool history vault History for \u0026amp;#39;vault\u0026amp;#39;: 2012-03-05.22:41:40 zpool create vault ada1 2012-03-05.22:54:14 zfs create vault/chamber 2012-03-05.22:56:44 zfs set mountpoint=/chamber vault/chamber 2012-03-18.00:37:52 zfs create vault/test 2012-03-18.00:43:27 zfs set dedup=on vault/test 2012-03-18.00:46:48 zfs destroy vault/test 2012-12-18.22:53:55 zpool scrub vault なお、scrubの停止は-sコマンドで。  ","permalink":"https://nobwak.github.io/posts/2012-12-18-zfs_scrub%E3%82%92%E9%81%8E%E4%BF%A1%E3%81%97%E3%81%A6%E3%81%AF%E3%81%84%E3%81%91%E3%81%BE%E3%81%9B%E3%82%93/","summary":"ZFS運用を始めてはや数か月。なんの問題もなく使っておりますが、 「scrubって定期的にやるといいらしいよ」 「なんかね、fsckみたいなこと","title":"ZFS scrubを過信してはいけません。"},{"content":"[http://www.wireshark.org/download/automated/win32/](http://www.wireshark.org/download/automated/win32/) 上記からwiresharkportable-x.x.x-SVN-xxxxxx.paf.exeなどをダウンロードする。 「paf」がポータブルパッケージ。 ダブルクリックするとインストーラのようなものが立ち上がるが、これは単に展開先を選んでいるだけ。 レジストリを汚される心配なない。 あとはwiresharkportable.exeを実行すればOK.なのだが。 起動のたびにWinPcapのインストールを訪ねてくる。 わざわざポータブルにしたのに、WinPcapをインストールされては困る。 もちろん、そのマシンでパケットキャプチャをする場合にはWinPcapは必要だが、ポータブルにしたのはログを見るだけのためなので。 WiresharkPortable.exeと同じディレクトリにwiresharkportable.iniを作成すると起動時の振る舞いを制御することができる。 下記のようにしておけばよい。  \u0026amp;#91;WiresharkPortable] WiresharkDirectory=App/Wireshark WiresharkExecutable=wireshark.exe AdditionalParameters= DisableWinPcapInstall=true WinPcapInstaller= 詳細はこちら。 [http://wiki.wireshark.org/WiresharkPortable](http://wiki.wireshark.org/WiresharkPortable)  ","permalink":"https://nobwak.github.io/posts/2012-08-03-wireshark_portable%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%AE%E3%81%97%E3%81%8B%E3%81%9F/","summary":"[http://www.wireshark.org/download/automated/win32/](http://www.wireshark.org/download/automated/win32/) 上記からwiresharkportable-x.x.x-SVN-xxxxxx.paf.exeなどをダウンロードする。 「paf」がポータブル","title":"wireshark portableの設定のしかた"},{"content":"pkg_info: corrupted record (pkgdep line without argument), ignoringが出たときの対処法。 まずこのコマンドを叩く。  $ grep -A1 \u0026#34;^@pkgdep $\u0026#34; /var/db/pkg/*/+CONTENTS 例えばこういう応答が返る。  /var/db/pkg/php5-xmlwriter-5.3.10/+CONTENTS:@pkgdep /var/db/pkg/php5-xmlwriter-5.3.10/+CONTENTS-@comment DEPORIGIN:lang/php5 2行目に表示されているlang/php5をインストールすればOK。  ","permalink":"https://nobwak.github.io/posts/2012-04-18-pkg%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%8C%E5%A3%8A%E3%82%8C%E3%81%9F%E3%81%A7%E3%81%94%E3%81%96%E3%82%8Bpkg_infocorrupted_record_pkgdep_line_without_argument/","summary":"pkg_info: corrupted record (pkgdep line without argument), ignoringが出たときの対処法。 まずこのコマンドを叩く。 $ grep -A1 \u0026#34;^@pkgdep $\u0026#34; /var/db/pkg/*/+CONTENTS 例えばこういう応答が返る。 /var/db/pkg/php5-xmlwriter-5.3.10/+CONTENTS:@pkgdep /var/db/pkg/php5-xmlwriter-5.3.10/+CONTENTS-@comment DEPORIGIN:lang/php5 2行目に表示されている","title":"pkgのデータベースが壊れたでござる（pkg_info: corrupted record (pkgdep line without argument)）"},{"content":"[http://d.hatena.ne.jp/flageo/20060501/p1](http://d.hatena.ne.jp/flageo/20060501/p1) でも書いたけど、phttpget、つまりはportsnap, freebsd-updateはhttp://user:password@proxy.server.com:8080形式の環境変数HTTP_PROXYを読んでくれない。 そこでportsnap, freebsd-updateを実行するときにはHTTP_PROXY, HTTP_PROXY_AUTHに付け替える必要があるわけだが、これが面倒くさい。 というわけで、phttpget自体を改造する。 ネタは[http://www.freebsd.org/cgi/query-pr.cgi?pr=129431](http://www.freebsd.org/cgi/query-pr.cgi?pr=129431)  $ uname -r 8.2-RELEASE-p3 $ grep FBSDID ./phttpget.c __FBSDID(\u0026amp;#34;$FreeBSD: src/usr.sbin/portsnap/phttpget/phttpget.c,v 1.14.2.1.6.1 2010/12/21 17:09:25 kensmith Exp $\u0026amp;#34;); 以上の/usr/src/usr.sbin/portsnap/phttpget/phttpget.cに対して以下のような修正を。  $ diff -u phttpget.c.orig phttpget.c --- phttpget.c.orig 2012-04-05 10:58:52.000000000 +0900 +++ phttpget.c 2012-04-05 11:04:25.000000000 +0900 @@ -44,7 +44,7 @@ #include \u0026amp;#60;sysexits.h\u0026gt; #include \u0026amp;#60;unistd.h\u0026gt; -static const char * env_HTTP_PROXY; +static char * env_HTTP_PROXY; static char * env_HTTP_PROXY_AUTH; static const char * env_HTTP_USER_AGENT; static char * env_HTTP_TIMEOUT; @@ -136,6 +136,11 @@ p = strchr(env_HTTP_PROXY, \u0026amp;#39;/\u0026amp;#39;); if (p != NULL) *p = 0; + if (strchr(env_HTTP_PROXY, \u0026amp;#39;@\u0026amp;#39;)) { + proxy_auth_user = strsep(\u0026amp;env_HTTP_PROXY, \u0026amp;#34;:\u0026amp;#34;); + proxy_auth_pass = strsep(\u0026amp;env_HTTP_PROXY, \u0026amp;#34;@\u0026amp;#34;); + p = strchr(env_HTTP_PROXY, \u0026amp;#39;@\u0026amp;#39;); + } p = strchr(env_HTTP_PROXY, \u0026amp;#39;:\u0026amp;#39;); if (p != NULL) { *p = 0; あとは/usr/src/usr.sbin/portsnap/phttpget/でmakeして、できたphttpgetを/usr/libexec配下にコピーすればOK。 当然ながらOSの更新（freebsd-updateやmake buildworld install）すると元に戻るので注意。  ","permalink":"https://nobwak.github.io/posts/2012-04-07-portsnap_freebsd-update%E3%81%ABuserpasswordproxy%E5%BD%A2%E5%BC%8F%E3%81%AEhttp_proxy%E3%82%92%E8%AA%AD%E3%81%BE%E3%81%9B%E3%82%8B%E3%81%AB%E3%81%AFphttpget%E3%82%92%E6%94%B9%E9%80%A0/","summary":"[http://d.hatena.ne.jp/flageo/20060501/p1](http://d.hatena.ne.jp/flageo/20060501/p1) でも書いたけど、phttpget、つまりはportsnap, freebsd-updateはhttp://user:password@pro","title":"portsnap, freebsd-updateにuser:password@proxy形式のHTTP_PROXYを読ませるには。（phttpgetを改造）"},{"content":"はいはいはいドーモそういうわけでですね、自宅鯖の節電をやっていきたいわけですけれども。 9.0-RELEASEのIntelで実施しましたので共有。 AMDでも9.xならなんとかできそう。 しかし8.xかつAMD CPUの方は解散で。 ただ、MLなどをつらつら見ていると、以下の設定を行っても効果がでないケースもあるようなので各自調整のこと。（例: C2よりC3の方がなぜかCPU温度が上がるとか） やること。 やることをさっさと書く。 CPU throttlingを無効に。 /boot/loader.confで指定。 具体的にはp4tccを無効に。sysctlで調べて複数あればすべてつぶすこと。 以下の例では二つ。  $ sysctl -a|grep \u0026amp;#34;p4tcc\u0026amp;#34; dev.p4tcc.0.%desc: CPU Frequency Thermal Control dev.p4tcc.0.%driver: p4tcc dev.p4tcc.0.%parent: cpu0 dev.p4tcc.0.freq_settings: 10000/-1 8750/-1 7500/-1 6250/-1 5000/-1 3750/-1 2500/-1 1250/-1 dev.p4tcc.1.%desc: CPU Frequency Thermal Control dev.p4tcc.1.%driver: p4tcc dev.p4tcc.1.%parent: cpu1 dev.p4tcc.1.freq_settings: 10000/-1 8750/-1 7500/-1 6250/-1 5000/-1 3750/-1 2500/-1 1250/-1 以下のように。  /boot/loader.conf: hint.p4tcc.0.disabled=1 hint.acpi_throttle.0.disabled=1 hint.p4tcc.1.disabled=1 hint.acpi_throttle.1.disabled=1 C-states設定 /etc/rc.confに設定を加え、C3まで落ちるようにする。 RELEASE、CPUに応じて/boot/loader.confに追加の設定を加える。 9.x, intelの場合  /etc/rc.conf: performance_cx_lowest=\u0026amp;#34;C3\u0026amp;#34; economy_cx_lowest=\u0026amp;#34;C3\u0026amp;#34; 8.x, intelの場合  /etc/rc.conf: performance_cx_lowest=\u0026amp;#34;C3\u0026amp;#34; economy_cx_lowest=\u0026amp;#34;C3\u0026amp;#34; /boot/loader.conf: hint.apic.0.clock=0 kern.hz=100 hint.atrtc.0.clock=0 9.x、AMDの場合  /etc/rc.conf: performance_cx_lowest=\u0026amp;#34;C3\u0026amp;#34; economy_cx_lowest=\u0026amp;#34;C3\u0026amp;#34; /boot/loader.conf: hint.apic.0.clock=0 再起動。 sysctlで確認 p4tccが表示されない。  $ sysctl -a|grep p4tcc $ C3が有効になっていて、再起動直後ということもあるけど、システムがほとんどC3ステートにいることが分かる。  $ sysctl -a|grep cx hw.acpi.cpu.cx_lowest: C3 dev.cpu.0.cx_supported: C1/1 C2/1 C3/57 dev.cpu.0.cx_lowest: C3 dev.cpu.0.cx_usage: 0.00% 0.06% 99.93% last 432us dev.cpu.1.cx_supported: C1/1 C2/1 C3/57 dev.cpu.1.cx_lowest: C3 dev.cpu.1.cx_usage: 0.00% 0.10% 99.89% last 907us 上記設定の意味 ではその意味などを。 1: CPU throttlingの停止について powerdはCPUの周波数変更(CPU throttling)とEISTの組み合わせ。 周波数変更は単純に周波数だけ変更する。 EISTは周波数と電圧を変更する。 前者の周波数変更は、どうも周波数を実際に「落とす」わけではなく、周波数はそのままに「動作をするのはクロック8回に1度な」というように単に動作タイミングを間引いているだけらしい。 したがって、発熱を抑える効果はあっても（CPU Frequency Thermal Control）、電力消費を抑える効果は薄い。 効果のない選択肢があっても無駄なだけなのでバッサリ切る。 2: C-statesの設定 C-statesは以下の通り。 下に行けば行くほど節電できる。システムは低負荷時にあらかじめ設定されたC-states（C状態）まで動作を落とす。 デフォルトはC1。C2, C3まで落とすようにするには/etc/rc.confで指定する。   C1: CPUコアの一部のクロックを停止する。 C2: CPUコアのクロックを停止する。 C3: CPUの内部クロック停止、電圧を下げ、システムバスから切り離す。  2-1: AMDの制限 AMDの場合、詳細なC StatesはOSに対して隠蔽される。代わりにC1Eというstateがある。 OSからはマシンがC2にいようが、C3にいようが、C1Eとしてしか分からない。 後述するようにC3ではタイマーに関しての考慮が必要になるのだが、OSから見えないのではどうにもできない。したがってAMDとRELEASEの組み合わせにより、具体的には8.xとAMD CPUではC1Eへの移行が抑止される。 2-2: OS, RELEASEの組み合わせごとのC3の設定 節電の観点ではC3が一番良いが、この状態だとAPICタイマーも機能しなくなる。 APICタイマーが止まるとスケジューリングが出来ず、復帰もできなくなる。 したがって、APIC以外のタイマーを使う必要がある。 RELEASE、CPUにより回避策に違いが生まれる。 8.x intelにおいては、APICを使うこと自体を止めれば別タイマ（i8254, RTC）を使ってくれる。 ただ、C3からの復帰に時間がかかってしまうので（といってもusのレベル）、/boot/loader.confで調整を行う。 9.x intelにおいては、eventtimersという適切なタイマを選んでくれる仕組みがあるので特に考慮不要。 8.x amdにおいては、 OSから分からないところでC3に遷移してAPICタイマを止められてはかなわないので、OSレベルでC1E機能が抑止される。 つまりC-statesによる節電は無理。これが解散の理由。 9.x amdにおいては、 APICタイマが有効なときのみC1E機能が抑止される。 だからAPICタイマを無効にすればOK。 参考 CPU throttling [http://en.wikipedia.org/wiki/Dynamic_frequency_scaling](http://en.wikipedia.org/wiki/Dynamic_frequency_scaling) C-States [http://okwave.jp/qa/q4539201.html](http://okwave.jp/qa/q4539201.html) EIST [http://ja.wikipedia.org/wiki/Intel_SpeedStep_%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8](http://ja.wikipedia.org/wiki/Intel_SpeedStep_%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8)  ","permalink":"https://nobwak.github.io/posts/2012-03-22-%E5%AE%85%E9%AF%96freebsd%E3%82%92%E7%AF%80%E9%9B%BB%E3%81%97%E3%82%88%E3%81%86/","summary":"はいはいはいドーモそういうわけでですね、自宅鯖の節電をやっていきたいわけですけれども。 9.0-RELEASEのIntelで実施しましたので共","title":"宅鯖FreeBSDを節電しよう"},{"content":"FreeBSDをインストールしてやることをまとめたよ。 まずrootでログイン シェル、sudo、screen、vim-lite(日本語OKなvi)をインストール。  # pkg_add -r bash sudo screen vim-lite 以降、viはvim等と読み替えておくれ。  # vipw 自アカウントのシェルを変更。  # vi /etc/group wheelに自アカウントを追加。 sudoが使えるように。 これ以降、原則としてrootは使わない。  # visudo （以下の%wheelの行をアンコメントする。） ## Uncomment to allow members of group wheel to execute any command %wheel ALL=(ALL) ALL 自分のアカウントでログイン。 ホームディレクトリの.profileに以下を追加。 言語設定とパッケージの取得先変更。  # # modified # LANG=ja_JP.UTF-8;export LANG PACKAGEROOT=\u0026amp;#34;ftp://ftp2.jp.freebsd.org\u0026amp;#34;;export PACKAGEROOT 上記設定を読み込み。  $ . ~/.profile portsの更新  $ sudo vi /etc/portsnap.conf （portsnapの取得先をfreebsd.orgからallbsd.orgへ変更(感謝）） #SERVERNAME=portsnap.FreeBSD.org SERVERNAME=portsnap.allbsd.org 既存のportsは一回捨てる。 rmするのも時間がかかるので、いったんmvして消す。 で、portsnapで取り直し。  $ sudo mv /usr/ports /usr/ports.org $ sudo rm -Rf /usr/ports.org （このあとバックグラウンドにするとよい） $ mkdir /usr/ports $ sudo portsnap fetch extract 時間がかかるのでさらにターミナルを起動。 起動時のサービスの設定  $ sudo vi /etc/rc.conf 以下を（なければ）追加。 sshd_enable=\u0026amp;#34;YES\u0026amp;#34; powerd_enable=\u0026amp;#34;YES\u0026amp;#34;\t#低負荷の時にクロック等を下げる powerd_flags=\u0026amp;#34;-a adp -n adp\u0026amp;#34; ntpdate_hosts=\u0026amp;#34;ntp.jst.mfeed.ad.jp\u0026amp;#34;\t#時刻合わせ ntpdate_enable=\u0026amp;#34;YES\u0026amp;#34; #sendmail swtich. see rc.sendmail(8) sendmailを止める。 sendmail_enable=\u0026amp;#34;NO\u0026amp;#34; sendmail_submit_enable=\u0026amp;#34;NO\u0026amp;#34; sendmail_outbound_enable=\u0026amp;#34;NO\u0026amp;#34; sendmail_msp_queue_enable=\u0026amp;#34;NO\u0026amp;#34; powerd, ntpdateを起動。sendmailはまあ...後で再起動か。  $ sudo service powerd start $ sudo service ntpdate start locateデータベースの作成 放っておけば一週間に一回更新してくれるのだが、すぐに使いたいので。  $ sudo /etc/periodic/weekly/310.locate あとはports管理とか。  $ sudo pkg_add -r psearch pkg_replace portmaster portaudit でかい言語系。  $ sudo pkg_add -r perl python とりあえずこんなもん。  ","permalink":"https://nobwak.github.io/posts/2012-03-21-freebsd%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%9F%E3%82%89%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8no_gui%E7%B7%A8/","summary":"FreeBSDをインストールしてやることをまとめたよ。 まずrootでログイン シェル、sudo、screen、vim-lite(日本語OKなv","title":"FreeBSDをインストールしたらやること。（no GUI編）"},{"content":"FreeBSDにおいて、各種サーバソフトウェアの起動・停止を行う起動スクリプトは/etc/rc.d、/usr/local/etc/rc.dに格納されている。 いちいち/usr/local/etc/rc.d/apache22 startなどとキーを叩くのは面倒で仕方がない。 そこでportsにあるbsdadminscriptsなどを使っていたのだが、ふと気が付くと7.3あたりからserviceというコマンドが作られたようだ。 使い方。 書式。   service \u0026lt;起動スクリプト\u0026gt; start|stop|restart等々  使用例  $ sudo service dovecot status Password: dovecot is running as pid 1026. $ sudo service dovecot restart Stopping dovecot. Waiting for PIDS: 1026. Starting dovecot. 注意点としては、引数で与えるのはあくまでも起動スクリプト名であって、サーバソフトウェアの名前ではない、という点。 例えば、dhcpdだとisc-dhcpdで指定しないといけないが、それを思い出せないこともしばしば。 だから後述の使用法も使って、起動スクリプト名を調べるとよい。 そのほかの使い方:起動スクリプトに関する情報が得られる。  service -e 　有効になっているサービスを表示する。 　起動順（rcorder）に表示 service -r 　無効になっているものも含めてサービスを表示する。 　起動順（rcorder）に表示。 　もちろん無効になっているものは、もしも有効だったら 　という仮定で。 service -l 　rc.dディレクトリの下にあるファイルをすべてリストする。 　/etc/rc.dのほか、たとえば/usr/local/etc/rc.dなど。 -v 　ほんの少しだけ説明が増える。 　（試してみたら本当に少しだけだった） 例えば。-rだと、-eのときにはない起動スクリプトも表示されていることが分かる。  $ service -e|grep \u0026amp;#34;/usr/local\u0026amp;#34; /usr/local/etc/rc.d/mrtg_daemon /usr/local/etc/rc.d/jenkins /usr/local/etc/rc.d/dovecot /usr/local/etc/rc.d/clamav-clamd /usr/local/etc/rc.d/clamav-freshclam /usr/local/etc/rc.d/apache22 $ service -r|grep \u0026amp;#34;/usr/local\u0026amp;#34; /usr/local/etc/rc.d/svnserve /usr/local/etc/rc.d/rsyncd /usr/local/etc/rc.d/rrdcached /usr/local/etc/rc.d/munin-node /usr/local/etc/rc.d/mrtg_daemon /usr/local/etc/rc.d/jenkins /usr/local/etc/rc.d/htcacheclean /usr/local/etc/rc.d/dovecot /usr/local/etc/rc.d/clamav-clamd /usr/local/etc/rc.d/clamav-freshclam /usr/local/etc/rc.d/apache22 ","permalink":"https://nobwak.github.io/posts/2012-03-19-%E8%B5%B7%E5%8B%95%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E6%93%8D%E4%BD%9C%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89servicelinux%E3%81%AEchkconfig%E3%81%AE%E7%B0%A1%E6%98%93%E7%89%88/","summary":"FreeBSDにおいて、各種サーバソフトウェアの起動・停止を行う起動スクリプトは/etc/rc.d、/usr/local/etc/rc.dに","title":"起動スクリプト操作コマンドservice（Linuxのchkconfigの簡易版）"},{"content":"最初にお断りするが、十分なメモリ、あるいはSSDをお持ちでない方は帰っていただいて結構です。  ZFSにはdedupという機能がある。 その機能を有効にすると、例えばここに1GBのファイルが一つあるとして、それをコピーしても、場所が同じpool内である限り、1GBのディスクしか消費しない。 何それただのハードリンクと思うのは早い。 仮に同一のファイルA, Bがあるとする。いずれも1GB。 ハードリンクすればディスク消費量は1GBだ。 さてここで、ファイルBの一部、1bitだけを変えたいとする。 もはやハードリンクはできず、別個のファイルとして扱うことになる。 したがってディスク消費は2GB。 ではdedupだとどうなるか。 1bit違う1GBのファイル二つがあっても、なんと1GBと128KBだけしかディスクを消費しないという驚きの仕組み。 どういうことかというと、dedupはファイルが同じかどうかをブロックごとに判断するということ。 先の例でいえば、異なる1bitを含むブロック分だけを追加で確保し、それ以外はファイルAと同じものを使う。 なお、ZFSでブロックサイズは512B～128KB。 つまり大目に見積もっても1GBと128KBだけの消費でよいわけ。  なぜそんなことができるのか。 ZFSはプール上にあるデータのすべてのブロックのハッシュをメモリ上に持っている。 あるファイルをディスクに書き込む前に、ファイルをブロックに分解しハッシュテーブルと照合、書き込み要否を判断するという仕組み。 問題はメモリ上に置くテーブルのサイズだ。 dedupを有効に使うには、テーブルを置けるほど十分なメモリが必要になる。 しかし、のちほど見積もりをするが、数TBのディスクを考えるとメモリで賄うのは少々厳しい。 当然、メモリをこればっかりに使うわけにもいかないのだし。 もちろん、テーブルをハードディスクに置くことはできるが、ファイルを書き込むたびにディスク上のハッシュテーブルを参照することになる。 つまりすっごく遅くなる。 よろしい。ならばSSDだ。 とはいえ、Dedupの目的がディスクの容量節約ならば、安いHDDケチってメモリ、SSD無理して買うのも本末転倒という話になってくる。 月並みだけど、よく考えた方がいいよね。  では仮に2TBのデータが詰まったZFSでDedupしたら、どれくらいのメモリが必要か。 ハッシュテーブルは1ブロックにつき320Bytes。 zfsのブロックサイズは512Bから128KBで可変。 ざっくり64KBとみなす。 では計算。   2TB=1024 * 1024 * 1024 * 2 = 2147,483,648KB。 2TB/64KB=33,554,432 blocks  2TBは33,554,432 blocks。 1blockあたり320Bytesなので、かければテーブルに必要なサイズが出る。   33,554,432 blocks * 320 Bytes = 10,737,418,240 = 10GBytes  はい解散。 と言いたくなるレベルですな。 念のため記載するが、上記は2TBのデータを使っているときのdedupテーブルの試算。 2TBのプールに100bytes程度のファイル一つ置いただけなら、ハッシュテーブルは320Bytes程度。  そもそも2TB全部にDedupするのが間違いであった。 Dedupを活かしたいなら、扱うファイルで決めるのも手。 ざっくり言えばオフィスドキュメント、仮想マシンイメージなど、重複が見込まれるファイルを多く保管するディレクトリに対してのみDedupするとよいでしょう。 一方で動画などはあまり有効ではないでしょう。 なお、プールでDedupするとどれくらい得か、というのは調べることができる。 zdbにプール名を与えてやればいい。 一番下に重複具合が表示される。以下の例では1.06。あまり意味はないってことですな。 ちなみに、あるプールに同一のファイルを3つだけ置くとここが3.00になる。  $ sudo zdb -S vault パスワード: Simulated DDT histogram: bucket allocated referenced ______ ______________________________ ______________________________ refcnt blocks LSIZE PSIZE DSIZE blocks LSIZE PSIZE DSIZE ------ ------ ----- ----- ----- ------ ----- ----- ----- 1 8.22M 1.02T 1.02T 1.02T 8.22M 1.02T 1.02T 1.02T 2 406K 50.6G 50.6G 50.6G 815K 102G 102G 102G 4 185 17.1M 17.1M 17.1M 835 73.6M 73.6M 73.6M 8 146 14.2M 14.2M 14.2M 1.75K 182M 182M 182M 16 17 8.50K 8.50K 8.50K 407 204K 204K 204K 32 150 16.7M 16.7M 16.7M 5.43K 600M 600M 600M 64 9 132K 132K 132K 820 9.49M 9.49M 9.49M 128 6 3K 3K 3K 1.02K 521K 521K 521K 256 3 129K 129K 129K 884 40.5M 40.5M 40.5M 64K 1 128K 128K 128K 73.4K 9.18G 9.18G 9.18G Total 8.62M 1.07T 1.07T 1.07T 9.10M 1.13T 1.13T 1.13T dedup = 1.06, compress = 1.00, copies = 1.00, dedup * compress / copies = 1.0 まあzfs set dedup=ONとかすればいいんだけど、現状使う予定もないので詳しく調べてない。  ","permalink":"https://nobwak.github.io/posts/2012-03-18-zfs%E3%81%AE%E9%87%8D%E8%A4%87%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%AF%80%E7%B4%84%E6%A9%9F%E8%83%BDdedup%E3%81%8C%E3%81%99%E3%81%92%E3%81%88%E3%81%9F%E3%81%A0%E3%81%97%E3%83%A1%E3%83%A2%E3%83%AA%E5%A4%A7%E5%B0%BD%E3%81%AB%E9%99%90%E3%82%8B/","summary":"最初にお断りするが、十分なメモリ、あるいはSSDをお持ちでない方は帰っていただいて結構です。 ZFSにはdedupという機能がある。 その機能を","title":"ZFSの重複ファイル節約機能dedupがすげえ（ただしメモリ大尽に限る）"},{"content":"$ cat sample.txt \u0026amp;#60;a\u0026gt;\u0026amp;#60;b\u0026gt; 上記のテキストに対して以下のtrを実行するとどうなるか。  tr \u0026amp;#34;ab\u0026amp;#34; \u0026amp;#34;cd\u0026amp;#34; 試してみる。  $ tr \u0026amp;#34;ab\u0026amp;#34; \u0026amp;#34;cd\u0026amp;#34; \u0026amp;#60; ./sample.txt \u0026amp;#60;c\u0026gt;\u0026amp;#60;d\u0026gt; げえっ。 つまり、trは1文字ずつ判断する。 a→cに変わり、 b→dに変わる。 ※「ab」を置換しない点に注意。 応用。 同じファイルに対して。  $ tr -d \u0026amp;#34;\u0026amp;#60;\u0026gt;\u0026amp;#34; \u0026amp;#60; sample.txt ab 「\u0026lt;\u0026gt;」ではなく「\u0026lt;」「\u0026gt;」を消去していることに注意。  ","permalink":"https://nobwak.github.io/posts/2012-03-16-tr%E3%81%AF%E4%B8%80%E6%96%87%E5%AD%97%E3%81%94%E3%81%A8%E3%81%AB%E5%88%A4%E6%96%AD%E3%81%99%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"$ cat sample.txt \u0026amp;#60;a\u0026gt;\u0026amp;#60;b\u0026gt; 上記のテキストに対して以下のtrを実行するとどうなるか。 tr \u0026amp;#34;ab\u0026amp;#34; \u0026amp;#34;cd\u0026amp;#34; 試してみる。 $ tr \u0026amp;#34;ab\u0026amp;#34; \u0026amp;#34;cd\u0026amp;#34; \u0026amp;#60; ./sample.txt \u0026amp;#60;c\u0026gt;\u0026amp;#60;d\u0026gt; げえっ。 つまり、trは1文字ずつ判断する。 a","title":"trは一文字ごとに判断する件について"},{"content":"ある日、ふと/var/logの下を見てみたら、1.5GBytesに膨れ上がった某ログファイルがあって腰を抜かした件について。 思えば、サーバソフトウェアなどでは、インストールしたらまずそのものの設定で頭が一杯だ。 一方で、いわゆるシモの世話といいますか、吐き出すログの設定には頭が回ってなかったことに深く反省するのであります。 俺の例でいえば、apache、clamav、dhcpdのログが手つかずでありました（冒頭、1.5GBytesになっていたログはdhcpdのもの）。 portsから入れたサーバのログは、いちど確認したほうがいいだろう。 基本は/var/logの下に出力されるが、/usr/local/var/logが（あれば）見た方がいいし、場合によっては思わぬところに吐き出されてる可能性もある。 newsyslogd さて、FreeBSDではログのローテートはnewsyslogdが行う。Linuxではlogrotateにあたるもの。 handbookではこのへん 英語（推奨） [http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/configtuning-configfiles.html](http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/configtuning-configfiles.html) 日本語 [http://www.freebsd.org/doc/ja_JP.eucJP/books/handbook/book.html#CONFIGTUNING-CONFIGFILES](http://www.freebsd.org/doc/ja_JP.eucJP/books/handbook/book.html#CONFIGTUNING-CONFIGFILES) newsyslogの設定サンプル man newsyslog.confを見ればだいたい分かる。以降、英文はここからの引用。 [http://www.freebsd.org/cgi/man.cgi?query=newsyslog.conf\u0026amp;apropos=0\u0026amp;sektion=0\u0026amp;manpath=FreeBSD+9.0-RELEASE\u0026amp;arch=default\u0026amp;format=html](http://www.freebsd.org/cgi/man.cgi?query=newsyslog.conf\u0026amp;#038;apropos=0\u0026amp;#038;sektion=0\u0026amp;#038;manpath=FreeBSD+9.0-RELEASE\u0026amp;#038;arch=default\u0026amp;#038;format=html) 以下の順番で並べるだけ。間はスペースで埋めること（separated with whitespace）。  # filename \u0026amp;#91;owner:group] mode count size when \u0026amp;#91;ZB] \u0026amp;#91;/pid_file] \u0026amp;#91;sig_num] 以下、サンプル。  /var/log/local7.log 600 10 1024 * JC /var/log/local7.logが、1MBytesを超えた時点でローテーション。 生成されたログのパーミッションは600で、bzip2で圧縮され（J）、10個保存される。  /var/log/httpd-access.log 644 7 * @T03 JC apacheのログを毎日午前3時にローテーション、圧縮して7日分残す。 設定を変えたらnewsyslogdを再起動。  # /etc/rc.d/newsyslog restart Creating and/or trimming log files. # 設定について filename その名の通り。 [owner:group] 省略可。アーカイブ後ファイルの所有ユーザとグループ mode ログファイルとアーカイブ後ファイルのパーミッション。 サーバソフトが作るオリジナルのパーミッションと合わせておくのがよい。 というのも、newsyslogdがログをローテーションするときに新しいログファイルを作るから。 owner:groupにはなく、こちらにだけ「ログファイル」という記載があるのはなぜでしょうな。 count 残す「アーカイブ後の」ログファイル数。 3なら、アーカイブされたログが3つになる。 size このサイズを超えたときにローテーションされる。 キロバイトで指定。 アスタリスク(*)の場合には、サイズベースでのローテーションはしない。 when ローテーションする時間、時刻契機を指定。 インターバル、時刻を指定できる。 書式は二つ。後述する。 注意すべき点は、newsyslog自体が一時間に一回しか起動しないこと。 これはつまり以下のような動作となる、と理解した。 ・仮に、newsyslogdが毎時0分に起動し、かつ ・毎時1分にローテーションする設定にした場合、 →例えば、1時1分ではなく、2時にローテーションが発生する。 newsyslog.conf(5)より抜粋   If a time is specified, the log file will only be trimmed if newsyslog(8) is run within one hour of the specified time. If an interval is specified, the log file will be trimmed if that many hours have passed since the last rotation.  　書式   @で書くもの、$で書くものの二つ。 @は、[cc]yy]mm]dd][T[hh[mm[ss\u0026lt;a class=\u0026quot;keyword\u0026quot; href=\u0026quot;http://d.hatena.ne.jp/keyword/%5B%5B%5Bcc%5Dyy%5Dmm%5Ddd%5D%5BT%5Bhh%5Bmm%5Bss?mode=edit\u0026quot; rel=\u0026quot;nofollow\u0026quot;\u0026gt;?\u0026lt;/a\u0026gt;] $は、[Dhh], [Ww[Dhhと[Mdd[Dhh サンプルを見るのが一番よい。（これもmanから抜粋） $D0　毎日午前0時。@T00と同じ意味 $D23　毎日23時。@T23と同じ意味 $W0D23　毎週日曜23時 $W5D16　毎週金曜16時 $M1D0　毎月1日の午前0時。@01T00と同じ意味 $M5D6　毎月5日の午前6時。@05T06と同じ意味  flags 一部のみ。基本JCでよい。 J ログをbzip2で圧縮。Zならgzip。Xならxz。 C ログが存在しない場合に作る。 G パターンにマッチしたログファイルを対象にできる。 pid_file 通常、ログをローテーションした後はsyslogdにシグナルが送られる。 syslogd以外のプロセスにシグナルを送りたい場合には、プロセスの pidが書かれたファイルをここで指定する。 以上  ","permalink":"https://nobwak.github.io/posts/2012-03-12-_var_log%E3%81%AE%E4%B8%8B%E3%81%8C%E3%81%88%E3%82%89%E3%81%84%E3%81%93%E3%81%A8%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%84%E3%81%9F%E3%81%A7%E3%81%94%E3%81%96%E3%82%8B%E3%81%82%E3%82%8B%E3%81%84%E3%81%AFfreebsd%E3%81%A7%E3%83%AD%E3%82%B0%E3%81%AE%E3%83%AD%E3%83%BC%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E8%A8%AD%E5%AE%9A%E3%82%92%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AFlogrotate%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%8Fnewsyslog/","summary":"ある日、ふと/var/logの下を見てみたら、1.5GBytesに膨れ上がった某ログファイルがあって腰を抜かした件について。 思えば、サーバソ","title":"/var/logの下がえらいことになっていたでござる。（あるいはFreeBSDでログのローテーション設定をするには(logrotateではなくnewsyslog))。"},{"content":"試しにZFSを使ってみて（VMware Playerで気軽に試せるようになったとは、なんと便利な世の中か）本当に驚いた。 ディスク繋いでzpoolコマンド一発ですぐ使える。パーティションに頭を悩ませる必要もない。RAIDだって楽勝。ディレクトリごとに圧縮することもできるし、気が変わったら、いつでも止めることもできる。スナップショットも早い。 実は、何年か前にZFSについて調べたときはまだまだバギーな印象だったのと、ZFSを使えるようなパワフルマシンがなく保留にしてたんだけど、すごく損した気分。 いままで幾たび、fdiskやnewfs失敗してひどい目にあったことか。電子の海に消えたデータを思う。 そしてRAID。ソフトRAIDで言えばlvmも有名だが、俺にはもうコマンドが複雑すぎて覚えられない（lv...が論理ボリュームを、pv...が物理ボリュームを扱うんだって？）。 これはすごく危険。 だってソフトRAID含め、こういったディスクを扱うコマンドを使うのは、初期設定と、問題の発生したとき。 俺みたいなオッチョコチョイが、問題が発生して焦っているときに、コマンドが複雑だと二次災害を引き起こすんだって。 …正直に言うと実際に引き起こした。 ZFSならとにかくzpool、zfsさえ覚えておけばいいのだ。  宅鯖ではZFSを使いたいからFreeBSDを選んだ。 そして、いろいろwebを渉猟するにi386でZFSは辛そうなのでamd64とし、下記の通りzpoolのバージョンもどーんと上がっているので, 9.0-RELEASEを入れた。メジャーバージョンの最初はちょっと不安ではあるけれど。   ZFSのバージョン 8.2+ - zpool v15 9.0+ - zpool v28  あとは、特に難しいこともなく、2.5Tのディスク1本買ってきて、つないで、領域作って、こんな感じ。 作業ログは後述。  $ sudo zpool status パスワード: pool: vault state: ONLINE scan: none requested config: NAME STATE READ WRITE CKSUM vault ONLINE 0 0 0 ada1 ONLINE 0 0 0 errors: No known data errors $ zpool list NAME SIZE ALLOC FREE CAP DEDUP HEALTH ALTROOT vault 2.27T 1007G 1.28T 43% 1.00x ONLINE - ディスク1本なので、RAIDも組まず、圧縮もせず（データがjpg写真とか自炊本、自炊DVD、CDとか圧縮の効かないものばかりだから）。 あんなに煽っておいてアレだが、だってまだディスク高いし・・。  ただまあ、ここを見てチューニングだけはしておいた。 [http://wiki.freebsd.org/ZFSTuningGuide](http://wiki.freebsd.org/ZFSTuningGuide) /boot/loader.confにおけるチューニング  vfs.zfs.prefetch_disable=\u0026#34;1\u0026#34; vfs.zfs.txg.timeout=\u0026#34;5\u0026#34; 1行目 ZFSのprefetchを無効にすると全体的にスピードが向上する。 ただし読み書きが頻繁に発生する状態だとシステムが遅くなる傾向あり。 なお、4GB以上のメモリが実装されているとデフォルトで0になるとのこと。 2行目 txgが何の意味か分からないけど（task queue?）、こうしておくとスループットが上がる上に、システムが極端に遅くなる問題が改善される。 （In my case 50-100% CPU is used by ZFS with *no* disk activity during the pauses then a burst of rapid disk activity and then another pause. なんて言ってる） なお、これはZFS v28からはデフォルト。  kern.maxvnodes=250000 vfs.zfs.write_limit_override=131072 1行目でvnodes数の上限をデフォルトの約200000（a little over 200,000）から増やす。 2行目でTXG write limitの値を減らす。デフォルト値は知らん。 4GBメモリなら256MB、と書いてあるので、2GBを積んでる俺は128MBにした。 なお、ZFS v28より前ではvfs.zfs.txg.write_limit_overrideとのこと。  /etc/periodic/daily/404.status-zfsにスクリプトがある。 有効にすると、毎日zpoolの状態をしらべて、daily output, security outputでメールしてくれる。 そうそう、[root宛のメールは転送設定](http://d.hatena.ne.jp/flageo/20120305/p2)しておくと便利。  $ sudo /etc/periodic/daily/404.status-zfs Checking status of zfs pools: all pools are healthy /etc/periodic.confに以下を追記しておけばOK  daily_status_zfs_enable=\u0026#34;YES\u0026#34; 以下は作業ログ  ディスクをつないで起動、dmesgで確認  $ dmesg|grep ada ada0 at ahcich0 bus 0 scbus0 target 0 lun 0 ada0: \u0026lt;VB0250EAVER HPG7\u0026gt; ATA-8 SATA 2.x device ada0: 300.000MB/s transfers (SATA 2.x, UDMA5, PIO 8192bytes) ada0: Command Queueing enabled ada0: 238475MB (488397168 512 byte sectors: 16H 63S/T 16383C) ada0: Previously was known as ad4 ada1 at ahcich1 bus 0 scbus1 target 0 lun 0 ada1: \u0026lt;WDC WD25EZRX-00MMMB0 80.00A80\u0026gt; ATA-8 SATA 3.x device ada1: 300.000MB/s transfers (SATA 2.x, UDMA6, PIO 8192bytes) ada1: Command Queueing enabled ada1: 2384658MB (4883781168 512 byte sectors: 16H 63S/T 16383C) ada1: Previously was known as ad6 ada1が新しく繋いだディスク。 ここにZFS用のpoolを作成する。  $ sudo zpool create vault ada1 Password: $ mount /dev/ada0p2 on / (ufs, local, journaled soft-updates) devfs on /dev (devfs, local, multilabel) vault on /vault (zfs, local, nfsv4acls) $ df -h Filesystem Size Used Avail Capacity Mounted on /dev/ada0p2 228G 15G 194G 7% / devfs 1.0k 1.0k 0B 100% /dev vault 2.2T 31k 2.2T 0% /vault 無事完成。 なんと勝手にマウントまでしてくれる。これですぐ使える。 2.5Tなのに数秒程度で完了。 ビクビクしながらfdiskしたりnewfsしたりする必要がない。電卓も要らない（そういう時代もあったのです）。 衝撃的です。 コマンドが簡単なうえに、早いというのは、重ねて言うけど障害復旧に極めて有利な点。 大きなディスクをnewfsするときの、遅々として進まないカウンタを見てジリジリしたことのある人なら共感してくれるはず。 なお、この状態では/etc/fstabに何も書き込まれていないので、再起動すればマウントは外れる。 ではこのpoolからディレクトリを切り出す。 itunes用と、通常の共有ディレクトリ用の二つを作る。  $ sudo zfs create vault/itunes $ sudo zfs create vault/chamber $ mount /dev/ada0p2 on / (ufs, local, journaled soft-updates) devfs on /dev (devfs, local, multilabel) vault on /vault (zfs, local, nfsv4acls) vault/itunes on /vault/itunes (zfs, local, nfsv4acls) vault/chamber on /vault/chamber (zfs, local, nfsv4acls) $ df -h Filesystem Size Used Avail Capacity Mounted on /dev/ada0p2 228G 15G 194G 7% / devfs 1.0k 1.0k 0B 100% /dev vault 2.2T 32k 2.2T 0% /vault vault/itunes 2.2T 31k 2.2T 0% /vault/itunes vault/chamber 2.2T 31k 2.2T 0% /vault/chamber これらを/export配下に移動させる。 これが既存の考えにはない動作。頭の中でファイルシステムに対する考え方がグニョっとなるのを俺は感じたよ。  $ sudo zfs set mountpoint=/export/itunes vault/itunes $ sudo zfs set mountpoint=/export/chamber vault/chamber $ mount /dev/ada0p2 on / (ufs, local, journaled soft-updates) devfs on /dev (devfs, local, multilabel) vault on /vault (zfs, local, nfsv4acls) vault/itunes on /export/itunes (zfs, local, nfsv4acls) vault/chamber on /export/chamber (zfs, local, nfsv4acls) そしたら/etc/fstabに書き込んでおしまい。 昔はデバイス名を書き込んでいた場所にZFSのディスクプールを書くわけですな。  vault/itunes /export/itunes zfs rw 0 0 vault/chamber /export/chamber zfs rw 0 0 afpでファイルをコピーしているのだが、あまり負荷はかかっていない模様。 ZFSはリソース食いと聞いてたのでコワゴワコピーしたんだけど、まあ100Mbpsのネットワーク越しですしな。  last pid: 1773; load averages: 0.11, 0.21, 0.17 up 0+00:45:03 23:54:03 42 processes: 1 running, 41 sleeping CPU: 0.2% user, 0.0% nice, 15.0% system, 0.4% interrupt, 84.4% idle Mem: 46M Active, 189M Inact, 1426M Wired, 64M Cache, 200M Buf, 119M Free Swap: 907M Total, 556K Used, 906M Free PID USERNAME THR PRI NICE SIZE RES STATE C TIME WCPU COMMAND 1697 root 1 31 0 55860K 4288K select 1 3:55 16.36% afpd そのほか 重大な作業をするときは必ず-nオプションを付けること。 ドライランと呼ばれるもので、実際の作業はせずに結果をシミュレートできる。 ストレージプールを作業するときには明示的にexportすること。 exportすれば、未書き込みのデータがすべて処理され、システムから削除される。 そこで引数なしでimportを実行すると、import可能な、言い換えるとexport済みのプールが表示される。  ","permalink":"https://nobwak.github.io/posts/2012-03-10-zfs%E5%84%AA%E3%81%97%E3%81%99%E3%81%8E%E6%B6%99%E3%81%8C%E3%81%A7%E3%81%9F/","summary":"試しにZFSを使ってみて（VMware Playerで気軽に試せるようになったとは、なんと便利な世の中か）本当に驚いた。 ディスク繋いでzpoo","title":"ZFS優しすぎ涙がでた。"},{"content":"AFP(Apple Filing Protocol)。 Macのファイル共有はOSXからSMB/CIFSになったと勝手に思いこんでたから驚いた。AppleTalkが今に生きてるとは。 ただ、AFPは下位レイヤにAppletalkじゃなくTCPを使うことができるそうなので納得。 追記:コメントで教えていただきましたが、さいきんAppletalkは死んでしもうたそうです。R.I.P. UNIX系でAppleTalk互換ソフトウェアといえばNetatalk。 Macでファイル共有するなら正直SMB/CIFSでいいかなとも思ったが、どうもNetatalkの方が軽いと聞いたので、試しに使ってみる。 iTunesのライブラリも置いてみたいのだ。 netatalkには、AFPデーモンのafpd、CNID管理のcnid_metad、appletalkを動かすatalkd、リモートプリントサービスのpapd、Mac向けタイムサーバのtimelordが含まれる。 AFP over TCPで要るのは、afpd, cnid_metadと理解した。 Macのファイル共有で面白いのは各ファイル、フォルダに固有のIDを付けて管理するという点。パスを使わないのだ。これは大昔からaliasという考え方があったせいか。 そして、ホストのファイル、ディレクトリとID（CNID, Catalog Node ID）のくくりつけを管理するのがcnd_metadということらしい。（metaという名前だけに、DBは別にあるのだが） net/netatalkからインストール  # cd /usr/ports/net/netatalk # make config Apple Talkを外す。 # make install clean 苦難の設定 すごく大変だった。 なんかマニュアルがすごく分かりにくく感じる。 共有フォルダ設定はAppleVolumes.defaultを使い、それ以外はnetatalk.conf, afpd.confを使うようだ。 以下を見ながら試行錯誤。 [http://netatalk.sourceforge.net/2.2/htmldocs/configuration.html#id1590298](http://netatalk.sourceforge.net/2.2/htmldocs/configuration.html#id1590298) /usr/local/etc/netatalk.confで全般の設定。 変えたのは以下の二点。  #### machine\u0026amp;#39;s AFPserver/AppleTalk name. ATALK_NAME=sylph_osx #### Set which daemons to run. #### If you use AFP file server, run both cnid_metad and afpd. CNID_METAD_RUN=yes AFPD_RUN=yes /usr/local/etc/afpd.conf 変更なし。 /usr/local/etc/AppleVolumes.default ここで共有フォルダの設定。下記において最初の二行はデフォルト。 最後の一行のみ追加した。 ~はホームディレクトリだな。  :DEFAULT: options:upriv,usedots ~ /export/itunes itunes なお、以下にオプションが山ほど。 [http://netatalk.sourceforge.net/2.2/htmldocs/AppleVolumes.default.5.html](http://netatalk.sourceforge.net/2.2/htmldocs/AppleVolumes.default.5.html) 書式は以下の通り。 \u0026lt;共有フォルダ実パス\u0026gt; \u0026lt;外部への共有フォルダ名\u0026gt; [\u0026lt;オプション\u0026gt;] オプションでめぼしいものは以下の二つくらいかな。  tm OSXのタイムマシンサポートを有効に。 ro 読み取り専用 複数指定する場合にはたとえば（実際にはtmとroを一緒に使うことはないが）以下のようにカンマ(,)でつなぐ。  /dir/path share options:tm,ro そうしたら、/etc/rc.confに以下を追加する。 netatalkを動かすにはavahi_daemonが必要で、avahiを動かすにはdbusが必要だからこんな感じ。 なお運用中に設定を変更した場合にはこれらサービスをすべて再起動したほうがいいようだ。  #AFP dbus_enable=\u0026amp;#34;YES\u0026amp;#34; avahi_daemon_enable=\u0026amp;#34;YES\u0026amp;#34; avahi_dnsconfd_enable=\u0026amp;#34;YES\u0026amp;#34; netatalk_enable=\u0026amp;#34;YES\u0026amp;#34; cnid_metad_enable=\u0026amp;#34;YES\u0026amp;#34; afpd_enable=\u0026amp;#34;YES\u0026amp;#34; で、再起動するか、/usr/local/etc/rc.dで上から順番に起動させればOK。 FreeBSDのnetatalk関連の起動スクリプトは、startさせても何のメッセージも出ないのが不親切だと思う。 macからはafp://\u0026lt;ホスト\u0026gt;の書式でアクセスできる。 運用。安定していないのか? 320GBほどのデータをAFP経由でコピーしたのだが、以下のメッセージが表示されてなかなか終わらない。 何が悪いのだろう?  Mar 6 06:35:22 isis afpd\u0026amp;#91;3237]: afp_disconnect: trying primary reconnect Mar 6 06:35:22 isis afpd\u0026amp;#91;1695]: Reconnect: transfering session to child\u0026amp;#91;1697] Mar 6 06:35:22 isis afpd\u0026amp;#91;1695]: Reconnect: killing new session child\u0026amp;#91;3237] after transfer Mar 6 06:35:22 isis afpd\u0026amp;#91;1697]: afp_dsi_transfer_session: succesfull primary reconnect Mar 6 06:35:29 isis afpd\u0026amp;#91;3237]: afp_disconnect: primary reconnect succeeded Mar 6 06:38:18 isis afpd\u0026amp;#91;1697]: read: Operation timed out Mar 6 06:38:18 isis afpd\u0026amp;#91;1697]: dsi_stream_read: len:-1, Operation timed out Mar 6 06:38:18 isis afpd\u0026amp;#91;1697]: dsi_stream_send: Broken pipe Mar 6 06:38:18 isis afpd\u0026amp;#91;1697]: dsi_wrtreply: Broken pipe Mar 6 06:38:18 isis afpd\u0026amp;#91;1697]: dsi_disconnect: entering disconnected state Mar 6 06:38:18 isis afpd\u0026amp;#91;1697]: dsi_disconnect: entering disconnected state ","permalink":"https://nobwak.github.io/posts/2012-03-06-freebsd%E3%81%ABmac%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%85%B1%E6%9C%89%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%ABafp%E3%82%92%E5%96%8B%E3%82%89%E3%81%99%E8%BF%BD%E8%A8%98%E3%81%82%E3%82%8A/","summary":"AFP(Apple Filing Protocol)。 Macのファイル共有はOSXからSMB/CIFSになったと勝手に思いこんでたから驚いた。AppleTalkが今に生き","title":"FreeBSDにMacのファイル共有プロトコルAFPを喋らす。（追記あり）"},{"content":"","permalink":"https://nobwak.github.io/posts/2012-03-05-freebsd_root%E5%AE%9B%E3%81%AE%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%92gmail%E3%81%AB%E8%BB%A2%E9%80%81/","summary":"","title":"FreeBSD root宛のメールをgmailに転送"},{"content":"ssmtpとは。 Extremely simple MTA to get mail off the system to a mail hub なんかね、20年近く前までは、sendmailの設定できるってだけで高給取りだったそうなんですよ。 だからqmailとかpostfixとか生まれたらしいんですがね、もうそんな設定の難しいソフトウェアはベースシステムから取っ払ってほしいんですよ。 で、ssmtpなら設定は簡単だし、gmailがsmtp開放してるってんで、まあ入れてみた。 root宛にメールを送れば、自分のスマホにメールが届くというのは便利杉で驚いた次第。 事前準備: sendmailよRIP まずsendmailを止める。  # /etc/rc.d/sendmail stop sendmailが次回以降も起動しないように/etc/rc.confに以下を追記。 君にはお世話になった。  #vi /etc/rc.conf (以下を追記) sendmail_enable=\u0026#34;NO\u0026#34; sendmail_submit_enable=\u0026#34;NO\u0026#34; sendmail_outbound_enable=\u0026#34;NO\u0026#34; sendmail_msp_queue_enable=\u0026#34;NO\u0026#34; ssmtpをインストール  # cd /usr/ports/mail/ssmtp # make install clean # make replace 最後のreplaceは/etc/mail/mailer.confを修正して、sendmailをssmtpに置き換えてくれる。 sendmailは他のたくさんのプログラムがアクセスするからね。 /etc/mail/mailer.confを見ると、何が変わったかがわかる。  make replace後の/etc/mail/mailer.confの内容 #sendmail /usr/libexec/sendmail/sendmail #send-mail /usr/libexec/sendmail/sendmail #mailq /usr/libexec/sendmail/sendmail #newaliases /usr/libexec/sendmail/sendmail #hoststat /usr/libexec/sendmail/sendmail #purgestat /usr/libexec/sendmail/sendmail sendmail /usr/local/sbin/ssmtp send-mail /usr/local/sbin/ssmtp mailq /usr/local/sbin/ssmtp newaliases /usr/local/sbin/ssmtp hoststat /usr/bin/true purgestat /usr/bin/true 補足。pkgからインストールした場合には、もちろんmake replaceが使えない。その場合には面倒でも手動で書き換える。書き換え個所は上記の通りで問題ないはずだが、心配なら以下から最新のMakefileを見れば分かる。https://svnweb.freebsd.org/ports/head/mail/ssmtp/Makefile?view=logここの最新版をViewして「replace」を見ればよい。例。\n55 replace: 56 @${REINPLACE_CMD} -e \u0026#39;s,^[^#],#\u0026amp;,g\u0026#39; ${MAILERCONF} 57 @${ECHO_CMD} \u0026#34;sendmail ${PREFIX}/sbin/ssmtp\u0026#34; \u0026gt;\u0026gt; ${MAILERCONF} 58 @${ECHO_CMD} \u0026#34;send-mail ${PREFIX}/sbin/ssmtp\u0026#34; \u0026gt;\u0026gt; ${MAILERCONF} 59 @${ECHO_CMD} \u0026#34;mailq ${PREFIX}/sbin/ssmtp\u0026#34; \u0026gt;\u0026gt; ${MAILERCONF} 60 @${ECHO_CMD} \u0026#34;newaliases ${PREFIX}/sbin/ssmtp\u0026#34; \u0026gt;\u0026gt; ${MAILERCONF} 61 @${ECHO_CMD} \u0026#34;hoststat /usr/bin/true\u0026#34; \u0026gt;\u0026gt; ${MAILERCONF} 62 @${ECHO_CMD} \u0026#34;purgestat /usr/bin/true\u0026#34; \u0026gt;\u0026gt; ${MAILERCONF} ssmtpの設定 ここでroot宛のメールをgmailに転送する設定をする。 /usr/local/etc/ssmtp/ssmtp.confを作成  root=youremail@gmail.com mailhub=smtp.gmail.com:587 AuthUser=youremail@gmail.com AuthPass=yourpassword UseSTARTTLS=YES 実験  $ mail -v root Subject: \u0026lt;件名を入れる\u0026gt; 適当な本文 (Ctrl+Dを押す) これでOK。  ","permalink":"https://nobwak.github.io/posts/2012-03-05-ssmtp%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6root%E5%AE%9B%E3%81%AE%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%92gmail%E3%81%AB%E8%BB%A2%E9%80%81%E3%81%97%E3%81%9F%E3%82%89%E4%BE%BF%E5%88%A9%E6%9D%89%E3%83%AF%E3%83%AD%E3%82%BF/","summary":"ssmtpとは。 Extremely simple MTA to get mail off the system to a mail hub なんかね、20年近く前までは、sendmailの設定できるってだけで高給取りだったそうなんですよ。","title":"ssmtpを使ってroot宛のメールをgmailに転送したら便利杉ワロタ。"},{"content":"自宅サーバのsendmailは正直不要です。と思うことはしばしば。 てっとり早く結論を言えば、以下を/etc/rc.confに追記すればよい。なお、「sendmail_enable = \u0026quot;NONE\u0026quot;」はもう使われていないので注意。詳細は後述。 /etc/rc.confへの追記  sendmail_enable=\u0026amp;#34;NO\u0026amp;#34; sendmail_submit_enable=\u0026amp;#34;NO\u0026amp;#34; sendmail_outbound_enable=\u0026amp;#34;NO\u0026amp;#34; sendmail_msp_queue_enable=\u0026amp;#34;NO\u0026amp;#34; しかし、[handbook 29.4.2 Disable sendmail](http://www.freebsd.org/doc/handbook/mail-changingmta.html#MAIL-DISABLE-SENDMAIL) に記載の通り、以下の懸念がある(2012/3/1)。   Warning: もしこの方法で sendmail のメール送信機能を無効にしたのなら、 完全に動作する代替メール配送システムと置き換えることが重要です。 さもなければ、periodic(8) などのシステム機能は、 それらの結果を通常想定しているようにメールで配送することができなくなるでしょう。 システムの多くの部分が sendmail 互換のシステムがあることを想定しているかもしれません。 もしそれらを無効にした後に、 アプリケーションがメールを送ろうとするために sendmail のバイナリを使用し続ければ、 メールは使われていない sendmail のキューに入り、そして決して配送されないでしょう。  つまりroot等に送られるreportがsendmailのキューにたまり続ける。 （なお、日本語版handbookはどうしても古くなりがちなので、原版も確認すること!） FreeBSDのベースシステムが送るメールなら、periodicあたりを修正すればよいだろうが、portsなどからインストールするソフトウェアのことも考えるときりがない。 sendmailを動かしたくない目的にもよるが、現実的なところでは外部からのsmtp接続を無効にするだけでいいだろう。 こうした場合の別の懸念としては、意図せずに自サーバが外部へのsmtp接続を試みること、さらに言えば、おかしなメールをバラ撒こうとすることだ。 が、仮に外部へのsmtp接続を無効にしたくとも、rc.confの設定だけではできないようだ。これについては改めて考える。 外部からのsmtp接続を受け付けない場合には、/etc/rc.confに下記を追加すればよく、かつ少なくとも9.0、8.2ではデフォルト設定だ。 /etc/rc.confでの外部からのsmtp接続を受け付けない設定 以下のみを/etc/rc.confに追記  sendmail_enable=\u0026amp;#34;NO\u0026amp;#34; なお、上記はデフォルト  $ uname -v FreeBSD 8.2-RELEASE-p3 #0: Tue Sep 27 18:07:27 UTC 2011 root@i386-builder.daemonology.net:/usr/obj/usr/src/sys/GENERIC $ grep sendmail_enable /etc/defaults/rc.conf sendmail_enable=\u0026amp;#34;NO\u0026amp;#34; # Run the sendmail inbound daemon (YES/NO). 【参考】以下はもう使われていないので注意。  sendmail_enable = \u0026amp;#34;NONE\u0026amp;#34; man rc.sendmailより  sendmail_enable （中略） The ``NONE\u0026amp;#39;\u0026amp;#39; option is deprecated and should not be used. It will be removed in a future release. さらにkwsk FreeBSDにおけるsendmail起動の設定は、以下の変数にYES/NOを代入することで行う。 使い方はrc.sendmail(8)に記載されている。  sendmail_enable= sendmail_submit_enable= sendmail_outbound_enable= sendmail_msp_queue_enable= これらは最初の3つと1つに分かれる。 最初の3つはセットになっており、一つ目がYESの場合は残り二つが参照されない。 一つ目がNOで、二つ目がYESの場合は最後の一つが参照されない。 したがって、3パターンの設定ができることになり、各パターンについて調べた結果は以下の通り。 ・パターン1: デフォルト 外部からのsmtp接続を受け付けない。 内部からのsmtp接続は受け付け、外部への送信は可能。  sendmail_enable=\u0026amp;#34;NO\u0026amp;#34; sendmail_submit_enable=\u0026amp;#34;YES\u0026amp;#34; sendmail_outbound_enable=\u0026amp;#34;YES\u0026amp;#34; ・パターン2: 外部、内部ともにsmtp接続を受け付けない。 つまりroot等に送られるreportも届かなくなる。 ただちょっと分からないのは、「\u0026quot;local mail queue management\u0026quot;を提供する」とmanには記載されているのだが、外部、内部ともにsmtp接続を受け付けない状態でのlocal mail queueとはいったいなんだろうか。一応、この状態ではroot権限でsendmailが「Queue runner」として起動する。  sendmail_enable=\u0026amp;#34;NO\u0026amp;#34; sendmail_submit_enable=\u0026amp;#34;NO\u0026amp;#34; sendmail_outbound_enable=\u0026amp;#34;YES\u0026amp;#34; パターン3: この状態ではroot権限のsendmailは一切起動しない。  sendmail_enable=\u0026amp;#34;NO\u0026amp;#34; sendmail_submit_enable=\u0026amp;#34;NO\u0026amp;#34; sendmail_outbound_enable=\u0026amp;#34;NO\u0026amp;#34; 上記を別の形で表現すれば以下の通り。（rc.sendmail(8)より引用）  # MTA if (${sendmail_enable} == NONE) # Do nothing else if (${sendmail_enable} == YES) start sendmail with ${sendmail_flags} else if (${sendmail_submit_enable} == YES) start sendmail with ${sendmail_submit_flags} else if (${sendmail_outbound_enable} == YES) start sendmail with ${sendmail_outbound_flags} endif # MSP Queue Runner if (${sendmail_enable} != NONE \u0026amp;\u0026amp; \u0026amp;#91; -r /etc/mail/submit.cf] \u0026amp;\u0026amp; ${sendmail_msp_queue_enable} == YES) start sendmail with ${sendmail_msp_queue_flags} endif なお、sendmail_msp_queue_enableは、smmsp権限で動くQueue runnerの動作スイッチ。 NOを指定すれば起動しない。  ","permalink":"https://nobwak.github.io/posts/2012-03-04-freebsd%E3%81%AEsendmail%E3%82%92%E9%BB%99%E3%82%89%E3%81%9B%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"自宅サーバのsendmailは正直不要です。と思うことはしばしば。 てっとり早く結論を言えば、以下を/etc/rc.confに追記すればよい。","title":"FreeBSDのsendmailを黙らせるには"},{"content":"おなごもすなるMovableTypeを。 まず注意。 Xの入っていないサーバにインストールするときには、あらかじめImageMagick-nox11-6.7.4.4_1 を入れておく! インストール 下記からインストール ただ、ImageMagickに依存しているので、何も考えずにインストールするとX関連のportsをたくさん呼び寄せて大変なことになる。 あらかじめImageMagick-nox11をインストールしておくとよいでしょう。 （/etc/make.confにWITHOUT_X11=yes という手もあるが）  # cd /usr/ports/japanese/MT # make config # make install clean make configでUSE_APACHEをチェックしておくと、apacheの設定ディレクトリに必要なファイルを入れてくれるので便利。 （/usr/local/etc/apache22/Includes） また、デフォルトだとバックエンドのDBにsqliteを使ってくれるのは、個人用との場合には嬉しいですな。 MovableTypeの設定 apache22再起動  # /usr/local/etc/rc.d/apache22 restart 以下にアクセス。あとは画面手順に沿う。  http://\u0026amp;#60;サーバのアドレス\u0026gt;/MTcgi/mt-wizard.cgi スタティックウェブパス、スタティックファイルパスは、FreeBSDでportsから入れた場合だとそれぞれ/MT、/usr/local/www/data/mt-static。 具体的にはapacheの以下の設定で指定した場所。  \u0026amp;#60;IfModule alias_module\u0026gt; Alias /MT \u0026amp;#34;/usr/local/www/data/mt-static\u0026amp;#34; ScriptAlias /MTcgi \u0026amp;#34;/usr/local/www/cgi-bin/mt\u0026amp;#34; \u0026amp;#60;/IfModule\u0026gt; スタティックウェブパス: /MT スタティックファイルパス: /usr/local/www/data/mt-static 最初のウェブサイトを作る。movabletype専用ならサーバ直下でいいけど、そうでないなら適当なディレクトリを指定する。 それに合わせて、サーバ上にディレクトリを作る。忘れずに権限を変えておく。  # mkdir /usr/local/www/apache22/data/m # chown www:www /usr/local/www/apache22/data/m あとはまあ。movabletypeの指定に従う。  ","permalink":"https://nobwak.github.io/posts/2012-03-03-movabletype/","summary":"おなごもすなるMovableTypeを。 まず注意。 Xの入っていないサーバにインストールするときには、あらかじめImageMagick-nox","title":"MovableType"},{"content":"popサーバを構築する。 LAN内にゆるーく作るので、とにかく手軽に。 手軽にというのはたとえば、imapとか要らない。pop3でいい。ただネットワーク内をパスワードが平文で流れるのは勘弁。 わざわざMaildirにする必要もなく、mbox形式で結構。 FreeBSD handbook 29.2.4.1章を眺めて、dovecot2を選んだ。 [http://en.wikipedia.org/wiki/Dovecot_%28software%29](http://en.wikipedia.org/wiki/Dovecot_%28software%29) インストールと設定 インストールはportsで、mail/dovecot2から。設定はそのままで。 後述するが、make cleanしないこと! 設定ファイルは下記だが。  /usr/local/etc/dovecot READMEがポツリ。  Configuration files go to this directory. See example configuration files in /usr/local/share/doc/dovecot/example-config/ ということでまるごとコピー。  # cd /usr/local/share/doc/dovecot/example-config/ # cp ./dovecot.conf /usr/local/etc/dovecot/ # cp -R ./conf.d /usr/local/etc/dovecot/ 設定ファイルの書き換え。 受け付けるプロトコルの設定。dovecot.confにて。 pop3だけにした。  # Protocols we want to be serving. #protocols = imap pop3 lmtp protocols = pop3 メールボックスの場所 [http://wiki2.dovecot.org/MailLocation](http://wiki2.dovecot.org/MailLocation) のTypical settingsに沿う。 mboxで結構。  vi conf.d/10-mail.conf 以下を追加 #mail_location = mail_location = mbox:~/mail:INBOX=/var/mail/%u SSL設定 LAN内なので、オレオレ証明書で十分。 [http://wiki2.dovecot.org/SSL/DovecotConfiguration](http://wiki2.dovecot.org/SSL/DovecotConfiguration) [http://wiki2.dovecot.org/SSL/CertificateCreation](http://wiki2.dovecot.org/SSL/CertificateCreation) 上記を読むと、dovecot2にはオレオレ証明書を作ってくれるスクリプト、mkcert.shがついてくるそうな。 これは便利。 しかしこのスクリプトはインストールされない。make cleanしてはいけないというのはそのため。もちろん、あとからでも取り出せるけど。 ただ、デフォルトでは/etc/sslの下に証明書を書き込むようだ。 FreeBSDを使っているんだし、/usr/local/etc/sslの下にしたい。 では設定と作成。  conf.d/10-ssl.confにて。 # PEM encoded X.509 SSL/TLS certificate and private key. They\u0026amp;#39;re opened before # dropping root privileges, so keep the key file unreadable by anyone but # root. Included doc/mkcert.sh can be used to easily generate self-signed # certificate, just make sure to update the domains in dovecot-openssl.cnf #ssl_cert = \u0026amp;#60;/etc/ssl/certs/dovecot.pem #ssl_key = \u0026amp;#60;/etc/ssl/private/dovecot.pem ssl_cert = \u0026amp;#60;/usr/local/etc/ssl/certs/dovecot.pem ssl_key = \u0026amp;#60;/usr/local/etc/ssl/private/dovecot.pem pem作成。 再び、[http://wiki2.dovecot.org/SSL/CertificateCreation](http://wiki2.dovecot.org/SSL/CertificateCreation) Self-signed certificate creation Dovecot includes a script to build self-signed SSL certificates using OpenSSL. In the source distribution this exists in doc/mkcert.sh. Binary installations usually create the certificate automatically when installing Dovecot and don't include the script. 繰り返しになるが、doc/mkcert.shはインストールされない。 portsでdovecot2を作ったところに戻る。 make cleanしてしまった場合、portmaster等でインストールした場合には、慌てず/usr/ports/mail/dovecot2/で「make extract」すればOK。そして、  $ cd /usr/ports/mail/dovecot2/work/dovecot-2.0.16/doc/ ここでスクリプトを実行してもよいし、どこかにコピーしてもよい。 俺様は、なんだか別のことにも使えそうなので、ホームディレクトリにコピーしておいた。スクリプトはdovecot-openssl.cnfを参照するのでこれもコピー。  $ cp ./mkcert.sh ~/bin/ $ cp ./dovecot-openssl.cnf ~/bin/ 準備をして実行。以下はsh、あるいはbashでの例。  # mkdir /usr/local/etc/ssl\u0026lt;br /\u0026gt; # mkdir /usr/local/etc/ssl/private\u0026lt;br /\u0026gt; # mkdir /usr/local/etc/ssl/certs\u0026lt;br /\u0026gt; # SSLDIR=/usr/local/etc/ssl sh ./mkcert.sh\u0026lt;br /\u0026gt; Generating a 1024 bit RSA private key\u0026lt;br /\u0026gt; ..++++++\u0026lt;br /\u0026gt; ..............++++++\u0026lt;br /\u0026gt; writing new private key to \u0026amp;#39;/usr/local/etc/ssl/private/dovecot.pem\u0026amp;#39; ","permalink":"https://nobwak.github.io/posts/2012-03-02-pop%E3%82%B5%E3%83%BC%E3%83%90dovecot2%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"popサーバを構築する。 LAN内にゆるーく作るので、とにかく手軽に。 手軽にというのはたとえば、imapとか要らない。pop3でいい。ただネッ","title":"popサーバ、dovecot2のインストール"},{"content":"clamavはフリーのアンチウイルスソフトウェア 最近はOS Xとかでも有名ですな。 公式サイト [http://www.clamav.net/lang/en/](http://www.clamav.net/lang/en/) インストールはportsから。 概要 一部モジュールのみ以下にまとめます。  ・clamscan 単品で動くウイルススキャナ。 一回だけのスキャンに使用する。 遅い。 ・clamd ウイルススキャナデーモン 後述のclamdscanとセットで使う。 あるいはメールのスキャンなどに。 ・clamdscan clamdとセットで動くウイルススキャナ。 指定されたファイルのパスをclamdに教えると、clamdがスキャンしてくれる。 clamdは定義ファイルをメモリ展開しているのでclamscan（clam*d*scanじゃなく）よりもスキャンが断然速い。 ・freshclam 定義ファイルのダウンローダ。 オンデマンドで実行もできるし、常駐化させておいて定期的にダウンロードさせることもできる。 使い方: ウイルスデータベース更新 インストールすれば、すぐに使える。 まずは念のためウイルスデータベースを更新。freshclamを実行するだけ。  # freshclam ClamAV update process started at Wed Feb 29 14:22:04 2012 Reading CVD header (main.cvd): OK main.cvd is up to date (version: 54, sigs: 1044387, f-level: 60, builder: sven) Reading CVD header (daily.cvd): OK Downloading daily-14555.cdiff \u0026amp;#91;100%] daily.cld updated (version: 14555, sigs: 108764, f-level: 63, builder: guitar) Reading CVD header (bytecode.cvd): OK bytecode.cvd is up to date (version: 167, sigs: 40, f-level: 63, builder: edwin) Database updated (1153191 signatures) from database.clamav.net Clamd successfully notified about the update. 使い方: スキャン: clamscan あとはclamscanにファイル名を引数で渡せばよい。  $ clamscan \u0026amp;#60;file\u0026gt; $ clamscan -r \u0026amp;#60;dir\u0026gt; そのほか、よく使用するオプションとしては、  -i: 感染したファイルのみ表示 --move \u0026amp;#60;dirA\u0026gt; : 感染したファイルを\u0026amp;#60;dirA\u0026gt;に移動 --copy \u0026amp;#60;dirB\u0026gt; : 感染したファイルを\u0026amp;#60;dirB\u0026gt;に移動 -d \u0026amp;#91;\u0026amp;#60;file\u0026gt;|\u0026amp;#60;dir\u0026gt;] : デフォルトと異なる場所に置いたウイルスデータベースを指定。 -l \u0026amp;#60;logfile\u0026gt; : スキャンログを\u0026amp;#60;logfile\u0026gt;に書き出し。 -f \u0026amp;#60;filelist\u0026gt; : \u0026amp;#60;filelist\u0026gt;にリストされたファイルをスキャン clamscanとclamdscan 先述の通り、clamscanとclamdscanではスピードが違う。 実験をしてみるとその差は歴然。 というより、clamscanが遅すぎる。 定期的にスキャンするなら、絶対にclamdscanがよい。 注意点はあるが、それは後述。  $ clamscan ./messages ./lpd-errs ./messages: OK ./lpd-errs: OK ----------- SCAN SUMMARY ----------- （中略） Infected files: 0 Data scanned: 0.02 MB Data read: 0.01 MB (ratio 2.00:1) Time: 7.878 sec (0 m 7 s) $ clamdscan ./messages ./lpd-errs /var/log/./messages: OK /var/log/./lpd-errs: OK ----------- SCAN SUMMARY ----------- Infected files: 0 Time: 0.033 sec (0 m 0 s) 使い方:clamdscan 仕組みは以下の通りと理解している。 スキャンするときには、ファイルの場所をclamdscanに伝える。 clamdscanはdaemonとして常駐しているので、いちいちウイルスデータベースを読み込まなくてよい。 だから速い。 しかしNFSマウントしたファイルのスキャンなど、ファイルへのアクセス権限が特殊な場合に問題となるケースがあった。 clamdscan起動の準備をする。/etc/rc.confに以下を追加。 ついでにfreshclamもdaemonモードで起動するように。  #clamd clamav_clamd_enable=\u0026amp;#34;YES\u0026amp;#34; clamav_freshclam_enable=\u0026amp;#34;YES\u0026amp;#34; portsから入れたなら、clamd.conf、freshclam.confは特にデフォルトでよい。 起動させる。  # /usr/local/etc/rc.d/clamav-clamd start # /usr/local/etc/rc.d/clamav-freshclam start 以上。 以下は参考。 /usr/local/etc/freshclam.conf 影響しそうなところのみピックアップ ・ウイルスデータベース格納場所  # Path to the database directory. # WARNING: It must match clamd.conf\u0026amp;#39;s directive! # Default: hardcoded (depends on installation options) DatabaseDirectory /var/db/clamav ・freshclamのログファイル場所  # Path to the log file (make sure it has proper permissions) # Default: disabled UpdateLogFile /var/log/clamav/freshclam.log ・定義ファイル更新を試みる頻度  # Number of database checks per day. # Default: 12 (every two hours) #Checks 24 ・プロキシ設定。これはありがたい。  # Proxy settings # Default: disabled #HTTPProxyServer myproxy.com #HTTPProxyPort 1234 #HTTPProxyUsername myusername #HTTPProxyPassword mypass ・データベース更新時にclamdに再読み込みさせる。  # Send the RELOAD command to clamd. # Default: no NotifyClamd /usr/local/etc/clamd.conf ・データベース更新が失敗したときに実行するコマンド 興味あるが今は保留  # Run command when database update process fails. # Default: disabled #OnErrorExecute command ・データベースが古い場合に実行するコマンド 興味あるが今は保留  # Run command when freshclam reports outdated version. # In the command string %v will be replaced by the new version number. # Default: disabled #OnOutdatedExecute command /usr/local/etc/clamd.conf 基本デフォルト。MaxScanSize、MaxFileSizeくらいか。  # Uncomment this option to enable logging. # LogFile must be writable for the user running daemon. # A full path is required. # Default: disabled LogFile /var/log/clamav/clamd.log # Maximum size of the log file. # Value of 0 disables the limit. # You may use \u0026amp;#39;M\u0026amp;#39; or \u0026amp;#39;m\u0026amp;#39; for megabytes (1M = 1m = 1048576 bytes) # and \u0026amp;#39;K\u0026amp;#39; or \u0026amp;#39;k\u0026amp;#39; for kilobytes (1K = 1k = 1024 bytes). To specify the size # in bytes just don\u0026amp;#39;t use modifiers. # Default: 1M #LogFileMaxSize 2M # Specify the type of syslog messages - please refer to \u0026amp;#39;man syslog\u0026amp;#39; # for facility names. # Default: LOG_LOCAL6 #LogFacility LOG_MAIL # Path to the database directory. # Default: hardcoded (depends on installation options) DatabaseDirectory /var/db/clamav # Don\u0026amp;#39;t scan files and directories matching regex # This directive can be used multiple times # Default: scan all #ExcludePath ^/proc/ #ExcludePath ^/sys/ # Maximum depth directories are scanned at. # Default: 15 #MaxDirectoryRecursion 20 # Follow directory symlinks. # Default: no #FollowDirectorySymlinks yes # Perform a database check. # Default: 600 (10 min) #SelfCheck 600 # Execute a command when virus is found. In the command string %v will # be replaced with the virus name. # Default: no #VirusEvent /usr/local/bin/send_sms 123456789 \u0026amp;#34;VIRUS ALERT: %v\u0026amp;#34; # Run as another user (clamd must be started by root for this option to work) # Default: don\u0026amp;#39;t drop privileges User clamav # PE stands for Portable Executable - it\u0026amp;#39;s an executable file format used # in all 32 and 64-bit versions of Windows operating systems. This option allows # ClamAV to perform a deeper analysis of executable files and it\u0026amp;#39;s also # required for decompression of popular executable packers such as UPX, FSG, # and Petite. If you turn off this option, the original files will still be # scanned, but without additional processing. # Default: yes #ScanPE yes # Executable and Linking Format is a standard format for UN*X executables. # This option allows you to control the scanning of ELF files. # If you turn off this option, the original files will still be scanned, but # without additional processing. # Default: yes #ScanELF yes ## Documents ## # This option enables scanning of OLE2 files, such as Microsoft Office # documents and .msi files. # If you turn off this option, the original files will still be scanned, but # without additional processing. # Default: yes #ScanOLE2 yes # With this option enabled OLE2 files with VBA macros, which were not # detected by signatures will be marked as \u0026amp;#34;Heuristics.OLE2.ContainsMacros\u0026amp;#34;. # Default: no #OLE2BlockMacros no # This option enables scanning within PDF files. # If you turn off this option, the original files will still be scanned, but # without decoding and additional processing. # Default: yes #ScanPDF yes ## ## Archives ## # ClamAV can scan within archives and compressed files. # If you turn off this option, the original files will still be scanned, but # without unpacking and additional processing. # Default: yes #ScanArchive yes # Mark encrypted archives as viruses (Encrypted.Zip, Encrypted.RAR). # Default: no #ArchiveBlockEncrypted no # This option sets the maximum amount of data to be scanned for each input file. # Archives and other containers are recursively extracted and scanned up to this # value. # Value of 0 disables the limit # Note: disabling this limit or setting it too high may result in severe damage # to the system. # Default: 100M #MaxScanSize 150M # Files larger than this limit won\u0026amp;#39;t be scanned. Affects the input file itself # as well as files contained inside it (when the input file is an archive, a # document or some other kind of container). # Value of 0 disables the limit. # Note: disabling this limit or setting it too high may result in severe damage # to the system. # Default: 25M #MaxFileSize 30M # Nested archives are scanned recursively, e.g. if a Zip archive contains a RAR # file, all files within it will also be scanned. This options specifies how # deeply the process should be continued. # Note: setting this limit too high may result in severe damage to the system. # Default: 16 #MaxRecursion 10 # Number of files to be scanned within an archive, a document, or any other # container file. # Value of 0 disables the limit. # Note: disabling this limit or setting it too high may result in severe damage # to the system. # Default: 10000 #MaxFiles 15000 ","permalink":"https://nobwak.github.io/posts/2012-03-01-clamavclamscan%E3%81%A8clamdscan%E3%81%AE%E9%81%95%E3%81%84%E3%81%A3%E3%81%A6%E3%81%AA%E3%82%93%E3%81%AA%E3%82%93%E3%81%A0%E3%82%88/","summary":"clamavはフリーのアンチウイルスソフトウェア 最近はOS Xとかでも有名ですな。 公式サイト [http://www.clamav.net/lang/en/](http://www.clamav.net/lang/en/) インストールはportsから。 概要 一部モジュール","title":"clamav: clamscanとclamdscanの違いってなんなんだよ"},{"content":"ImageMagickのconvertを使う。 Ubuntuには最初から入ってた。 FreeBSDの場合はports, packageでgraphics/ImageMagickを入れる。pkg_add -r ImageMagickでも/usr/ports/graphics/ImageMagickでmake install cleanでもお好きなように。 書式  convert allinone.pdf image_%04d.png 複数ページのpdfをimage_0001.png, image_0002.png...と変換してくれる。 %dは10進数を示し、%dの間の4は4桁を、0は桁を0埋めすることを示す。 元ネタはこちら。 [http://www.linux.com/archive/feature/113978](http://www.linux.com/archive/feature/113978)  ","permalink":"https://nobwak.github.io/posts/2010-05-17-%E8%A4%87%E6%95%B0%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AEpdf%E3%82%92jpegpng%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"ImageMagickのconvertを使う。 Ubuntuには最初から入ってた。 FreeBSDの場合はports, packageでgraph","title":"複数ページのpdfをjpeg,pngに変換するには。"},{"content":"portsをXorg 7.5に上げた。 この1,2ヶ月でいろんなportsが更新されており、下手に個別にバージョンアップすると面倒なことになりかねないので、いったんportsを全削除して再インストールする方法をとった。 pkg_info -Ea \u0026gt; portslist.txtとでもしてインストール済みのportsリストを作ったうえで、pkg_info -Ea|xargs -n1 pkg_delete -f として全削除。 注意すべきは、この状態ではhalとかのデーモンプロセスがまだ動いていること。 個別にkillするのは面倒なので、single modeに落とすか、いっそのこと再起動して、それから再インストールを始める。 さすがに時間はかかるものの、コケるportsもなく、まったく問題なく7.5へ移行できた。 拍子抜けして、2chの関連スレも覗いてみたが、誰も同じような感想で、むしろ寂しそうに見えた。 あ。xorg-server 1.8.0から、やっぱりHALは無くなるんだ…。  ","permalink":"https://nobwak.github.io/posts/2010-05-10-xorg7.5%E3%81%AF%E6%84%8F%E5%A4%96%E3%81%AB%E3%82%B9%E3%83%A0%E3%83%BC%E3%82%BA/","summary":"portsをXorg 7.5に上げた。 この1,2ヶ月でいろんなportsが更新されており、下手に個別にバージョンアップすると面倒なことになりか","title":"Xorg7.5は意外にスムーズ"},{"content":"Redhat Linuxのvi上で、改行コードをキーにして置換しようとおもったのだが。 もともとの改行は\\nとし、差し替える改行は^Mじゃないとダメくさい。 例えばこんな風に（改行の前にtestを入れる場合）。  :%s/\u0026amp;#92;\u0026amp;#92;n/test^M/g なんでだろ?  ","permalink":"https://nobwak.github.io/posts/2010-04-01-%E6%94%B9%E8%A1%8C%E3%82%B3%E3%83%BC%E3%83%89/","summary":"Redhat Linuxのvi上で、改行コードをキーにして置換しようとおもったのだが。 もともとの改行は\\nとし、差し替える改行は^Mじゃないとダメくさい","title":"改行コード"},{"content":"FreeBSDではXorg7.4への移行の際にHALがデフォルトでONになった。 このときにFreeBSD界では、マウスが動かねーとか何とか死屍累々で、血を吐きながら乗り越えてきた経緯がある。 そんな背景のもと、Ubuntuの10.04で追加される機能を見ていたところ、「HAL Removal」という一言があったので吹いた。 UbuntuはHALを止めちゃうのか!? よく見たらブート時間短縮のために、ブートプロセスからHALを削除したよ、ということだった。 [http://www.ubuntu.com/testing/lucid/beta1#HAL%20removal](http://www.ubuntu.com/testing/lucid/beta1#HAL%20removal)   HAL removal This beta sports full removal of HAL from the boot process, making Ubuntu faster to boot and faster to resume from suspend.  確かに、10.04では、ブートもシャットダウンもすっごく速い。びっくりするくらい速い。9.10でも速かったけど。 デーモンの起動、シャットダウンや、ファイルのsyncとか、どうしてるんだろう?  ","permalink":"https://nobwak.github.io/posts/2010-03-30-hal_removal/","summary":"FreeBSDではXorg7.4への移行の際にHALがデフォルトでONになった。 このときにFreeBSD界では、マウスが動かねーとか何とか死","title":"HAL Removal"},{"content":"perlのデフォルトバージョンが5.8から5.10に上がった。 /usr/ports/UPDATINGによれば2/5なんで、一ヶ月以上まえのことなんだが、perlと、perlに依存しているパッケージのリビルドが面倒でずっと放置していた。 さすがに今であればpackagesも揃ってきたはずなので、重い腰をあげて作業。 portsでなくpackagesで入れ替え。 portupgradeとほぼ同等の機能をもっているのに、シェルスクリプトで書かれているので単体でインストールできるpkg_replaceを使った。  $ sudo pkg_replace -P perl=/usr/ports/lang/perl5.10 ---\u0026gt; Replacing \u0026amp;#39;perl-5.8.9_3\u0026amp;#39; with \u0026amp;#39;perl-5.10.1\u0026amp;#39; ---\u0026gt; Fetching \u0026amp;#39;ftp://ftp1.jp.freebsd.org/pub/FreeBSD/ports/i386/packages-7.3-re lease/All/perl-5.10.1.tbz\u0026amp;#39; /usr/ports/packages/All/perl-5.10.1.tbz 100% of 13 MB 763 kBps 00m00s ---\u0026gt; Found a package of \u0026amp;#39;perl-5.10.1\u0026amp;#39;: /usr/ports/packages/All/perl-5.10.1.tbz ---\u0026gt; Backing up the old version （略） perlに依存しているものはすべて作り直せと書かれているが、必要なサービスは問題なく動いているようだったので、目についたものだけpkg_replace -Pで再インストールした。  ","permalink":"https://nobwak.github.io/posts/2010-03-26-perl%E3%82%925.8%E3%81%8B%E3%82%895.10%E3%81%B8/","summary":"perlのデフォルトバージョンが5.8から5.10に上がった。 /usr/ports/UPDATINGによれば2/5なんで、一ヶ月以上まえのこ","title":"perlを5.8から5.10へ。"},{"content":"Linuxでネットワークデバイスが意図しないリンク速度になったときの対処方法。 といっても、下記のサイトどおりに操作するだけ。 「ETHTOOLを使用して NIC を 100Mbps/full-dupex 固定に設定する方法を教えてください。」 [http://kbase.redhat.com/faq/docs/DOC-14838](http://kbase.redhat.com/faq/docs/DOC-14838) 具体的には、ethtoolというコマンドを使う。 Redhatのサイトから手順を以下に抜き出す。  　（1Gbps, 全二重、オートネゴシエーションオフの場合）  ETHTOOL_OPTS=\u0026amp;#34;speed 1000 duplex full autoneg off\u0026amp;#34; ethtoolに与えられるオプションは以下の通り。  speed の設定値 10 10Mbps 100 100Mbps 1000 1000Mbps duplex の設定値 half half-duplex full full-duplex autoneg の設定値 on Autonegotiation 有効 off Autonegotiation 無効 上記は/etc/sysconfig/network-scripts/ifcfg-eth0にethtool向けのコマンドを記載しておき、ネットワークを再起動する方法。 別にethtoolコマンドを叩いてもよいが、ネットワークが再起動されるのは同じなので、redhatの方法のほうがスマート。 注意点としては、ハードウェアによって、ethtoolからのコマンドを受け付けないケースがあること。 実際、俺の管理しているマシンだと、ethtoolからオートネゴシエーションをオフにできなかった。  ","permalink":"https://nobwak.github.io/posts/2010-03-25-%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AE%E3%83%AA%E3%83%B3%E3%82%AF%E9%80%9F%E5%BA%A6%E3%82%92%E5%A4%89%E3%81%88%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"Linuxでネットワークデバイスが意図しないリンク速度になったときの対処方法。 といっても、下記のサイトどおりに操作するだけ。 「ETHTOOL","title":"ネットワークのリンク速度を変えるには。"},{"content":"7.3-RELEASEのタグが打たれた。 Ken Smithたんのメールが出るまでは安心はできないのだが、freebsd-updateで7.3Rへのアップグレードはできるので、さっさとやってしまう。 RC2にしてあったので、あっという間に終わった。  ","permalink":"https://nobwak.github.io/posts/2010-03-23-7.3-released/","summary":"7.3-RELEASEのタグが打たれた。 Ken Smithたんのメールが出るまでは安心はできないのだが、freebsd-updateで7.3Rへの","title":"7.3-RELEASED."},{"content":"\u0026lt;div style=\u0026quot;margin-bottom:15px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya\u0026quot;\u0026gt;harukiyaさんの本棚\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;2010年02月\u0026lt;br /\u0026gt;アイテム数：19 \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4798100234\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;52\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51A8W7U0cSL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4798100234\u0026quot;\u0026gt;イノベーションのジレンマ―技術革新が巨大企業を滅ぼすとき (Harvard business school press)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;クレイトン・クリステンセン,玉田 俊平太\u0026lt;br /\u0026gt;02月01日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/5.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4000268678\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;52\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/4197ZFT8SCL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4000268678\u0026quot;\u0026gt;帝国 (〈1冊でわかる〉シリーズ)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;スティーブン・ハウ\u0026lt;br /\u0026gt;02月03日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/2.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4820717138\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;52\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51qiCnniYVL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4820717138\u0026quot;\u0026gt;「残業ゼロ」の仕事力\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;吉越 浩一郎\u0026lt;br /\u0026gt;02月05日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/4.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4396633289\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;51\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51UOR%2BJ0OPL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4396633289\u0026quot;\u0026gt;ほかならぬ人へ\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;白石一文\u0026lt;br /\u0026gt;02月12日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/3.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4906638015\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;51\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51JHD9GEK0L._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4906638015\u0026quot;\u0026gt;7つの習慣―成功には原則があった!\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;スティーブン・R. コヴィー,ジェームス スキナー\u0026lt;br /\u0026gt;02月08日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/5.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4534039239\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;52\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51S03KTKW9L._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4534039239\u0026quot;\u0026gt;革命社長\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;吉越 浩一郎\u0026lt;br /\u0026gt;02月11日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/3.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/402330431X\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;50\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/418n6-0YC9L._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/402330431X\u0026quot;\u0026gt;どの会社でも結果を出す CEO仕事術 いつも「経営者の目線」を持て\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;吉越 浩一郎\u0026lt;br /\u0026gt;02月13日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/4.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4022506334\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;52\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51cZPc%2BFyxL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4022506334\u0026quot;\u0026gt;13日間で「名文」を書けるようになる方法\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;高橋源一郎\u0026lt;br /\u0026gt;02月13日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/3.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4270002484\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;51\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51ajKFc0AWL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4270002484\u0026quot;\u0026gt;マイクロソフトでは出会えなかった天職 僕はこうして社会起業家になった\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;ジョン ウッド\u0026lt;br /\u0026gt;02月11日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/3.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4004307864\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;45\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/41YPY8DXC6L._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4004307864\u0026quot;\u0026gt;一億三千万人のための小説教室 (岩波新書 新赤版 (786))\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;高橋 源一郎\u0026lt;br /\u0026gt;02月14日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/2.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4820717251\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;51\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51-vLVdBMwL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4820717251\u0026quot;\u0026gt;「残業ゼロ」の人生力\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;吉越 浩一郎\u0026lt;br /\u0026gt;02月18日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/3.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4062575388\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;48\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/5109lpQB6gL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4062575388\u0026quot;\u0026gt;進化しすぎた脳 (ブルーバックス)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;池谷 裕二\u0026lt;br /\u0026gt;02月20日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/2.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/459403019X\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;53\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/41X08M5EC2L._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/459403019X\u0026quot;\u0026gt;チーズはどこへ消えた?\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;スペンサー ジョンソン\u0026lt;br /\u0026gt;02月20日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/2.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4121005961\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;  48\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026ldquo;http://ecx.images-amazon.com/images/I/415BBoePBbL._SL75_.jpg\u0026quot; height=\u0026ldquo;75\u0026rdquo; /\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4121005961\u0026quot;\u0026gt;茶の世界史―緑茶の文化と紅茶の社会 (中公新書 (596))\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;角山 栄\u0026lt;br /\u0026gt;02月23日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/3.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4022566019\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;50\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://booklog.jp/images/noimage_50.gif\u0026quot; height=\u0026quot;50\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4022566019\u0026quot;\u0026gt;海が創る文明―インド洋海域世界の歴史\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;家島 彦一\u0026lt;br /\u0026gt;02月25日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/3.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4798111554\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;53\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/41V9J08BQ3L._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4798111554\u0026quot;\u0026gt;ずっと受けたかったソフトウェアエンジニアリングの授業(2)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;鶴保 征城,駒谷 昇一\u0026lt;br /\u0026gt;02月26日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/2.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4479792368\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;52\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51go-%2B%2ByGPL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4479792368\u0026quot;\u0026gt;ラクをしないと成果は出ない\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;日垣 隆\u0026lt;br /\u0026gt;02月28日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/4.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4000280716\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;54\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/5151160SSDL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4000280716\u0026quot;\u0026gt;ゲド戦記 1 影との戦い (ソフトカバー版)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;アーシュラ・K. ル・グウィン,Ursula K. Le Guin\u0026lt;br /\u0026gt;02月28日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/4.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4822243516\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;50\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/41XDJ5WZ56L._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4822243516\u0026quot;\u0026gt;早朝会議革命~元気企業トリンプの「即断即決」経営\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;大久保 隆弘\u0026lt;br /\u0026gt;02月28日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/4.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;text-align:right;\u0026quot;\u0026gt; powered by \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp\u0026quot;\u0026gt;ブクログ\u0026lt;/a\u0026gt;  ","permalink":"https://nobwak.github.io/posts/2010-02-28-%E3%83%96%E3%82%AF%E3%83%AD%E3%82%B02%E6%9C%88%E5%88%86%E3%81%BE%E3%81%A8%E3%82%81/","summary":"\u0026lt;div style=\u0026quot;margin-bottom:15px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya\u0026quot;\u0026gt;harukiyaさんの本棚","title":"ブクログ2月分まとめ"},{"content":"まあこんなのsshdが逆引きしているだけなので、sshd_config以下の一文を追加して解決。 /etc/ssh/sshd_config  UseDNS no もちろん、逆引きはsecurity上有効なんだが、このマシンはインターネットには公開してないので。  ","permalink":"https://nobwak.github.io/posts/2010-02-26-ssh%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E6%99%82%E3%81%ABpassword%E3%81%8C%E3%81%AA%E3%81%8B%E3%81%AA%E3%81%8B%E8%BF%94%E3%81%A3%E3%81%A6%E3%81%93%E3%81%AA%E3%81%84%E4%BB%B6/","summary":"まあこんなのsshdが逆引きしているだけなので、sshd_config以下の一文を追加して解決。 /etc/ssh/sshd_config UseDNS no もちろん、逆引きはsecurity上有","title":"sshログイン時にpasswordがなかなか返ってこない件"},{"content":"米AmazonにBooks of the Decadeて愉快なページがあった。 2000年から2009年まで通して売り上げ上位100冊を一覧にしたものだ。 このうち、とりあえず上位12冊を、邦訳されていればそれを併せてリストしてみる。 とはいえ、ハリーばっかりなので、もうちょっと先まで見た方が良いと思う。 じっさい、26位のカイト・ランナーは面白かった。 続きが気になる人は米Amazonで探してたもれ。 リンクを貼ろうかと思ったが、なんだかすごいアドレスになったのでやめた。 1位 ハリー・ポッター7巻 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4915512630\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51GFK3JURLL._SL75_.jpg\u0026quot; alt=\u0026quot;「ハリー・ポッターと死の秘宝」 (上下巻セット) (ハリー・ポッターシリーズ第七巻)\u0026quot; title=\u0026quot;「ハリー・ポッターと死の秘宝」 (上下巻セット) (ハリー・ポッターシリーズ第七巻)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 言わずと知れた。 2位 チーズはどこへ消えた? Who Moved My Cheese?: An Amazing Way to Deal with Change in Your Work and in Your Life \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/459403019X\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41X08M5EC2L._SL75_.jpg\u0026quot; alt=\u0026quot;チーズはどこへ消えた?\u0026quot; title=\u0026quot;チーズはどこへ消えた?\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 薄かった。俺としては面白くなかった。 3位 ビジョナリー・カンパニー 2 - 飛躍の法則 Good to Great: Why Some Companies Make the Leap... and Others Don't \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4822242633\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41ED9VY2JYL._SL75_.jpg\u0026quot; alt=\u0026quot;ビジョナリー・カンパニー 2 - 飛躍の法則\u0026quot; title=\u0026quot;ビジョナリー・カンパニー 2 - 飛躍の法則\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 大人の事情で付けられた邦題が悲しい。 ただ、内容には興味あるので読む。 4位 ハリー・ポッター6巻 5位 ハリー・ポッター5巻 Amazonで探すのもだるい。 6位 さあ、才能(じぶん)に目覚めよう―あなたの5つの強みを見出し、活かす Now, Discover Your Strengths \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4532149479\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51A7ZKPW20L._SL75_.jpg\u0026quot; alt=\u0026quot;さあ、才能(じぶん)に目覚めよう―あなたの5つの強みを見出し、活かす\u0026quot; title=\u0026quot;さあ、才能(じぶん)に目覚めよう―あなたの5つの強みを見出し、活かす\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 邦題がなあ。 でも読む。 7位 神の小屋 The SHACK \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4763198793\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51-SlJCZ14L._SL75_.jpg\u0026quot; alt=\u0026quot;神の小屋\u0026quot; title=\u0026quot;神の小屋\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 読んでみたい。 8位 ハリー・ポッター4巻 9位 トワイライト Breaking Dawn (The Twilight Saga, Book 4)Stephenie Meyer きゅうけつきの、おはなしだそうな。 Amazonで探したらイカニモな表紙だったので貼らない。 10位　StrengthsFinder 2.0: A New and Upgraded Edition of the Online Test from Gallup's Now, Discover Your Strengths by Tom Rath \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/159562015X\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41dy60BGoBL._SL75_.jpg\u0026quot; alt=\u0026quot;StrengthsFinder 2.0: By the New York Times Bestselling Author of Wellbeing\u0026quot; title=\u0026quot;StrengthsFinder 2.0: By the New York Times Bestselling Author of Wellbeing\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 邦訳されてないみたい。「心のなかの幸福のバケツ」を書いた人らしい。 どっちも読んだことないが。 11位 Eclipse (The Twilight Saga, Book 3) by Stephenie Meyer 9位にもあったが、ティーン用らしい。バカ売れだそうな。 12位 あなたのチームは、機能してますか？ The Five Dysfunctions of a Team: A Leadership Fable (J-B Lencioni Series) by Patrick Lencioni \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4798103683\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41yXPrx75dL._SL75_.jpg\u0026quot; alt=\u0026quot;あなたのチームは、機能してますか？\u0026quot; title=\u0026quot;あなたのチームは、機能してますか？\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 邦題のセンスが。あと表紙も嫌な感じ。 でも読んでみたい。  ","permalink":"https://nobwak.github.io/posts/2010-02-25-%E7%B1%B3amazon_20002009_%E5%A3%B2%E3%82%8A%E4%B8%8A%E3%81%92%E3%83%88%E3%83%83%E3%83%9712/","summary":"米AmazonにBooks of the Decadeて愉快なページがあった。 2000年から2009年まで通して売り上げ上位100冊を一覧にしたものだ。","title":"米Amazon 2000～2009 売り上げトップ12"},{"content":"FreeBSDに[Roundcube](http://roundcube.net/)を再インストールしたのでメモ。 RoundcubeとはIMAPサーバへのwebインタフェース。まあ、Gmailへのインタフェースと思えば。 いわゆるLAMPサーバ上で動くが、FreeBSD, Apache, SQLite, PHP5の組み合わせでだって動く。 インストール apache, php5がインストールされている前提。 roundcubeインストール。packagesの出来合い設定だと都合が悪いのでportsでインストールする。 わざわざMySQL, PostgreSQLなんて重いDBを使いたくないのでチェックマークを外し、SQLiteにチェックする。 さらにSSLにもチェックし、make install cleanする。  $ cd /usr/ports/mail/roundcube # make config ＜オプションを選択＞ # make install clean sqliteもインストールする。 sqlite2じゃないとダメなので注意。ただ、こちらはデフォルト設定でよいのでpackagesでインストール。portsとpackagesの使い分けこそFreeBSDのキモ。 なお、sqlite3とは競合しないので問題無し。（sqlite3はsqlite3、sqlite2はsqliteとしてインストールされる）  # pkg_add -r sqlite2 Fetching ftp://ftp1.jp.freebsd.org/pub/FreeBSD/ports/i386/packages-7-stable/Latest/sqlite2.tbz... Done. apacheの設定 roundcubeは/usr/local/www/roundcubeにインストールされるので、apacheの公開ディレクトリにaliasを作る。 apache設定ファイル/usr/local/etc/apache22/httpd.confに以下の記載を追加。  Alias /roundcube /usr/local/www/roundcube \u0026amp;#60;Directory /usr/local/www/roundcube\u0026gt; AllowOverride None Order allow,deny Allow from all \u0026amp;#60;/Directory\u0026gt; apacheの再起動を忘れないこと。下記のrcrestartコマンドは便利な管理ツール。  # rcrestart apache22 Performing sanity check on apache22 configuration: Syntax OK Stopping apache22. Waiting for PIDS: 23644. Syntax OK Starting apache22. roundcubeの設定 最低限、データベース設定ファイルである/usr/local/www/roundcube/config/db.inc.phpを修正すればOK。 ここでデータベースのタイプ（sqliteか、mysqlか）と、データベースへの接続方法を指定する。 sqliteにするので、mysql指定になっている行をコメントアウトして、例に沿って一行追加。 sqliteなのでデータベースのファイルを指定する。念のためroundcubeディレクトリとは別の場所にした。 ◎/usr/local/www/roundcube/config/db.inc.php  //$rcmail_config\u0026amp;#91;\u0026amp;#39;db_dsnw\u0026amp;#39;] = \u0026amp;#39;mysql://roundcube:pass@localhost/roundcubemail\u0026amp;#39;; $rcmail_config\u0026amp;#91;\u0026amp;#39;db_dsnw\u0026amp;#39;] = \u0026amp;#39;sqlite:////usr/local/www/maildb/mail.db?mode=0646\u0026amp;#39;; // postgres example: \u0026amp;#39;pgsql://roundcube:pass@localhost/roundcubemail\u0026amp;#39;; // Warning: for SQLite use absolute path in DSN: // sqlite example: \u0026amp;#39;sqlite:////full/path/to/sqlite.db?mode=0646\u0026amp;#39;; データベースファイルの作成 上記で指定した場所にファイルを作り、データベースの初期設定をする。 sqliteからは「.quit」で抜ける。オーナを変更する。 なお、マニュアルにはchmod o+wするように書いてあるが、web serverが読み書きできれば良いので省略。  # mkdir /usr/local/www/maildb/ # cd /usr/local/www/maildb # sqlite -init ../roundcube/SQL/sqlite.initial.sql mail.db Loading resources from ../roundcube/SQL/sqlite.initial.sql SQLite version 2.8.17 Enter \u0026amp;#34;.help\u0026amp;#34; for instructions sqlite\u0026gt; .quit # chown -R www:www ../maildb アクセス あとはブラウザでhttp://webサーバ/roundcube/へアクセス。 ユーザ、パスワード、IMAPサーバを入力すればOK。 Gmailの場合は、「ssl://imap.gmail.com:993」と指定すれば良い。 Gmail用設定 Gmailにしか繋がない、という場合には、roundcubeの設定ファイルを修正しておけば、サーバ名の入力を省略できる。…ただ、サーバ名入力フォーム自体が無くなるので注意。  # vi /usr/local/www/roundcube/config/main.inc.php //$rcmail_config\u0026amp;#91;\u0026amp;#39;default_host\u0026amp;#39;] = \u0026amp;#39;\u0026amp;#39;; $rcmail_config\u0026amp;#91;\u0026amp;#39;default_host\u0026amp;#39;] = \u0026amp;#39;ssl://imap.gmail.com:993\u0026amp;#39;; ","permalink":"https://nobwak.github.io/posts/2010-02-12-roundcube0.3.1+sqlite%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"FreeBSDに[Roundcube](http://roundcube.net/)を再インストールしたのでメモ。 RoundcubeとはIM","title":"roundcube0.3.1+SQLiteのインストール"},{"content":"CtrlキーはAの隣じゃないと嫌なので設定。 以下のファイルを適当な名前で適当に保存。 俺の場合はhomeディレクトリに.swapcapsctlとして保存。  ! ! Swap Caps_Lock and Control_L ! remove Lock = Caps_Lock remove Control = Control_L keysym Control_L = Caps_Lock keysym Caps_Lock = Control_L add Lock = Caps_Lock add Control = Control_L その後、以下のコマンドを実行  xmodmap /home/harukiya/.swapcapsctl 後は Applications -\u0026gt; 設定 -\u0026gt; セッションと起動 の「自動開始アプリケーション」で同じコマンドを追加しておけば、次からはコマンド要らず。  ","permalink":"https://nobwak.github.io/posts/2010-02-11-xubuntu%E3%81%A7ctrl%E3%82%AD%E3%83%BC%E3%81%A8caps%E3%82%AD%E3%83%BC%E3%82%92%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"CtrlキーはAの隣じゃないと嫌なので設定。 以下のファイルを適当な名前で適当に保存。 俺の場合はhomeディレクトリに.swapcapsctl","title":"xubuntuでctrlキーとCapsキーを変換するには。"},{"content":"Xubuntuは、Linuxの便利さを堪能できる割に軽いので素敵だ。 ThunarがWindows Networkを見にいけないのだけが残念だったが、[http://ubuntuforums.org/showthread.php?t=304131](http://ubuntuforums.org/showthread.php?t=304131)にHow toがあったので解決。 1.Applications -\u0026gt; システム -\u0026gt; フォルダの共有　で、sambaのインストール。NFSは要らない。 2.fusesmbをインストール  $ sudo apt-get install fusesmb 3./etc/modulesに\u0026quot;fuse\u0026quot;と一行を追加（ダブルクオーテーションは不要） 4.リブート 5.Applications -\u0026gt; システム -\u0026gt; ユーザとグループ から、自分のユーザ名プロパティで「ユーザ空間ファイルシステムをマウントできる」にチェック 6.ネットワークドライブをマウントするディレクトリを作る。 どこだってよい。パーミッションは777に。  $ sudo mkdir /media/network $ sudo chmod 777 /media/network 7.Applications -\u0026gt; システム -\u0026gt; ユーザとグループ -\u0026gt; グループの管理でfuseグループに自分がいることを確認 8.リブート 9.Applications -\u0026gt; 設定 -\u0026gt; セッションと起動　から「自動開始アプリケーション」タブから「追加」 適当に名前、説明を入れたあとに、以下のコマンドを設定  fusesmb /media/network 10.マウントポイントをショートカットペインに作っておく。 ここの例では/media/networkのnetworkフォルダを左側のペインにドラッグ\u0026amp;ドロップ 11.ログアウトし、ログイン 12.Thunarから先ほどのフォルダに行けば、Windows Networkが見えるはず。 ustreamだって、何にもしなくても見れるし、ubuntu最高。  ","permalink":"https://nobwak.github.io/posts/2010-02-10-thunar%E3%81%ABwindows_network%E3%82%92%E3%83%96%E3%83%A9%E3%82%A6%E3%82%BA%E3%81%95%E3%81%9B%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"Xubuntuは、Linuxの便利さを堪能できる割に軽いので素敵だ。 ThunarがWindows Networkを見にいけないのだけが残念だっ","title":"ThunarにWindows Networkをブラウズさせるには。"},{"content":"以下のとおりにすればOK [http://www.ubuntulinux.jp/products/JA-Localized](http://www.ubuntulinux.jp/products/JA-Localized)  wget -q https://www.ubuntulinux.jp/ubuntu-ja-archive-keyring.gpg -O- | sudo apt-key add - wget -q https://www.ubuntulinux.jp/ubuntu-jp-ppa-keyring.gpg -O- | sudo apt-key add - sudo wget https://www.ubuntulinux.jp/sources.list.d/karmic.list -O /etc/apt/sources.list.d/ubuntu-ja.list sudo apt-get update sudo apt-get upgrade で、以下をすればOK   デスクトップ環境を利用している場合は、［システム］-［システム管理］-［言語サポート］を開きます。標準の言語が設定されていることを確認します。設定されていなければ、利用したい言語のチェックをONにし、標準の言語を選択してください。 日本語 Remix CDに追加されているパッケージと同じものをインストールする場合は、以下のコマンドを実行します。 sudo apt-get install ubuntu-desktop-ja  ","permalink":"https://nobwak.github.io/posts/2010-02-09-xubuntu%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%8C%96/","summary":"以下のとおりにすればOK [http://www.ubuntulinux.jp/products/JA-Localized](http://www.ubuntulinux.jp/products/JA-Localized) wget -q https://www.ubuntulinux.jp/ubuntu-ja-archive-keyring.gpg -O- | sudo apt-key add - wget -q https://www.ubuntulinux.jp/ubuntu-jp-ppa-keyring.gpg -O- | sudo apt-key add - sudo wget https://www.ubuntulinux.jp/sources.list.d/karmic.list -O /etc/apt/sources.list.d/ubuntu-ja.list sudo apt-get update sudo apt-get upgrade で、以下をすればOK デスクトップ環境を利用している場合は","title":"xubuntuの日本語化"},{"content":"色気を出してThinkpad X30にXubuntuを入れてみたが画面がチラつきっぱなしで参った。 やっぱりIntel Driverは地雷だと思う。 X30のチップセットはIntel 830MG(82830)。  $ lspci|grep Grap 00:02.0 VGA compatible controller: Intel Corporation 82830 CGC \u0026amp;#91;Chipset Graphics Controller] (rev 04) 00:02.1 Display controller: Intel Corporation 82830 CGC \u0026amp;#91;Chipset Graphics Controller] /etc/defaults/grubを以下のように修正して、grubをアップデートすればよい。  #GRUB_CMDLINE_LINUX_DEFAULT=\u0026amp;#34;quiet splash\u0026amp;#34; GRUB_CMDLINE_LINUX_DEFAULT=\u0026amp;#34;quiet splash i915.modeset=0\u0026amp;#34; で、アップデート。  sudo update-grub ","permalink":"https://nobwak.github.io/posts/2010-02-08-thinkpad_x30%E3%81%ABxubuntu_9.10%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%9F%E3%82%89%E7%94%BB%E9%9D%A2%E3%81%8C%E3%83%81%E3%83%A9%E3%81%A4%E3%81%84%E3%81%9F%E3%81%A7%E3%81%94%E3%81%96%E3%82%8B%E3%81%AE%E5%B7%BB/","summary":"色気を出してThinkpad X30にXubuntuを入れてみたが画面がチラつきっぱなしで参った。 やっぱりIntel Driverは地雷だと思う","title":"Thinkpad X30にXubuntu 9.10をインストールしたら画面がチラついたでござるの巻"},{"content":"[これ](http://d.hatena.ne.jp/flageo/20071125/p1)、古い記事なのに未だに見られているようなのでアップデートします。 ただ、FreeBSDをいわゆるデスクトップ用途で使うのは激しくオススメしない。 以下、RELEASE版にxorg、GNOMEを入れることを想定。 ほぼ[FreeBSDハンドブック](http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/x-config.html)の手順どおり。 [日本語版](http://www.jp.freebsd.org/www.FreeBSD.org/doc/ja_JP.eucJP/books/handbook/x11-wm.html)もあるが、ちと情報が古いので、英語版を見るのがベター。 Xのインストール ではさっそく。 portsでインストールした日には何日かかるかわからないので、全部パッケージで入れることにする。  # PACKAGEROOT=\u0026amp;#34;ftp://ftp2.jp.freebsd.org\u0026amp;#34;;export PACKAGEROOT # pkg_add -r xorg bsdadminsctips とすれば、xorgに関係するパッケージを全部入れてくれる(Bシェル系の場合)。 普通にやるとftp.freebsd.orgあたりにパッケージを取りに行ってしまい時間がかかるので、環境変数のPACKAGEROOTで日本のftpを指定しておく。 bsdadminscriptsは[管理者用お役立ちツール](http://d.hatena.ne.jp/flageo/20090427/p1)。今回はbsdadminscriptsのうちの、rcコマンドが便利なので入れる。 Xの設定 Xorg7.4からdbus, haldを使うようになったので、rc.confを修正してdbus, haldをスタートさせる。dbusとhaldの順番は必ずこのとおりにすること。 mousedが動いていたら止める。 ◎/etc/rc.conf  #For X dbus_enable=\u0026amp;#34;YES\u0026amp;#34; hald_enable=\u0026amp;#34;YES\u0026amp;#34; moused_enable=\u0026amp;#34;NO\u0026amp;#34; で、起動。  # rcstart dbus Starting dbus. # rcstart hald Starting hald. # pkill moused rcstartはbsdadminscriptsでインストールされるコマンド。 次に[haldのキーボード設定](http://d.hatena.ne.jp/flageo/20090318/p1)をする。 fdiファイルを作って適切な場所に置いたら、必ずhaldをrcrestart haldなどとして再起動すること。 で、もうxorg.conの設定などはせず、rootでいきなりstartxとする。 最近は、大抵のケースであればもう自動でやってくれるので。 素っ気ないtwmの起動が確認できたらOK。 起動できない場合には、Xorg -configureとしてxorg.confを作り、/var/log/にあるXorgのログを見ながらぐぐって頑張る。 ところで、webを見回すと、FreeBSDなのに/etc/の下へxorg.confを置いているケースが散見される。動作に支障があるわけではないが、base system以外、つまりports, packagesで入れたソフトウェアは/usr/localの下に置くのがFreeBSDの嗜み。だから/usr/local/etc/X11の下に置きましょう。 GNOMEのインストール  # pkg_add -r gnome2-lite GNOMEの設定 システム起動時にgdmも起動させる。 /etc/rc.confに下記のとおり追加。  gdm_enable=\u0026amp;#34;YES\u0026amp;#34; gnome_enable=\u0026amp;#34;YES\u0026amp;#34; gnome_enable=\u0026quot;YES\u0026quot;とすればgnome関連デーモンの起動もしてくれる。 インプットメソッドのインストール  pkg_add -r ja-vlgothic uim-gtk ja-uim-anthy としてinput methodをインストール。 なお、gnome2.20ではこういったinput methodやlocale設定に問題があるので、gdmのプルダウンメニューでJapaneseを選んで有効にする。あるいは、~/.profileに'export GDM_LANG=ja_JP.UTF-8'という一行を加える。（[http://www.freebsd.org/gnome/docs/faq2.html#q29](http://www.freebsd.org/gnome/docs/faq2.html#q29)） で、再起動。 FreeBSDのサウンドカードの設定 gdmが立ち上がりGNOMEも問題なく起動したが、音がならない。 これも[FreeBSDハンドブック](http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/sound-setup.html)を参照して解決。 大まかな流れ。  具体的な手順は以下のとおり。  # kldload snd_driver # kldstat （大量のメッセージ） # cat /dev/sndstat FreeBSD Audio Driver (newpcm: 32bit 2007061600/i386) Installed devices: pcm0: \u0026amp;#60;Intel ICH3 (82801CA)\u0026gt; at io 0x1c00, 0x18c0 irq 11 bufsz　16384 kld MPSAFE] (1p:1v/1r:1v channels duplex default) ということで、snd_ichが狙いのモジュールと分かったので（上記出力のボールドは俺）、/boot/loader.confに一行追加。  snd_ich_load=\u0026amp;#34;YES\u0026amp;#34; 以上  ","permalink":"https://nobwak.github.io/posts/2010-02-07-freebsd%E3%81%A7%E3%81%AEgnome%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"[これ](http://d.hatena.ne.jp/flageo/20071125/p1)、古い記事なのに未だに見られているようなのでアッ","title":"FreeBSDでのGNOMEインストール"},{"content":"\u0026lt;div style=\u0026quot;margin-bottom:15px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya\u0026quot;\u0026gt;harukiyaさんの本棚\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;2010年01月\u0026lt;br /\u0026gt;アイテム数：12 \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4532313783\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;50\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/41Sg6%2B2xHNL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4532313783\u0026quot;\u0026gt;フラット化する世界 [増補改訂版] (下)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;トーマス フリードマン\u0026lt;br /\u0026gt;01月05日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/3.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4166607235\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;46\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/31Q5WY6ztHL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4166607235\u0026quot;\u0026gt;生命保険のカラクリ (文春新書)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;岩瀬 大輔\u0026lt;br /\u0026gt;01月12日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/4.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4043417012\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;53\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51MA6RACZFL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4043417012\u0026quot;\u0026gt;もの食う人びと (角川文庫)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;辺見 庸\u0026lt;br /\u0026gt;01月07日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/4.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4323063261\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;52\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51bWbqcGwdL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4323063261\u0026quot;\u0026gt;ドリーム・ギバー―夢紡ぐ精霊たち (ハートウォームブックス)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;ロイス ローリー\u0026lt;br /\u0026gt;01月07日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/3.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4532314410\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;51\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51dmsMlRL%2BL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4532314410\u0026quot;\u0026gt;グリーン革命(上)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;トーマス・フリードマン\u0026lt;br /\u0026gt;01月12日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/2.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4062616521\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;50\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/216S51Z0KFL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4062616521\u0026quot;\u0026gt;ザ・ギバー―記憶を伝える者 (ユースセレクション)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;ロイス・ローリー\u0026lt;br /\u0026gt;01月14日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/3.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4532314429\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;51\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51SD8Yjm8eL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4532314429\u0026quot;\u0026gt;グリーン革命(下)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;トーマス・フリードマン\u0026lt;br /\u0026gt;01月17日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/3.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4106036525\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;50\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/41N3mPn4ZYL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4106036525\u0026quot;\u0026gt;新潮選書強い者は生き残れない環境から考える新しい進化論\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;吉村 仁\u0026lt;br /\u0026gt;01月18日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/2.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4532314380\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;51\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51o6KGwPHKL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4532314380\u0026quot;\u0026gt;俺は、中小企業のおやじ\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;鈴木 修\u0026lt;br /\u0026gt;01月21日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/3.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4101249156\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;52\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51PX7A04P9L._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4101249156\u0026quot;\u0026gt;「死の医学」への日記 (新潮文庫)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;柳田 邦男\u0026lt;br /\u0026gt;01月24日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/3.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4000268619\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;52\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/41J8M45Q1RL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4000268619\u0026quot;\u0026gt;歴史 ― HISTORY (〈1冊でわかる〉シリーズ ― Very Short Introductions日本版)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;ジョン・H・アーノルド\u0026lt;br /\u0026gt;01月29日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/2.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;margin-bottom:5px;\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;width:75px;height:75px;float:left;margin-right:2px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4122018331\u0026quot;\u0026gt;\u0026lt;img width=\u0026quot;52\u0026quot; alt=\u0026quot;\u0026quot; src=\u0026quot;http://ecx.images-amazon.com/images/I/51XTWKMDGFL._SL75_.jpg\u0026quot; height=\u0026quot;75\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya/archives/4122018331\u0026quot;\u0026gt;失敗の本質―日本軍の組織論的研究 (中公文庫)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;戸部 良一,寺本 義也,鎌田 伸一,杉之尾 孝生,村井 友秀,野中 郁次郎\u0026lt;br /\u0026gt;01月29日\u0026lt;img width=\u0026quot;59\u0026quot; alt=\u0026quot;{book[’rank’]\u0026quot; src=\u0026quot;http://booklog.jp/images/rank/4.gif\u0026quot; height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;br style=\u0026quot;clear:both;\u0026quot; /\u0026gt; \u0026lt;div style=\u0026quot;text-align:right;\u0026quot;\u0026gt; powered by \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp\u0026quot;\u0026gt;ブクログ\u0026lt;/a\u0026gt;  ","permalink":"https://nobwak.github.io/posts/2010-01-31-%E3%83%96%E3%82%AF%E3%83%AD%E3%82%B0%E3%81%BE%E3%81%A8%E3%82%81/","summary":"\u0026lt;div style=\u0026quot;margin-bottom:15px;\u0026quot;\u0026gt; \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://booklog.jp/users/harukiya\u0026quot;\u0026gt;harukiyaさんの本棚","title":"ブクログまとめ"},{"content":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4103223111\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/419SZTD706L._SL75_.jpg\u0026quot; alt=\u0026quot;「死の医学」への日記\u0026quot; title=\u0026quot;「死の医学」への日記\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 死ぬ場所といえば病院が当たり前になったのは、ここ数十年のこと。 それだけに、死が生活と切り離されてしまう。 ある婦人の在宅ケアの例。 辛そうに闘病している婦人の子どもが、足許までしか近寄らない。それを見た婦人の母、つまり子どもたちの祖母が、「お母さんはこうして病気と闘っているのだ」と教える。こうして、子どもたちは生老病死を学んでいくのだ、という話が印象的だった。 もう一つ印象的だったのは、教育・研究が目的の大学病院との対比で描かれる、東京衛生病院。 キリスト教系の病院なのだが、重篤な患者の病室で跪いて祈る看護婦が見られたり、実習に来た看護学生達が、苦痛のために意識障害まで起こす患者にショックを受け、夜に再来して一人ずつ患者の手をとり祈りをつぶやく。その心。なんという心。 1/24読了  ","permalink":"https://nobwak.github.io/posts/2010-01-28-%E6%AD%BB%E3%81%AE%E5%8C%BB%E5%AD%A6%E3%81%B8%E3%81%AE%E6%97%A5%E8%A8%98/","summary":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4103223111\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/419SZTD706L._SL75_.jpg\u0026quot; alt=\u0026quot;「死の医学」への日記\u0026quot; title=\u0026quot;「死の医学」への日記\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 死ぬ場所といえば病院","title":"「死の医学」への日記"},{"content":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4532314380\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51o6KGwPHKL._SL75_.jpg\u0026quot; alt=\u0026quot;俺は、中小企業のおやじ\u0026quot; title=\u0026quot;俺は、中小企業のおやじ\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; ムチャクチャだったけど、面白かった。 物品搬入口が狭かったので、上司に相談せず勝手に木を伐採して整地して広くしたとか、ハンガリー当局から難癖つけられたとき、無断で役所に乗り込んで、赤じゅうたんに油まみれの部品を並べて直談判したとか、武勇伝の他に、言うことがムチャクチャで面白い。 「出来ない理由を言うな」 「議論するといつまで経っても決まらない。ワンマンがいい。ただ情報は集まるようにしておくこと」 「ボトムアップはコストアップ。ボトムダウンはコストダウン。」 「インドに進出したのは先見の明があったわけではない。どこの国でもいいから一位になりたかったので、まだ誰も行ってない国を選んだだけ。」 「小少短美がモットー」 「償却は早めにする。変えるつもりはない。」 「規則を作ると、自分の頭で考えず盲目的に従う人間が出てくる。こういうのが一番頭に来る。」 洗練されたCEOというより、まさに本人が言うとおりの、中小企業のオヤジだと思った。 1/21読了  ","permalink":"https://nobwak.github.io/posts/2010-01-26-%E4%BF%BA%E3%81%AF%E4%B8%AD%E5%B0%8F%E4%BC%81%E6%A5%AD%E3%81%AE%E3%82%AA%E3%83%A4%E3%82%B8/","summary":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4532314380\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51o6KGwPHKL._SL75_.jpg\u0026quot; alt=\u0026quot;俺は、中小企業のおやじ\u0026quot; title=\u0026quot;俺は、中小企業のおやじ\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; ムチャクチャだっ","title":"俺は、中小企業のオヤジ"},{"content":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4106036525\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41N3mPn4ZYL._SL75_.jpg\u0026quot; alt=\u0026quot;新潮選書強い者は生き残れない環境から考える新しい進化論\u0026quot; title=\u0026quot;新潮選書強い者は生き残れない環境から考える新しい進化論\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 全体的に、説明が足らない気がした。 こういう話を一般的にわかりやすく書くのは「生物と無生物のあいだ」の人が上手だと思った。 進化論のうち、環境が生物を選ぶという、環境説の話。 産業革命後のイギリスが、煤煙で木の幹が真っ黒になると、もともと白っぽい蛾がかなりの短期間で黒く変化したように、進化というのは思ったよりも早く進行する。また、このように、環境の変化が生き残る生物を選びとる。 で、変化というのは、いつ何時訪れるか分からないので、下手に最適化してしまうと次の変化を生き残れない。 だから、ある環境で最も強いものが生き残るのではなく、そこそこ適応しているレベルの方が有利。 また、環境になるべく依存しない仕組みをもつものが有利。 面白かったのが次の2点。 安定期であっても、遺伝子は常に変化していること（中立説）。種として次の変化に対応できるようバリエーションを増やしているんだと。 過去に大絶滅は5回起こっているが、実は今が6回目の大絶滅期。つまり人間のせいで種の数が激減しているということ。 1/18読了  ","permalink":"https://nobwak.github.io/posts/2010-01-25-%E5%BC%B7%E3%81%84%E8%80%85%E3%81%AF%E7%94%9F%E3%81%8D%E6%AE%8B%E3%82%8C%E3%81%AA%E3%81%84%E7%92%B0%E5%A2%83%E3%81%8B%E3%82%89%E8%80%83%E3%81%88%E3%82%8B%E6%96%B0%E3%81%97%E3%81%84%E9%80%B2%E5%8C%96%E8%AB%96/","summary":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4106036525\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41N3mPn4ZYL._SL75_.jpg\u0026quot; alt=\u0026quot;新潮選書強い者は生き残れない環境から考える新しい進化論\u0026quot; title=\u0026quot;新潮選書強い者は生き残","title":"強い者は生き残れない環境から考える新しい進化論"},{"content":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4062616521\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/216S51Z0KFL._SL75_.jpg\u0026quot; alt=\u0026quot;ザ・ギバー―記憶を伝える者 (ユースセレクション)\u0026quot; title=\u0026quot;ザ・ギバー―記憶を伝える者 (ユースセレクション)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 面白…くはないけど、とても気にかかる作品だった。 一見、高度に管理されている世界が、次第に不気味さを増して行くストーリー展開がよかった。最後が気になって、一気に読んでしまった。 また、劇中のいろんな点が、例えばどのようにしてこのような世界になったのか、記憶を渡せるのか、といった点はまったく説明されていなくて、ラスト近くの、幼児との息詰まる逃避行と暗喩的なラストとともに、とても想像力をかき立てられる。 3部作らしいが、残りの2部、3部は邦訳されてないとか。 1/13開始、同日読了  ","permalink":"https://nobwak.github.io/posts/2010-01-24-%E3%82%B6%E3%82%AE%E3%83%90%E3%83%BC/","summary":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4062616521\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/216S51Z0KFL._SL75_.jpg\u0026quot; alt=\u0026quot;ザ・ギバー―記憶を伝える者 (ユースセレクション)\u0026quot; title=\u0026quot;ザ・ギバー―記憶を伝える者 (","title":"ザ・ギバー"},{"content":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4532314410\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51dmsMlRL%2BL._SL75_.jpg\u0026quot; alt=\u0026quot;グリーン革命(上)\u0026quot; title=\u0026quot;グリーン革命(上)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 前作ほど面白くなかった。 ただ、2点ほど面白いなと思ったことがあった。 一点目。石油を買い続けることが、産油国のオープン化を抑制するということ。 もうひとつは、エネルギー貧困、つまり電力の安定した供給がないために、フラット化した世界へ接続できず、機会を生かせない貧困があるということ。 1/8～1/11  ","permalink":"https://nobwak.github.io/posts/2010-01-23-%E3%82%B0%E3%83%AA%E3%83%BC%E3%83%B3%E9%9D%A9%E5%91%BD/","summary":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4532314410\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51dmsMlRL%2BL._SL75_.jpg\u0026quot; alt=\u0026quot;グリーン革命(上)\u0026quot; title=\u0026quot;グリーン革命(上)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 前作ほど面白くなかった。","title":"グリーン革命"},{"content":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4166607235\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/31Q5WY6ztHL._SL75_.jpg\u0026quot; alt=\u0026quot;生命保険のカラクリ (文春新書)\u0026quot; title=\u0026quot;生命保険のカラクリ (文春新書)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 保険のことなんてさっぱり分からなかったので、とてもためになった。 以下、メモ 保険は、保障の性質を持つものと、貯蓄の性質を持つものに分かれる。 保障は万が一に備えるもの。貯蓄は発生の確率が高い、将来の出費に備えるもの 保険商品は以下の三種類に分かれる。 死亡保障（遺族保障） 医療保障 生存保障（貯蓄） 死亡保障は、本人が死亡したときに保障が受けられる、生命保険の基本。 医療保障は、病気やケガをしたときのもの。ただし公的保障でもかなりのエリアがカバーされる。 生存保障は、将来の出費や、老後に備えるもの。貯蓄と考えれば、なにも保険でまかなう必要はない。現在の金利を考えると、長期間低利率で固定されてしまううえに、保険手数料が馬鹿にならないし、途中解約にペナルティがある。 医療保障にはそれほどメリットはなく、また金利の低い現時点で生存保障にメリットは少ない。 医療保障、死亡保障に生存保障（貯蓄性）を含めているものは要注意。 とすれば、現時点では掛け捨ての死亡保障がよさそう。 完全生命表:厚生省が発表する年代ごと死亡率の一覧 標準生命表:アクチュアリー（[http://www.actuaries.jp/index.html](http://www.actuaries.jp/index.html)）が作成するもの。保険会社が積み立てておく準備金の算出に使用される。 生命保険会社は、死亡リスクを高めに見積もっている。 保険料は、割引を行ってはならない決まり（保険業法第300条）。リスクに応じた保険料を払うことになるので、「病気にならなかったら15万円ボーナス」などという宣伝文句を信用してはいけない。 保険料には、保険会社の運営手数料（付加保険料）が含まれている。 たいていの保険会社は付加保険料を開示していない。 手数料がいくらか分からないのに、貯蓄性のある商品を買うのは抵抗がある。 生命保険会社の利益 死差益: 見込んでいた死亡リスクとの差分。これが多いと死亡リスクを高く見積もりすぎ 利差益: 見込んでいた資産運用利回りの差分。低金利の今では真っ赤。 費差益: 見込んでいたオペレーションコストの差分。 1/10～1/12  ","permalink":"https://nobwak.github.io/posts/2010-01-22-%E7%94%9F%E5%91%BD%E4%BF%9D%E9%99%BA%E3%81%AE%E3%82%AB%E3%83%A9%E3%82%AF%E3%83%AA/","summary":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4166607235\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/31Q5WY6ztHL._SL75_.jpg\u0026quot; alt=\u0026quot;生命保険のカラクリ (文春新書)\u0026quot; title=\u0026quot;生命保険のカラクリ (文春新書)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt;","title":"生命保険のカラクリ"},{"content":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4323063261\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51bWbqcGwdL._SL75_.jpg\u0026quot; alt=\u0026quot;ドリーム・ギバー―夢紡ぐ精霊たち (ハートウォームブックス)\u0026quot; title=\u0026quot;ドリーム・ギバー―夢紡ぐ精霊たち (ハートウォームブックス)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 同じ作者の「ザ・ギバー　記憶を伝えるもの」と間違えて図書館で借りた。 でもまあ面白かった。 悲しい母子、さみしい老婆が、ドリーム・ギバー（夢を与える者）たちのおかげで元気になる話。 1/7開始、同日読了  ","permalink":"https://nobwak.github.io/posts/2010-01-21-%E3%83%89%E3%83%AA%E3%83%BC%E3%83%A0%E3%82%AE%E3%83%90%E3%83%BC/","summary":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4323063261\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51bWbqcGwdL._SL75_.jpg\u0026quot; alt=\u0026quot;ドリーム・ギバー―夢紡ぐ精霊たち (ハートウォームブックス)\u0026quot; title=\u0026quot;ドリーム・ギバー―","title":"ドリーム・ギバー"},{"content":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4043417012\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51MA6RACZFL._SL75_.jpg\u0026quot; alt=\u0026quot;もの食う人びと (角川文庫)\u0026quot; title=\u0026quot;もの食う人びと (角川文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 世界食い倒れ紀行かと思ったら全然違った。 不条理なことがたくさんあるけど、皆ものを食う同じ人間。 解説も含めてとても面白かった。 1/6開始～1/7読了  ","permalink":"https://nobwak.github.io/posts/2010-01-20-%E3%82%82%E3%81%AE%E9%A3%9F%E3%81%86%E3%81%B2%E3%81%A8%E3%81%B3%E3%81%A8/","summary":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4043417012\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51MA6RACZFL._SL75_.jpg\u0026quot; alt=\u0026quot;もの食う人びと (角川文庫)\u0026quot; title=\u0026quot;もの食う人びと (角川文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 世界食い","title":"もの食うひとびと"},{"content":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4532313783\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41Sg6%2B2xHNL._SL75_.jpg\u0026quot; alt=\u0026quot;フラット化する世界 [増補改訂版] (下)\u0026quot; title=\u0026quot;フラット化する世界 [増補改訂版] (下)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; こういうのが面白かった。 HPが必死に87あったサプライチェーンを5つに減らしたのだが、見学者にどうやったらそんな事が出来たんだと度々聞かれてその有用性に気づき、そのノウハウを商品にした話 やっぱりHPが、インドの貧しい地域へ行き、一緒になって議論して、カメラ、プリンタを貸与して現地の女性が写真屋を始めたらこれが大当たり。利益は折半でいわゆる「win-win」になった話 世界がフラットになったことで、人々が自分の偏見にあった情報を容易に取得しやすくなった話 1/5読了  ","permalink":"https://nobwak.github.io/posts/2010-01-19-%E3%83%95%E3%83%A9%E3%83%83%E3%83%88%E5%8C%96%E3%81%99%E3%82%8B%E4%B8%96%E7%95%8C_%E5%A2%97%E8%A3%9C%E6%94%B9%E8%A8%82%E7%89%88_%E4%B8%8B/","summary":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4532313783\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41Sg6%2B2xHNL._SL75_.jpg\u0026quot; alt=\u0026quot;フラット化する世界 [増補改訂版] (下)\u0026quot; title=\u0026quot;フラット化する世界 [増補改訂版] (下)","title":"フラット化する世界 [増補改訂版] (下)"},{"content":"勤め先のあるエリアの公立図書館が使い易いせいで、読書欲が猛烈に高まっているこのごろ。 webで予約が出来て、勤め先のごく近くで受け取り/返却ができて、返却だけなら駅のボックスに投函するだけでよい、というのがとても便利だ。 自宅近くにも図書館はあるのだが、通勤路からは外れているので行くのが億劫になる。 ここまで気軽に借りられると、あれもこれも読みたくなって、すぐに制限いっぱいまで予約を埋めてしまう。 早く次の本が来ないかのう。  ","permalink":"https://nobwak.github.io/posts/2010-01-18-%E5%9B%B3%E6%9B%B8%E9%A4%A8/","summary":"勤め先のあるエリアの公立図書館が使い易いせいで、読書欲が猛烈に高まっているこのごろ。 webで予約が出来て、勤め先のごく近くで受け取り/返却が","title":"図書館"},{"content":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4532313775\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41lUWPM5dyL._SL75_.jpg\u0026quot; alt=\u0026quot;フラット化する世界 [増補改訂版] (上)\u0026quot; title=\u0026quot;フラット化する世界 [増補改訂版] (上)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; いまさら読んだ。 前作、「レクサスとオリーブの木」はいろいろと鼻についたけど、こっちは面白い。 上巻は、なぜ世界はフラット化したかという話。 ある意味、後から何とでも言える話なので、むしろフラット化した世界でどうしよう、という第二部からの方が本題と思う。 が、第1部でも面白いところはいくつかあった。 ウォルマートの、店でモノが売れた瞬間にメーカへフィードバックするプロセスがすごい。プロセスはなかなか真似できないからね、という話。 フラット化したことで、誰でも「アップロード」が出来るようになったけど、これって肉体労働だからなかなか厳しいよね、という話。 特に後者は、しょうもないブログを書いてると心の底から同意する。 これって、今後もアップロードするごく僅かな人と、それを消費する多数の人に分かれるんじゃないのかな。 そして2部。 この世の中、国でも企業でもなく、個人レベルでグローバル化しないと生き残れないぜという話。 彼が考えるところの生き残る人の条件。 ・マネジメントのできる人。まとめ役、対外的な説明役 ・バーサタイリスト。スペシャリストでもゼネラリストでもない。技術もあって対外交渉力もある人。 ・後は最後の最後に一味つけられる人。  ","permalink":"https://nobwak.github.io/posts/2010-01-17-%E3%83%95%E3%83%A9%E3%83%83%E3%83%88%E5%8C%96%E3%81%99%E3%82%8B%E4%B8%96%E7%95%8C_%E5%A2%97%E8%A3%9C%E6%94%B9%E8%A8%82%E7%89%88_%E4%B8%8A/","summary":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4532313775\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41lUWPM5dyL._SL75_.jpg\u0026quot; alt=\u0026quot;フラット化する世界 [増補改訂版] (上)\u0026quot; title=\u0026quot;フラット化する世界 [増補改訂版] (上)","title":"フラット化する世界 [増補改訂版] (上)"},{"content":"面白かった。資本主義はねずみ講だそうな。 つまり自分の持ってる資産が、次の人に高く売れる間はOK。だけどねずみ講に参入してくる人がいなくなったら終了という仕組み。 よくどんな資産でも証券化すればOKと聞く。たしかソフトバンクが、ユーザの月賦を証券化して売ったはず。その仕組がよく分からなかったのだけど、この本を読んでよく理解できた。 例えば、他のいろいろな資産とまとめて、客の要望に応じて任意のリスク/リターンの部分を切り出して証券にすることもできるし、細かく切り分ければ、小口投資の対象になり、少々リスクが高くったって平気になる。 一番重要なのは、証券化すれば、実物資産が抱える様々な情報が捨象され、単にリスクとリターンの二つの属性しか無くなり、流動性（すぐに他人に売れるかどうか）が格段に上がるというわけ。 あと、バブルは、みんなバブルと知ってるからバブルになるんだってのが斬新だった。みんなバブルと分かってるから、つまりいろんな資産価値がしばらくうなぎ登りになるのが分かってるから、全員が参加する。参加すれば絶対儲かるから。だけどいつか終りになるのが分かってるから、ピリピリしてる。バブルが終わった瞬間に売り抜けようとみんなピリピリしてる。 そしてバブル終了と皆が認識するようなキッカケがあれば、みんな一斉に売る。で大暴落という仕組み。  ","permalink":"https://nobwak.github.io/posts/2010-01-15-%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E7%B5%8C%E6%B8%88%E3%81%AF%E3%83%90%E3%83%96%E3%83%AB%E3%81%AB%E9%80%9A%E3%81%98%E3%82%8B/","summary":"面白かった。資本主義はねずみ講だそうな。 つまり自分の持ってる資産が、次の人に高く売れる間はOK。だけどねずみ講に参入してくる人がいなくなった","title":"すべての経済はバブルに通じる"},{"content":"rc.confでネットワークデバイスに設定する値にSYNCDHCPというのがあるそうな。 ネットワークデバイスの立ち上げは通常、デバイス自身がリンクアップのイベントをdevdに送り、devdはそれを受けてdhclientを実行する。 しかし一部のデバイスはリンク変更のイベントを通知しないので、いつまで経ってもネットワークに繋がらない。 そういうデバイスに対しては、\u0026quot;DHCP\u0026quot;ではなく\u0026quot;SYNCDHCP\u0026quot;としてあげると、イベントを待たずにdhclientしてくれる。  ifconfig_fxp0=\u0026amp;#34;SYNCDHCP\u0026amp;#34; このほか、リンク変更イベントを通知するのはするけど、通知が遅くて他のネットワークサービスの起動に影響してしまう場合にも有効、とのこと。 いつか必要になるかもしれないのでメモ。  ","permalink":"https://nobwak.github.io/posts/2010-01-14-freebsd_dhcp%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%9F%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%81%8C%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%8C%E3%82%89%E3%81%AA%E3%81%84%E3%81%A8%E3%81%8D%E3%81%AB%E3%81%AF/","summary":"rc.confでネットワークデバイスに設定する値にSYNCDHCPというのがあるそうな。 ネットワークデバイスの立ち上げは通常、デバイス自身が","title":"[FreeBSD] DHCP設定したネットワークデバイスが立ち上がらないときには"},{"content":"フェルマーの最終定理を読んだ。 とても面白かった。 17世紀にフェルマーが「この定理について驚くべき証明を見つけたが、余白が足りないのでそれを記すことが出来ない」と思わせぶりに記してから数百年、20世紀末にやっと証明されたフェルマーの最終定理。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4102159711\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41J3TjWsxqL._SL75_.jpg\u0026quot; alt=\u0026quot;フェルマーの最終定理 (新潮文庫)\u0026quot; title=\u0026quot;フェルマーの最終定理 (新潮文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 最終的に証明されるくだりよりも、そこに至るまでのいろんな試みや、証明そのものについての話が面白かった。 そもそも、証明とはすごく抽象的な運動なのに、一度証明されればそれは真実といえるその神秘さ。 たとえば[背理法](http://ja.wikipedia.org/wiki/%E8%83%8C%E7%90%86%E6%B3%95)とか恐ろしい。  このように、一見言葉遊びのようなのに、まったく論理に隙がないというのが恐ろしい。 また、虚数だってそうだ。「二乗したら負になるような数を虚数って言うことにしようぜ」なんて、たぶん当時としては驚天動地というよりむしろ噴飯ものの話だと思うが、こういう、今までなかった得体の知れない概念に名前をつけて扱うという方法にはちょっと感心した。（たぶんゼロの概念もそうだったんだろうな…） こういったように、数学者はいわば「武器」とでも言うべき証明方法やら概念を編み出しては、フェルマーの最終定理に挑み、数世紀にわたって死屍を累々と築いてきた歴史が、とてもおもしろかった。 しかし、中学高校で数学はやったはずなのに、ここまでエキサイティングな思いはしなかったのはなぜだろう?  ","permalink":"https://nobwak.github.io/posts/2010-01-13-%E3%83%95%E3%82%A7%E3%83%AB%E3%83%9E%E3%83%BC%E3%81%AE%E6%9C%80%E7%B5%82%E5%AE%9A%E7%90%86/","summary":"フェルマーの最終定理を読んだ。 とても面白かった。 17世紀にフェルマーが「この定理について驚くべき証明を見つけたが、余白が足りないのでそれを記","title":"フェルマーの最終定理"},{"content":"仕事の出来る人は、重要な数字が頭に入ってるものだ、と書いてあった。 いい加減な俺は数字なんてすぐに忘れる。なんだかとっても納得した。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4887596995\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/419vMGbnvyL._SL75_.jpg\u0026quot; alt=\u0026quot;不透明な時代を見抜く「統計思考力」\u0026quot; title=\u0026quot;不透明な時代を見抜く「統計思考力」\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 大学生の本離れとかいうけど、こうやって数字を並べてみるとそれは違うんじゃね?とか実例を引いてくれてて、筆者が言う「とにかく元の数字を当たれ。イメージで考えるな。」「数字をゲットしたら何でもグラフにしろ。」という主張がよく分かった。 なので、俺も仕事に関係ある数字をグラフにしてみることにした。 そういえば別に読んだ「山・動く」という湾岸戦争の後方支援を担当した人も、部下から最新の、かつ選りすぐりの情報をバインダーに閉じて、暇さえあれば眺めて頭に入れた、と書いてたな。  ","permalink":"https://nobwak.github.io/posts/2010-01-10-%E4%B8%8D%E9%80%8F%E6%98%8E%E3%81%AA%E6%99%82%E4%BB%A3%E3%82%92%E8%A6%8B%E6%8A%9C%E3%81%8F%E7%B5%B1%E8%A8%88%E6%80%9D%E8%80%83%E5%8A%9B/","summary":"仕事の出来る人は、重要な数字が頭に入ってるものだ、と書いてあった。 いい加減な俺は数字なんてすぐに忘れる。なんだかとっても納得した。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4887596995\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/419vMGbnvyL._SL75_.jpg\u0026quot; a","title":"不透明な時代を見抜く「統計思考力」"},{"content":"生ワクチンは非常に効果が高く、持続もするけど、まれに副作用がありますよ。日本ではやってませんよ。 不活化ワクチンは副作用リスクは少ないものの、効果も生ワクチンほど高くなく、持続もしませんよ。おまけにウイルス侵入経路である気管支にはあまり抗体が生まれず、感染予防というよりは症状悪化を防ぐ意味合いの方が大きいですよ。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4062576473\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51%2BpDfH908L._SL75_.jpg\u0026quot; alt=\u0026quot;インフルエンザ パンデミック―新型ウイルスの謎に迫る (ブルーバックス)\u0026quot; title=\u0026quot;インフルエンザ パンデミック―新型ウイルスの謎に迫る (ブルーバックス)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; タミフルは、インフルエンザウイルスが感染細胞から他の細胞へ移る際の動きを阻害する薬ですよ。 ということを学んだ。  ","permalink":"https://nobwak.github.io/posts/2010-01-08-%E3%82%A4%E3%83%B3%E3%83%95%E3%83%AB%E3%82%A8%E3%83%B3%E3%82%B6%E3%83%91%E3%83%B3%E3%83%87%E3%83%9F%E3%83%83%E3%82%AF/","summary":"生ワクチンは非常に効果が高く、持続もするけど、まれに副作用がありますよ。日本ではやってませんよ。 不活化ワクチンは副作用リスクは少ないものの、","title":"インフルエンザ・パンデミック"},{"content":"8.0から8.0-p1のアップデートは、カーネルに修正が入らないので、そのままだとunameコマンドで両者の区別を出来ない。 /usr/src/sys/conf/newvers.shを見れば分かるが、それは面倒。 だからGENERICカーネルを再構築しておき、unameで8.0-p1と返してくれるようにしておいた。 しかし、新しいnewvers.shでカーネルを再構築するとハッシュ値も違ってしまうので、freebsd-updateは修正対象と認識してくれないようだ。 本日、FreeBSDに[Security Adisoryが出た](http://www.freebsd.org/security/advisories.html)ので、さっそくfreebsd-updateして8.0-p2に上げてみたのだが、/boot/kernel配下のカーネルが対象になっていない。  $ uname -a FreeBSD xxxx 8.0-RELEASE-p1 FreeBSD 8.0-RELEASE-p1 #2: Wed Dec 9 09:18:02 JST 2009 root@xxxx:/usr/obj/usr/src/sys/GENERIC i386 $ freebsd-update fetch ＜略＞ The following files are affected by updates, but no changes have been downloaded because the files have been modified locally: /var/db/mergemaster.mtree The following files will be updated as part of updating to 8.0-RELEASE-p2: /boot/GENERIC/ip_mroute.ko /boot/GENERIC/ip_mroute.ko.symbols /boot/GENERIC/kernel /boot/GENERIC/kernel.symbols /boot/GENERIC/krpc.ko /boot/GENERIC/krpc.ko.symbols /boot/GENERIC/zfs.ko /boot/GENERIC/zfs.ko.symbols /boot/kernel.old/ip_mroute.ko /boot/kernel.old/ip_mroute.ko.symbols /boot/kernel.old/kernel /boot/kernel.old/kernel.symbols /boot/kernel.old/krpc.ko /boot/kernel.old/krpc.ko.symbols /boot/kernel.old/zfs.ko /boot/kernel.old/zfs.ko.symbols /lib/libzpool.so.2 ＜略＞ ひとまず/boot/GENERICと/boot/kernelにコピーして再起動、unameで8.0-p2になっていることを確認した。 今後も念のため/boot/GENERICを置いとこうと思った。  $ uname -a FreeBSD xxxx 8.0-RELEASE-p2 FreeBSD 8.0-RELEASE-p2 #0: Tue Jan 5 16:02:27 UTC 2010 root@i386-builder.daemonology.net:/usr/obj/usr/src/sys/GENERIC i386 ","permalink":"https://nobwak.github.io/posts/2010-01-07-generic_kernel%E3%81%A7%E3%82%82freebsd-update%E3%81%A7update%E3%81%97%E3%81%A6%E3%81%8F%E3%82%8C%E3%81%AA%E3%81%84%E4%BB%B6/","summary":"8.0から8.0-p1のアップデートは、カーネルに修正が入らないので、そのままだとunameコマンドで両者の区別を出来ない。 /usr/src","title":"GENERIC kernelでもfreebsd-updateでupdateしてくれない件"},{"content":"過保護はOK。過干渉はダメよ。という主張。 まあ、ヤバい経済学でも書いてたけど、育児方法なんてそもそも効果が測りにくくて、十年もすればメジャーな説も消え失せるようなエリアなんで、眉唾モノで読んでみたけど面白かった。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4072620947\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41zdgcNOooL._SL75_.jpg\u0026quot; alt=\u0026quot;「育てにくい子」と感じたときに読む本―悩み多き年齢を上手に乗り越えるためのアドバイス\u0026quot; title=\u0026quot;「育てにくい子」と感じたときに読む本―悩み多き年齢を上手に乗り越えるためのアドバイス\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 子供にはそれぞれに必要な愛情の量に差があって、それが満たされれば勝手に自立していく。だから傍目には甘やかしすぎに映るかもしれないが、とにかくたっぷりワガママを聞いてやること。 ただ、子供のやることに口出すのはよくない。絶対ダメ。 だそうな。  ","permalink":"https://nobwak.github.io/posts/2010-01-06-%E8%82%B2%E3%81%A6%E3%81%AB%E3%81%8F%E3%81%84%E5%AD%90%E3%81%A8%E6%84%9F%E3%81%98%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E8%AA%AD%E3%82%80%E6%9C%AC/","summary":"過保護はOK。過干渉はダメよ。という主張。 まあ、ヤバい経済学でも書いてたけど、育児方法なんてそもそも効果が測りにくくて、十年もすればメジャー","title":"「育てにくい子」と感じたときに読む本"},{"content":"/usr/ports/develにsubversionとsubversion-freebsdがあってちょっと驚いた。 どうもsubversion-freebsdにはFreeBSDのソースレポジトリにアクセスする際に便利なよう、ちょっとしたカスタマイズがされているものらしい。  $ cat ./subversion-freebsd/pkg-descr Subversion is a version control system designed to be as similar to cvs(1) as possible, while fixing many outstanding problems with cvs(1). This version adds patches that at this time are specific to the needs of the FreeBSD Project src repository. If you do not need to access that repository you will want to use devel/subversion. WWW: http://subversion.tigris.org/ [FreeBSDのForum](http://forums.freebsd.org/showthread.php?t=2740)より、subversion-freebsdに入っているもの。  There\u0026amp;#39;s 4 things in there: - supply the repository location in keyword substitution - set \u0026amp;#34;display original\u0026amp;#34; to true for merges - provide 3 extra format characters in substitution - Provide a default template that has FreeBSD project format: + \u0026amp;#34;PR:\u0026amp;#34;, + \u0026amp;#34;Submitted by:\u0026amp;#34;, + \u0026amp;#34;Reviewed by:\u0026amp;#34;, + \u0026amp;#34;Approved by:\u0026amp;#34;, + \u0026amp;#34;Obtained from:\u0026amp;#34;, + \u0026amp;#34;MFC after:\u0026amp;#34;, + \u0026amp;#34;Security:\u0026amp;#34;, ","permalink":"https://nobwak.github.io/posts/2010-01-05-ports%E3%81%ABsubversion%E3%81%A8subversion-freebsd%E3%81%AE%E4%BA%8C%E3%81%A4%E3%81%8C%E3%81%82%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"/usr/ports/develにsubversionとsubversion-freebsdがあってちょっと驚いた。 どうもsubversio","title":"portsにsubversionとsubversion-freebsdの二つがある件について"},{"content":"webdavが出来上がったので、今度はここにSVNを組み込んでみた。 Excel, Wordファイルのバージョン管理をしたいだけなので、headとかそういうブランチを作成する予定はなし。 まず[webdavとsubversionを設定しておく](http://d.hatena.ne.jp/flageo/20091226/p1)。 そのうえで/usr/local/etc/apache22/extra/httpd-dav.confを編集  DavLockDB \u0026amp;#34;/usr/local/var/DavLock\u0026amp;#34; \u0026amp;#60;Location /repo\u0026gt; DAV svn SVNPath /usr/local/var/svn/repo AuthType Digest AuthName \u0026amp;#34;svn sandbox\u0026amp;#34; AuthUserFile \u0026amp;#34;/usr/local/www/.davsvn.passwd\u0026amp;#34; require valid-user Order deny,allow \u0026amp;#60;/Location\u0026gt; httpd-dav.confに書きこんだ設定に合わせて環境を整える。 まずパスワードファイルの作成。 AuthTypeはBasicでもいいけど、せっかくなのでDigest。 始めてパスワードファイルを作る場合には-cをつける。 パスワードファイルはどこでもよいが、外部からアクセスできないディレクトリに置くこと。 もちろん場所を変えたらhttpd-dav.confの指定も併せて修正する。 また、htdigestはrealmの設定も必要。httpd-dav.confのAuthNameと合わせること。 以下は実行例  $ htdigest --help Usage: htdigest \u0026amp;#91;-c] passwordfile realm username The -c flag creates a new file. $ sudo htdigest -c \u0026amp;#34;/usr/local/www/.davsvn.passwd\u0026amp;#34; \u0026amp;#34;svn sandbox\u0026amp;#34; harukiya 次にレポジトリとレポジトリを置くディレクトリの作成。 もちろんhttp-dav.confで指定した場所に作ること。  $ sudo mkdir -p /usr/local/var/svn/repo $ sudo svnadmin create /usr/local/var/svn/repo $ sudo chown -R www:www /usr/local/var/svn/repo $ sudo chmod -R 770 /usr/local/var/svn/repo あとはapacheを再起動する。  $ sudo /usr/local/etc/rc.d/apache22 restart Windowsで[TortoiseSVN](http://tortoisesvn.net/)をインストールして再起動。 Windowsで作業用ディレクトリを開く。どこでもよい。 そこで右クリックし、SVN checkoutを選ぶ。 「URL of repository:」にhttp://＜サーバアドレス＞/＜レポジトリディレクトリ＞を入れる。 俺の場合だとhttp://192.168.0.11/repoとかになる。 で、OKを押す。 あとはここにバージョン管理したいファイルをガバガバ入れていけばcommitなどしてけばOK  ","permalink":"https://nobwak.github.io/posts/2010-01-04-webdav+svn%E3%81%A7windows%E3%81%AEtortoisesvn%E3%81%8B%E3%82%89%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/","summary":"webdavが出来上がったので、今度はここにSVNを組み込んでみた。 Excel, Wordファイルのバージョン管理をしたいだけなので、headとかそうい","title":"webdav+svnで、WindowsのTortoiseSVNからアクセスしてみた。"},{"content":"うん。まあ、いい話っすね。という程度。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/416641710X\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41MoJdRuVDL._SL75_.jpg\u0026quot; alt=\u0026quot;向田邦子全集〈4〉小説4 寺内貫太郎一家\u0026quot; title=\u0026quot;向田邦子全集〈4〉小説4 寺内貫太郎一家\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt;  ","permalink":"https://nobwak.github.io/posts/2010-01-03-%E5%90%91%E7%94%B0%E9%82%A6%E5%AD%90%E5%85%A8%E9%9B%864%E5%B0%8F%E8%AA%AC4_%E5%AF%BA%E5%86%85%E8%B2%AB%E5%A4%AA%E9%83%8E%E4%B8%80%E5%AE%B6/","summary":"うん。まあ、いい話っすね。という程度。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/416641710X\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41MoJdRuVDL._SL75_.jpg\u0026quot; alt=\u0026quot;向田邦子全集〈4〉小説4 寺内貫太郎一家\u0026quot; title=\u0026quot;","title":"向田邦子全集〈4〉小説4 寺内貫太郎一家"},{"content":"ブックオフで叩き売られていたので再読した。 企業トップや新聞記者や警察の仕事っぷりがとてもリアルに見えて、この人はどうしてここまで書けるんだろう、といつも思う。 この人の本は、読んだ後は重苦しい気分になるけど、思い出したように読みたくなる。リヴィエラとか原子炉テロの話とか、また読みたいなあ。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4620105791\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51ZYCKW0CTL._SL75_.jpg\u0026quot; alt=\u0026quot;レディ・ジョーカー〈上〉\u0026quot; title=\u0026quot;レディ・ジョーカー〈上〉\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; あと、なんでこの人の本はホモっぽい方面に行くのだろうか。そこだけ止めてほしい。  ","permalink":"https://nobwak.github.io/posts/2009-12-27-%E3%83%AC%E3%83%87%E3%82%A3%E3%82%B8%E3%83%A7%E3%83%BC%E3%82%AB%E3%83%BC/","summary":"ブックオフで叩き売られていたので再読した。 企業トップや新聞記者や警察の仕事っぷりがとてもリアルに見えて、この人はどうしてここまで書けるんだろ","title":"レディ・ジョーカー"},{"content":"メモ。 apache22, subversionをインストールする。 subversionはpkgでなくportsからインストールして、オプション選択のところでmod_dav_svnを選ばないとダメ。 /usr/local/etc/apache22/httpd.confに以下の行があるか確認。 subversionをインストールするときに勝手に加えてくれるはず。  LoadModule dav_module libexec/apache22/mod_dav.so LoadModule dav_svn_module libexec/apache22/mod_dav_svn.so LoadModule authz_svn_module libexec/apache22/mod_authz_svn.so 同じくhttpd.confで、httpd-dav.confを指定している行のコメントアウトを外す。  # Distributed authoring and versioning (WebDAV) #Include etc/apache22/extra/httpd-dav.conf Include etc/apache22/extra/httpd-dav.conf 以降、/usr/local/etc/apache22/extra/httpd-dav.conf を参照したり編集したりする。  # The User/Group specified in httpd.conf needs to have write permissions # on the directory where the DavLockDB is placed and on any directory where # \u0026amp;#34;Dav On\u0026amp;#34; is specified. DavLockDB \u0026amp;#34;/usr/local/var/DavLock\u0026amp;#34; まずロックファイルを置くディレクトリの指定があるので、作る。 パーミッションの設定も忘れないこと。 以下、実行例。  $ sudo mkdir /usr/local/var/DavLock $ sudo chown www:www ./DavLock/ $ sudo chmod 750 ./DavLock/ $ ls -la total 8 drwxr-xr-x 4 root wheel 512 12 27 22:08 . drwxr-xr-x 16 root wheel 512 12 26 21:49 .. drwxr-x--- 2 www www 512 12 27 22:08 DavLock 次に実際のDavの場所、Davアクセスするためのパスワードファイルの場所指定。デフォルトが気に入らなければ変える。 変えたらディレクトリは作っておくこと。 以下、httpd-dav.confの変更例。  #Alias /uploads \u0026amp;#34;/usr/local/uploads\u0026amp;#34; Alias /uploads \u0026amp;#34;/usr/local/www/uploads\u0026amp;#34; #\u0026amp;#60;Directory \u0026amp;#34;/usr/local/uploads\u0026amp;#34;\u0026gt; \u0026amp;#60;Directory \u0026amp;#34;/usr/local/www/uploads\u0026amp;#34;\u0026gt; # You can use the htdigest program to create the password database: # htdigest -c \u0026amp;#34;/usr/local/user.passwd\u0026amp;#34; DAV-upload admin #AuthUserFile \u0026amp;#34;/usr/local/user.passwd\u0026amp;#34; AuthUserFile \u0026amp;#34;/usr/local/www/dav.passwd\u0026amp;#34; パスワードファイルの作成。 ユーザがharukiya、realmがDAV-uploadの場合の例。初めてパスワードファイルを作るときは-cをつける。 htdigestが使えるよ、と書いてあるので使ってみる。 以下、実行例。  $sudo htdigest -c \u0026amp;#34;/usr/local/www/dav.passwd\u0026amp;#34; DAV-upload harukiya Adding password for harukiya in realm DAV-upload. New password: Re-type new password: デフォルトだと、誰でもwebdavディレクトリを見られて、書き込みはadminだけOK、ただしパスワード要という設定。 とりあえず下記ではadminを上記でパスワードを設定したharukiyaに変更している。  # Allow universal read-access, but writes are restricted # to the admin user. \u0026amp;#60;LimitExcept GET OPTIONS\u0026gt; #require user admin require user harukiya \u0026amp;#60;/LimitExcept\u0026gt; あとは/etc/rc.confにapache22_enable=\u0026quot;YES\u0026quot;という一行を加え、/usr/local/etc/rc.d/apache22 startとやればOK。  ","permalink":"https://nobwak.github.io/posts/2009-12-26-webdav%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/","summary":"メモ。 apache22, subversionをインストールする。 subversionはpkgでなくportsからインストールして、オプション選択のところでm","title":"webdavを設定してみた"},{"content":"数学と江夏と子供以外に興味のない「博士」の感情表現がとても良かった。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4101215235\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/419HzqbTelL._SL75_.jpg\u0026quot; alt=\u0026quot;博士の愛した数式 (新潮文庫)\u0026quot; title=\u0026quot;博士の愛した数式 (新潮文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt;  ","permalink":"https://nobwak.github.io/posts/2009-12-25-%E5%8D%9A%E5%A3%AB%E3%81%AE%E6%84%9B%E3%81%97%E3%81%9F%E6%95%B0%E5%BC%8F/","summary":"数学と江夏と子供以外に興味のない「博士」の感情表現がとても良かった。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4101215235\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/419HzqbTelL._SL75_.jpg\u0026quot; alt=\u0026quot;博士の愛した数式 (新潮文庫)\u0026quot; ti","title":"博士の愛した数式"},{"content":"オスというのは、種が自分たちの遺伝子をシャッフルするために作り出した使いっ走り、という話。 メスを適当に改造して出来たものなので、メスより脆弱な作りになってんじゃねーの?という仮説が面白かった。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4334034748\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/31hi3MOYEpL._SL75_.jpg\u0026quot; alt=\u0026quot;できそこないの男たち (光文社新書)\u0026quot; title=\u0026quot;できそこないの男たち (光文社新書)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt;  ","permalink":"https://nobwak.github.io/posts/2009-12-24-%E3%81%A7%E3%81%8D%E3%81%9D%E3%81%93%E3%81%AA%E3%81%84%E3%81%AE%E7%94%B7%E3%81%9F%E3%81%A1/","summary":"オスというのは、種が自分たちの遺伝子をシャッフルするために作り出した使いっ走り、という話。 メスを適当に改造して出来たものなので、メスより脆弱","title":"できそこないの男たち"},{"content":"納得いかないが、とりあえずメモだけしとく。 sound-juicer, braseo, totem（以下、面倒なのでsound-juicer）はCDへ/dev/acdではなく/dev/cd（SCSI）経由でアクセスするので、いろいろと設定を変える必要がある。 ◎/etc/fstabを修正する。 /etc/fstabを修正して、/dev/acd0をコメントアウト、さらにprocを作っておく。  $ cat /etc/fstab # Device\tMountpoint\tFStype\tOptions\tDump\tPass# /dev/ad0s1b\tnone\tswap\tsw\t0\t0 /dev/ad0s1a\t/\tufs\trw\t1\t1 /dev/ad0s1f\t/home\tufs\trw\t2\t2 /dev/ad0s1e\t/usr\tufs\trw\t2\t2 /dev/ad0s1d\t/var\tufs\trw\t2\t2 #/dev/acd0\t/cdrom\tcd9660\tro,noauto\t0\t0 proc\t/proc\tprocfs\trw\t0\t0 $ sudo mount /proc $ mount /dev/ad0s1a on / (ufs, local) devfs on /dev (devfs, local, multilabel) /dev/ad0s1f on /home (ufs, local, soft-updates) /dev/ad0s1e on /usr (ufs, local) /dev/ad0s1d on /var (ufs, local) procfs on /proc (procfs, local) ◎atapicamをロードするよう、/boot/loader.confを修正する。 [FreeBSD公式サイト](http://www.freebsd.org/gnome/docs/faq2.html#q15)を見るとKernelにdevice atapicamを入れろとか書いてあるが、そんなことしたらGENERICカーネルが使えずfreebsd-updateに影響するので、カーネルモジュールをロードすることにした。  $ grep atapicam /boot/loader.conf atapicam_load=\u0026amp;#34;YES\u0026amp;#34; loader.confが正しく設定されているか、いったんリブートして確認するのがよいが、どうせ後でdevfs.confを修正した時にリブートするのでその時に確認するとして、ここではsudo kldload atapicamする。 kldstatしてatapicamがロードされているか見る。 さらにcamcontrolでデバイスが認識されていることも確認すること。  $ kldstat Id Refs Address Size Name 1 19 0xc0400000 b6dfe0 kernel 2 1 0xc0f6e000 7224 snd_ich.ko 3 2 0xc0f76000 567c0 sound.ko 4 1 0xc0fcd000 4ffc atapicam.ko 5 1 0xc4774000 2000 blank_saver.ko 6 1 0xc48da000 9000 i915.ko 7 1 0xc48e3000 14000 drm.ko $ camcontrol devlist \u0026amp;#60;HL-DT-ST RW/DVD GCC-4160N 0013\u0026gt; at scbus1 target 0 lun 0 (cd0,pass0) ◎camcontrol devlistで表示されたデバイス名に合わせて/etc/devfs.confを修正する。 そのままだと一般ユーザはアクセス出来ないので。 上記の結果を見ると、/dev/cd0が狙いのCD（DVD）ROMドライブなので、devfs.confでパーミッションを変える。 [FreeBSD GNOME FAQ](http://www.freebsd.org/gnome/docs/faq2.html#q15)にあるとおり、0666にするのもよいが、ここではoperatorグループに自ユーザを加え、root:operatorに0660にした。 その他にxpt0, pass0も同様に。  $ tail /etc/devfs.conf ##### own\tcd0\troot:operator perm\tcd0\t0666 own\tacd0\troot:operator perm\tacd0\t0666 own\txpt0\troot:operator perm\txpt0\t0666 own\tpass0\troot:operator perm\tpass0\t0666 own\tmsdosfs\troot:operator perm\tmsdosfs\t0666 $ grep operator /etc/group operator:*:5:root,ore ＜リブート＞ $ ls -la /dev/cd0 /dev/xpt0 /dev/pass0 crw-rw---- 1 root operator 0, 92 12 21 23:52 /dev/cd0 crw-rw---- 1 root operator 0, 91 12 21 23:52 /dev/pass0 crw-rw---- 1 root operator 0, 90 12 21 23:52 /dev/xpt0 GNOMEだったらこれで行けた。XFCE4だったらダメ。  ","permalink":"https://nobwak.github.io/posts/2009-12-23-wm%E3%82%92gnome2%E3%81%AB%E3%81%97%E3%81%9F%E3%82%89sound-juicer_brasero_totem%E3%81%8C%E5%8B%95%E3%81%84%E3%81%9F%E3%81%A7%E3%81%94%E3%81%96%E3%82%8B/","summary":"納得いかないが、とりあえずメモだけしとく。 sound-juicer, braseo, totem（以下、面倒なのでsound-juicer）はCDへ/dev/acdではなく/dev","title":"WMをGNOME2にしたらsound-juicer, brasero, totemが動いたでござる。"},{"content":"gripはまったく問題ないのに、sound-juicerだとCDドライブを見つけてくれない。 ググっても分からないので聞いてみることにする。もし解決したらメモでもしてみる予定。 追記 [解決した。](http://d.hatena.ne.jp/flageo/20091223/p1)  ","permalink":"https://nobwak.github.io/posts/2009-12-20-sound-juicer%E3%81%8Ccd%E3%83%89%E3%83%A9%E3%82%A4%E3%83%96%E3%82%92%E8%A6%8B%E3%81%A4%E3%81%91%E3%81%A6%E3%81%8F%E3%82%8C%E3%81%AA%E3%81%84%E4%BB%B6/","summary":"gripはまったく問題ないのに、sound-juicerだとCDドライブを見つけてくれない。 ググっても分からないので聞いてみることにする。も","title":"sound-juicerがCDドライブを見つけてくれない件"},{"content":"湾岸戦争の兵站を支えた人のお話。 戦争でまったく目立たない後方支援が詳しく書かれていてたまらない。 すさまじい兵員や物資を、短時日のうちに地球の反対側に運ぶ。しかも先方にはまったく受け入れ態勢が整ってないとか狂気の沙汰。 今日決まっている事が明日になったら変わることだってある。確実な事は何もない。 そんな状況でも無事に遂行できたのは、あらゆる可能性を考慮して手を打ってたからなんだと。恐れ入りました。 経営戦略とかは、まあどうでもいいや。  ","permalink":"https://nobwak.github.io/posts/2009-12-19-%E5%B1%B1%E5%8B%95%E3%81%8F%E6%B9%BE%E5%B2%B8%E6%88%A6%E4%BA%89%E3%81%AB%E5%AD%A6%E3%81%B6%E7%B5%8C%E5%96%B6%E6%88%A6%E7%95%A5/","summary":"湾岸戦争の兵站を支えた人のお話。 戦争でまったく目立たない後方支援が詳しく書かれていてたまらない。 すさまじい兵員や物資を、短時日のうちに地球の","title":"山・動く―湾岸戦争に学ぶ経営戦略"},{"content":"今日の今日まで、FreeBSDにCDとかDVDとかUSBメモリを自動マウントすることができなかったが、思わぬ落とし穴に気がついたおかげで、なんとか達成できたのでメモ。 基本、[このへん（FreeBSD公式サイト）](http://www.freebsd.org//gnome/docs/halfaq.html)を見ながら作業する。 当然、[GNOMEとかXFCE4の構築まで済んでる前提](http://d.hatena.ne.jp/flageo/20090724/p1)で。（もちろんhal, dbusも動いている前提で） やること。 1./etc/fstabの編集 /dev/acd0をコメントアウト procfsを書き入れて、mount。 /etc/fstabの例（デリミタ（区切り）はタブ）  #/dev/acd0\t/cdrom\tcd9660\tro,noauto\t0\t0 proc\t/proc\tprocfs\trw\t0\t0 　このあとsudo mount /procする。 2./etc/devfs.confの編集 以下の行を追加（デリミタ（区切り）はタブ） そして、ああなんと、俺が今まで自動マウント出来なかったのは、区切りをスペースにしてたのが問題であったよ。  perm cd0 0666 perm acd0 0666 perm xpt0 0666 perm pass0 0666 3./usr/local/etc/PolicyKit/PolicyKit.confの編集 自ユーザなら何でも出来るようにする。 セキュリティ上、ナニかもしれないが、自動マウントなんて、個人用のマシンでしかやらないのでオッケーオッケー。 ◎編集前  \u0026amp;#60;config version=\u0026amp;#34;0.1\u0026amp;#34;\u0026gt; \u0026amp;#60;match user=\u0026amp;#34;root\u0026amp;#34;\u0026gt; \u0026amp;#60;return result=\u0026amp;#34;yes\u0026amp;#34;/\u0026gt; \u0026amp;#60;/match\u0026gt; ◎編集後（自分のユーザ名がoreの場合）  \u0026amp;#60;config version=\u0026amp;#34;0.1\u0026amp;#34;\u0026gt; \u0026amp;#60;match user=\u0026amp;#34;root|ore\u0026amp;#34;\u0026gt; \u0026amp;#60;return result=\u0026amp;#34;yes\u0026amp;#34;/\u0026gt; \u0026amp;#60;/match\u0026gt; 4./etc/sysctl.confの編集 これは必須ではないけど以下を追加。  vfs.usermount=1 んでrebootすればOK。  ","permalink":"https://nobwak.github.io/posts/2009-12-18-freebsd%E3%81%A7%E3%83%AA%E3%83%A0%E3%83%BC%E3%83%90%E3%83%96%E3%83%AB%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E3%82%92%E8%87%AA%E5%8B%95%E3%83%9E%E3%82%A6%E3%83%B3%E3%83%88%E3%81%95%E3%81%9B%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"今日の今日まで、FreeBSDにCDとかDVDとかUSBメモリを自動マウントすることができなかったが、思わぬ落とし穴に気がついたおかげで、な","title":"FreeBSDでリムーバブルメディアを自動マウントさせるには"},{"content":"7.2-RELEASEのマシンを8.0-RELEASEに上げようとfreebsd-updateを使ったのだが、とにかくダウンロードとダウンロード前のチェックに時間がかかるのと、何よりも/etc配下ファイルのマージが地獄。 [8.0のISOイメージをダウンロードしてきてアップグレードした方](http://d.hatena.ne.jp/flageo/20080111/p2)がはるかに早いと思った。  ","permalink":"https://nobwak.github.io/posts/2009-12-17-freebsd-update%E3%81%A7%E3%83%A1%E3%82%B8%E3%83%A3%E3%83%BC%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%83%E3%83%97%E3%81%AF%E8%BE%9B%E3%81%84%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"7.2-RELEASEのマシンを8.0-RELEASEに上げようとfreebsd-updateを使ったのだが、とにかくダウンロードとダウンロ","title":"freebsd-updateでメジャーバージョンアップは辛い件について"},{"content":"リップしたDVDのイメージをRedhat Linuxでmount -o loopにてマウントしたところ、なぜかファイル名が8文字しか表示されなくて難儀した。 結論から言えば、ISO9660イメージ（要するにCD）として認識されているのが問題なので、横着しないで-tオプションでUDFイメージであることを伝えればよい。 Linuxでの実行例  # mount -o loop -t udf \u0026amp;#60;イメージファイル\u0026gt; \u0026amp;#60;mountポイント\u0026gt; Linuxで発生したけどFreeBSDで起こるかは知らない。 つか、そもそも自動で判定してくれない…のか?  ","permalink":"https://nobwak.github.io/posts/2009-12-12-dvd%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%9E%E3%82%A6%E3%83%B3%E3%83%88%E3%81%97%E3%81%9F%E3%82%89%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D%E3%81%8C8%E6%96%87%E5%AD%97%E3%81%AB%E7%B8%AE%E3%81%BE%E3%81%A3%E3%81%9F%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"リップしたDVDのイメージをRedhat Linuxでmount -o loopにてマウントしたところ、なぜかファイル名が8文字しか表示されなくて難","title":"DVDイメージファイルをマウントしたらファイル名が8文字に縮まった件について"},{"content":"Windowsで圧縮した日本語ファイルをFreeBSDでunzipすると文字化けする。 ここでの文字化けは、ファイル名だけでなく、どうも中身も壊れてしまうようだ。 該当ファイルをlsしてみると、（無効なエンコーディング）と表示される。  $ ls 進捗1112.xls (無効なエンコーディング) $ 仕事上、メールをFreeBSDマシンで受けることがあるのだが、このおかげでメールに添付されたファイルを開けない。 困っていて検索したところ、以下のページがヒット。 これで内容が壊れる件は問題なく出来た。（ファイル名はSJISなのでやっぱり化ける。UTF-8やEUC-JPにするには[convmv](http://d.hatena.ne.jp/flageo/20070302/p1)が必要） [http://nhh.mo-blog.jp/ttt/2007/03/zipunzip_315b.html](http://nhh.mo-blog.jp/ttt/2007/03/zipunzip_315b.html) ここに記載の通り、\u0026quot;CFLAGS+=-D'Ext_ASCII_TO_Native(string, hostnum, hostver, isuxatt, islochdr)'\u0026quot;をつけてmake。 出来たカスタム版unzipだが、/usr/local/bin配下に置くのはちょっと嫌なので、ホームディレクトリのbin配下にコピー。さらにカスタム版だということが分かるよう、名前はunzip.custに変えた。  $ cd /usr/ports/archivers/unzip $ make \u0026amp;#34;CFLAGS+=-D\u0026amp;#39;Ext_ASCII_TO_Native(string, hostnum, hostver, isuxatt, islochdr)\u0026amp;#39;\u0026amp;#34; （略） $ cd ./work/unzip60 (workの下のディレクトリ名は異なる可能性あり) $ cp unzip ~/bin/unzip.cust $ ","permalink":"https://nobwak.github.io/posts/2009-11-23-%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%90%AB%E3%82%80zip%E3%81%8C%E5%B1%95%E9%96%8B%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E4%BB%B6/","summary":"Windowsで圧縮した日本語ファイルをFreeBSDでunzipすると文字化けする。 ここでの文字化けは、ファイル名だけでなく、どうも中身も","title":"日本語ファイルを含むzipが展開できない件"},{"content":"sedの使い方なんてすぐ忘れるからメモ。 例) あるファイルから改行を取り除く  $ tr -d \u0026amp;#39;\u0026amp;#92;n\u0026amp;#39; \u0026amp;#60; inputfile ","permalink":"https://nobwak.github.io/posts/2009-11-16-%E7%89%B9%E5%AE%9A%E3%81%AE%E6%96%87%E5%AD%97%E3%82%92%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8B%E3%82%89%E5%8F%96%E3%82%8A%E9%99%A4%E3%81%8F%E3%81%AB%E3%81%AF/","summary":"sedの使い方なんてすぐ忘れるからメモ。 例) あるファイルから改行を取り除く $ tr -d \u0026amp;#39;\u0026amp;#92;n\u0026amp;#39; \u0026amp;#60; inputfile","title":"特定の文字をファイルから取り除くには"},{"content":"大したことはないのだが。 カスタムカーネルを使っている場合でも、/boot/GENERICにGENERIC kernelを置いとけば更新してくれるよ、という話。ハンドブックに書いてある。 カスタムカーネルを使っていて、なおかつ/boot/GENERICを置いているマシンでfreebsd-udpdateをした場合。  isis# uname -a FreeBSD isis 7.2-RELEASE FreeBSD 7.2-RELEASE #0: Tue Aug 11 08:47:28 JST 2009 doe@isis:/usr/obj/usr/src/sys/ISIS i386 isis# freebsd-update fetch Looking up update.FreeBSD.org mirrors... none found. Fetching metadata signature for 7.2-RELEASE from update.FreeBSD.org... done. Fetching metadata index... done. Inspecting system... done. Preparing to download files... done. The following files will be updated as part of updating to 7.2-RELEASE-p3: /boot/GENERIC/if_bce.ko /boot/GENERIC/if_bce.ko.symbols /boot/GENERIC/if_fxp.ko /boot/GENERIC/if_fxp.ko.symbols /boot/GENERIC/kernel /boot/GENERIC/kernel.symbols /lib/libc.so.7 /lib/libthr.so.3 # 通常は/boot/kernel/と表示されるはずが、/boot/GENERICとなっているのに注目。 あとは普段どおりinstallして、reboot -kか、nextbootでGENERICを指定すればOK。  # freebsd-update install Installing updates... done. # shutdown -r now (中略) # uname -a FreeBSD isis 7.2-RELEASE FreeBSD 7.2-RELEASE #0: Tue Aug 11 08:47:28 JST 2009 doe@isis:/usr/obj/usr/src/sys/ISIS i386 # 通常のrebootでは当然7.2-RELEASEのまま。 reboot -kでGENERICを指定すると。  # sync;sync # reboot -k GENERIC # # uname -ir 7.2-RELEASE-p2 GENERIC ","permalink":"https://nobwak.github.io/posts/2009-11-11-%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AEfreebsd-update/","summary":"大したことはないのだが。 カスタムカーネルを使っている場合でも、/boot/GENERICにGENERIC kernelを置いとけば更新してくれ","title":"カスタムカーネルを使用しているときのfreebsd-update。"},{"content":"自宅サーバはほぼ10年前のノートPCだ。 ここにFreeBSDを入れてApache, Samba, mt-daapdを動かしている。バッテリーはさすがに死んでいるが動作には全くといっていいほど問題ない。 とはいえ、通常運用時はともかくとして、セキュリティフィックスなどでOSやportsの更新が発生したときの手間がさすがにつらくなってきた。 portsはもうかなり前から別マシンでコンパイルするようにしていて、これはもう解決。 OSは別マシンでbuildした/usr/objからインストールしたり、snapshotsのISOイメージを使うようにしていたが、とうとうこれもあきらめてfreebsd-updateに移行することにした。 そしたら予想以上に楽で驚いた。 ただ、RELEASEなど安定版バージョン（とそのBETA版、RC版）でなければ使えない。 FreeBSDにはRELEASEブランチのほかに開発版であるSTABLE, CURRENTというのもある。人柱用のCURRENTはともかく、CURRENTで実験済みのソースがバンバン突っ込まれるSTABLEで使えないのはちょっと寂しく、これが今まで俺がfreebsd-updateを使わなかった理由なんだが、まあSTABLEでのバイナリアップデートはきつかろう。 あともう一つ、カーネルもカスタマイズしている場合には注意が必要。 そういった訳で、7-STABLEからわざわざ7.2-RELEASEに戻してやってみた。 実際にやったのは1ヶ月ほど前なので、以下の例では7.2-p3までのアップデートです。11/5時点では7.2-p4が最新。 freebsd-update fetchで必要なファイルをダウンロード。  # uname -r 7.2-RELEASE # freebsd-update fetch Looking up update.FreeBSD.org mirrors... none found. Fetching metadata signature for 7.2-RELEASE from update.FreeBSD.org... done. Fetching metadata index... done. Fetching 2 metadata files... done. Inspecting system... done. Preparing to download files... done. Fetching 35 patches.....10....20....30.. done. Applying patches... done. The following files will be updated as part of updating to 7.2-RELEASE-p3: /boot/kernel/if_bce.ko /boot/kernel/if_bce.ko.symbols /boot/kernel/if_fxp.ko /boot/kernel/if_fxp.ko.symbols /boot/kernel/kernel /boot/kernel/kernel.symbols /lib/libc.so.7 （中略） /usr/src/sys/conf/newvers.sh /usr/src/sys/dev/bce/if_bce.c /usr/src/sys/dev/fxp/if_fxp.c /usr/src/sys/kern/sys_pipe.c /usr/src/sys/netinet6/in6.c # その後、installして再起動。 uname -rとすればパッチレベルの上がっている事が確認できる…はずだが、unameの応答はp2になっていてp3ではない。  # freebsd-update install # reboot （略） $ uname -r 7.2-RELEASE-p2 $ これはなぜかというと、p2からp3で修正されたのはbindだけで、kernelは修正されておらず、p2の時のままだから。 unameに対してkernelが返す値は、/usr/src/sys/conf/newvers.shが元になっているが、こちらを確認すればしっかりp3になっていることが確認できる。 繰り返しになるが、p2からp3になったときに、freebsd-updateはbindを更新し、kernelは更新しないからunameの応答はp2になるというわけ。 ただ、freebsd-updateはパッチレベルが上がった時には必ずnewvers.shを更新しているので、kernelに更新がなくとも、kernelを再作成すればパッチレベルは上がる。 真面目なサーバの場合は、kernelを再作成しておいた方がよいと思う。 ロールバックも試しにやってみた。  # uname -r 7.2-RELEASE $ uname -r 7.2-RELEASE-p2 # freebsd-update rollback Uninstalling updates... done. $ uname -r 7.2-RELEASE ","permalink":"https://nobwak.github.io/posts/2009-11-09-freebsd-update%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%89%E6%A5%BD%E3%81%99%E3%81%8E%E3%81%A6%E5%90%B9%E3%81%84%E3%81%9F/","summary":"自宅サーバはほぼ10年前のノートPCだ。 ここにFreeBSDを入れてApache, Samba, mt-daapdを動かしている。バッテリーはさすがに死ん","title":"freebsd-updateを使ったら楽すぎて吹いた。"},{"content":"結論から言うとports-mgmt/psearchがおすすめ。 あのソフトがportsにないかなーというとき、セオリーで言えば/usr/portsディレクトリでmake search key=\u0026quot;キーワード\u0026quot;とするわけだが、いちいちここまでコマンドを打つのが面倒だし、そもそも書式をすぐに忘れる。（後者は俺だけかもしれないが） 次に考えるのがlocateやfindだが。findは長々とコマンドを打たないといけないので嫌。検索遅いし。 locateは強力だが、ヒットしすぎて困り果てるし、システムインストール直後だとデータベースが出来ていなくて使えない。 そこでしばらくwhereisコマンドを使っていた。 こんな感じ。  $ whereis audacious audacious: /usr/ports/multimedia/audacious ただ、whereisなんで、検索対象のファイル名をきっちり分かってないと使えない。（たぶん） また、注意すべきは-aオプションを与えないと最初のマッチしか返さないこと。以下の例のように、初めてxlockmoreを検索したときは、なんで日本語版しかないんだ?と悩んだ。  $ whereis xlockmore xlockmore: /usr/ports/japanese/xlockmore $ whereis -a xlockmore xlockmore: /usr/ports/japanese/xlockmore /usr/ports/x11/xlockmore そういった遍歴の結果、ports-mgmt/psearchに辿り着いて今のことろ満足している。 書式は以下の通り。  psearch \u0026amp;#91;options] PATTERN PATTERNには正規表現が使える。  $ psearch audaci* audio/audacious-crossfade A Crossfading/Gapless Plugin audio/audacious-dumb Audacious plugin that support the IT, XM, S3M or MOD formats audio/audacious-mac Audacious plugin that support the Monkey\u0026amp;#39;s Audio lossless formats audio/audacity Audacity is a GUI editor for digital audio waveforms audio/audacity-devel Audacity is a GUI editor for digital audio waveforms audio/wmauda A port of wmxmms to GTK 2.x and Audacious multimedia/audacious A media player based on BMP and XMMS multimedia/audacious-plugins Plugins needed for audacious x11-themes/audacious-skins A collection of audacious skins 俺はいつもaudaciousを入れるつもりでaudacityをインストールしてしまってガッカリするんだがこれで安心。 その他には、単語を複数渡し、スペースで区切ればand検索。-oオプションを与えればOR検索。-nならバージョン名を教えてくれる。-cでカテゴリーを指定すればそこだけを探してくれる。  $ psearch thunar plugin archivers/thunar-archive-plugin Archive plugin for the Thunar File Manager audio/thunar-media-tags-plugin A Media Tags Plugin devel/thunar-svn-plugin Subversion plugin for Thunar sysutils/thunar-volman-plugin A Device manager plugin. $ psearch -o thunar plugin|less archivers/thunar-archive-plugin Archive plugin for the Thunar File Manager astro/gkrellmoon A moon clock plugin for Gkrellm （略） $ psearch -n thunar plugin thunar-archive-plugin-0.2.4_2 Archive plugin for the Thunar File Manager thunar-media-tags-plugin-0.1.2_8 A Media Tags Plugin thunar-svn-plugin-0.0.3_1 Subversion plugin for Thunar thunar-volman-0.2.0_4 A Device manager plugin. $ psearch -c archivers thunar plugin archivers/thunar-archive-plugin Archive plugin for the Thunar File Manager $ すげー便利。 ただ/usr/ports/INDEX-?（?にはOSのメジャーバージョンが入る）が無いとダメ。普段は気にすることないがメジャーバージョンの変わり目では気をつけること。  ","permalink":"https://nobwak.github.io/posts/2009-07-31-ports%E3%82%92%E6%8E%A2%E3%81%99%E3%81%AE%E3%81%8C%E3%81%A0%E3%82%8B%E3%81%84%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"結論から言うとports-mgmt/psearchがおすすめ。 あのソフトがportsにないかなーというとき、セオリーで言えば/usr/por","title":"portsを探すのがだるい件について。"},{"content":"ports/packagesをインストールするといくつかのports/packagesで注意書き（Install Notice）が表示される。 たまーにクリティカルな注意の場合があるんだが、大量のports（packages）をインストールしているときなど、注意書きもターミナルの表示限界を超えて吹っ飛んでいく。 portmasterなどでインストールしていれば、こういった注意書きを後でまとめて表示してくれるが、後で気がついたところで時すでに遅し。 そこで考えた。 pkg_info -D ＜ports名＞とするとインストール後のメッセージを表示してくれる。こいつにインストールしたports名のリストを与えてやればいいわけだ。 問題は依存も含めてどうやって一覧を作るかだが、pkg_info -r ＜ports名＞でそのportsが依存するportsをリストしてくれる。 xorgを与えてあげると、以下のようになる。  $ pkg_info -r xorg-7.4_2 Information for xorg-7.4_2: Depends on: Dependency: xorg-docs-1.4,1 Dependency: xineramaproto-1.1.2 Dependency: xf86vidmodeproto-2.2.2 Dependency: xf86miscproto-0.9.2 Dependency: xf86dgaproto-2.0.3 Dependency: xextproto-7.0.5 Dependency: xbitmaps-1.0.1 あとはこれを整形してpkg_info -Dに渡せばよい。 もちろん、このリストがそのときにインストールされたportsのリストと一致するとは、必ずしも言えないんだが、そこはそれ。  $ pkg_info -r xorg-7.4_2|cut -f2 -d\u0026amp;#34;:\u0026amp;#34;|xargs -n1 pkg_info -D|less Information for xorg-docs-1.4,1: Information for xineramaproto-1.1.2: （中略） Information for glib-2.20.4: Information for gamin-0.1.10_3: Install notice: =============================================================================== Gamin will only provide realtime notification of changes for at most n files, where n is the minimum value between (kern.maxfiles * 0.7) and (kern.maxfilesperproc - 200). Beyond that limit, files will be polled. If you often open several large folders with Nautilus, you might want to increase the kern.maxfiles tunable (you do not need to set kern.maxfilesperproc, since it is computed at boot time from kern.maxfiles). For a typical desktop, add the following line to /boot/loader.conf, then reboot the system: kern.maxfiles=\u0026amp;#34;25000\u0026amp;#34; （略） ほとんどのportsには注意書きがないので、スペースバーを連打することになるが、まあ何度もあることじゃなし。 そのほか、/var/db/pkg配下ファイルの更新日時を使う手も考えたが、findコマンドを使うのが面倒なので止めた。  ","permalink":"https://nobwak.github.io/posts/2009-07-29-ports%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E5%BE%8C%E3%81%AE%E6%B3%A8%E6%84%8F%E6%9B%B8%E3%81%8D%E3%82%92%E5%BE%8C%E3%81%A7%E8%AA%AD%E3%82%80%E3%81%AB%E3%81%AF/","summary":"ports/packagesをインストールするといくつかのports/packagesで注意書き（Install Notice）が表示される。","title":"portsインストール後の注意書きを後で読むには"},{"content":"portsを検索しようと思ったら、/usr/ports/INDEX-8がなくて失敗した。 本家MLとか本家Forumでも話題になっていて、とりあえず解決策としては/usr/portsでmake fetchindexとやればいいみたい。  # make fetchindex Password: /usr/ports/INDEX-8.bz2 100% of 1267 kB 159 kBps portsnapでportsを更新している人は/etc/portsnap.confに以下の一文を追加  INDEX INDEX-8 DESCRIBE.8 ","permalink":"https://nobwak.github.io/posts/2009-07-28-_usr_ports_index-8%E3%81%8C%E3%81%BE%E3%81%A0%E3%81%AA%E3%81%8F%E3%81%A68.0-beta%E3%81%A7ports%E3%81%AE%E6%A4%9C%E7%B4%A2%E3%81%8C%E5%87%BA%E6%9D%A5%E3%81%AA%E3%81%84%E4%BB%B6/","summary":"portsを検索しようと思ったら、/usr/ports/INDEX-8がなくて失敗した。 本家MLとか本家Forumでも話題になっていて、とり","title":"/usr/ports/INDEX-8が（まだ）なくて8.0-BETAでportsの検索が出来ない件"},{"content":"8.0-BETA2、xorg-server1.6.1、（xkeyboad-config-1.6_1）でUSBキーボード(日本語配列)からアンダースコア(_)が入力できない。 ひょんな事から会社のPCにFreeBSDをインストールする羽目になったのだが、そこで遭遇。 調べてみたら昔からある事象のようだが、自宅のFreeBSDを入れているPCは、すべてUS配列のキーボードだったので気がつかなかった。 通常のコンソールなら大丈夫。 キーボード関係ということで、HALのfdiで解決できないかググってみたけど解決せず…。 結局、X起動時にxmodmapで設定することにした。 startxでX起動してるので、.xinitrcに細工。 問題は解消されたけど、キーボードの設定がxmodmapとfdiの二つに分散してるのが、どうも納得いかない。  $ cat ~/.xinitrc xmodmap $HOME/.xmodmap (後略) $ cat ./.xmodmap keycode 151 = underscore ","permalink":"https://nobwak.github.io/posts/2009-07-27-usb%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%81%8B%E3%82%89%E3%82%A2%E3%83%B3%E3%83%80%E3%83%BC%E3%82%B9%E3%82%B3%E3%82%A2_%E3%81%8C%E5%85%A5%E5%8A%9B%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E4%BB%B6/","summary":"8.0-BETA2、xorg-server1.6.1、（xkeyboad-config-1.6_1）でUSBキーボード(日本語配列)からアン","title":"USBキーボードからアンダースコア(_)が入力できない件"},{"content":"XFCE4をインストールした。 ついでなので[この記事](http://d.hatena.ne.jp/flageo/20071125/p1)のアップデートを兼ねつつXを入れるところからメモ。 条件は以下の通り。  ではスタート。 ◎Xのインストール portsでインストールすると時間がかかるのでpackagesにする。それでもデフォルトだと米国あたりのサーバにftpしてしまうので、設定を変更する。ちなみにftp2.jp.freebsd.orgはftp.iij.ad.jpのことである。  # sh # PACKAGEROOT=\u0026amp;#34;ftp://ftp2.jp.freebsd.org\u0026amp;#34;;export PACKAGEROOT # pkg_add -r xorg Fetching ftp://ftp2.jp.freebsd.org/pub/FreeBSD/ports/i386/packages-7.2-release/Latest/xorg.tbz... Done. Fetching ftp://ftp2.jp.freebsd.org/pub/FreeBSD/ports/i386/packages-7.2-release/All/xorg-docs-1.4,1.tbz... Done. （略） これでXのインストールは完了。 ◎Xの設定（前段） 続いて設定。今のXは（そのままだと）HALに依存しているのでhaldを起動する。なおこのとき、mouseデーモンが動いていると問題になるのでmousedは止める。 /etc/rc.confに以下の行を追加。dbusとhaldの順番は必ずこの通りにすること。haldの起動に先だってdbusが動いていないとダメだから。各[rcスクリプトには依存がある](http://d.hatena.ne.jp/flageo/20081221/p1)ので注意。  moused_enable=\u0026amp;#34;NO\u0026amp;#34; moused_nondefault_enable=\u0026amp;#34;NO\u0026amp;#34; dbus_enable=\u0026amp;#34;YES\u0026amp;#34; hald_enable=\u0026amp;#34;YES\u0026amp;#34; HALのための[キーボード設定を行ったら](http://d.hatena.ne.jp/flageo/20090318/p1)、HALをスタート。 念のためmousedを止める。（下の例ではmousedは動いていないけど）  # /etc/rc.d/moused onestop moused not running? (check /var/run/moused.pid). # /usr/local/etc/rc.d/dbus start Starting dbus. # /usr/local/etc/rc.d/hald start Starting hald. ◎Xの設定 rootでいきなりstartxとやって素っ気ないtwmが表示されればOK。 画面が真っ暗なままになったら、慌てず騒がずAlt+1とかCtrl+Alt+Backspaceとかする。 そのうえでググる。 昔ならXorg -configureでxorg.confを作るところだが、これが今では曲者で、ろくな設定ファイルを作ってくれない。特にVGAが[Intelだったりすると最悪だ](http://d.hatena.ne.jp/flageo/20090418/p1)。 なので、うまく行かない場合にはXorg -configureのxorg.confをベースに、ググった結果を追記したほうがいいと思う。 ◎サウンドカードの設定 [ここ](http://d.hatena.ne.jp/flageo/20071125/p1)を参照。 ◎Xfceのインストール xfce4のインストール。ついでにVLゴシックフォントも入れる。FEP（て言うのか?）も入れる。今ならuim-gtkとja-uim-anthyでOK。  # pkg_add -r xfce4 ja-vlgothic uim-gtk ja-uim-anthy Fetching ftp://ftp2.jp.freebsd.org/pub/FreeBSD/ports/i386/packages-7.2-release/Latest/xfce4.tbz... Done. Fetching ftp://ftp2.jp.freebsd.org/pub/FreeBSD/ports/i386/packages-7.2-release/All/icons-tango-0.8.1_1.tbz... Done. （略） ◎Xfceの設定 普段使うユーザでホームディレクトリの.xinitrcに以下の行を追加。  LANG=\u0026amp;#34;ja_JP.UTF-8\u0026amp;#34;; export LANG export GTK_IM_MODULE=uim-anthy export XMODIFIERS=\u0026amp;#39;@im=uim-anthy\u0026amp;#39; exec uim-xim \u0026amp; exec xfce4-session なお、自ホストのIPアドレスを引けないとXfceの起動時に怒られる。固定IPアドレスならともかくDHCPで自動取得してる場合には127.0.0.1あたりに書いておけばOK。 /etc/hosts（青字が追記部分）  127.0.0.1 localhost localhost.my.domain harukiya.local 以上。 あとはstartxで起動して、好きなアプリケーションを入れる。 日本語入力に関しては、Xfce4の設定マネージャ＞入力メソッドから、全体設定＞入力方式の利用準備＞標準の入力方式を指定＞標準の入力方式でanthyを選ぶ。  ","permalink":"https://nobwak.github.io/posts/2009-07-24-freebsd%E3%81%AB%E3%81%95%E3%81%A3%E3%81%8F%E3%82%8Ax%E3%81%A8xfce4%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/","summary":"XFCE4をインストールした。 ついでなので[この記事](http://d.hatena.ne.jp/flageo/20071125/p1)の","title":"FreeBSDにさっくりXとXFCE4をインストールする。"},{"content":"あるマシンにFreeBSDをインストールしたのだが、BroadcomのGbEカードで通信ができない。 DHCPに設定してもIPアドレスを取得できないし、固定で設定しても通信できない。7.2-STABLEと8.0-BETA2で確認した。 [ググって](http://lists.freebsd.org/pipermail/freebsd-stable/2009-April/049571.html)以下のように/boot/loader.confに設定して何とか解決したのでメモ。問題はBroadcomのカードではなく、むしろNVIDIAチップセットにある模様。 ◎/boot/loader.conf  hw.bce.msi_enable=0 hw.pci.enable_msi=0 具体的なカードは以下の通り。  ◎dmesgの出力 bge0: \u0026amp;#60;Broadcom NetXtreme Gigabit Ethernet Controller, ASIC rev. 0xb002\u0026gt; mem 0xfddf0000-0xfddfffff irq 16 at device 0.0 on pci2 miibus0: \u0026amp;#60;MII bus\u0026gt; on bge0 ◎pciconf -lvの出力 $ pciconf -lv|less none0@pci0:0:0:0: class=0x050000 card=0x02f010de chip=0x02f010de rev=0xa2 hdr=0x00 vendor = \u0026amp;#39;Nvidia Corp\u0026amp;#39; device = \u0026amp;#39;C51 Host Bridge\u0026amp;#39; class = memory subclass = RAM （中略） bge0@pci0:2:0:0: class=0x020000 card=0x01ec1028 chip=0x167a14e4 rev=0x02 hdr=0x00 vendor = \u0026amp;#39;Broadcom Corporation\u0026amp;#39; device = \u0026amp;#39;Broadcom NetXtreme Gigabit Ethernet Controller (BCM5754)\u0026amp;#39; class = network subclass = ethernet NICが使えないとなると、OSを変えるかIntelあたりのNICを追加するかしないといけなかったので、直ってよかった…。  ","permalink":"https://nobwak.github.io/posts/2009-07-22-freebsd%E3%81%A7broadcom%E3%81%AEgbe%E3%82%AB%E3%83%BC%E3%83%89%E3%81%8C%E5%8B%95%E3%81%8B%E3%81%AA%E3%81%84%E4%BB%B6/","summary":"あるマシンにFreeBSDをインストールしたのだが、BroadcomのGbEカードで通信ができない。 DHCPに設定してもIPアドレスを取得で","title":"FreeBSDでbroadcomのGbEカードが動かない件"},{"content":"MCA databaseとMCA applicationを取った。 体系的な知識がなかったのでdatabaseの勉強には手こずって、こればかりは会社から借りてきた赤本をたびたび参照した。 一方でapplicationは、オブジェクト指向とかコンポーネントとか、やや開発よりのエリアが範囲。そっち方面もあまり明るくないのだが、浅く広い知識を問うような問題が多く、なんだかもうやる気がまったく起きなくて黒本を1回眺めたくらい、しかも巻末の仕上げ問題すらやらず試験を迎えてしまった。やる気に比例して点数は低かったものの受かってしまえば関係ないのでよし。 これでMCAマスターになった。次は何を受けるべか。 Turbo-CE LinuxとMCAの計5つの試験で1週間～2週間おきに会場に通ったので事務員に顔を覚えられた。  ","permalink":"https://nobwak.github.io/posts/2009-07-19-mca_master/","summary":"MCA databaseとMCA applicationを取った。 体系的な知識がなかったのでdatabaseの勉強には手こずって、こればかりは会社か","title":"MCA master"},{"content":"件名の通り。 まだ8.0にはデバッグ用の設定が残っていて、そのせいで遅いのかと思ったら、haldがCPU時間を食いまくってたでござる。 haldを作り直したら直った。やっぱり横着せずportsは作り直した方がいいんだな。大変だけど・・・。 システム起動直後はこんな感じ。  $ top|head last pid: 1407; load averages: 1.14, 0.55, 0.22 up 0+00:02:36 00:11:30 52 processes: 4 running, 48 sleeping Mem: 32M Active, 13M Inact, 26M Wired, 52K Cache, 14M Buf, 909M Free Swap: 512M Total, 512M Free PID USERNAME THR PRI NICE SIZE RES STATE TIME WCPU COMMAND 1162 haldaemon 1 116 0 6928K 4376K RUN 1:27 86.18% hald 1174 root 1 49 0 5716K 2544K select 0:00 0.00% hald-addon- haldをkillした後。load avarageが1未満に減っている。  $ top|head last pid: 1693; load averages: 0.71, 0.78, 0.39 up 0+00:05:36 00:14:30 45 processes: 1 running, 44 sleeping Mem: 26M Active, 12M Inact, 26M Wired, 52K Cache, 14M Buf, 915M Free Swap: 512M Total, 512M Free PID USERNAME THR PRI NICE SIZE RES STATE TIME WCPU COMMAND 1379 root 1 44 0 4524K 2644K wait 0:00 0.10% bash 1007 root 1 44 0 3296K 1380K select 0:00 0.00% powerd あと、8.0に上げたらUSBマウスが動かなくなった。マウスパッドは効くのに。 さんざんググっても分からず頭を抱えたが、次の日くらいの8.0にアップグレードしたら完治。 なんだかんだ言ってもまだCURRENTなんだなと思った。  ","permalink":"https://nobwak.github.io/posts/2009-07-17-8.0-beta1%E3%81%AB%E4%B8%8A%E3%81%92%E3%81%9F%E3%82%89hald%E3%81%8Ccpu%E6%99%82%E9%96%93%E9%A3%9F%E3%81%84%E9%81%8E%E3%81%8E%E3%81%AE%E4%BB%B6/","summary":"件名の通り。 まだ8.0にはデバッグ用の設定が残っていて、そのせいで遅いのかと思ったら、haldがCPU時間を食いまくってたでござる。 hald","title":"8.0-BETA1に上げたらhaldがCPU時間食い過ぎの件"},{"content":"[http://pub.allbsd.org/FreeBSD-snapshots/](http://pub.allbsd.org/FreeBSD-snapshots/) ここで（ソースがアップデートされたら）毎日ビルドしてISOイメージまで作ってくれる! すごい! FreeBSDは日々刻々とアップデートされていて、そのつど新機能やバグフィックスが追加されていく。となると、すぐにでも自分のマシンに適用したくなるんだが、それをするにはコンパイルが必要で、オンボロマシンを使っていると非常にきつい。 FreeBSDの[公式サイト](http://ftp.freebsd.org/pub/FreeBSD/snapshots/)では、ひと月に一度currentやstableのソースをビルドして配布しているので、いままではそれを使ってた。しかし月刊ベースじゃ満たされないうえに、リリース直前などはスキップされ（実際にはその時期にリリースのBETA版、RC版などが配布されているのだが）ていたので話にならなかった。 8.0-RELEASEも近いことだし、無駄に毎日ダウンロードしてみる予定。  ","permalink":"https://nobwak.github.io/posts/2009-07-16-freebsd%E3%82%92%E6%AF%8E%E6%97%A5%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6iso%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%8F%E3%82%8C%E3%82%8Ballbsd.org/","summary":"[http://pub.allbsd.org/FreeBSD-snapshots/](http://pub.allbsd.org/FreeBSD-snapshots/) ここで（ソースがアップデートされたら）毎日ビルドしてISOイメージまで作ってくれる! すごい! FreeBSDは日々刻々とアップデートされてい","title":"FreeBSDを毎日ビルドしてISOイメージを作ってくれるallbsd.org"},{"content":"システムコンソールからログアウトしたときに画面をクリアすることで、画面に残った作業ログを漁られないようにしよう、という話。 以下のコマンドを~/.logoutなど、ログアウト時に実行されるファイルに書く。 shなら~/.logout、bashなら~/.bash_logout。  clear vidcontrol -C clearだけでは不十分であることに注意。Screen Lockして画面を遡ればバッファに残った分がずらずらと出てくる。vidcontrol -Cでバッファをクリアすること。 以下、manからの引用  NAME vidcontrol system console control and configuration utility (略) -C Clear the history buffer. こうしておくと、ログアウト時に画面がクリアされログインプロンプトが画面トップに現れる。ちょっと気分がいい。 そもそも物理的な端末へのアクセスを制限するのが先、というのは当然。  ","permalink":"https://nobwak.github.io/posts/2009-05-29-%E3%83%AD%E3%82%B0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AF%E7%94%BB%E9%9D%A2%E3%82%92%E6%8E%83%E9%99%A4%E3%81%97%E3%82%88%E3%81%86/","summary":"システムコンソールからログアウトしたときに画面をクリアすることで、画面に残った作業ログを漁られないようにしよう、という話。 以下のコマンドを~","title":"ログアウトするときは画面を掃除しよう。"},{"content":"7.2-RELEASE,6.4-RELEASEあたりのmergemasterにはバグがあるらしく、修正しているファイルであってもAUTOUPGRADEで上書きされてしまう事があるそうな。 最悪の場合/etc/passwdが破壊される。結構きびしい。 [ここ](http://www.freebsd.org/cgi/cvsweb.cgi/~checkout~/src/usr.sbin/mergemaster/mergemaster.sh?rev=1.71;content-type=text%2Fplain)に修正された1.71版(2008/5/19現在で最新)がある。これをダウンロードして/usr/sbin/mergemasterという名前で保存すればOK。ああもちろんオリジナルのmergemasterは取っておきましょう。 実はまだテスト中なんだが、そのうちSTABLEにも降りてくるはず。 詳細は[ここ](http://lists.freebsd.org/pipermail/freebsd-questions/2009-May/198378.html)。 /etc配下をオートメーションで修正するのはやっぱりリスクがあるので、mergemasterの前にはcp -pR /etc /etc.orgなどとして自分でもバックアップを取っておくのがよいと思った。  ","permalink":"https://nobwak.github.io/posts/2009-05-19-mergemaster%E3%81%AB%E3%83%90%E3%82%B0%E3%81%8C%E3%81%82%E3%82%8A_etc%E9%85%8D%E4%B8%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8C%E6%B6%88%E3%81%88%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"7.2-RELEASE,6.4-RELEASEあたりのmergemasterにはバグがあるらしく、修正しているファイルであってもAUTOUP","title":"mergemasterにバグがあり、/etc配下ファイルが消える件について"},{"content":"FreeBSDでは、読み込まれたドライバによってネットワークインターフェースのデバイス名が変化する。 たとえばIntelだったらfxp0とかBroadcomだったらbge0とか。 実は自分の好きな名前に変えることができる。 別に難しいことは何もなく、ifconfigのオプションに名前を指定するものがあるからそれを使うだけ。 以下、manからの引用。  IFCONFIG(8) FreeBSD System Manager\u0026#39;s Manual IFCONFIG(8) NAME ifconfig -- configure network interface parameters (略) The following parameters may be set with ifconfig: (略) name name Set the interface name to name. 以下をrc.confに書いておけば、デバイス名fxp0がnet0に変更できる。  ifconfig_fxp0_name=\u0026amp;#34;net0\u0026amp;#34; ifconfig_net0=\u0026amp;#34;DHCP\u0026amp;#34; net0をeth0とすればLinux風に。 以上FreeBSD-Questionsメーリングリストからのメモ。  ","permalink":"https://nobwak.github.io/posts/2009-05-06-freebsd%E3%81%A7%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E5%90%8D%E3%82%92linux%E3%81%AE%E3%82%88%E3%81%86%E3%81%ABeth0%E3%81%A8%E3%81%8B%E3%81%AB%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"FreeBSDでは、読み込まれたドライバによってネットワークインターフェースのデバイス名が変化する。 たとえばIntelだったらfxp0とかB","title":"FreeBSDでネットワークデバイス名をLinuxのようにeth0とかにするには。"},{"content":"/etc/portsnap.confで不要なportsをREFUSEディレクティブで指定しておけば、portsnapはそのportsをダウンロードしない。 たとえばarabicと指定すれば、アラビア語関連のports、要するに/usr/ports/arabicはその後アップデートされなくなる。また、financeとか指定すれば/usr/ports/financeも同じくアップデートされなくなる。 ただし、portsnap.confの該当部分に書いてあるWARNINGの通り、これをするとportsツリーの一部は最新、一部は古いか存在しない不完全な状態になり、依存の関係で思わぬ問題が発生したりする。 よほどディスクスペースと帯域をケチりたいのでなければ止めたほうがいいし、やるとしても日本語以外の他言語を指定するだけにしておいた方がいいと思う。 ディスクスペースと帯域の節約が必要な一部のマシンでは、/etc/porsnap.confに以下を追加している。  REFUSE arabic chinese french german hebrew hungarian REFUSE korean polish portuguese russian ukrainian vietnamese 行頭にスペースがあると無視されるので注意。 一応、portsnap.confの該当部分を抜き出し。 問題が起こっても、メーリングリストに質問するのはREFUSEディレクティブを外して試してからだぞ、とか書いてある。   # Example of ignoring parts of the ports tree. If you know that you # absolutely will not need certain parts of the tree, this will save # some bandwidth and disk space. See the manual page for more details. # # WARNING: Working with an incomplete ports tree is not supported and # can cause problems due to missing dependencies. If you have REFUSE # directives and experience problems, remove them and update your tree # before asking for help on the mailing lists.  ","permalink":"https://nobwak.github.io/posts/2009-05-04-portsnap%E3%81%AB%E4%B8%8D%E8%A6%81%E3%81%AAports%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%95%E3%81%9B%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"/etc/portsnap.confで不要なportsをREFUSEディレクティブで指定しておけば、portsnapはそのportsをダウン","title":"portsnapに不要なportsをダウンロードさせないようにするには"},{"content":"[FreeBSD-questionsメーリングリスト](http://lists.freebsd.org/pipermail/freebsd-questions/)からのメモ。 ddでデータを吸い出すとき、メディアごとに望ましいブロックサイズはこんなもんじゃね?という話題があったので、そのまま転載。  Format Device (example) bs= ------------- --------------------- ---- Data CD /dev/acd0 2048 Music CD /dev/acd0t01 2352 DVD /dev/acd0 2048 Hard disk /dev/ad0s1g 1m でまあ、上記の表をもとに、以下のようなコマンドを打つと。  # dd if=/dev/acd0 of=somefile.dd bs=2048 ","permalink":"https://nobwak.github.io/posts/2009-05-02-dd%E3%81%AB%E4%B8%8E%E3%81%88%E3%82%8Bbs%E3%81%AE%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E3%81%94%E3%81%A8%E3%81%AE%E5%80%A4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"[FreeBSD-questionsメーリングリスト](http://lists.freebsd.org/pipermail/freebsd","title":"ddに与えるbsのメディアごとの値について"},{"content":"2009/5/19追記 mergemaster -Uにはバグがあるくさい。詳細は[こちら](http://d.hatena.ne.jp/flageo/20090519/p1)。 いつごろからか、mergemasterに新しいオプションが増えた。 \u0026lt;blockquote\u0026gt; Using the [-F] option mergemaster will install the new file for you if they differ only by VCS strings. \u0026lt;/blockquote\u0026gt; -Fオプションを使うと、VCS文字列だけが違って内容は変わらないファイルを自動的にインストールしてくれるとのこと。 ここでのVCS文字列というのは、ファイルに含まれるこんなの。  # $FreeBSD: src/etc/defaults/rc.conf,v 1.318.2.17 2009/03/24 02:56:50 dougb Exp$  以前は、[mergemasterをさらにさらにさらに早く](http://d.hatena.ne.jp/flageo/20090216/p1)で書いていたようにmergemaster.rcでしか指定できなかったが、オプションでも指定できるようになったと。 だからmergemasterのオプションは今までの経緯も含めて-UPiFとするのが良いようだ。 なお、-Fに対応するmergemaster.rcでの指定は「FREEBSD_ID=」となる。 以下に俺のmergemaster.rcを示す。こうしておけばmergemasterと打つだけでOK。  AUTO_UPGRADE=yes AUTO_INSTALL=yes IGNORE_FILES=\u0026amp;#39;/etc/motd\u0026amp;#39; PRESERVE_FILES=yes VERBOSE=yes #DIFF_OPTIONS=\u0026amp;#39;-I$FreeBSD:.*\u0026amp;#91;$]\u0026amp;#39; FREEBSD_ID=yes  手前味噌だけど参考。 [mergemasterを少しだけ楽に](http://d.hatena.ne.jp/flageo/20080304/p1) [mergemasterは-sivaでなく-UPiで。](http://d.hatena.ne.jp/flageo/20081208/p1)  ","permalink":"https://nobwak.github.io/posts/2009-05-01-mergemaster%E3%81%AE%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AF-upif%E3%81%A7/","summary":"2009/5/19追記 mergemaster -Uにはバグがあるくさい。詳細は[こちら](http://d.hatena.ne.jp/flageo/2009051","title":"mergemasterのオプションは-UPiFで。"},{"content":"先日のPlatformに続いてSecurityを受けてきた。 「フッ…。Platformを倒したようだが、奴なぞ我らMCA四天王の中では最弱。」とローブをかぶった顔面ベタ塗りの3人が喋っている大昔のジャンプなシーンを何となく思い浮かべたが無事突破。 MS製品の知識を問う話はどうでもいいが、最近のセキュリティ関連で知らなかった話もあって、ちょっと勉強になった。 さて残2となったわけだが次はどうしようかな。 ゴゴゴゴ…。「フッ…。PlatformとSecurityを倒したようだが、奴らなぞ（ry  ","permalink":"https://nobwak.github.io/posts/2009-04-30-mca_security/","summary":"先日のPlatformに続いてSecurityを受けてきた。 「フッ…。Platformを倒したようだが、奴なぞ我らMCA四天王の中では最弱。","title":"MCA Security"},{"content":"FreeBSDでは各種サーバソフトウェアの起動スクリプトは/etc/rc.d、/usr/local/etc/rc.d等のrc.dディレクトリに置かれる。ここにあるスクリプトを実行しようとするといちいち/usr/local/etc/rc.dと打たないといけないので面倒。 /usr/ports/sysutils/bsdadminscriptsでインストールされるシェルスクリプトに以下のようなものがある。  rcstart rcstatus rcstop rcrestart rconestart rconestatus rconestop rconerestart これらのスクリプトは、rc.d配下のスクリプトの扱いを（少しだけ）楽にしてくれる。 スクリプト名に\u0026quot;one\u0026quot;が含まれるものは、/etc/rc.confにservice_enable=\u0026quot;yes\u0026quot;が含まれて「いない」サービスを扱うためのスクリプト。逆に\u0026quot;one\u0026quot;が含まれて「いない」ものは、service_enable=\u0026quot;yes\u0026quot;が含まれて「いる」サービスを扱う。 ややこしいが、要するに[ここ](http://d.hatena.ne.jp/flageo/20080213/p1)でいうところの、onestart, forcestartが必要なケースではスクリプト名に\u0026quot;one\u0026quot;が含まれる方を使う。 オプションは、-sで対象となるサービスの一覧表示、-lで対象スクリプトの場所表示、-pでサーチ対象としているパスの表示。 実行例  $ rcstatus -s DAEMON FILESYSTEMS LOGIN NETWORKING NETWORK （略） zabbix_server $ $ rcstatus -l apache22 apache22: /usr/local/etc/rc.d/apache22 $ $ rcstatus -p /etc/rc.d /usr/local/etc/rc.d $ /etc/rc.confにftpd_enable=\u0026quot;YES\u0026quot;がない場合の実行例。pidの読み取りには管理者権限が必要のようだ。  $ grep ftpd /etc/rc.conf $ $ rcstatus ftpd $ rconestatus ftpd ftpd is not running. $ sudo rconestart ftpd Password: Starting ftpd. $ rconestatus ftpd eval: cannot open /var/run/ftpd.pid: Permission denied ftpd is not running. $ sudo rconestatus ftpd ftpd is running as pid 99650. $ sudo rconestop ftpd Stopping ftpd. $ 注意点としては、ftpdなどのサービスの指定は、rc.dディレクトリにあるスクリプトファイル名ではなく、スクリプトファイル中に書かれるPROVIDE行での指定に準ずるところ。 なので、こんなことが起こった。  $ grep samba /etc/rc.conf samba_enable=\u0026amp;#34;YES\u0026amp;#34; $ rcstatus samba $ rcstatus smbd $ rcstatus nmbd $ rcstatus -s |grep smb nmbd smbd $ $ grep PROVIDE /usr/local/etc/rc.d/samba # PROVIDE: nmbd smbd # PROVIDE: winbindd $ $ rcstatus nmbd smbd $ rcstatus \u0026amp;#34;nmbd smbd\u0026amp;#34; nmbd is running as pid 99768. smbd is running as pid 99772. $ Sambaはsmb, samba等では理解してくれず、\u0026quot;nmbd smbd\u0026quot;と指定する必要がある。  ","permalink":"https://nobwak.github.io/posts/2009-04-27-bsd%E7%AE%A1%E7%90%86%E8%80%85%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%81%8A%E5%BD%B9%E7%AB%8B%E3%81%A1%E3%83%84%E3%83%BC%E3%83%ABrcstatus/","summary":"FreeBSDでは各種サーバソフトウェアの起動スクリプトは/etc/rc.d、/usr/local/etc/rc.d等のrc.dディレクトリ","title":"BSD管理者のためのお役立ちツールrcstatus"},{"content":"俺のマンションの前は山の斜面で、木々がベランダ近く、手が届きそうなところまで枝を伸ばしている。 その枝をつたってベランダのプランターまで雀が遊びにくるのだが、今日は見慣れない鳥を見かけた。 その鳥は緑がかった不思議な色をしていて、たとえて言うなら鶯色…アッー! こいつウグイスか！ こんな風に鳥の名前に思い至ったのは初めてであった。  ","permalink":"https://nobwak.github.io/posts/2009-04-25-%E8%AC%8E%E3%81%AE%E9%B3%A5/","summary":"俺のマンションの前は山の斜面で、木々がベランダ近く、手が届きそうなところまで枝を伸ばしている。 その枝をつたってベランダのプランターまで雀が遊","title":"謎の鳥"},{"content":"日本語入力は、GNOMEだと勝手にやってくれたような気がしたが、XFCE4とかfluxboxだと自分でやる必要がある。 ただ、そんなに難しいわけでもなく、ja-uim-anthyとuim-gtkをインストールすればいいだけ。 japanese/uim-anthy、textproc/uim-gtkでmake install cleanでもいいし、portmasterでもいい。  # portmaster japanese/uim-anthy textproc/uim-gtk Xをstartxから起動している場合には、~/.xinitrcに以下の行を加える。  export GTK_IM_MODULE=uim-anthy export XMODIFIERS=\u0026amp;#39;@im=uim-anthy\u0026amp;#39; exec uim-xim \u0026amp; XDMとかから起動してる場合には、~/.xsessionrcでいいと思う。  ","permalink":"https://nobwak.github.io/posts/2009-04-23-%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%85%A5%E5%8A%9B%E3%81%AE%E8%A8%AD%E5%AE%9A/","summary":"日本語入力は、GNOMEだと勝手にやってくれたような気がしたが、XFCE4とかfluxboxだと自分でやる必要がある。 ただ、そんなに難しいわ","title":"日本語入力の設定"},{"content":"webベースのIMAPクライアントであるroundcube（[本家](http://roundcube.net/)、[日本語](http://oss.poyo.jp/roundcube-ja/)）を自宅サーバにインストールした。 動作にはphpとDBが必要。本家のトップページには「RoundCube Webmail is written in PHP and requires a MySQL or Postgres database.」と書いてあるが、SQLiteでも動くので助かる。MySQLやPostgresはだるすぎる。 これでhttpさえ通ればどこからでも自分のメールボックスへアクセスできるので便利。  ","permalink":"https://nobwak.github.io/posts/2009-04-20-roundcube%E3%82%92%E5%85%A5%E3%82%8C%E3%81%9F/","summary":"webベースのIMAPクライアントであるroundcube（[本家](http://roundcube.net/)、[日本語](http:/","title":"roundcubeを入れた"},{"content":"[MCA](http://www.microsoft.com/japan/learning/mca/mca_program.mspx)(マイクロソフト認定アソシエイト)という資格がある。一言で説明するのも難しい資格なんだが、それはともかくマイクロソフトなので世界中で認定してるのかと思ったら日本だけらしい。つまり日本法人が勝手にやってるってことなので、そこだけ見ると「どうでもいい資格臭」がするんだが、こちらも会社からいくばくかの報奨金が出るのでチャレンジしてみた。 MCAにはplatform, application, security, databaseの4種類があって、今回はplatformを。 platformはOSの使い方に関する試験で、Server 2008の内容がやや重視されている。俺が実際に触ったことのあるのは2003までなんだが、2008ではかなり色んな事が出来るようになってるらしく少し驚いた。WindowsクライアントをまとめるサーバはやっぱりWindows Serverが楽なんだろうなと思った。 試験は、前評判通り黒本と呼ばれるインプレスの問題集だけやっておけば余裕だった。試験では初めて見る設問内容も何個かあって焦ったけど、実技重視のMOSとも違うので適当にあたりはつけられる。 で。あとのMCA3つも行ってみる予定。 なお、6/30までであれば1回落ちても[2度目の試験は無料キャンペーン](http://www.microsoft.com/japan/learning/secondshot/default.mspx)なので、少々の勉強不足でもトライしてみようと思う。  ","permalink":"https://nobwak.github.io/posts/2009-04-19-mca_platform/","summary":"[MCA](http://www.microsoft.com/japan/learning/mca/mca_program.mspx)(マイ","title":"MCA platform"},{"content":"実は年明けのxorg祭りから我がThinkpad x30でXorg7.4（xorg-server1.5, 1.6）は[まったく動かなかった](http://d.hatena.ne.jp/flageo/20090314/p1)のだが、ふと思いついてXorg -configureで出来たxorg.confは一切信用しないで、/etc/xorg.confに適当なセクションだけ書いたら立ち上がった。 /homeディレクトリをリードオンリーでマウントして、万が一またフリーズしてfsck地獄へ備えたのだが、意外にあっさりで拍子抜けした。 でもまだintelドライバが地雷のようで、安心は出来ないっぽい。 （たぶん）関連するports  xorg-server-1.6.0,1 xf86-video-intel-2.6.3 libpciaccess-0.10.5_6 hal-0.5.11_23 xf86-input-mouse-1.4.0_5 /etc/X11/xorg.conf  Section \u0026amp;#34;Files\u0026amp;#34; ModulePath \u0026amp;#34;/usr/local/lib/xorg/modules\u0026amp;#34; FontPath \u0026amp;#34;/usr/local/lib/X11/fonts/misc/\u0026amp;#34; FontPath \u0026amp;#34;/usr/local/lib/X11/fonts/TTF/\u0026amp;#34; FontPath \u0026amp;#34;/usr/local/lib/X11/fonts/OTF\u0026amp;#34; FontPath \u0026amp;#34;/usr/local/lib/X11/fonts/Type1/\u0026amp;#34; FontPath \u0026amp;#34;/usr/local/lib/X11/fonts/100dpi/\u0026amp;#34; FontPath \u0026amp;#34;/usr/local/lib/X11/fonts/75dpi/\u0026amp;#34; EndSection Section \u0026amp;#34;InputDevice\u0026amp;#34; Identifier \u0026amp;#34;Mouse0\u0026amp;#34; Driver \u0026amp;#34;mouse\u0026amp;#34; Option \u0026amp;#34;Protocol\u0026amp;#34; \u0026amp;#34;auto\u0026amp;#34; #Option \u0026amp;#34;Device\u0026amp;#34; \u0026amp;#34;/dev/sysmouse\u0026amp;#34; Option \u0026amp;#34;Device\u0026amp;#34; \u0026amp;#34;/dev/psm0\u0026amp;#34; Option \u0026amp;#34;ZAxisMapping\u0026amp;#34; \u0026amp;#34;4 5 6 7\u0026amp;#34; EndSection /etc/rc.conf（関連部分のみ）  moused_port=\u0026amp;#34;/dev/psm0\u0026amp;#34; moused_enable=\u0026amp;#34;NO\u0026amp;#34; moused_nondefault_enable=\u0026amp;#34;NO\u0026amp;#34; dbus_enable=\u0026amp;#34;YES\u0026amp;#34; hald_enable=\u0026amp;#34;YES\u0026amp;#34; hald_flags=\u0026amp;#34; --verbose=yes \u0026amp;#34; ","permalink":"https://nobwak.github.io/posts/2009-04-18-thinkpad_x30%E3%81%A7xorg7.4%E3%81%8C%E3%82%84%E3%81%A3%E3%81%A8%E5%8B%95%E3%81%84%E3%81%9F%E3%81%A7%E3%81%94%E3%81%96%E3%82%8B%E3%81%AE%E5%B7%BB/","summary":"実は年明けのxorg祭りから我がThinkpad x30でXorg7.4（xorg-server1.5, 1.6）は[まったく動かなかった](h","title":"Thinkpad x30でXorg7.4がやっと動いたでござるの巻"},{"content":"再起動してstartxとやったら画面がめちゃくちゃに。 もういや。  ","permalink":"https://nobwak.github.io/posts/2009-04-18-%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%9F%E3%82%89/","summary":"再起動してstartxとやったら画面がめちゃくちゃに。 もういや。","title":"と思ったら。"},{"content":"sysutils/bsdadminscriptsには便利ツールがたくさん入っている。 たとえばdistviper。 portsの運用を続けると、/usr/ports/distfiles/配下には古いファイルがたまっていくが、これを自動的に検知して削除してくれる。 同じ用途に使えるコマンドとしては、portupgrade付属のportscleanが有名だが、これらのコマンドはrubyが必要で、これだけのためにインストールするのも重い。 /usr/ports/distfiles/配下のすべてのファイルに対して検知を行うthoroughモードと、インストールされているportsだけに限り検知を行い、それ以外を削除するfastモードがある。 thoroughモードは時間がかかるので、portsビルド専用（つまりビルドだけしてインストールしない）マシンでもないかぎりfastモードで十分。 -dで消されるファイルの確認、-iで消す前に聞くようになる、-qでメッセージ抑制、-vでverboseといったオプションがある。 実行例  $ distviper -d fast delete zsh-4.3.9.tar.bz2 （中略） $ sudo distviper fast delete zsh-4.3.9.tar.bz2 delete zsh-4.3.9-doc.tar.bz2 delete xorg/driver/xf86-video-ati-6.11.0.tar.bz2 delete xorg/driver/xf86-video-mach64-6.8.0.tar.bz2 delete xorg/driver/xf86-video-nv-2.1.12.tar.bz2 delete xorg/driver/xf86-video-r128-6.8.0.tar.bz2 delete xorg/driver/xf86-video-radeonhd-1.2.4.tar.bz2 delete xorg/driver/xf86-video-openchrome-0.2.903.tar.bz2 delete gnome2/gdm-2.24.1.tar.bz2 delete gnome/esound-0.2.41.tar.bz2 delete a2ps-4.13b.tar.gz delete libssh2-1.0.tar.gz delete xc/vnc-4_1_3-unixsrc.tar.gz delete xc/X430src-1.tgz delete audiofile-0.2.6.tar.gz delete samba-3.0.34.tar.gz delete thunderbird-2.0.0.19-source.tar.bz2 $ ということで、/usr/local/etc/periodic/weeklyというディレクトリを（無ければ）作って、998.deldist.shとか適当な名前で下記のスクリプトを置いて、週1で自動的に実行されるようにしておいた。 /etc/local/etc/periodic/weekly/998.deldist.sh  #!/bin/sh DELCMD=\u0026amp;#39;/usr/local/sbin/distviper\u0026amp;#39; DELOPT=\u0026amp;#39;fast\u0026amp;#39; rc=0 if \u0026amp;#91; -x $DELCMD ]; then echo \u0026amp;#39;Searching and deleting outdated distfiles...\u0026amp;#39; $DELCMD $DELOPT || rc=$? echo \u0026amp;#39;Done.\u0026amp;#39; else echo \u0026amp;#34;$DELCMD is not installed and I gave up.\u0026amp;#34; rc=2 fi exit \u0026amp;#34;$rc\u0026amp;#34; ","permalink":"https://nobwak.github.io/posts/2009-04-17-portsclean%E3%81%AE%E4%BB%A3%E6%9B%BFdistviper/","summary":"sysutils/bsdadminscriptsには便利ツールがたくさん入っている。 たとえばdistviper。 portsの運用を続けると、","title":"portscleanの代替distviper"},{"content":"Turboなんて今では下り坂のLinuxだが、会社から幾ばくかの報奨金が出るのでトライして無事合格。 しかしLinux周りの「知識」を問われるようなケースが多くて、この認定そのものには全く意味がないと思う。 LPICもたいがいだったけど、これに比べればまだあちらの方がましだった。 問題集としては、IDGという出版社から出ている「直前必修問題集」しかない。この時点ですでに嫌な雰囲気だ。つまり誰も注目してないという証拠だから。しかも、俺の受けるバージョンに対応した本はすでに絶版だった。先に調べろよ俺。いやまて曲がりなりにも認定試験が継続してるのに絶版されちゃうって何よ。 しかし報奨金目当てなので中身についてはどうでもいい。くだんの本は最寄りのブックオフ100円コーナーに転がっていたのでゲット。 Turbo Linuxも仮想環境に評価版を入れて使っ…てみようとしたが、デスクトップ環境の醜悪さが受け付けず即消去して、勉強は問題集一本に絞ったんだがこの問題集がまたひどい。 「WWWは20年前から存在する。正しいか否か。」歴史の勉強…。つか、こんな絶対値で年を指定していいのか? 「Turbo Linuxのカーネルは一つである。正しいか否か。」何を言っているのか分からない。*1 「パスワードを忘れてしまったユーザのために再設定をした。管理者の仕事として正しいか。答え: 正しくない。そもそもそんなことがないようユーザを教育せよ。」いやいやいや。 この恐ろしい問題集であるが、冒頭のページにターボリナックスが直々に推薦文を書いている。お墨付ということです。こんな明後日方面の問題が出たら正直合格する自信なんてないと直前まで戦々恐々とした。 いざ受けてみたら問題は素直で安心したっていうか問題集は全然意味ねーじゃねーか。心配して損した。 しかも問題集ではろくに扱われていなかったturbotools（Turbo Linuxの管理ツール）が結構出た。そこはさっぱり分からなかった。  ","permalink":"https://nobwak.github.io/posts/2009-04-04-turbo-celinux%E8%AA%8D%E5%AE%9A%E3%82%92%E5%8F%97%E3%81%91%E3%81%9F/","summary":"Turboなんて今では下り坂のLinuxだが、会社から幾ばくかの報奨金が出るのでトライして無事合格。 しかしLinux周りの「知識」を問われる","title":"Turbo-CE（Linux認定）を受けた。"},{"content":"ブックオフで100円だったから買ってみたが、すごく面白かった。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4101104123\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/5130VNHGSNL._SL75_.jpg\u0026quot; alt=\u0026quot;華麗なる一族〈上〉 (新潮文庫)\u0026quot; title=\u0026quot;華麗なる一族〈上〉 (新潮文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; ただ、ラストは意外・・・というか、そうなっちゃうの?というような結果だった。 この前作の白い巨塔に、予定になかった続編が作られたことが、ひょっとすると影響してるのでは、と思うのは考えすぎなんだろうか。  ","permalink":"https://nobwak.github.io/posts/2009-04-02-%E8%8F%AF%E9%BA%97%E3%81%AA%E3%82%8B%E4%B8%80%E6%97%8F/","summary":"ブックオフで100円だったから買ってみたが、すごく面白かった。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4101104123\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/5130VNHGSNL._SL75_.jpg\u0026quot; alt=\u0026quot;華麗なる一族〈上〉 (新潮文庫)\u0026quot; titl","title":"華麗なる一族"},{"content":"塩漬け肉の作り方を友達に教えてもらったのでメモ。 塩漬け肉は日持ちがする上に、少し大きめに切ってトマト煮とかカレーとかポトフに放り込んで噛み付くと、歯ごたえと豚の旨みがとてもおいしいし、ベーコン代わりにパスタに投入してもいい。 ただ、肉自体に塩がかなり入っているので、投入先の料理の味付けは考慮しておかないと塩辛いだけになるから注意。 以下、作り方。  ","permalink":"https://nobwak.github.io/posts/2009-03-23-%E5%A1%A9%E6%BC%AC%E3%81%91%E8%82%89%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9/","summary":"塩漬け肉の作り方を友達に教えてもらったのでメモ。 塩漬け肉は日持ちがする上に、少し大きめに切ってトマト煮とかカレーとかポトフに放り込んで噛み付","title":"塩漬け肉の作り方"},{"content":"[Xorg7.4のキーボード設定をkwsk その1](http://d.hatena.ne.jp/flageo/20090316/p1)、[Xorg7.4のキーボード設定をkwsk その2](http://d.hatena.ne.jp/flageo/20090318/p1)よりつづく。 2. haldを通さず、xorg.confから伝えるためには、xorg.confに以下の行を加える。haldは自動的にinputデバイスを探さない。ググれば山ほど出てくる。  Option \u0026#34;AllowEmptyInput\u0026#34; \u0026#34;True\u0026#34; 3. haldもxorg.confも通さず、直接伝えるには、setxkbmapを使う。 setxkbmapを使えば、直接XKBに設定を伝えられる。manを見ればレイアウト等の指定方法が書いてあるので、それに沿う。 xorg.confはXorg -configureで出来たファイルをそのまま使っておく。 haldは特に設定不要。 その上で、startxでXを起動している場合には、~/.xinitrcに以下の行を加える。  setxkbmap -rules xorg -layout jp -model jp106 -option ctrl:swapcaps XDMとかの場合は~/.xsessionrcでいいと思う。 ◎参考にしたサイト http://forums.freebsd.org/showthread.php?p=10924#post10924 http://forums.freebsd.org/showthread.php?t=1934 (リンク死亡…） [http://cgit.freedesktop.org/xorg/xserver/tree/config/x11-input.fdi](http://cgit.freedesktop.org/xorg/xserver/tree/config/x11-input.fdi) FreeBSDを語れ Part22（2ch.net） [http://ubuntuforums.org/archive/index.php/t-948154.html](http://ubuntuforums.org/archive/index.php/t-948154.html) [Xorg7.4のキーボード設定をkwsk その1](http://d.hatena.ne.jp/flageo/20090316/p1) [Xorg7.4のキーボード設定をkwsk その2](http://d.hatena.ne.jp/flageo/20090318/p1) [Xorg7.4のキーボード設定をkwsk その3](http://d.hatena.ne.jp/flageo/20090319/p1)  ","permalink":"https://nobwak.github.io/posts/2009-03-19-xorg7.4%E3%81%AE%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E8%A8%AD%E5%AE%9A%E3%82%92kwsk_%E3%81%9D%E3%81%AE3/","summary":"[Xorg7.4のキーボード設定をkwsk その1](http://d.hatena.ne.jp/flageo/20090316/p1)、[X","title":"Xorg7.4のキーボード設定をkwsk その3"},{"content":"[Xorg7.4のキーボード設定をkwsk その1](http://d.hatena.ne.jp/flageo/20090316/p1)の続き。 で話は戻る。 俺はxorg.confに[以下のように](http://d.hatena.ne.jp/flageo/20071125/p1)設定していたわけだ。  Option \u0026amp;#34;XkbRules\u0026amp;#34; \u0026amp;#34;xorg\u0026amp;#34; Option \u0026amp;#34;XkbModel\u0026amp;#34; \u0026amp;#34;jp106\u0026amp;#34; Option \u0026amp;#34;XkbLayout\u0026amp;#34; \u0026amp;#34;jp\u0026amp;#34; #CTRLとCAPSLOCK入れ替え Option \u0026amp;#34;XkbOptions\u0026amp;#34; \u0026amp;#34;ctrl:swapcaps\u0026amp;#34; これをXorg7.4でもXKBに伝えてやればいいのだが、方法は3つある。 1. haldを通して伝える。 2. haldを通さず、xorg.confから伝える。 3. haldもxorg.confも通さず、直接伝える。 1. haldを通して伝える場合。 従来のxorg.confで書いていた設定をhald向けに書き直す必要がある。 設定ファイルは/usr/local/etc/hal/fdi/policy/に置いとけばhaldが見てくれる。 ベースにする設定ファイルは/usr/local/share/hal/fdi/policy/10osvendor/10-x11-input.fdi。 [http://cgit.freedesktop.org/xorg/xserver/tree/config/x11-input.fdi](http://cgit.freedesktop.org/xorg/xserver/tree/config/x11-input.fdi) ここを見ると、xorg.confのオプションをそれぞれ以下の指定に当てはめていけばいいことが分かる。  input.x11_options.XkbRules input.x11_options.XkbModel input.x11_options.XkbLayout input.x11_options.XkbVariant input.x11_options.XkbOptions なのでこうなる。  \u0026amp;#60;?xml version=\u0026amp;#34;1.0\u0026amp;#34; encoding=\u0026amp;#34;ISO-8859-1\u0026amp;#34;?\u0026gt; \u0026amp;#60;deviceinfo version=\u0026amp;#34;0.2\u0026amp;#34;\u0026gt; \u0026amp;#60;device\u0026gt; \u0026amp;#60;match key=\u0026amp;#34;info.capabilities\u0026amp;#34; contains=\u0026amp;#34;input.keyboard\u0026amp;#34;\u0026gt; \u0026amp;#60;!-- If we\u0026amp;#39;re using Linux, we use evdev by default (falling back to keyboard otherwise). --\u0026gt; \u0026amp;#60;merge key=\u0026amp;#34;input.x11_driver\u0026amp;#34; type=\u0026amp;#34;string\u0026amp;#34;\u0026gt;kbd\u0026amp;#60;/merge\u0026gt; \u0026amp;#60;!-- ここから追加 --\u0026gt; \u0026amp;#60;merge key=\u0026amp;#34;input.x11_options.XkbRules\u0026amp;#34; type=\u0026amp;#34;string\u0026amp;#34;\u0026gt;xorg\u0026amp;#60;/merge\u0026gt; \u0026amp;#60;merge key=\u0026amp;#34;input.x11_options.XkbLayout\u0026amp;#34; type=\u0026amp;#34;string\u0026amp;#34;\u0026gt;jp\u0026amp;#60;/merge\u0026gt; \u0026amp;#60;merge key=\u0026amp;#34;input.x11_options.XkbModel\u0026amp;#34; type=\u0026amp;#34;string\u0026amp;#34;\u0026gt;jp106\u0026amp;#60;/merge\u0026gt; \u0026amp;#60;merge key=\u0026amp;#34;input.x11_options.XkbOptions\u0026amp;#34; type=\u0026amp;#34;string\u0026amp;#34;\u0026gt;ctrl:swapcaps\u0026amp;#60;/merge\u0026gt; \u0026amp;#60;!-- ここまで追加 --\u0026gt; \u0026amp;#60;match key=\u0026amp;#34;/org/freedesktop/Hal/devices/computer:system.kernel.name\u0026amp;#34; string=\u0026amp;#34;Linux\u0026amp;#34;\u0026gt; \u0026amp;#60;merge key=\u0026amp;#34;input.x11_driver\u0026amp;#34; type=\u0026amp;#34;string\u0026amp;#34;\u0026gt;evdev\u0026amp;#60;/merge\u0026gt; \u0026amp;#60;/match\u0026gt; \u0026amp;#60;/match\u0026gt; \u0026amp;#60;/device\u0026gt; \u0026amp;#60;/deviceinfo\u0026gt; 名前は適当に/usr/local/etc/hal/fdi/policy/10-x11-input-jp106-capsctrl.fdiとして、haldを再起動してからXを起動すればOK。 [Xorg7.4のキーボード設定をkwsk その1](http://d.hatena.ne.jp/flageo/20090316/p1) [Xorg7.4のキーボード設定をkwsk その3](http://d.hatena.ne.jp/flageo/20090319/p1)  ","permalink":"https://nobwak.github.io/posts/2009-03-18-xorg7.4%E3%81%AE%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E8%A8%AD%E5%AE%9A%E3%82%92kwsk_%E3%81%9D%E3%81%AE%EF%BC%92/","summary":"[Xorg7.4のキーボード設定をkwsk その1](http://d.hatena.ne.jp/flageo/20090316/p1)の続き","title":"Xorg7.4のキーボード設定をkwsk その２"},{"content":"HALのキーボード設定ファイルの書き方が分からない。 ググれば設定ファイルは山ほど出てくるが、どう書くかを説明したサイトはなかなか引っかからない。 Xorg7.4、つまるところxorg-server-1.5.3から、キーボード設定がhald経由になったため、従来の方法では日本語キーボードの設定が効かなくなった。それは分かる。分かるんだが。 じゃあ、どうやって設定ファイルを書けばいいんだ。 ということで調べてみた。 Xのキーボードレイアウト周りを司っているのがXKB。 Xorg7.3までで、xorg.confにOption \u0026quot;XkbLayout\u0026quot; \u0026quot;jp\u0026quot;と書いていた設定も、最終的にはXKBに渡される。 でXorg7.4からは、こういった設定は（デフォルト設定では）haldからXKBに渡されることになった。 少し脱線するが、ではXKBは、XkbLayoutやらXkbModelやらのほかに、どのような設定項目があって、それぞれどのような値をとるのか、というのはFreeBSDの場合、/usr/local/share/X11/xkb/rulesを見れば分かる。 このディレクトリには大きく分けてbase, evdev, xorgの3つのファイルがあり、xorg.confのXkbRulesでxorgと指定すればxorgが使われることになる。（ただ、2009/3/16現在のportsからインストールしたHAL0.5.11では、三種類のファイルは同じようだ。） さらにxorg.lstの中をのぞくと、設定項目と、設定項目ごとにどのような値を取ることが出来るかがリストされている。 具体的には、!から始まっているのが設定項目のようで、grepしてみるとmodel, layout, variant, optionの4つがある。  \u0026amp;#91;/usr/local/share/X11/xkb/rules]$ grep \u0026amp;#39;^!\u0026amp;#39; ./xorg.lst ! model ! layout ! variant ! option そしてmodelにはjp106が、layoutにはjpのあることがわかる（macもあるが、pc98もある！）。 variantは見た目からして、layoutごとに存在するオプションのようで、kanaなんてものもある。 最後にoptionだが、ctrlやらcapsやらのキーの扱いに関するものがリストされている。 なので、自分の意図するキーボードレイアウトにしたい場合には、この辺をざっと見て、各設定項目ごとに値を指定して、XKBに教えてやればいいというわけ。 [Xorg7.4のキーボード設定をkwsk その2](http://d.hatena.ne.jp/flageo/20090318/p1) [Xorg7.4のキーボード設定をkwsk その3](http://d.hatena.ne.jp/flageo/20090319/p1)につづく。  ","permalink":"https://nobwak.github.io/posts/2009-03-16-xorg7.4%E3%81%AE%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E8%A8%AD%E5%AE%9A%E3%82%92kwsk_%E3%81%9D%E3%81%AE1/","summary":"HALのキーボード設定ファイルの書き方が分からない。 ググれば設定ファイルは山ほど出てくるが、どう書くかを説明したサイトはなかなか引っかからな","title":"Xorg7.4のキーボード設定をkwsk その1"},{"content":"ポンド安だったのでamazon.ukで[プラネットアース](http://ja.wikipedia.org/wiki/%E3%83%97%E3%83%A9%E3%83%8D%E3%83%83%E3%83%88%E3%82%A2%E3%83%BC%E3%82%B9)（DVD版）と[モンク](http://ja.wikipedia.org/wiki/%E5%90%8D%E6%8E%A2%E5%81%B5%E3%83%A2%E3%83%B3%E3%82%AF)を買った。 モンクはコメディータッチの探偵ドラマ。アメリカ産。 6シーズン分買っても日本円で6000円程度だったからこれはお得。 とはいえ、このドラマの肝は、ある事件により奥さんを失った潔癖症で神経症の探偵モンクと、そのアシスタントである元看護師シャローンのコンビにあるのに、途中からアシスタントが交代してしまうのが残念だ。 プラネットアースはすごく有名な通り、NHK版は全巻セットで3万オーバーのところ、BBC版は購入当時のポンド円換算で2500円程度でその差は実に10倍以上。しかも日本語版では番組ナビゲータとして緒形拳がちょいちょい出てきてて、放映当時にはトイレタイムにしていたのだが、当然ながらBBC版には無い。これはうれしい。 イギリスはリージョンコード2で日本と同じだが、映像方式がPALなのでPCかXBOX360で見る必要がある。  ","permalink":"https://nobwak.github.io/posts/2009-03-15-%E3%82%A4%E3%82%AE%E3%83%AA%E3%82%B9%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3/","summary":"ポンド安だったのでamazon.ukで[プラネットアース](http://ja.wikipedia.org/wiki/%E3%83%97%E","title":"イギリスアマゾン"},{"content":"実はXorg7.4が動かない。 マシンはThinkpad x30でIntel 830MGのもの。 7.4へのアップグレードではhald関連やlibxcbでいろいろと祭りがあったが、それとは別件。 具体的には、グラフィックボードのドライバとしてintelを使い、Xを起動すると画面が真っ暗で、CTRL+ALT+BACKSPACEを押すと画面がぐちゃぐちゃになり、そのままフリーズする。リモートログインもconsole切り替えもダメ。 ドライバがvesaならフリーズはしないが画面は真っ暗のまま。 いろんな手を試してみたが全く改善しない。 ただ、965GM（だったかな？）はOption \u0026quot;DRI\u0026quot; \u0026quot;False\u0026quot;で動いた。 ググってみたところ、日本では報告例を見つけられなかったが、FreeBSDの公式フォーラムではいくつか報告あり。ただ、症例が一定していないので、対応策もいまいち方向性が分からない。 しばらく7.3で様子見をしたほうがいいみたいだ。 [Xorg 7.4 freezes when exit](http://forums.freebsd.org/showthread.php?t=2486) [http://www.freebsd.org/cgi/query-pr.cgi?pr=ports/131016](http://www.freebsd.org/cgi/query-pr.cgi?pr=ports/131016) [http://www.freebsd.org/cgi/query-pr.cgi?pr=kern/132042](http://www.freebsd.org/cgi/query-pr.cgi?pr=kern/132042)  ","permalink":"https://nobwak.github.io/posts/2009-03-14-xorg7.4%E3%81%A0%E3%81%A8%E7%94%BB%E9%9D%A2%E3%81%8C%E7%9C%9F%E3%81%A3%E6%9A%97%E3%83%95%E3%83%AA%E3%83%BC%E3%82%BA/","summary":"実はXorg7.4が動かない。 マシンはThinkpad x30でIntel 830MGのもの。 7.4へのアップグレードではhald関連やlibx","title":"Xorg7.4だと画面が真っ暗→フリーズ"},{"content":"テレビはBSだと意外に面白い番組がやっていて、外出しない休日などはちょくちょくと眺める。 そんなテレビで見かけたマスタードソースがうまそうだったのでメモ。 ・バターでたまねぎをいためる。 ・白ワインをドバドバ入れる。 ・粒入りマスタードを山盛り入れる。 ・塩こしょう 粒入りマスタード大量というのが難しいけど、いつか作ってみたい。  ","permalink":"https://nobwak.github.io/posts/2009-03-12-%E3%83%9E%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%89%E3%82%BD%E3%83%BC%E3%82%B9/","summary":"テレビはBSだと意外に面白い番組がやっていて、外出しない休日などはちょくちょくと眺める。 そんなテレビで見かけたマスタードソースがうまそうだっ","title":"マスタードソース"},{"content":"本家FreeBSD-QA-MLよりメモ。 OpenSSLはFreeBSDのベースシステムに含まれている。 したがって、公式にセキュリティフィックスなどのサポートがされるわけだが、引き換えに最新バージョンへの追随は遅めになる。 OpenSSH本家（[http://www.openssl.org/](http://www.openssl.org/)）では、1/7にOpenSSL 0.9.8jがリリースされているが、FreeBSDでは以下の通りの状況だ。  $ uname -sr FreeBSD 7.1-RELEASE $ openssl version OpenSSL 0.9.8e 23 Feb 2007 上述のとおり、ベースシステムに取り込まれている以上、セキュリティ等のサポートには問題ないが、機能の点で最新版を使いたいケースもある。 そういった場合、OpenSSLはports（security/openssl）にもあるので、ここからインストールして、最新のopensslを使うよう下記の通りmake.confを修正する。 もちろんこれはコンパイル時に新しいopensslを参照するための設定なので、こうしてから最新opensslを使いたいportsやらベースシステムのコマンドやらを作り直す。  # echo \u0026amp;#34;WITH_OPENSSL_PORT=yes\u0026amp;#34; \u0026gt;\u0026gt; /etc/make.conf これだけでOKだが、ベースシステムのOpenSSLを削除したい場合には、下記のようにする。 ただ、これに先立ってportsの全作り直しをしていればともかく、make delete-old-libsはいろいろと面倒なうえに危険なので、この手順はやってない。  # echo \u0026amp;#34;WITHOUT_OPENSSL=yes\u0026amp;#34; \u0026gt;\u0026gt; /etc/src.conf # cd /usr/src \u0026amp;\u0026amp; make check-old # make delete-old # make delete-old-libs ","permalink":"https://nobwak.github.io/posts/2009-03-10-freebsd%E3%81%A7%E6%9C%80%E6%96%B0%E3%81%AEopenssl%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AB%E3%81%AF/","summary":"本家FreeBSD-QA-MLよりメモ。 OpenSSLはFreeBSDのベースシステムに含まれている。 したがって、公式にセキュリティフィック","title":"FreeBSDで最新のOpenSSLを使うには。"},{"content":"俺のショパンに対する評価は、甘ったるい曲ばっかり書くヒモ野郎というようなものであった。ただ、彼には「革命」とか、たまに感情が爆発したような曲もあったりして、実はすごく屈折してるんじゃないのか、とは思っていた。 そして先日。 NHKの「[名曲探偵アマデウス](http://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%A9%E3%82%B7%E3%83%83%E3%82%AF%E3%83%9F%E3%82%B9%E3%83%86%E3%83%AA%E3%83%BC_%E5%90%8D%E6%9B%B2%E6%8E%A2%E5%81%B5%E3%82%A2%E3%83%9E%E3%83%87%E3%82%A6%E3%82%B9)」を観た。 そしたらショパンの曲に対する評価がまったく変わった。 要するに俺がいままで触れていた彼の曲は、数ある作品のうち、皆に好かれるような、したがって俗っぽい曲ばかりだったということ。 この番組では24の前奏曲を扱っていたのだが、メジャーな「雨だれ」以外の曲に、俺がうすうす感じていた彼のひねくれ具合がよく現れていて、むしろこっちが彼の色なんだと思った。  ","permalink":"https://nobwak.github.io/posts/2009-03-09-%E3%82%B7%E3%83%A7%E3%83%91%E3%83%B3%E3%81%AE%E5%B1%88%E6%8A%98/","summary":"俺のショパンに対する評価は、甘ったるい曲ばっかり書くヒモ野郎というようなものであった。ただ、彼には「革命」とか、たまに感情が爆発したような曲","title":"ショパンの屈折"},{"content":"Microsoft Office Specialistを取ろうとしている。ひとまずWordとExcelを。 Officeなんて、適当に使ってもそこそこの文書はできるわけだが、Wordで仕様書を大量に書く羽目になり、ちょっとアウトラインだの表だの表番号だのレイアウトだのの扱うようになると、さすがに真面目に使い方を学ぶ必要性を感じるようになった。受かれば会社が受検料を負担してくれるのもあるので、挑戦してみようと思った次第。 いままではMOSなんて、Microsoftの金儲けに見えて正直バカにしてたんですが。 で、問題集を買って勉強してみたところ、自分の知らない便利な使い方があったりして、いろいろと発見がある。 ただ、それよりも大きな収穫は、問題をこなす過程でメニューをいじり倒しているうちに、WordやExcelを作った人の思想が何となく感じられるようになったこと。 どうやって表現したらよいか難しいけど、たとえば何でも売っている巨大な店で、自分が歯ブラシを買いたいと思っても、今までは虱潰しに探し回っていた。ズバリ歯ブラシを売っている棚の場所は、今回の勉強で覚えるんだけど、実際のところそんな細かい場所は時間が経てば忘れてしまう。だけど、衛生用品の売り場の見当がつくようになったというか。 そういう意味で実技主体のMOSはいい試験だなと思った。うーん。MSの思う壷なんだろうか。 さて。先週MOS Excelをこなしたので、今日はWordの試験。 終わったらExpertも受けてみよう。 PowerPointはどうしようかな。  ","permalink":"https://nobwak.github.io/posts/2009-03-07-microsoft_office_specialist/","summary":"Microsoft Office Specialistを取ろうとしている。ひとまずWordとExcelを。 Officeなんて、適当に使ってもそこそこの文書はできるわけだが","title":"Microsoft Office Specialist"},{"content":"DVDで普通に起動しただけではアップグレードの選択肢が出てこなかった。 ググった結果、DVD起動時にlinux upgradeanyとして指定すればよいとのこと。なんとか成功した。 [http://www.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/5.2/html/Installation_Guide/ch23s02.html](http://www.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/5.2/html/Installation_Guide/ch23s02.html)   If the contents of your /etc/redhat-release file have been changed from the default, your Red Hat Enterprise Linux installation may not be found when attempting an upgrade to Red Hat Enterprise Linux 5.2. You can relax some of the checks against this file by booting with the following boot command: linux upgradeany Use the linux upgradeany command if your Red Hat Enterprise Linux installation was not given as an option to upgrade.  ","permalink":"https://nobwak.github.io/posts/2009-03-05-redhat_4%E3%81%8B%E3%82%895%E3%81%B8%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89/","summary":"DVDで普通に起動しただけではアップグレードの選択肢が出てこなかった。 ググった結果、DVD起動時にlinux upgradeanyとして指定す","title":"Redhat 4から5へのアップグレード"},{"content":"systaはCUI上で分かりやすくシステムの状況を表示してくれる。 こんなコマンドがあることを今まで知らなかった。 引数無しだとこんな感じ。  /0 /1 /2 /3 /4 /5 /6 /7 /8 /9 /10 Load Average | /0% /10 /20 /30 /40 /50 /60 /70 /80 /90 /100 root idle: cpu0 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX root swi4: cloc XX systat -ifstatでこんな感じ。  /0 /1 /2 /3 /4 /5 /6 /7 /8 /9 /10 Load Average | Interface Traffic Peak Total ed1 in 0.000 KB/s 0.000 KB/s 328.699 MB out 0.000 KB/s 0.000 KB/s 1.284 GB lo0 in 0.000 KB/s 0.000 KB/s 1001.810 KB out 0.000 KB/s 0.000 KB/s 1001.810 KB systat -iostatでこんな感じ。  /0 /1 /2 /3 /4 /5 /6 /7 /8 /9 /10 Load Average | /0% /10 /20 /30 /40 /50 /60 /70 /80 /90 /100 cpu user| nice| system|X interrupt|XXX idle|XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX /0% /10 /20 /30 /40 /50 /60 /70 /80 /90 /100 ad0 MB/s tps| ","permalink":"https://nobwak.github.io/posts/2009-02-23-base%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%A6%E3%82%8B%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%A2%E3%83%8B%E3%82%BFsystat/","summary":"systaはCUI上で分かりやすくシステムの状況を表示してくれる。 こんなコマンドがあることを今まで知らなかった。 引数無しだとこんな感じ。 /0 /1","title":"baseシステムに入ってるシステムモニタsystat"},{"content":"[無料クラシックmp3音楽大量ダウンロード（著作権切れの歴史的音源）](http://freeclassicmusicmp3.blog23.fc2.com/) はいはい、どうせしょっぺえ三流演奏家の音源だろ？って思ってましたすみません。 俺にとっては伝説というか神というか、そんな演奏家たちの音源がごろごろしていて泣きそうになった（感動で）。 演奏教育がいまほど効率化、体系化されていない時代の演奏は、演奏家個人の内面がどぎついくらいに表現されて、いい意味でも、悪い意味でも、心の深い深いところにある琴線に触れると思う。 俺が大人になってからヴァイオリンを始めた理由や、仕事のクソ忙しい今でも、首の皮一枚でヴァイオリンとつながっていられる理由は、結局はこういうところにある。技術の向上どころか維持すらおぼつかないんだけど。 感謝感謝。  ","permalink":"https://nobwak.github.io/posts/2009-02-21-%E3%83%86%E3%82%A3%E3%83%9C%E3%83%BC%E3%82%AB%E3%82%B6%E3%83%AB%E3%82%B9%E7%A5%9E%E3%80%85%E3%81%AE%E9%9F%B3%E6%BA%90%E3%81%8C%E8%91%97%E4%BD%9C%E6%A8%A9%E5%88%87%E3%82%8C%E3%81%A3/","summary":"[無料クラシックmp3音楽大量ダウンロード（著作権切れの歴史的音源）](http://freeclassicmusicmp3.blog23.","title":"ティボー、カザルス、神々の音源が著作権切れっ‥！"},{"content":"fortuneが教えてくれたのでメモ。 sockstatを使うことは知っていたが、オプションを工夫することで分かりやすくなる。 具体的には-4lをオプションとして与える。 以下が実行例。  $ sockstat -4l USER COMMAND PID FD PROTO LOCAL ADDRESS FOREIGN ADDRESS root sendmail 933 3 tcp4 127.0.0.1:25 *:* root sshd 917 3 tcp4 *:22 *:* root syslogd 771 6 udp4 *:514 *:* sendmailはともかくとして、syslogdが口空けているのは気分がよろしくないので、/etc/rc.confに以下の一行を追加してポートを閉じる。（当然、リモートサイトのログは取れなくなるが、スタンドアロンであれば問題なし。）  syslogd_flags=\u0026amp;#34;-ss\u0026amp;#34; そのあとsyslogdを再起動すればOK。  # /etc/rc.d/syslogd restart Stopping syslogd. Starting syslogd. # sockstat -4l USER COMMAND PID FD PROTO LOCAL ADDRESS FOREIGN ADDRESS root sendmail 933 3 tcp4 127.0.0.1:25 *:* root sshd 917 3 tcp4 *:22 *:* # ","permalink":"https://nobwak.github.io/posts/2009-02-17-listen%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%83%9D%E3%83%BC%E3%83%88%E3%81%AE%E4%B8%80%E8%A6%A7%E3%82%92%E5%87%BA%E3%81%99%E3%81%AB%E3%81%AF/","summary":"fortuneが教えてくれたのでメモ。 sockstatを使うことは知っていたが、オプションを工夫することで分かりやすくなる。 具体的には-4l","title":"listenしているポートの一覧を出すには"},{"content":"2009/5/1追記:[mergemasterのオプションは-UPiFで](http://d.hatena.ne.jp/flageo/20090501/p1)どうぞ mergemasterについては、[mergemasterを少しだけ楽に](http://d.hatena.ne.jp/flageo/20080304/p1)、[mergemasterは-sivaでなく-UPiで。](http://d.hatena.ne.jp/flageo/20081208/p1)とやってきたが、つい先頃、7.1-STABLEと7.1-RELEASEを行き来した際、CVS Idが違うだけで「どうするよ？」と山ほど聞かれたのにウンザリして、改めてmergemasterのmanを読んだら解決したのでメモ。 結論をさっさと書くと、下記が俺の/etc/mergemaster.rc ポイントは最下行。この指定によりCVS Idを無視して比較してくれるので、かなり楽になる。 ◎/etc/mergemaster.rc  AUTO_UPGRADE=yes AUTO_INSTALL=yes IGNORE_FILES=\u0026amp;#39;/etc/motd\u0026amp;#39; PRESERVE_FILES=yes VERBOSE=yes DIFF_OPTIONS=\u0026amp;#39;-I$FreeBSD:.*\u0026amp;#91;$]\u0026amp;#39; manから引用すると下記の通り。  #Additional options for diff. This will get unset when using -s. #DIFF_OPTIONS=\u0026amp;#39;-I$FreeBSD:.*\u0026amp;#91;$]\u0026amp;#39; # Ignores CVS Id tags 注意すべきは、この設定はコマンドラインオプションでは指定できず、/etc/mergemaster.rcに記載しておく必要がある点。 まあ、上記のようにすれば後はmergemasterと叩くだけだから。 なお、以前の記事でmergemaster.rc内に記載していたIGNORE_MOTDオプションは今後無くなる運命なので、IGNORE_FILESとして/etc/motdを指定すること。  ","permalink":"https://nobwak.github.io/posts/2009-02-16-mergemaster%E3%82%92%E3%81%95%E3%82%89%E3%81%AB%E3%81%95%E3%82%89%E3%81%AB%E3%81%95%E3%82%89%E3%81%AB%E6%97%A9%E3%81%8F/","summary":"2009/5/1追記:[mergemasterのオプションは-UPiFで](http://d.hatena.ne.jp/flageo/200","title":"mergemasterをさらにさらにさらに早く"},{"content":"要するにchroot。 リモートユーザにどうしてもシェルを使わせる必要があるけれども、かといってシステムの中をじろじろ見られるのが嫌な場合に使う。 OpenSSH 4.9以降であればデフォルトで機能が入っている。 sshd_configのChrootDirectoryに続けてディレクトリを指定すれば、そこにchrootされる。 ただ、このままだと自分もchroot環境へログインしてしまうことになるので、chroot環境下にログインさせるユーザをMatch Userで指定する。複数ユーザの場合はカンマ( , )で羅列する。 ユーザ「someone」がsshログインした際、ディレクトリ/chroot/をルートディレクトリになるよう設定した例。  # Example of overriding settings on a per-user basis Match User someone ChrootDirectory /chroot/ #ChrootDirectory %h X11Forwarding no AllowTcpForwarding no # override default of no subsystems #Subsystem sftp /usr/local/libexec/sftp-server Subsystem sftp internal-sftp なお、上記の例でユーザsomeoneがログインした場合、/chroot/etc/passwdのsomeoneレコードに示すホームディレクトリへ移動することになる。someoneのホームディレクトリが/home/someoneとなっていた場合には、/chroot/home/someoneへと移動する。/chroot/直下へ移動するわけではない。 また、/chrootのパーミッションが775とか、ちょっと変わった値になっているとエラーになる。755にしたところ問題なし。 さらに、sftpを使わせたい場合には、上記のようにinternal-sftpにしておくこと。 そのほか、chrootした先に/etc/passwdやら、シェルやら、必要なファイルを揃えないといけないのだが、適当にググれば出てくるので割愛。 とはいっても、ググって出てくるのは孫引きした情報を並べたサイトばかりで閉口するが（その意味では当ブログだって同じだが）、下記サイトはとても参考になった。 straceなんて初めて使った。 [http://www.gentei.org/~yuuji/support/uu/200310/part2.html](http://www.gentei.org/~yuuji/support/uu/200310/part2.html)  ","permalink":"https://nobwak.github.io/posts/2009-02-15-ssh%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%97%E3%81%9F%E3%83%A6%E3%83%BC%E3%82%B6%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%82%92%E5%88%B6%E9%99%90%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"要するにchroot。 リモートユーザにどうしてもシェルを使わせる必要があるけれども、かといってシステムの中をじろじろ見られるのが嫌な場合に使","title":"sshログインしたユーザのディレクトリを制限するには。"},{"content":"FreeBSDでは、先日の[MSDOSFSの件と同じく](http://d.hatena.ne.jp/flageo/20090112/p1)、NTFS上の日本語ファイル名の扱いにも問題がある。 こちらもEUC-JPでマウントすれば一応は問題が解消されるが、俺はFreeBSDの環境をUTF-8にしているので、もともとUTF-8のNTFSを、EUC-JPにして読み込むのは実に馬鹿馬鹿しい。 そこで、MSDOSFSの件で発見した、[http://people.freebsd.org/~imura/kiconv/](http://people.freebsd.org/~imura/kiconv/)で公開されているパッチを使用する。 ただ、こういうのも何だが、文字コードを変換してマウントする場合、現時点では読み込みのみがサポートされ、書き込みは不可であることを考える*1と、一時的な用途であればLinuxを使った方がはるかに早い。例えば、死んでしまったWindowsのディスクからファイルを復旧したいといったケースには、LinuxのLiveCDを使うほうが手軽。 また、カーネルとユーザランドへのパッチなので、ソースをアップデートする度にパッチを当てなおさなければならないのは、かなりのデメリット。継続的にNTFSをマウント（加えて読み取りのみ）する必要がある場合に限ったほうがいいと思う。 さておき。まず、上記のサイトから、1.,2.のパッチと、3.のNTFS向けパッチをダウンロードする。 /usr/src直下でpatchコマンドにこれらのパッチを食わせればよい。本番前に-Cオプションを付けて実行し、様子を見るのが吉。 ◎実行例  # pwd /usr/src # patch -C \u0026amp;#60; ~/ntfs.patch/01.k.patch (略) # patch \u0026amp;#60; ~/ntfs.patch/01.k.patch (略) 次に、kernelの再構築と、libkiconvのmake install。 上記のパッチは、kernelに対するものと、libkiconvに対するものの二つであるため。 kernelは、特別なことはなにもせず、再インストールすればいいだけ。(/usr/src配下でmake buildkernel, make installkernel） libkiconvは/usr/src/lib/libkiconvでmake, make installする。 ◎実行例  # pwd /usr/src/lib/libkiconv # make clean rm -f kiconv.3.gz kiconv.3.cat.gz （略） # make cc -O2 -fno-strict-aliasing -pipe -I/usr/src/lib/libkiconv/../../sys -c /usr/src/lib/libkiconv/sysctl.c （略） # make install install -C -o root -g wheel -m 444 libkiconv.a /usr/lib （略） あとは再起動して新しいkernelを読み込ませ、mout_ntfsに-CUTF-8オプションを与えるだけ。 ◎実行例  # mount_ntfs -o ro -CUTF-8 /dev/da0s1 /mnt FreeBSD初心者スレにもちょうど同じ話題があったのでコピーしておく。シンクロニシティ・・。 初心者もOK! FreeBSD質問スレッド その99   445 : 名無しさん＠お腹いっぱい。 : sage : 2009/01/13(火) 08:13:53 .UTF-8 で ntfs のこと: [http://people.freebsd.org/~imura/kiconv/](http://people.freebsd.org/~imura/kiconv/) の、1. 2. と3.　の ntfs ぶん当てて kernel と libkiconv 作り直して、 % grep ntfs /etc/fstab /dev/ad0s3 /diske ntfs ro,-CUTF-8 0 0 で、日本語 file name 読めた。 % uname -rp 7.1-RELEASE-p1 i386 へけけ  ","permalink":"https://nobwak.github.io/posts/2009-01-25-freebsd%E3%81%A7ntfs%E4%B8%8A%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%90%8D%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E6%89%B1%E3%81%86%E3%81%AB%E3%81%AF/","summary":"FreeBSDでは、先日の[MSDOSFSの件と同じく](http://d.hatena.ne.jp/flageo/20090112/p1)","title":"FreeBSDでNTFS上の日本語名ファイルを扱うには。"},{"content":"MSDOSFSの日本語ファイル名に使われる文字コードはCP932([Shit_JIS](http://ja.wikipedia.org/wiki/Microsoft%E3%82%B3%E3%83%BC%E3%83%89%E3%83%9A%E3%83%BC%E3%82%B8932))だが、これをFreeBSDでマウントするには少々の手間がかかる。 結論からいえば、現時点(2009/01/12)でUTF-8に変換すると問題があるため、EUC-JPに変換する。 具体的には、mount_msdosfsに-L, -Dオプションを与えて使う。 ◎実行例  # dmesg|grep da0 Jan 12 12:37:10 onyx kernel: da0 at umass-sim0 bus 0 target 0 lun 0 Jan 12 12:37:10 onyx kernel: da0: \u0026amp;#60;Maxtor OneTouch 0200\u0026gt; Fixed Direct Access SCSI-0 device Jan 12 12:37:10 onyx kernel: da0: 40.000MB/s transfers Jan 12 12:37:10 onyx kernel: da0: 194480MB (398295040 512 byte sectors: 255H 63S/T 24792C) ＜略＞ # mount_msdosfs -o large -Lja_JP.eucJP -D CP932 /dev/da0s1 /mnt これでファイル名はEUC-JPで表示されるので、LANG=ja_JP.eucJP;export LANGとしたうえで、ターミナルの設定を変えてやればOK。 UTF-8のターミナルでファイル名を確認したい場合には、nkf( /usr/ports/japanese/nkf)やiconv(/usr/ports/converters/libiconv)で変換する。 ◎実行例  $ ls /mnt/Document/*.url /mnt/Document/SUPPORT\u0026amp;#91;Support Info.]Windows 2000 ???????.url /mnt/Document/????????????????.url $ ls /mnt/Document/*.url|iconv -f EUC-JP -t UTF-8 /mnt/Document/SUPPORT\u0026amp;#91;Support Info.]Windows 2000 関連情報.url /mnt/Document/ファイアウォール.url $ nkfの場合にはiconvの代わりにnkf -Ewとする。 ファイル名の文字コード自体を変換したい場合には、convmv([ファイル名の文字コード変換](http://d.hatena.ne.jp/flageo/20070302/p1))を使う。 なお、mount_msdosfsでUTF-8への変換時に発生する問題については下記のリンクを参照のこと。 [”(FreeBSD-users-jp 91921) Re: Trouble in msdosfs UTF-8 conversion of japanese filename”](http://www.mail-archive.com/freebsd-users-jp@jp.freebsd.org/msg03158.html) 一部引用。   Q cd9600 msdosfs ntfs などの CP932 なファイルシステムで 日本語を含むファイルがある場合、UTF-8 に変換して mount する (たとえば # mount_msdosfs -L ja_JP.UTF-8 ) と、日本語を 含むファイルへのアクセスがおかしいようです。 A カーネル内部のコード変換が、バイト数が変化する変換に完全にはまだ 対応できていないためです（ UTF-8 では漢字は 3 バイト）。EUC への 変換で回避するか、imuraさんによる kiconv enhancement パッチ [http://people.freebsd.org/~imura/kiconv/](http://people.freebsd.org/~imura/kiconv/) を自分で当てて、対応したカーネルを作成する必要があります。  ","permalink":"https://nobwak.github.io/posts/2009-01-12-freebsd%E3%81%A7msdosfs%E4%B8%8A%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E6%89%B1%E3%81%86%E3%81%AB%E3%81%AF/","summary":"MSDOSFSの日本語ファイル名に使われる文字コードはCP932([Shit_JIS](http://ja.wikipedia.org/wi","title":"FreeBSDでmsdosfs上の日本語ファイルを扱うには"},{"content":"$ rcorder /etc/rc.d/* /usr/local/etc/rc.d/* 2\u0026gt;\u0026amp;1 | less $ 上記のコマンドを実行する。 その他、依存関係に問題がある場合にも教えてくれる。\n","permalink":"https://nobwak.github.io/posts/2008-12-21-rc%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AE%E8%B5%B7%E5%8B%95%E9%A0%86%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"$ rcorder /etc/rc.d/* /usr/local/etc/rc.d/* 2\u0026gt;\u0026amp;1 | less $ 上記のコマンドを実行する。 その他、依存関係に問題がある場合にも教えてくれる。","title":"rcスクリプトの起動順を調べるには"},{"content":"CentOSをインストールした。 DISCイメージが何枚かあってよくわからない。雑誌付録のDVDを借りた。 特に問題なくインストールは完了したが、yumのproxy設定でちょっとつまずいたのでメモ yumのproxy設定 [http://www.centos.org/docs/5/html/yum/sn-yum-proxy-server.html](http://www.centos.org/docs/5/html/yum/sn-yum-proxy-server.html)  # The proxy server - proxy server:port number proxy=http://mycache.mydomain.com:3128 # The account details for yum connections proxy_username=yum-user proxy_password=qwerty と、書いてあるが、なぜか効かない。*1 少し調べてみるとyumはcurlを使っているので、環境変数http_proxyによりcurl側で対応した。 デフォルトのレポジトリ参照先は遅いので、国内に変更する。 /etc/yum.confがyumの設定ファイルだが、レポジトリは/etc/yum.repos.d/*.repoに切り出せる。 適当に日本のミラーリストを検索して下記のように変更。 /etc/yum.repos.d/CentOS-Base.repo  # PUT YOUR REPOS HERE OR IN separate files named file.repo # in /etc/yum.repos.d \u0026amp;#91;base] name=CentOS-$releasever - Base baseurl=http://ftp.riken.jp/Linux/centos/$releasever/os/$basearch/ gpgcheck=1 #released updates \u0026amp;#91;update] name=CentOS-$releasever - Updates baseurl=http://ftp.riken.jp/Linux/centos/$releasever/updates/$basearch/ gpgcheck=1 \u0026amp;#91;addons] name=CentOS-$releasever - Addons baseurl=http://ftp.riken.jp/Linux/centos/$releasever/addons/$basearch/ gpgcheck=1 #additional packages that may be useful \u0026amp;#91;extras] name=CentOS-$releasever - Extras baseurl=http://ftp.riken.jp/Linux/centos/$releasever/extras/$basearch/ gpgcheck=1 \u0026amp;#91;contrib] name=CentOS-$releasever - Plus baseurl=http://ftp.riken.jp/Linux/centos/$releasever/centosplus/$basearch/ gpgcheck=1 enabled=1 ","permalink":"https://nobwak.github.io/posts/2008-12-20-yum%E3%81%AEproxy%E8%A8%AD%E5%AE%9A/","summary":"CentOSをインストールした。 DISCイメージが何枚かあってよくわからない。雑誌付録のDVDを借りた。 特に問題なくインストールは完了したが","title":"yumのproxy設定"},{"content":"ローカルユーザの場合と、anonymousユーザの場合で対応が異なる。 anonymousユーザ向けには、anon_rootでchroot先のディレクトリを設定するだけで終了。  # grep anon_root /etc/vsftpd/vsftpd.conf anon_root=/var/ftp/pub # ローカルユーザ向けの場合には、少々手間が必要。 まず、local_root=＜ディレクトリ名＞として、ログイン後に移動させるディレクトリを指定する。 さらに、chroot_list_fileで指定したファイル（以降chroot_list_file）に該当ユーザを書き込んでおき、chroot_list_enable=YESとしてリストを有効にする。 （ちなみに、chroot_local_userをYESにすると、chroot_listの意味合いが違ってくるが、ここでは触れない。） なお、chroot_listを有効にしておいてlocal_rootを指定しないと、ユーザのホームディレクトリにchrootされる。 sftpならともかくとして、ftpでユーザのホームディレクトリにアクセスさせるのはセキュリティ上好ましくないので、local_rootと必ずセットにすること。 逆に、local_rootを有効にしてchroot_listを無効にした場合、該当ユーザのログイン直後のディレクトリはlocal_rootで指定されたディレクトリであるものの、その上のディレクトリへも自由に移動できる。これもこれで危険。 /etc/vsftpd/vsftpd.conf  # chroot settings for local user chroot_list_enable=YES chroot_list_file=/etc/vsftpd/chroot_list local_root=/var/ftp # chroot settings for anon user anon_root=/var/ftp ","permalink":"https://nobwak.github.io/posts/2008-12-19-vsftpd%E3%81%A7chroot%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E8%A1%8C%E3%81%86%E3%81%AB%E3%81%AF/","summary":"ローカルユーザの場合と、anonymousユーザの場合で対応が異なる。 anonymousユーザ向けには、anon_rootでchroot先の","title":"vsftpdでchrootの設定を行うには。"},{"content":"仕事でvsftpdを入れたのでメモ。 ホワイトリスト/ブラックリストの設定 userlist_fileで指定するファイル（以降、userlist_file）には、ユーザをリストするのだが、このファイルの扱いは、vfstpd.confの設定により180度変わる。   userlist_enable=YES かつ userlist_deny=YESのとき; userlist_fileにリストされているユーザのログインを拒否する。 userlist_enable=YES かつ userlist_deny=NOのとき; 基本的にすべてのユーザのログインが拒否される。 しかし、uselist_fileにリストされているユーザについてはログイン許可  つまり、userlist_fileがホワイトリストになったり、ブラックリストになったりする。 で。それとは別に、vsftpdのデフォルトPAM設定(後述)では、ブラックリストとして/etc/vsftpd/ftpusersもチェックしているので注意が必要。 あるユーザがftpusersにリストされた時と、ブラックリストとしてのuserlist_fileにリストされた時の違いは、前者はパスワード入力後に失敗となり、後者はユーザ名を入れた瞬間に失敗となる。 いずれにしろ/etc/vsftpd/ftpusersがブラックリストとして動作するので、userlist_fileはホワイトリストとして使うことにする。 なお、anonymousユーザ（anonymous, ftp）もこのリストの対象になるようだ。 PAM設定（CentOSでの内容）  # grep pam_service ./vsftpd.conf pam_service_name=vsftpd # cat /etc/pam.d/vsftpd #%PAM-1.0 session optional pam_keyinit.so force revoke auth required pam_listfile.so item=user sense=deny file=/etc/vsftpd/ftpusers onerr=succeed auth required pam_shells.so auth include system-auth account include system-auth session include system-auth session required pam_loginuid.so ","permalink":"https://nobwak.github.io/posts/2008-12-17-vsftpd%E3%81%AE%E3%83%9B%E3%83%AF%E3%82%A4%E3%83%88%E3%83%AA%E3%82%B9%E3%83%88_%E3%83%96%E3%83%A9%E3%83%83%E3%82%AF%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E8%A8%AD%E5%AE%9A/","summary":"仕事でvsftpdを入れたのでメモ。 ホワイトリスト/ブラックリストの設定 userlist_fileで指定するファイル（以降、userlist","title":"vsftpdのホワイトリスト/ブラックリストの設定"},{"content":"proflibsが何だか分からなかったんだが。 [http://lists.freebsd.org/pipermail/freebsd-questions/2008-October/184180.html](http://lists.freebsd.org/pipermail/freebsd-questions/2008-October/184180.html)  Re: proflibs by Jeremy Chadwick on 2008-10-11T02:10:33+00:00 On Fri, Oct 10, 2008 at 11:06:11PM -0400, Ansar Mohammed wrote: \u0026gt; Can anyone explain what are the proflibs on the install media, and what they \u0026gt; are for? They\u0026#39;re special versions of all the libraries that come with FreeBSD which contain profiling code (code for determining the amount of time spent within or between two functions). They\u0026#39;re for developers. proflibsというのは、プロファイリングコードを含んだ、ライブラリのセットのこと。 プロファイリングコードとは、開発時にコードのベンチマークを行うためのもので、要するに一般ユーザにはまったく関係ない、ということですか。 しかしこの回答者のサイトhttp://www.parodius.com/はいったい…？  ","permalink":"https://nobwak.github.io/posts/2008-12-09-proflibs%E3%81%A3%E3%81%A6%E4%BD%95/","summary":"proflibsが何だか分からなかったんだが。 [http://lists.freebsd.org/pipermail/freebsd-questions/2008-October/184180.html](http://lists.freebsd.org/pipermail/freebsd-questions/2008-October/184180.html) Re: proflibs by Jeremy Chadwick on 2008-10-11T02:10:33+00:00 On Fri, Oct 10, 2008 at 11:06:11PM -0400, Ansar Mohammed wrote: \u0026gt; Can anyone explain what are the proflibs on the install media, and what they \u0026gt; are for? They\u0026#39;re special versions of all the libraries that come with","title":"proflibsって何？"},{"content":"mergemasterについて、FreeBSD-questionsに面白い投稿（[http://lists.freebsd.org/pipermail/freebsd-questions/2008-September/182096.html](http://lists.freebsd.org/pipermail/freebsd-questions/2008-September/182096.html)）があった。 もし結論を早く知りたい人がいれば、結末から読んでください。 2009/2/16 追記。本記事も陳腐化したので、[mergemasterをさらにさらにさらに早く](http://d.hatena.ne.jp/flageo/20090216/p1)をどうぞ。 mergemasterにはかなり前に自動アップデート機能が追加されていたらしく…。 具体的には、mergemasaterに-Uオプションを与えて実行する。 これは、ユーザ変更がされていないファイルであれば自動的にアップデートするというもの。 便利は便利なのだが、その性質上、ユーザ変更の有無を比較するための原本が必要になる。 その原本が/var/db/mergemaster.mtree。 今までに何度かmergemasterを実行していれば上記ファイルはあるはずだが、ない場合には「ソースをアップデートする前に」mergemasterを一回カラ打ちする必要がある。 実行例  $ mergemaster *** Unable to find mtree database. Skipping auto-upgrade. *** Creating the temporary root environment in /var/tmp/temproot *** /var/tmp/temproot ready for use *** Creating and populating directory structure in /var/tmp/temproot mtree -eU -f /usr/src/etc/mtree/BSD.root.dist -p /var/tmp/temproot/ (略) こうしておけば、次からmergemaster -Uとやるだけで、かなりのファイルを自動アップデートしてくれて楽になるはず。 しかし、自動アップデートはやはり怖いので、入れ替え前のファイルはどこかに保存しておきたい。だから-Pオプションも追加。バックアップは/var/tmp/mergemaster/preserved-files-`date +%y%m%d-%H%M%S`に作られる。 さらに、アップグレードにより新規に追加されたファイルは問答無用でインストールしていいはずなので、-iオプションも追加。 つまりmergemaster -UPi ところで、mergemasterの設定ファイルであるmergemaster.rcは/usr/share/examples配下にない。何でないのだろう、と思っていたのだが、なんとmergemasterのマニュアル内にあった。最後まで読んでなかったよ…。 というわけで、以下のファイルを/etc/mergemaster.rcとして保存しておけばオプション要らず。 /etc/mergemaster.rc  AUTO_INSTALL=yes AUTO_UPGRADE=yes PRESERVE_FILES=yes PRESERVE_FILES_DIR=/var/tmp/mergemaster/preserved-files-`date +%y%m%d-%H%M%S` IGNORE_MOTD=yes VERBOSE=yes AUTO_UPGRADEが-Uオプションに対応するが、現時点（7.1-BETA2）ではマニュアルに記載されていない。 4行目以降はmergemasterのマニュアルを参考に書いた。 PRESERVE_FILES_DIRはバックアップファイルを置くディレクトリ書式の指定。 IGNORE_MOTDはmotdを無視する設定。  ","permalink":"https://nobwak.github.io/posts/2008-12-08-mergemaster%E3%81%AF-siva%E3%81%A7%E3%81%AA%E3%81%8F-upi%E3%81%A7/","summary":"mergemasterについて、FreeBSD-questionsに面白い投稿（[http://lists.freebsd.org/pipe","title":"mergemasterは-sivaでなく-UPiで。"},{"content":"CDのrippingとmp3エンコードを一緒にやってくれるツールとして[grip](http://nostatic.org/grip/)をインストールした。 非常に手軽で良い。夕飯を作りながら215曲、2.2Gのライブラリができた。 FreeBSDであればportsのaudio/gripから。 エンコーダをいろいろと選べるので、pkgではなくportsからインストールしたほうが良いと思う。 とはいっても、俺が結局使うのはスピード重視でgogo(/usr/ports/audio/gogo)。 rippingツールも同じくスピード重視でcdda2wav(/usr/ports/audio/cdda2wav)。 gripのエンコーダ設定で/usr/local/bin/gogoとし、オプション設定でbit rateを192に。 また、DiscDBのセカンダリにはfreedbtest.dyndns.orgを設定して日本のCDもカバーするようにした。 ただ、糞マイナーな安物クラシックCDもたくさんあって、これがCDDBに登録されていないことも多く・・・。 こっちは気合入れてタグ入れないとなあ。  ","permalink":"https://nobwak.github.io/posts/2008-12-06-grip%E3%81%A7rip_amp_%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89/","summary":"CDのrippingとmp3エンコードを一緒にやってくれるツールとして[grip](http://nostatic.org/grip/)をイ","title":"gripでrip \u0026amp; エンコード"},{"content":"春日武彦の「問題は、躁なんです 正常と異常のあいだ」を読んだ。 あちこちで支持されているので買ったのだが、薄かった。 内容もだらだらとしていて、系統立っているような気がしないし、話のタネに出てくるデータが古いことが多い。 しかも、自分が直接診察したのではなしに、週刊誌とかに出てくるような事件を引いては、この人は躁だったんじゃないか？と続けるのだが、これじゃ単なる噂好きの親父の与太話に思える。 自分の患者の話を書くのは、いろいろと問題があるだろうが、たとえば「平気で嘘をつく人たち」などは、プライバシーに配慮しつつ、自分の扱った患者の話を書いている。 ちょっと興味のある話が出てきて、ついに来た！とワクワクして読んだら、他の人のこれこれという本に影響されてこの話を書いた、なんて記述が続いたりする。 昔の資産食いつぶし型か？と思ってWikipediaで調べてみたら、案の定、年に1～2冊のペースを10年程度続けている。ちょっとこれは。  ","permalink":"https://nobwak.github.io/posts/2008-11-30-%E5%95%8F%E9%A1%8C%E3%81%AF%E8%BA%81%E3%81%AA%E3%82%93%E3%81%A7%E3%81%99/","summary":"春日武彦の「問題は、躁なんです 正常と異常のあいだ」を読んだ。 あちこちで支持されているので買ったのだが、薄かった。 内容もだらだらとしていて、系","title":"問題は、躁なんです。"},{"content":"2014/3/20追記\nなぜだかこの記事が未だにアクセスされているので追記。\nもうFreeBSDではcsupは使われませんので注意のほどを。\n追記ここまで\n[ここ](http://d.hatena.ne.jp/flageo/20071021/p2)でも書いたが、portsのアップデートはcsupにしている。 で、csupを少しでも早くするために、refuseの設定の他、fastest_cvsupも使っている。 このコマンドはperlスクリプトで、カントリーコードを与えて実行すると、自分の環境で反応の速いcvsupサーバ上位3つを返してくれる。 /usr/ports/sysutils/fastest_cvsupからインストールできる。 実行例。  [flageo@xxx ]$ fastest_cvsup -c jp \u0026gt;\u0026gt; Querying servers in countries: jp --\u0026gt; Connecting to cvsup.jp.freebsd.org [210.224.172.75]... - server replied: OK 17 0 SNAP_16_1h CVSup server ready - time taken: 56.67 ms --\u0026gt; Connecting to cvsup2.jp.freebsd.org [203.216.196.85]... - server replied: OK 17 0 SNAP_16_1h CVSup server ready - time taken: 23.71 ms --\u0026gt; Connecting to cvsup3.jp.freebsd.org [59.106.2.11]... - server replied: OK 17 0 SNAP_16_1h CVSup server ready - time taken: 24.14 ms --\u0026gt; Connecting to cvsup4.jp.freebsd.org [133.1.240.15]... - server replied: OK 17 0 SNAP_16_1h CVSup server ready - time taken: 28.51 ms --\u0026gt; Connecting to cvsup5.jp.freebsd.org [210.161.150.4]... - server replied: OK 17 0 SNAP_16_1h CVSup server ready - time taken: 46.06 ms --\u0026gt; Connecting to cvsup6.jp.freebsd.org [59.106.2.11]... - server replied: OK 17 0 SNAP_16_1h CVSup server ready - time taken: 29.57 ms \u0026gt;\u0026gt; Speed Daemons: - 1st: cvsup2.jp.freebsd.org - 2nd: cvsup3.jp.freebsd.org - 3rd: cvsup4.jp.freebsd.org で、-qオプションを与えてやると一番速いとこだけを返すようになるので、これをcsupに食わせてやる。 実行例  # csup -h `/usr/local/bin/fastest_cvsup -q -c jp` -g /etc/supfile-ports -=(oooooo)=(cvsup6.jp.freebsd.org)=- Connected to 203.216.196.85 Updating collection ports-all/cvs (略) その時々でネットワークの状況だったり、サーバの混み具合が違い、結果として速いサーバも変わってくるので、csup実行時にチェックできるのがいいと思う。 なお、[ここ](http://d.hatena.ne.jp/flageo/20071021/p2)で書いたrefuseの設定は以下の通り。 こうしておくと、不要なファイルのダウンロードはしない。  $ cat /var/db/sup/refuse doc/bn_* doc/da_* doc/de_* doc/el_* doc/es_* doc/fr_* doc/hu_* doc/id_* doc/it_* doc/mn_* doc/nl_* doc/no_* doc/pl_* doc/pt_* doc/ro_* doc/ru_* doc/sr_* doc/tr_* doc/zh_* ports/arabic ports/chinese ports/french ports/german ports/hebrew ports/hungarian ports/korean ports/polish ports/portuguese ports/russian ports/ukrainian ports/vietnamese ","permalink":"https://nobwak.github.io/posts/2008-11-29-csupcvsup%E3%81%A7%E3%81%AEportssrc%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88%E3%82%92%E6%97%A9%E3%81%8F%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AB/","summary":"2014/3/20追記 なぜだかこの記事が未だにアクセスされているので追記。 もうFreeBSDではcsupは使われませんので注意のほどを。 追記","title":"csup(cvsup)でのports、srcのアップデートを早くするために"},{"content":"2chのFreeBSD関連スレを徒然に眺めていたら出てきたgrdc。 コンソール画面いっぱいにデジタル時計を表示するコマンドで、なんだかすごく衝撃を受けた。 こんなのがあるとは知らなかった。 ただ、コマンドがgamesに属するので、FreeBSDをインストールしたときのオプションによってはgrdcがインストールされていない場合もある。 俺の場合もそうだった。 インストールする方法はいくらでもあるが、俺はソースだけは全部インストールしておいたので、コンパイル後インストール。  [flageo@xxxxx /usr/src/games/grdc]$ ls Makefile grdc.6 grdc.c [flageo@xxxxx /usr/src/games/grdc]$ sudo make （中略） [flageo@xxxxx /usr/src/games/grdc]$ ls Makefile grdc.6 grdc.c grdc grdc.6.gz grdc.o [flageo@xxxxx /usr/src/games/grdc]$ sudo make install clean install -s -o root -g wheel -m 555 grdc /usr/games install -o root -g wheel -m 444 grdc.6.gz /usr/share/man/man6 rm -f grdc grdc.o grdc.6.gz grdc.6.cat.gz [flageo@xxxxx /usr/src/games/grdc]$ オプションは-sでスクロール、-tで12時間フォーマット、数字nを引数で与えてやるとn秒後にストップする。ただスクロールさせると表示が間に合わないかもね。とのこと。なんだそれ。 容量確保とか、ビルドの時間を短くしたいとかで、gamesはいつも削除の対象にしていたが、改めて/usr/src/gamesを眺めてみると大した量はない。そういえばgames配下のものは、可能な限りportsに移したという話を聞いたこともある。FreeBSD自体の考えでは、ベースシステムとそれ以外を厳密に分ける。結果として、いまだにperlがベースに入ってないくらいなので、無駄なものが入っていればすぐにやり玉にあがったろう。 そういったわけで、/usr/src/gamesの下でmake install cleanして全部のコマンドを入れた。 中でも有名なのはfortune。 さっそくインストールして実行してみた。（訳俺）   ウェイター「コーヒーと紅茶、どちらになさいますか？」 客A 「紅茶がいいね」 客B 「僕も。カップが清潔か、きちんと確認してくれたまえ。」 数分後 ウェイター「紅茶を二つお持ちしました。清潔なカップを頼まれたのはどちら様ですか？」  …。 あとは文字列をパンチカードに変換するとか、カエサル暗号化するとか、すてきなコマンドがあった。  ","permalink":"https://nobwak.github.io/posts/2008-11-28-freebsd%E3%81%AEgames/","summary":"2chのFreeBSD関連スレを徒然に眺めていたら出てきたgrdc。 コンソール画面いっぱいにデジタル時計を表示するコマンドで、なんだかすごく","title":"FreeBSDのgames"},{"content":"山崎豊子の白い巨塔を読んだ。 もともとは財前が裁判にも教授選にも勝ったところで幕だったところを延ばしたらしい。それで良かったのかは分からない。 この作者は、こういう欲望渦巻く話が一番似合うと思う。 その中でも、立場をかさに着た慇懃無礼、臆面の無さ、権力者に対する阿諛追従、といったようなエリアが特に生き生きとするような。 ただちょっと単純すぎるような気もしていて、今読んでいる「華麗なる一族」の方が少しひねってあるように思う。 俗物戦争とは一歩引いた立場として里見などの人物が描かれるが、これも現実味がないというか、どちらかというと「沈まぬ太陽」の主人公の方が、なかなか見ないタイプではあっても、しっくり来るように感じる。  ","permalink":"https://nobwak.github.io/posts/2008-11-27-%E7%99%BD%E3%81%84%E5%B7%A8%E5%A1%94/","summary":"山崎豊子の白い巨塔を読んだ。 もともとは財前が裁判にも教授選にも勝ったところで幕だったところを延ばしたらしい。それで良かったのかは分からない。","title":"白い巨塔"},{"content":"若草物語を読了できず挫折した。 最近は本をブックオフオンラインで買うことが多い。 1500円で送料無料になるので、それに満たない場合には、予めリストしておいた100円とか150円程度の、いつかは読もうと思っていた本で値段を調整する。 この本も、名の知れた世界名作系だしということで対象にしていた。 が、冒頭から眠い日常をだらだらと書かれて心が折れた。 つかみの事件でもあれば良かったんだけど。 南北戦争時の小説であれば「風と共に去りぬ」があるし、あっちの方が燃える。  ","permalink":"https://nobwak.github.io/posts/2008-11-26-%E8%8B%A5%E8%8D%89%E7%89%A9%E8%AA%9E/","summary":"若草物語を読了できず挫折した。 最近は本をブックオフオンラインで買うことが多い。 1500円で送料無料になるので、それに満たない場合には、予めリ","title":"若草物語"},{"content":"遠藤周作の深い河を読んだ。 とてもよかった。 何人も出てくる登場人物のどんな思いも、生と死とまとめて受け入れるガンジス川で表現される何か。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4062632578\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/513R878FTZL._SL75_.jpg\u0026quot; alt=\u0026quot;深い河 (講談社文庫)\u0026quot; title=\u0026quot;深い河 (講談社文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 突拍子もない話をするが、ガンジス川は汚いと思うし、ここで沐浴しろと言われても絶対に無理。だけど、登場人物を異端として排除した教会のロジックと、ガンジス川を汚いと思うロジックは似ているのではないかと思った。 作中に出てくる、やせ細りながらも授乳を行う醜い女神の話が印象的だった。  ","permalink":"https://nobwak.github.io/posts/2008-11-24-%E6%B7%B1%E3%81%84%E6%B2%B3/","summary":"遠藤周作の深い河を読んだ。 とてもよかった。 何人も出てくる登場人物のどんな思いも、生と死とまとめて受け入れるガンジス川で表現される何か。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4062632578\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img","title":"深い河"},{"content":"ネタ元はfreebsd-questions@freebsd.org ハッシュを比較するというのはアウト。 というのは、jpegファイルにはExifなどのメタデータが含まれているため、たとえ画像が同じでも、メタデータが違えばハッシュが違ってしまうから。 jheaderなどのツールを用いてメタデータを削除し比較する手もあるが、いったんbmpに変換してからdiffなりで比較するのがよい。 なぜかといえば、jpgに限らず、メタデータの含まれる画像であっても融通が利くため。 bmpへの変換はgraphics/ImageMagickに含まれるconvertコマンドが便利。 なお、ImageMagickは、デフォルトではX関連のソフトを入れようとするので、Xの不要なマシンでは注意。 Linuxの場合は適当にaptで。  ","permalink":"https://nobwak.github.io/posts/2008-11-23-2%E3%81%A4%E3%81%AEjpeg%E7%94%BB%E5%83%8F%E3%81%8C%E5%90%8C%E3%81%98%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E7%A2%BA%E3%81%8B%E3%82%81%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"ネタ元はfreebsd-questions@freebsd.org ハッシュを比較するというのはアウト。 というのは、jpegファイルにはExi","title":"2つのjpeg画像が同じかどうか確かめるには"},{"content":"[こんなこと](http://d.hatena.ne.jp/flageo/20081118/p1)があったので、やはり曲がりなりにもサーバたるもの、吊るしのpkgをインストールすることはやめようと思ったのだが、やっぱり時間がかかる。 そこでメインマシンのVM上FreeBSDでビルドしたものをサーバマシンに移すことにした。 ビルドするときにパッケージも作っておく方法はいくらでもあるが、すでにビルド済みのマシンでパッケージを作るのはあまり経験が無かったのでメモ。  # pkg_create -Rvb php5-5.2.6_2 このように、バージョン名も含めてターゲットを指定すると、カレントディレクトリにpkgが作成されるので、それを移す。 ただしmeta-portは指定出来ない。 なお、Rオプションは、ターゲットのportsビルドに必要な別のportsのパッケージも作る指示。 移動先マシンへのインストールが、ターゲットのportsだけでよいことがはっきりしている場合には、付けなくても可。 以下が実行例。  $ pkg_create -Rvb php5-5.2.6_2 Creating package php5-5.2.6_2 Creating bzip\u0026#39;d tar ball in \u0026#39;/usr/home/flageo/php5-5.2.6_2.tbz\u0026#39; Creating package expat-2.0.1 Creating bzip\u0026#39;d tar ball in \u0026#39;/usr/home/flageo/expat-2.0.1.tbz\u0026#39; Creating package perl-5.8.8_1 Creating bzip\u0026#39;d tar ball in \u0026#39;/usr/home/flageo/perl-5.8.8_1.tbz\u0026#39; Creating package pkg-config-0.23_1 Creating bzip\u0026#39;d tar ball in \u0026#39;/usr/home/flageo/pkg-config-0.23_1.tbz\u0026#39; Creating package sqlite3-3.6.4 Creating bzip\u0026#39;d tar ball in \u0026#39;/usr/home/flageo/sqlite3-3.6.4.tbz\u0026#39; Creating package db41-4.1.25_4 Creating bzip\u0026#39;d tar ball in \u0026#39;/usr/home/flageo/db41-4.1.25_4.tbz\u0026#39; Creating package libiconv-1.11_1 Creating bzip\u0026#39;d tar ball in \u0026#39;/usr/home/flageo/libiconv-1.11_1.tbz\u0026#39; Creating package apache-2.2.9_5 Creating bzip\u0026#39;d tar ball in \u0026#39;/usr/home/flageo/apache-2.2.9_5.tbz\u0026#39; Creating package libxml2-2.6.32_1 Creating bzip\u0026#39;d tar ball in \u0026#39;/usr/home/flageo/libxml2-2.6.32_1.tbz\u0026#39; ところで、php5の場合はphp5-extensionsでインストールしたphp拡張機能も作っておく必要がある。 冒頭で述べたように、pkg_createではphp5-extensionsのようなmeta-portは指定出来ない。 そこでpkg_info -Ix php5として得られる一覧をpkg_createに渡すことを考えるが、pkg_createが取ることのできる引数は一つだけ。 なのでxargsを使う。xargsで-n 1とすれば、引数を一つずつ渡してくれる。 下記が実行例。-Rオプションはここでは外している。  $ pkg_info -Ix php5|cut -d\u0026#34; \u0026#34; -f 1 |xargs -n 1 pkg_create -vb Creating package php5-5.2.6_2 Creating bzip\u0026#39;d tar ball in \u0026#39;/usr/home/flageo/php5-5.2.6_2.tbz\u0026#39; Creating package php5-bz2-5.2.6_2 Creating bzip\u0026#39;d tar ball in \u0026#39;/usr/home/flageo/php5-bz2-5.2.6_2.tbz\u0026#39; （略） Creating package php5-zlib-5.2.6_2 Creating bzip\u0026#39;d tar ball in \u0026#39;/usr/home/flageo/php5-zlib-5.2.6_2.tbz\u0026#39; こういうまだるっこしいことをせず、インストールされているportsのすべてをpkgにするには、pkg_infoにEaオプションを与えてpkg_createに渡す。  $ pkg_info -Ea|xargs -n 1 pkg_create -vb Creating package ORBit2-2.14.14 Creating bzip\u0026#39;d tar ball in \u0026#39;/usr/home/flageo/ORBit2-2.14.14.tbz\u0026#39; Creating package aalib-1.4.r5_4 Creating bzip\u0026#39;d tar ball in \u0026#39;/usr/home/flageo/aalib-1.4.r5_4.tbz\u0026#39; Creating package alacarte-0.11.5_1 （略） ","permalink":"https://nobwak.github.io/posts/2008-11-20-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%9Fports%E3%81%AEpkg%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"[こんなこと](http://d.hatena.ne.jp/flageo/20081118/p1)があったので、やはり曲がりなりにもサーバた","title":"インストールしたportsのpkgを作るには"},{"content":"知らなかった。 FreeBSDを載せてサーバにしている自宅マシンは、CPUがセレロン300MHzの化石だ。 OS自体のアップグレードを自前ビルドでやるのはとうの昔にやめていて、snapshotからインストールする状態だった。が、そろそろportsのビルドも時間がかかるようになってきたので、こちらもpackageでバージョンアップするようにした。 そして先日、php5をpackageでバージョンアップしたところ、Apache上のphpスクリプトが動かなくなってしまった。 これはphp5のパッケージにはlibphp5.soが含まれていないのが原因。 なお、パッケージに含まれるファイル一覧は、pkg_info -Lで得られる。 ただ、引数としてバージョンも含めたパッケージ名を与えなければならないので、/var/db/pkg配下のディレクトリ名を調べるか、pkg_info -Ixで調べる。  $ pkg_info -L php5|grep libphp5.so pkg_info: can\u0026#39;t find package \u0026#39;php5\u0026#39; installed or in a file! $ pkg_info -Ix php5 php5-5.2.6_2 PHP Scripting Language $ pkg_info -L php5-5.2.6_2|grep libphp5.so $ まあ、確かにApacheモジュールのインストールを標準設定にするわけにはいかないので、これは仕方ないと思う。 というわけで、php5をportsからインストールしなおした。 pkg_info -Lの内容も当然ながら変化している。  $ pkg_info -L php5-5.2.6_2|grep libphp5.so /usr/local/libexec/apache22/libphp5.so ","permalink":"https://nobwak.github.io/posts/2008-11-18-php5%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AB%E3%81%AFapache%E5%90%91%E3%81%91php%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8C%E5%90%AB%E3%81%BE%E3%82%8C%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"知らなかった。 FreeBSDを載せてサーバにしている自宅マシンは、CPUがセレロン300MHzの化石だ。 OS自体のアップグレードを自前ビルド","title":"php5パッケージにはApache向けphpモジュールが含まれていない件について"},{"content":"Windows2000をインストールしていたThinkpad X30のHDDがクラッシュしたので、古いHDDに換装してUbuntuのインストールを試みた。 7.10→8.04→8.10というようにアップグレードする予定だったのだが、何度やってもフリーズする。 古いHDDのせいかと別のにしても結果は同じ。 ハード的に寿命なのかと頭を抱えたのだが、ふと思い立ってググってみたら、あっさり[解決](http://ubuntuforums.org/showthread.php?t=766639)した。グーグル先生ありがとう。 後述するとおり、原因ははっきりとは分からないが、Ubuntu 8.04のXにおけるマウスの設定が影響しているようだ。 至れり尽くせりのUbuntuでこんなことが起こるとは思わなかったよ…。 ちなみに、上記リンクのとおり、CentOSでは大丈夫らしい。 解決法は以下の通り/etc/X11/xorg.confを書き換える。 ◎マウスの設定でEmulate3Buttonsを無効に  Section \u0026#34;InputDevice\u0026#34; Identifier\t\u0026#34;Configured Mouse\u0026#34; Driver\t\u0026#34;mouse\u0026#34; Option\t\u0026#34;CorePointer\u0026#34; Option\t\u0026#34;Emulate3Buttons\u0026#34;\t\u0026#34;false\u0026#34; #この行追加 EndSection ◎キーボードレイアウトをgb(英国=グレートブリテン)に変更...だが。  #Option\t\u0026#34;XkbLayout\u0026#34;\t\u0026#34;us\u0026#34;　#コメントアウト Option\t\u0026#34;XkbLayout\u0026#34;\t\u0026#34;gb\u0026#34; ネタ元の発言者のポストはどうも要を得ないのだが、少なくとも俺はキーボード配列を変えなくてもよかった。まあ、参考までに。  ","permalink":"https://nobwak.github.io/posts/2008-11-14-thinkpad_x30%E3%81%A7ubuntu_8.04%E3%81%8C%E3%83%95%E3%83%AA%E3%83%BC%E3%82%BA%E3%81%97%E3%81%BE%E3%81%8F%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"Windows2000をインストールしていたThinkpad X30のHDDがクラッシュしたので、古いHDDに換装してUbuntuのインストー","title":"Thinkpad X30でUbuntu 8.04がフリーズしまくる件について"},{"content":"アレクサンドル・デュマの三銃士を読んだ。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4042020097\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41gC3KI5qJL._SL75_.jpg\u0026quot; alt=\u0026quot;三銃士 (上巻) (角川文庫)\u0026quot; title=\u0026quot;三銃士 (上巻) (角川文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 作者の、青年に対する愛情が感じられるような本だった。 そういえば、モンテ・クリスト伯でも、ファリア神父にダンテスのことを青年だからと信用させている。 いわゆる悪役もよかった。 最初はロシュフォール伯爵と先々の因縁を感じさせるのだが、ミレディーの強烈なキャラの前にはかすんでしまう。そもそも伯爵はいいとこなし。 新しい。古いんだけど新しい。 エンターテイメントとしては楽しめたのだが、モンテ・クリスト伯の冒頭のような、どのようにして人は人を裏切るか、といったような生々しい描写のないのが物足りなかった。 そういえば、読んだのは角川版だが、そもそも三銃士は、黄色い背表紙の講談社文庫で、けっこうな冊数のシリーズだったような記憶がある。 ので調べてみたら、講談社文庫で全訳されており全11冊。角川は抄訳版であったか。 ひょっとすると、抄訳のときに俺にとって興味のある部分が省かれたのかもしれない！伯爵にも見せ場があったのかもしれない！ しかし講談社版はすでに絶版…。 と、思ったら復刊ドットコムで復刊している！ と、思ったら、一冊2000円…。  ","permalink":"https://nobwak.github.io/posts/2008-11-12-%E4%B8%89%E9%8A%83%E5%A3%AB/","summary":"アレクサンドル・デュマの三銃士を読んだ。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4042020097\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/41gC3KI5qJL._SL75_.jpg\u0026quot; alt=\u0026quot;三銃士 (上巻) (角川文庫)\u0026quot; title=\u0026quot;三銃士 (上","title":"三銃士"},{"content":"最近はanonymous FTPを立てることは少なくなった。 とはいっても、たまにはあるわけで、その時のためにメモする。 （[http://www.freebsdnews.net/index.php](http://www.freebsdnews.net/index.php)の記事をベースにしています） 手順としては、anonymous FTP用のユーザを作っておき、ディレクトリの準備などをした後に、ftpdを-Aオプションで起動するという流れ。 ◎ユーザの追加 シェルは/sbin/nologinにしておくこと。  # adduser Username: ftp Full name: Anonymous FTP user Uid (Leave empty for default): Login group [ftp]: Login group is ftp. Invite ftp into other groups? []: Login class [default]: Shell (sh csh tcsh bash rbash nologin) [sh]: nologin Home directory [/home/ftp]: /var/ftp Home directory permissions (Leave empty for default): Use password-based authentication? [yes]: no Lock out the account after creation? [no]: no Username : ftp Password : \u0026amp;#60;disabled\u0026gt; Full Name : Anonymous FTP user Uid : 1002 Class : Groups : ftp Home : /var/ftp Home Mode : Shell : /usr/sbin/nologin Locked : no OK? (yes/no): yes adduser: INFO: Successfully added (ftp) to the user database. Add another user? (yes/no): no Goodbye! ◎ディレクトリの作成 ユーザ作成時に指定したホームディレクトリを作る。 ここがftpユーザにとってはルートディレクトリとなる。  # mkdir -p /var/ftp/pub # chown ftp:ftp /var/ftp/pub ◎メッセージの作成 下記二つのファイルを、必要であれば修正。 まあ自分用ならいらないか。 /etc/ftpwelcome : ログイン前に表示されるメッセージ /etc/ftpmod : ログイン後に表示されるメッセージ ◎inetd.confの修正  # echo \u0026#34;ftp stream tcp nowait root /usr/libexec/ftpd ftpd -l -S -A -r\u0026#34; \\ \u0026gt;\u0026gt; /etc/inetd.conf ここで、オプションは下記の通りなので、適宜書き換え。  -l ftpログインを記録する。 -r 読み取りのみ -A anonymous FTP接続のみ許可 -S ユーザのダウンロード履歴を/var/log/ftpdに記録する。 　ただし/var/log/ftpdが存在していること。 ◎ログ出力先の作成 Sオプションを指定している場合はログの書き込み先ファイルを作る。  # touch /var/log/ftpd なお、-lで記録することになるログはsyslogに送られ、デフォルトでは/var/log/xferlogに記録される。本ファイルは改めて作らなくても最初からある。 ◎起動 [こちら](http://d.hatena.ne.jp/flageo/20080213/p1)のように、そのとき限りの起動の場合。  # /etc/rc.d/inetd onestart リブート後も起動させておきたい場合  # echo \u0026#39;inetd_enable=\u0026#34;YES\u0026#34;\u0026#39; \u0026gt;\u0026gt; /etc/rc.conf # /etc/rc.d/inetd start 以上  ","permalink":"https://nobwak.github.io/posts/2008-11-11-freebsd%E3%81%A7anonymous_ftp%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"最近はanonymous FTPを立てることは少なくなった。 とはいっても、たまにはあるわけで、その時のためにメモする。 （[http://www","title":"FreeBSDでanonymous FTPサーバを構築するには"},{"content":"風刺小説だそうな。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4003220935\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51TDSD59A3L._SL75_.jpg\u0026quot; alt=\u0026quot;ガリヴァー旅行記 (岩波文庫)\u0026quot; title=\u0026quot;ガリヴァー旅行記 (岩波文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; その風刺の対象となっている人たちのことは、今となってはとても想像しにくいうえに、どうも理性万歳の方向で風刺しているような印象があって、納得のいかない読後感。  ","permalink":"https://nobwak.github.io/posts/2008-11-10-%E3%82%AC%E3%83%AA%E3%83%B4%E3%82%A1%E3%83%BC%E6%97%85%E8%A1%8C%E8%A8%98/","summary":"風刺小説だそうな。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4003220935\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51TDSD59A3L._SL75_.jpg\u0026quot; alt=\u0026quot;ガリヴァー旅行記 (岩波文庫)\u0026quot; title=\u0026quot;ガリヴァー旅行記 (岩波文庫)\u0026","title":"ガリヴァー旅行記"},{"content":"UbuntuマシンのHDDがクラッシュ…。 ありがちなことだが、再インストールしたいときに限ってブータブルなインストールメディアがない。ブランクDVD、CDもない。 探し回ってやっと見つけたのは7.10インストーラ。 仕方なしに7.10をインストールし、8.10まであげることにする。 8.04へのアップグレードは成功したもののどうも挙動がおかしい。ええいままよと8.10へのアップグレードを強行したらインストール中にフリーズした。 最初からやり直し…。  ","permalink":"https://nobwak.github.io/posts/2008-11-10-%E3%83%96%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%A9/","summary":"UbuntuマシンのHDDがクラッシュ…。 ありがちなことだが、再インストールしたいときに限ってブータブルなインストールメディアがない。ブラン","title":"ブータブルインストーラ"},{"content":"牛肉は食べても安全か。 生物と無生物のあいだ。 を読んだ。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4061498916\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51oeIDl3HxL._SL75_.jpg\u0026quot; alt=\u0026quot;生物と無生物のあいだ (講談社現代新書)\u0026quot; title=\u0026quot;生物と無生物のあいだ (講談社現代新書)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; テーマである生物の定義はもちろん; - 生物は常に外部から材料、アミノ酸を摂取する必要がある。効率的にアミノ酸を摂取するには、他生物から奪うのがよい。しかし、他生物のアミノ酸配列は自分のシステムにバグを引き起こす可能性があるため、摂取にあたっては徹底的に分解する必要がある。 これを行っているのが小腸である。 - というのが面白かった。 いままで、小腸をこのように人間の内と外を分ける境界線として考えたことはなかった。 また、だからこそ小腸に大量の免疫細胞が存在しているのだと。 免疫系がまだ確立していない乳児の小腸には、重大なセキュリティホールがあるという話も面白かった。母乳が一番というわけですかね。  ","permalink":"https://nobwak.github.io/posts/2008-11-06-%E7%94%9F%E7%89%A9%E3%81%A8%E7%84%A1%E7%94%9F%E7%89%A9%E3%81%AE%E3%81%82%E3%81%84%E3%81%A0/","summary":"牛肉は食べても安全か。 生物と無生物のあいだ。 を読んだ。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4061498916\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51oeIDl3HxL._SL75_.jpg\u0026quot; alt=\u0026quot;生物と無生物のあいだ (講談社現代新書)\u0026quot; titl","title":"生物と無生物のあいだ"},{"content":"FreeBSDが起動する時には、ブートオプションを選択できる画面がある。この画面では、デフォルトではアスキーアートで「FreeBSD」と表示される。 で、この表示は、/boot/loader.confで変更できる。 /boot/defaults/loader.confを見ると、下記の選択肢がある。 #loader_logo=\\\u0026quot;fbsdbw\\\u0026quot; # Desired logo: fbsdbw, beastiebw, beastie, none beastieというのは、デーモン君のこと。bwというのは、Black \u0026amp; Whiteという意味。 つまりbeastieだとカラフルなデーモン君が表示されるのだが、しょせんはアスキーアートなので…。 俺はbeastieもFreeBSDロゴも気に入らないのでnoneにしているが、ゆくゆくは下記のようにグラフィカルな起動画面も選べるようになるそうな。 [http://www.secnetix.de/olli/FreeBSD/vloader/screenshot5.png](http://www.secnetix.de/olli/FreeBSD/vloader/screenshot5.png)  ","permalink":"https://nobwak.github.io/posts/2008-11-05-%E8%B5%B7%E5%8B%95%E6%99%82%E3%81%AE%E3%83%AD%E3%82%B4%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"FreeBSDが起動する時には、ブートオプションを選択できる画面がある。この画面では、デフォルトではアスキーアートで「FreeBSD」と表示","title":"起動時のロゴを変更するには"},{"content":"make.confで設定するCPUTYPEの話。 make.confでは、コンパイラに対して通知するCPUTYPEを設定することができる（効果はさておき）。 そして、FreeBSDが認識するCPUTYPEは、/usr/share/examples/etc/make.confで確認できる。   $ uname -sr FreeBSD 7.0-STABLE-200803  上記のシステム（ちょっと古いなあ）から抜粋すると;  # Intel x86 architecture: # (AMD CPUs) opteron athlon64 athlon-mp athlon-xp athlon-4 # athlon-tbird athlon k8 k6-3 k6-2 k6 k5 # (Intel CPUs) core2 core nocona pentium4m pentium4 prescott # pentium3m pentium3 pentium-m pentium2 # pentiumpro pentium-mmx pentium i486 i386 # (Via CPUs) c3 c3-2 # AMD64 architecture: opteron, athlon64, nocona, prescott, core2 ただし、上記はあくまでもFreeBSDが認識するというだけ。 実際には、このあと/usr/share/mk/bsd.cpu.mkで\u0026quot;翻訳\u0026quot;され、gccに渡される。 中身をのぞいてみると;  . if ${CPUTYPE} == \u0026#34;nocona\u0026#34; CPUTYPE = prescott . elif ${CPUTYPE} == \u0026#34;core\u0026#34; || ${CPUTYPE} == \u0026#34;core2\u0026#34; CPUTYPE = prescott 現時点ではCPUTYPEをcore, core2にしてもnoconaとひっくるめてprescottにされてしまうという衝撃の事実。…まあ、そのうちbsd.cpu.mkもgccのバージョンに合わせてアップデートされることでしょう。 と、ここまで引っ張っておいて何だが、俺はCPUTYPEを設定していない。 どうも俺みたいな日曜FreeBSDユーザが調子に乗ってmake.confをいじると、後で絶対にはまるから。  ","permalink":"https://nobwak.github.io/posts/2008-11-04-cputype%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF/","summary":"make.confで設定するCPUTYPEの話。 make.confでは、コンパイラに対して通知するCPUTYPEを設定することができる（効果","title":"CPUTYPEの仕組み"},{"content":"ネアンデルタールを読んだ。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4789715302\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51X549J3A5L._SL75_.jpg\u0026quot; alt=\u0026quot;ネアンデルタール (ソニー・マガジンズ文庫)\u0026quot; title=\u0026quot;ネアンデルタール (ソニー・マガジンズ文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; クロマニヨン人は実は生きてましたー。 彼らは、現生人類にはない特殊な能力を持っていますー。 それは彼らの特徴的な頭蓋骨や、未発達の喉を説明づけるものですー。 その特殊な能力を兵器に転用しようと、米露が競争をはじめますー。 主人公とヒロインはその狭間でピンチに陥りますが、クロマニヨン人衰退の原因となった、ある現生人類の特技をつかって、うまく切り抜けますー。 なんというハリウッド。  ","permalink":"https://nobwak.github.io/posts/2008-11-04-%E3%83%8D%E3%82%A2%E3%83%B3%E3%83%87%E3%83%AB%E3%82%BF%E3%83%BC%E3%83%AB/","summary":"ネアンデルタールを読んだ。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4789715302\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51X549J3A5L._SL75_.jpg\u0026quot; alt=\u0026quot;ネアンデルタール (ソニー・マガジンズ文庫)\u0026quot; title=\u0026quot;ネアンデ","title":"ネアンデルタール"},{"content":"森雅裕の「画狂人ラプソディ」を読んだ。 むちゃくちゃで面白かった。推理小説なんだが、葛飾北斎の話、芸大裏事情や、音楽コンクールのしくみ、日本画の話、ジープの話とかてんこもりで、おなかいっぱいになった。 以前に読んだ「モーツァルトは子守唄を歌わない」が面白くて、別作品も読みたかったのだが、この人の本は絶版のものが多い。 ブックオフで見つけられたのはラッキーだった。  ","permalink":"https://nobwak.github.io/posts/2008-11-03-%E7%94%BB%E7%8B%82%E4%BA%BA%E3%83%A9%E3%83%97%E3%82%BD%E3%83%87%E3%82%A3/","summary":"森雅裕の「画狂人ラプソディ」を読んだ。 むちゃくちゃで面白かった。推理小説なんだが、葛飾北斎の話、芸大裏事情や、音楽コンクールのしくみ、日本画","title":"画狂人ラプソディ"},{"content":"俺メモ。 ftpユーザがアクセス出来るディレクトリを「一つに」制限する方法はよく知られているが、まったく別の場所にある「複数の」のディレクトリに制限する方法について。 ◎前提 アクセスを許可したいディレクトリ   /usr/local/dir1 /usr/local/dir2  ユーザsmithは以下のディレクトリに対するアクセス権限はあるものとする。   /home/smith  ◎こうする。  mkdir /home/smith/dir1 /home/smith/dir2 mount -t nullfs /usr/local/dir1 /home/smith/dir1 mount -t nullfs /usr/local/dir2 /home/smith/dir2 mountオプションに-o roをつければ読み取り専用に。  ","permalink":"https://nobwak.github.io/posts/2008-11-02-%E3%81%82%E3%82%8Bftp%E3%83%A6%E3%83%BC%E3%82%B6%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E5%85%88%E3%82%92%E8%A4%87%E6%95%B0%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E3%81%AE%E3%81%BF%E5%88%B6%E9%99%90%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/","summary":"俺メモ。 ftpユーザがアクセス出来るディレクトリを「一つに」制限する方法はよく知られているが、まったく別の場所にある「複数の」のディレクトリ","title":"あるftpユーザのアクセス先を「複数の」ディレクトリにのみ制限する方法。"},{"content":"ハゲタカ、ハゲタカ2を読んだ。ブックオフ。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4062753529\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51Y4KKKJDWL._SL75_.jpg\u0026quot; alt=\u0026quot;ハゲタカ(上) (講談社文庫)\u0026quot; title=\u0026quot;ハゲタカ(上) (講談社文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; ハゲタカ外資ファンドの社長で、ポルシェにのって、アメリカ人の彼女がいて、ピアノもすげーうまくて、銀行やライバルハゲタカファンドを手玉に取ってばっさばっさと買収をしていくけど、父の非業の死のせいでちょっと影もあるスーパーマンのファンタジー。 でも買収とかの仕組みが勉強になった。  ","permalink":"https://nobwak.github.io/posts/2008-10-31-%E3%83%8F%E3%82%B2%E3%82%BF%E3%82%AB/","summary":"ハゲタカ、ハゲタカ2を読んだ。ブックオフ。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4062753529\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51Y4KKKJDWL._SL75_.jpg\u0026quot; alt=\u0026quot;ハゲタカ(上) (講談社文庫)\u0026quot; title=\u0026quot;ハゲタ","title":"ハゲタカ"},{"content":"SMBIOSからハードウェアの情報を読み出してくれるコマンドdmidecode（[http://www.nongnu.org/dmidecode/](http://www.nongnu.org/dmidecode/)）。なぜかLinux方面で有名だが、FreeBSDのports（ports/sysutils/dmidecode）にもある。 アウトプットはこんな感じ。  Handle 0x0001, DMI type 1, 25 bytes System Information Manufacturer: Sony Corporation Product Name: PCG-N505A_BP(J) Version: 01 Serial Number: XXXXXX-XXXXXX UUID: Not Settable Wake-up Type: Unknown \u0026amp;#60;snip\u0026gt; Handle 0x0004, DMI type 4, 32 bytes Processor Information Socket Designation: MMO Con1 Type: Central Processor Family: Celeron Manufacturer: GenuineIntel \u0026amp;#60;snip\u0026gt; Version: Celeron(TM) Voltage: 2.9 V External Clock: Unknown Max Speed: 300 MHz Current Speed: 366 MHz Status: Populated, Enabled Upgrade: ZIF Socket L1 Cache Handle: No L1 Cache L2 Cache Handle: 0x000A L3 Cache Handle: No L3 Cache べんり！ そのほか、dmidecodeには、IBM、COMPAQそれぞれのマシンに特有の情報を読み出してくれるownership, vpddecodeというコマンドも付属する。まあ、片方は買収され、片方はPC部門を売り払ってしまったわけだが。  ","permalink":"https://nobwak.github.io/posts/2008-10-31-%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%92%E8%AA%AD%E3%81%BF%E5%87%BA%E3%81%99dmidecode/","summary":"SMBIOSからハードウェアの情報を読み出してくれるコマンドdmidecode（[http://www.nongnu.org/dmideco","title":"ハードウェアの情報を読み出すdmidecode"},{"content":"売れてるらしいのでチームバチスタの栄光を中古で買って読んだ。 薄かったので速攻で読み終わった。 ある天才医師が破竹の勢いでバチスタ手術の成功例を積み上げていくのだが、突然に失敗が続く。そこで主人公が調査を命じられるという話。 この話の面白ポイントとしては、著者の医療面における専門的な知識と、主人公のちょっと変わったパートナーが変わった手法で調査を行うところ。 前者についてはそこそこ楽しめたが、後者のパートナーについては、やりすぎだと思う。 あと文面から漂うお寒いハードボイルド臭が恥ずかしくて仕方がなかった。  ","permalink":"https://nobwak.github.io/posts/2008-10-30-%E3%83%81%E3%83%BC%E3%83%A0%E3%83%90%E3%83%81%E3%82%B9%E3%82%BF%E3%81%AE%E6%A0%84%E5%85%89/","summary":"売れてるらしいのでチームバチスタの栄光を中古で買って読んだ。 薄かったので速攻で読み終わった。 ある天才医師が破竹の勢いでバチスタ手術の成功例を","title":"チームバチスタの栄光"},{"content":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4167717212\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51OMk1OqlXL._SL75_.jpg\u0026quot; alt=\u0026quot;大仏破壊―ビンラディン、9・11へのプレリュード (文春文庫)\u0026quot; title=\u0026quot;大仏破壊―ビンラディン、9・11へのプレリュード (文春文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; タリバンはもともと若い神学生のグループで、アフガニスタンを救うという高い理想を掲げて立ち上がった、というのが驚きだった。 タリバンのリーダーであるオマルは、当初は木訥で誠実な青年だったのだが、アフガニスタンの宗教的指導者に就くのと前後して、どんどんと寛容性を失っていく。そして、最終的にはバーミヤンの石仏破壊を命ずるまでになる。 なにが彼と彼らをそこまで変えたのか。 この本でもいろいろと解説されているが、俺は「一番辛いときにはどの国も無視するが、仏像が破壊となるといきなり皆の注意が向く。」という彼らの指摘が辛いなと思った。  ","permalink":"https://nobwak.github.io/posts/2008-10-29-%E5%A4%A7%E4%BB%8F%E7%A0%B4%E5%A3%8A/","summary":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4167717212\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51OMk1OqlXL._SL75_.jpg\u0026quot; alt=\u0026quot;大仏破壊―ビンラディン、9・11へのプレリュード (文春文庫)\u0026quot; title=\u0026quot;大仏破壊―ビンラ","title":"大仏破壊"},{"content":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4035401501\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51QPP85YXWL._SL75_.jpg\u0026quot; alt=\u0026quot;精霊の守り人 (偕成社ワンダーランド)\u0026quot; title=\u0026quot;精霊の守り人 (偕成社ワンダーランド)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; NHKの再放送で精霊の守り人を見た。 いろんな設定がしっかりしているのに、それがまったく生かされていないように感じた。 加えて、最初の導入はすごくよかったのに、中だるみしまくってメインの話が全然進まず、しょーもない小話ばかりが続き、さあ終盤だと思ったら、大して盛り上がりもせずに終わってしまった。 なんだこの消化不良…。 そして先日、図書館で原作を見かけた。児童書コーナーで。 児童書だったのか…。 でもまあ、アニメ版に収まりの悪さを感じていたので、どんなものかと読んでみた。 すっごく面白いじゃないか。 アニメ版の終盤で訳がわからなかった部分も、原作ではしっかりと触れられている。そういうところはざっくり省略しているくせに、他方では原作にない小話で何話も消費していて、何がしたいのかさっぱり分からない。 さておき、原作を読んで溜飲を下げた俺は、外伝も含め一気に読み進めて、いまは最終巻を読んでいるところ。 いろんな国々の人間の生活やら神話やら、そういった設定がしっかりしているのは、作者に文化人類学の背景があるせいだろうか。 それから、チャグムの前にどぎついまでに示される、為政者の冷酷さというのも面白いと思った。児童書だとか、そんなのは関係ねえと言わんばかりの姿勢には、ちょっと驚く。 ともあれ、最終巻を迎えて、ついにヨゴ皇国が戦場になる。 登場人物たちがどのような結末を迎えるのか、すごく楽しみ。  ","permalink":"https://nobwak.github.io/posts/2008-10-28-%E5%AE%88%E3%82%8A%E4%BA%BA%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA/","summary":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4035401501\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51QPP85YXWL._SL75_.jpg\u0026quot; alt=\u0026quot;精霊の守り人 (偕成社ワンダーランド)\u0026quot; title=\u0026quot;精霊の守り人 (偕成社ワンダーランド)\u0026q","title":"守り人シリーズ"},{"content":"syslogdはデフォルト設定だと514ポートで待ち受けを行う。 rc.confに以下の行を追加すれば、これをやめさせることができる。  syslogd_flags=\u0026amp;#34;-ss\u0026amp;#34; デフォルト設定だとこのように514をListen   $ sockstat|grep syslogd root syslogd 10197 4 dgram /var/run/log root syslogd 10197 5 dgram /var/run/logpriv root syslogd 10197 6 udp6 *:514 *:* root syslogd 10197 7 udp4 *:514 *:*  rc.confを先述の通り修正して、syslogdを再起動。   $ sudo /etc/rc.d/syslogd restart Stopping syslogd. Starting syslogd. $  こんな感じ。   $ sockstat|grep syslogd root syslogd 10222 4 dgram /var/run/log root syslogd 10222 5 dgram /var/run/logpriv $  ","permalink":"https://nobwak.github.io/posts/2008-10-18-syslogd%E3%81%AE%E3%83%9D%E3%83%BC%E3%83%88listen%E3%82%92%E3%82%84%E3%82%81%E3%81%95%E3%81%9B%E3%82%8B%E6%96%B9%E6%B3%95/","summary":"syslogdはデフォルト設定だと514ポートで待ち受けを行う。 rc.confに以下の行を追加すれば、これをやめさせることができる。 syslogd_flags=\u0026amp;#34;-ss\u0026amp;#34; デフォ","title":"syslogdのポートListenをやめさせる方法"},{"content":"FreeBSD-mlからの抜き書き。 Ubuntuでは、大きなアップデートの都度GRUBの設定がデフォルトに戻されるが、これを防止する方法。 /etc/kerne-img.confの以下の2行をコメントアウトする。   postinst_hook = /usr/sbin/update-grub postrm_hook = /usr/sbin/update-grub  同一HDD内にFreeBSDを入れるなどして、GRUBの設定を変更している場合に有効。  ","permalink":"https://nobwak.github.io/posts/2008-10-18-ubuntu%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88%E6%99%82%E3%81%AEgrub%E8%A8%AD%E5%AE%9A%E5%88%9D%E6%9C%9F%E5%8C%96%E3%82%92%E9%98%B2%E3%81%90%E6%96%B9%E6%B3%95/","summary":"FreeBSD-mlからの抜き書き。 Ubuntuでは、大きなアップデートの都度GRUBの設定がデフォルトに戻されるが、これを防止する方法。 /","title":"Ubuntuアップデート時のGRUB設定初期化を防ぐ方法"},{"content":"メルヴィルの白鯨を読んだ。ほとんどが鯨のうんちく話で閉口した。 船長エイハブの執念が、他の乗組員に伝染して、全員を白鯨に駆り立てていく様子が不気味だった。  ","permalink":"https://nobwak.github.io/posts/2008-06-21-%E7%99%BD%E9%AF%A8/","summary":"メルヴィルの白鯨を読んだ。ほとんどが鯨のうんちく話で閉口した。 船長エイハブの執念が、他の乗組員に伝染して、全員を白鯨に駆り立てていく様子が不","title":"白鯨"},{"content":"無節操にportsをインストールすると/usr/local/bin配下に謎のコマンドが増えていくが、そのコマンドはどのportsに属するかを調べる方法。pkg_infoを-Wオプションとあわせて使う。  [hal@fb /usr/local/bin]$ pkg_info -W zip /usr/local/bin/zip was installed by package zip-2.32 zipはzip-2.32というports/packageに含まれるということがわかる。 まあ、zipコマンドなので明白ではあるが。 なお、指定対象のファイルがカレントディレクトリにない場合には、パスの通っているディレクトリを探してくれる。  [hal@fb ~]$ pkg_info -W zip /usr/local/bin/zip was installed by package zip-2.32 [hal@fb ~]$ また、指定対象のファイルがports/packageからインストールされたものではない場合、特に応答は返らない。  [hal@fb ~]$ pkg_info -W tar [hal@fb ~]$ pkg_info -Wの他にも同じことをしてくれるコマンドがあったと思うが、pkg_infoはベースシステムに含まれているので、こっちを覚えておいた方がいいと思う。  [hal@fb ~]$ pkg_info -W pkg_info [hal@fb ~]$ ","permalink":"https://nobwak.github.io/posts/2008-06-18-%E3%81%82%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8C%E3%81%A9%E3%81%AEports_package%E3%81%AE%E3%82%82%E3%81%AE%E3%81%8B%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"無節操にportsをインストールすると/usr/local/bin配下に謎のコマンドが増えていくが、そのコマンドはどのportsに属するかを","title":"あるファイルがどのports/packageのものかを確認するには。"},{"content":"civilizationというPCゲームが面白いのだが、そのフォーラムで薦められた「銃・病原菌・鉄」という本を読んだ。 そのまんまcivilizationだった。 さておき。 面白かったのは、ユーラシア大陸が東西に長い陸塊だったからこそ他の大陸に先んじて文明を発達させられた、という点。 昔から、旅に出るのは西か東に向かうのが定番なのは、当たり前のことなんですな。  ","permalink":"https://nobwak.github.io/posts/2008-06-09-%E9%8A%83%E7%97%85%E5%8E%9F%E8%8F%8C%E9%89%84civilization/","summary":"civilizationというPCゲームが面白いのだが、そのフォーラムで薦められた「銃・病原菌・鉄」という本を読んだ。 そのまんまcivili","title":"銃・病原菌・鉄・civilization"},{"content":"俺メモ 各portsの設定を変更するのは、該当portのディレクトリでmake configすればよいが、デフォルト値に戻すにはmake rmconfigを使う。 デフォルトの設定を忘れた時に有用。  ","permalink":"https://nobwak.github.io/posts/2008-06-06-ports%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%95%E3%82%A3%E3%82%B0%E3%82%92%E3%82%AF%E3%83%AA%E3%82%A2%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"俺メモ 各portsの設定を変更するのは、該当portのディレクトリでmake configすればよいが、デフォルト値に戻すにはmake rmco","title":"portsのコンフィグをクリアするには"},{"content":"俺メモ unzipはzipファイルの伸張（解凍）のために、いつも速攻でインストールするportsだが、これは名前通り伸張しかできない。 zipの作成には/usr/ports/archivers/zipをインストールする必要がある。 使い方は  zip \u0026amp;#60;圧縮後のファイル名\u0026gt; \u0026amp;#60;圧縮したいファイルを列挙\u0026gt; 使用例  [x@xxx ~/files]$ zip kernel.time.zip kernel.time adding: kernel.time (deflated 44%) [x@xxx ~/files]$ file kernel.time.zip kernel.time.zip: Zip archive data, at least v2.0 to extract [x@xxx ~/files]$ なお、圧縮後のファイル名には特に.zipとつけなくても勝手に付けてくれる。  ","permalink":"https://nobwak.github.io/posts/2008-06-06-zip%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"俺メモ unzipはzipファイルの伸張（解凍）のために、いつも速攻でインストールするportsだが、これは名前通り伸張しかできない。 zipの","title":"zipファイルを作成するには"},{"content":"面白そうなページを見つけて、はてなブックマークに登録するとき、それが誰にもブックマークされていないページだと、なんだか嬉しくなる。 今朝、とあるマニアックな、しかしとても有用なページを見つけ、これは俺様以外は誰もいまい、とワクワクしながらブックマークしてみたら、既に先客が一名。 悔しくなって誰だか調べてみたら大昔の自分だったという話。  ","permalink":"https://nobwak.github.io/posts/2008-06-01-%E3%81%AF%E3%81%A6%E3%81%AA%E3%83%96%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%AF/","summary":"面白そうなページを見つけて、はてなブックマークに登録するとき、それが誰にもブックマークされていないページだと、なんだか嬉しくなる。 今朝、とあ","title":"はてなブックマーク"},{"content":"ボーッと某BSD関連の英語MLを眺めていたらこんなやり取りがあった。   A:「ファイルをdumpしておくんだな」 B:「なんだとてめばかしね」  最初はさっぱり意味が分からなかったが、Bはdumpというコマンドを知らず、言葉通りに「ファイルをクソ溜にでも捨てちまえ」と受け取ったうえでのレスだった。 日常で使う言葉がそのままコマンドになっている場合には、こういったMLに流れてる文面も全く違った風に見えるんだろうなと思った。  ","permalink":"https://nobwak.github.io/posts/2008-05-31-%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A8%E8%8B%B1%E8%AA%9E/","summary":"ボーッと某BSD関連の英語MLを眺めていたらこんなやり取りがあった。 A:「ファイルをdumpしておくんだな」 B:「なんだとてめばかしね」 最初","title":"コマンドと英語"},{"content":"騒がれてるので光文社のカラマーゾフを読んだ。 5巻は少々のエピローグと、あとは訳者の解説山盛りだそうで読んでいない。 カラマーゾフと言えば大審問官というくらい有名だったので楽しみにしていて、事実面白かったのだが、それとセットとなるゾシマ神父の話も十分に面白かった。 俺は誰かにネギをあげられるんだろうか。  ","permalink":"https://nobwak.github.io/posts/2008-05-28-%E3%82%AB%E3%83%A9%E3%83%9E%E3%83%BC%E3%82%BE%E3%83%95/","summary":"騒がれてるので光文社のカラマーゾフを読んだ。 5巻は少々のエピローグと、あとは訳者の解説山盛りだそうで読んでいない。 カラマーゾフと言えば大審問","title":"カラマーゾフ"},{"content":"カラマーゾフを読んだ後、なんとなく荷解きもしてない段ボール箱をあさったら、なぜか新潮文庫のカラマーゾフ下巻が出てきた。 しばらくして思い出した。 たしか高校生のときにドストエフスキーを読もうと、ぽつぽつと古本屋で本を集めつつ、まず罪と罰を読んだ。老婆をぬっ殺すところと、ポルフィーリーのネチネチ感は面白かったものの、なぜ絶賛されてるかさっぱりわからず、そのほかの著作を読むのを投げ出したので、中途半端に本がそろってるのだった。 高校生の頃は、親が無理して私立の、しかも寮に入れて頂いたので、小遣いは少なかった。 高校は某関西のなだらかな山脈に抱かれるように建っており、娯楽施設など周りに何もなかったことも相まって、古本屋で漁った本を読むのが楽しみだった。 「十年以上読まれている本じゃなきゃ読む価値なし」などと青臭いことを言って、世界の名作文学を読み散らすものの、青臭い頭ではほとんど理解できないこともしばしば。 カラマーゾフ下巻は、そんな俺の黒歴史の名残。  ","permalink":"https://nobwak.github.io/posts/2008-05-28-%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%AB%E3%83%97%E3%82%BB%E3%83%AB/","summary":"カラマーゾフを読んだ後、なんとなく荷解きもしてない段ボール箱をあさったら、なぜか新潮文庫のカラマーゾフ下巻が出てきた。 しばらくして思い出した","title":"タイムカプセル"},{"content":"…最近、また新規装置の開発に駆り出されて忙しい。 前回と違うのは、テストする側から仕様を作る側に回ったこと。 上流工程こそガンダーラと信じてやまない会社側からすれば、んーどうだね春木屋くん幸せだろう？と言いたいのだろうし、実際に技術者尺度であればいいことなのだろうが、結局俺は「物がどう動くか、物をどう動かすか」に興味があるんであって、「物をどう作るか」にはサッパリ興味がないのだと思った。 どうやったら面白さを見つけ出せるか、といろいろ考えてみて数ヶ月。うん、やっぱりつまらない。  ","permalink":"https://nobwak.github.io/posts/2008-05-28-%E9%96%8B%E7%99%BA/","summary":"…最近、また新規装置の開発に駆り出されて忙しい。 前回と違うのは、テストする側から仕様を作る側に回ったこと。 上流工程こそガンダーラと信じてやま","title":"開発"},{"content":"webサーバとして使用しているマシンを7.0-RELEASEにした。 古いマシンなので、ソースからのアップデートは出来ず、[ISOイメージを使って](http://d.hatena.ne.jp/flageo/20080111/p2)さっさと終わらせたのだが、ふと気がつくとルートパーティションの容量がぎりぎりになっている。 これは、7.0-RELEASEからカーネルとカーネルモジュールのシンボルファイルもインストールされるようになったため。  $ uname -a FreeBSD blue.local 7.0-RELEASE FreeBSD 7.0-RELEASE #0: Sun Feb 24 19:59:52 UTC 2008 root@logan.cse.buffalo.edu:/usr/obj/usr/src/sys/GENERIC i386 $ du -sh /boot/kernel 112M /boot/kernel というように、/boot/kernelで100M超。 シンボルファイルによって、何か障害があったときの原因究明を行いやすくするためだが、6系以前の感覚でいると、ルートパーティションの容量がまったく足りない。 自分で調査もしないし、バグレポートを出すつもりもない場合には必要ないので、/boot/kernel配下の*.symbolというファイルをすべて削除すればよい。 あるいは、カーネルコンフィグファイルの以下の行をコメントアウトしておけば、次回以降のカーネルビルドでシンボルファイルが作られなくなる。  makeoptions DEBUG=-g # Build kernel with gdb(1) debug symbols あるいは/usr/src/UPDATINGの以下記載を参照のこと。  20060118: This actually occured some time ago, but installing the kernel now also installs a bunch of symbol files for the kernel modules. This increases the size of /boot/kernel to about 67Mbytes. You will need twice this if you will eventually back this up to kernel.old on your next install. If you have a shortage of room in your root partition, you should add -DINSTALL_NODEBUG to your make arguments or add INSTALL_NODEBUG=\u0026#34;yes\u0026#34; to your /etc/make.conf. ","permalink":"https://nobwak.github.io/posts/2008-03-17-7.0-release%E3%81%AB%E3%81%97%E3%81%9F%E3%82%89%E3%83%AB%E3%83%BC%E3%83%88%E3%83%91%E3%83%BC%E3%83%86%E3%82%A3%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E7%A9%BA%E3%81%8D%E5%AE%B9%E9%87%8F%E3%81%8C%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","summary":"webサーバとして使用しているマシンを7.0-RELEASEにした。 古いマシンなので、ソースからのアップデートは出来ず、[ISOイメージを使","title":"7.0-RELEASEにしたらルートパーティションの空き容量がなくなった件について"},{"content":"FreeBSD-questionsに流れていたのでメモ。 /etc/make.confに下記の行を加えると、portsのdistfileを取得する際、httpサーバを優先的に選んでくれるようになる。  MASTER_SORT_REGEX?= ^http:// ","permalink":"https://nobwak.github.io/posts/2008-03-17-ports%E3%81%AEdistfiles%E5%8F%96%E5%BE%97%E5%85%88%E3%82%92%E5%87%BA%E6%9D%A5%E3%82%8B%E3%81%A0%E3%81%91http%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/","summary":"FreeBSD-questionsに流れていたのでメモ。 /etc/make.confに下記の行を加えると、portsのdistfileを取得","title":"portsのdistfiles取得先を出来るだけhttpサーバにする方法。"},{"content":"200812追記。本件は古い内容なので、[こちら](http://d.hatena.ne.jp/flageo/20081208/p1)へ。 FreeBSDをアップグレードするときにいつも面倒なのが/etc配下のファイルを更新すること。 アップグレードの手引きには素っ気なくmergemasterと書いてある。 mergemasterは新旧/etc配下ファイルの差分をチェックし、必要であればユーザに選択、マージさせるよくできたスクリプト。 だが、手引きの通り素のまま実行すると、間欠的にファイルの差分チェックを求められるので面倒だ。 /etc配下にはご存知の通りpasswdなど超重要ファイルがあり、失敗するといろいろとヘビーな状態になるので緊張するが、この、間欠的というのがミスのもととなる。 が、-a、-rオプションを使えばそれなりに楽にはなる。 アップグレードする度にいつも何だったっけなあ、と思うのでメモっておく。  # mergemaster -siva # mergemaster -sivrt \u0026amp;#60;一回めで使用したテンポラリディレクトリ\u0026gt; aオプションを指定すると、とりあえず差分のないファイルをインストールしてくれる。 残りのファイル、つまり差分のあるファイルはテンポラリディレクトリに残る。 で、tオプションでそのテンポラリディレクトリを指定し、rオプションをmergemasterに与えれば、アップグレードにより差分の発生したファイルのみを対象に作業ができるので効率的、という話。 なお、sオプションは各ファイルの照合を一行ずつやります、というオプションで、iは照合時、インストール先にファイルがなければインストールする、というオプション。詳しくはman mergemaster。 テンポラリディレクトリは、-sivaで作業した際に、これこれのファイルがインストールされていませんよ、と教えてくれるのだが、そのときにディレクトリも教えてくれるのでそれを指定する。  # mergemaster -siva ＜中略＞ /var/tmp/temproot.0304.23.20.42/COPYRIGHT # mergemaster -sivrt /var/tmp/temproot.0304.23.20.42/ まあ、見て分かるように/var/tmp/temprootの後は、日付、時間、分、秒と並んでるので、一回めの出力結果をわざわざ注意して見てなくてもいいけど。  ","permalink":"https://nobwak.github.io/posts/2008-03-04-mergemaster%E3%82%92%E5%B0%91%E3%81%97%E3%81%A0%E3%81%91%E6%A5%BD%E3%81%AB/","summary":"200812追記。本件は古い内容なので、[こちら](http://d.hatena.ne.jp/flageo/20081208/p1)へ。 F","title":"mergemasterを少しだけ楽に"},{"content":"FreeBSDのインストーラは、「殺風景すぐる」と言われ、「ちょっとFreeBSDをインストールしてみようかな？」と思い立った人々の心を折ってきた。そんなFreeBSDにおいて非常に期待されているのが、XFce4を利用したグラフィカルインストーラ[finstall](http://journal.mycom.co.jp/articles/2007/05/18/badcan2/index.html)。 結局、当初の予定とは異なり、7.0-RELEASEには間に合わなかったのだが、FreeBSD-stableメーリングリストをつらつらと眺めていたところ、alphaバージョンとしてCDイメージを公開した、というアナウンスを見つけた。 ・・・のが、2月の頭で、やっとVMWare Playerで試してみることができた。といってもさわりだけだけど。とりあえず顛末を書く。末尾にCDイメージのありか、アナウンスメールの抄訳をつけておきます。 このCDイメージからは7.0-RC1がインストール出来る。 7.0-RELEASEが公開されたところだが、まあ、FreeBSDにはマイナーバージョンの差なんて気にするほどのものでもない。 と書こうと思ったが、RC1からRC2になるところで確かライブラリがガラッと変わってたような気がするので、少し注意が必要ですな。 それから、ちょっと興味を惹くのが、インストールの際にファイルシステムにZFSも選べること。 いまのところ、通常のインストールではZFSを選べず、いろいろと面倒な手続きを踏む必要があるのでこれは楽。 CDから起動し、ユーザ\u0026quot;install\u0026quot;としてログイン。 と、いきなり懐かしのインストーラ画面になり「げえっ！sysinstall！」と青くなるが、キーボードおよびタイムゾーンの選択をしたあとは無事XFce4が立ち上がり、さらにデスクトップ上にある\u0026quot;FreeBSD Installer\u0026quot;アイコンをダブルクリックすれば今度こそインストーラが起動する。 そこで、いそいそとファイルシステムにZFSを選んでみたが、メモリが768MBに満たないと許可してくれない。よんどころない事情によりVMWareへの割り当てメモリはちょっと増やせなかったので、仕方なしとUFSを選んでインストール。 rootのパスワードの設定、ユーザの追加、シェルの選択、ホスト名とネットワークの設定を行い、powerd, ssh, BSDStatsなどのサービスを有効にするか聞かれる。ちなみに、BSDStatsはデフォルトで有効であった。 あとはシステムをリブートすれば完了。 特にxdmなどは立ち上がってこず、いわゆるCUIでのログインだが、X、xfce4はしっかりインストールされている。後述するがFirefoxやThunderbirdもインストールされる。そのほか、perl、sudoなどもインストールされていて、むむむこれはと調べてみると、  $ ls /var/db/pkg|wc -l 326 というように、300個以上のパッケージがインストールされていた。将来的にはインストールできるパッケージを選択できるようになればいいな。 インストール後、少し触ってみたのだが、うーん、まだ色々と問題がある様子。 じつはインストール自体も謎のエラーで一回失敗している。あまり時間がなかったので、じっくり対処もせず消してしまった。正直インストールそのものが目的だったし。 なお、既存のインストーラであるsysinstallはその愛想の無さで嫌われがちだが、たとえばシリアルコンソールからでも操作できたりと、これはこれで便利である。念のため。 そんなわけで、alphaバージョンのfinstallについて、詳しくはFreeBSD-stableに流れた[メール](http://docs.freebsd.org/cgi/getmsg.cgi?fetch=441708+0+archive/2008/freebsd-stable/20080210.freebsd-stable)を参照のこと。 イメージのサイズがCD1枚分になるまでには余裕があるので、何か入れてほしい物があれば言え、と別メールで書いてます。 イメージは下記からダウンロード出来るが、バージョンアップによりいつなくなるか分かりません。なおi386のみ。 http://ivoras.sharanet.org/stuff/freebsd7-finstall-alpha3.iso.bz2 以下、アナウンスメールを抄訳。 ◎前提 あくまでもアルファバージョン。 ◎できないこと すでにパーティションの切られたディスクに対しては実行出来ません。 RAID, X11, サウンド関連の、ちょっと複雑な設定は出来ません。 システムロケールの設定は出来ません。 ◎できること LiveCDとして動作します。 7.0-RC1のインストールと、X.Org7.3, XFce desktop 4.4 Firefox,Thunderbirdなどの、こちらで選んでおいたパッケージのインストールが出来ます。 ファイルシステムとしては、UFS+Softupdate, UFS+Gjornal, ZFS, Ext2を選べます。ただしUFSしかしっかりテストしてません。 ssh, ntpdate, bsdstatsなどのサービスの設定が出来ます。 ◎この先の予定 近いうちに下記の機能を入れてみたいなと考えている。 パーティションの切られたディスクへのインストール。 リモートインストールをちょっとだけ。 以上。  ","permalink":"https://nobwak.github.io/posts/2008-02-28-freebsd%E3%81%AE%E3%82%B0%E3%83%A9%E3%83%95%E3%82%A3%E3%82%AB%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%A9finstall/","summary":"FreeBSDのインストーラは、「殺風景すぐる」と言われ、「ちょっとFreeBSDをインストールしてみようかな？」と思い立った人々の心を折っ","title":"FreeBSDのグラフィカルインストーラ”finstall”"},{"content":"あくまでも、ファイル名から拡張子を判断するだけ。 以下に、$filenameとして与えられたファイルが拡張子.gzを持つかどうかを確認するシェルスクリプトのサンプルを示す。 Caseを使うケース。 非常に素直。  #!/bin/sh case \u0026#34;$filename\u0026#34; in *\\.gz) echo \u0026#34;Found .gz suffix\u0026#34; ;; *) echo \u0026#34;Not a .gz suffix\u0026#34; ;; esac basenameを使うケース。  #!/bin/sh # `basename $filename .gz` returns `basename $filename` # *unless* it has a .gz suffix. [ `basename $filename .gz` = `basename $filename` ] || { echo $filename has a .gz suffix } そもそもbasenameは、与えられた文字列からディレクトリ名を削除し、ファイル名部分を抜き出すコマンド。 第二引数として拡張子を与えると、文字列からはその拡張子も削除される。 これを逆に利用している。 つまり、$filenameが.gzという拡張子をもって*いない*場合、`basename $filename .gz`の結果は、`basename $filename`と等しい。  ","permalink":"https://nobwak.github.io/posts/2008-02-19-%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D%E3%81%8B%E3%82%89%E6%8B%A1%E5%BC%B5%E5%AD%90%E3%82%92%E5%88%A4%E5%AE%9A%E3%81%99%E3%82%8B/","summary":"あくまでも、ファイル名から拡張子を判断するだけ。 以下に、$filenameとして与えられたファイルが拡張子.gzを持つかどうかを確認するシェ","title":"シェルスクリプトで、ファイル名から拡張子を判定する"},{"content":"FreeBSDでportsからapacheなどのdaemonプログラムをインストールした場合、起動用スクリプトは/usr/local/etc/rc.dに置かれる。 で、インストールして設定ファイルを修正した後、おもむろに/usr/local/etc/rc.d/apache22 startとして実行することになるわけだが、実はこれでは起動しない。 これはFreeBSDがrc.dシステムを採用しているためで、portsからインストールされ、daemonとして動作するプログラムは、原則として/etc/rc.confでapache22_enable=\u0026quot;YES\u0026quot;などと設定しておかなければならない。 シェルスクリプトなので、中身を見れば一目瞭然なわけだが、どんな時でも必ず/etc/rc.confの値は参照される。 俺は勝手に、この記載は普通、システムの起動時に狙いのデーモンプログラムを実行するためだけのものと思いこんでいた。 なので、たとえばapacheの設定のテストをしていて、一回だけサーバを実行して試してみたい、という時にも参照されてしまうので、/etc/rc.confにapache22_enable=\u0026quot;YES\u0026quot;と書いていない限り、何度やってもapacheは起動しない。 問題なのは、エラーメッセージが表示されないことで、正常に起動したくさいのに、pgrepでhttpdが見つけられず、頭を抱えることになる。 まあ、出来合いの起動スクリプトではなく、apachectlを直打ちすればいいんだけど。 そういったわけで、/etc/rc.confに値を設定せず、テスト用として一回だけ起動したい場合には、引数にstartではなくonestartを与えて実行kすればよい。たとえば下記のように。  /usr/local/etc/rc.d/apache22 onestart このほかに俺がonestartを使うのは、sftpがなく、ftpしか使えないクライアントに対し/etc/inetd onestartとしてinetdを起動させるくらい、かな。 SolarisやLinuxのような、runレベルを採用しているシステムに慣れていると驚くところではある。  ","permalink":"https://nobwak.github.io/posts/2008-02-13-ports%E3%81%8B%E3%82%89%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%9F%E3%83%87%E3%83%BC%E3%83%A2%E3%83%B3%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%AE%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E6%96%B9%E6%B3%95/","summary":"FreeBSDでportsからapacheなどのdaemonプログラムをインストールした場合、起動用スクリプトは/usr/local/etc","title":"portsからインストールしたデーモンプログラムのスタート方法"},{"content":"俺メモ FreeBSDではifconfigコマンドでリンクなどが表示される。  $ ifconfig -a em0: flags=8843\u0026amp;#60;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST\u0026gt; metric 0 mtu 1500 options=9b\u0026amp;#60;RXCSUM,TXCSUM,VLAN_MTU,VLAN_HWTAGGING,VLAN_HWCSUM\u0026gt; ether xx:xx:xx:xx:xx:xx inet 172.xx.xx.xx netmask 0xfffffe00 broadcast 172.xx.xx.xx media: Ethernet autoselect (1000baseTX \u0026amp;#60;full-duplex\u0026gt;) status: active Boldで示した通り、1Gbの全二重であることが分かる。 ところがLinux, Solarisだとifconfigでこういった情報が表示されない。 軽くググってみた結果。 Linuxではethtoolを使う。 ethtool \u0026lt;デバイス名\u0026gt; Solarisではnddを使う。 ndd -get \u0026lt;デバイス名\u0026gt; \u0026lt;オプション\u0026gt; オプションにはlink_speedなどを与える。 どちらも管理者権限が必要。  ","permalink":"https://nobwak.github.io/posts/2008-02-12-solaris_linux%E3%81%A7nic%E3%81%AE%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E5%B8%AF%E5%9F%9F%E3%83%A2%E3%83%BC%E3%83%89%E3%82%92%E7%9F%A5%E3%82%8B%E3%81%AB%E3%81%AF/","summary":"俺メモ FreeBSDではifconfigコマンドでリンクなどが表示される。 $ ifconfig -a em0: flags=8843\u0026amp;#60;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST\u0026gt; metric 0 mtu 1500 options=9b\u0026amp;#60;RXCSUM,TXCSUM,VLAN_MTU,VLAN_HWTAGGING,VLAN_HWCSUM\u0026gt; ether xx:xx:xx:xx:xx:xx inet 172.xx.xx.xx netmask 0xfffffe00 broadcast 172.xx.xx.xx media: Ethernet autoselect (1000baseTX \u0026amp;#60;full-duplex\u0026gt;) status: active Boldで示した","title":"Solaris, LinuxでNICのリンクスピード（帯域）、モードを知るには"},{"content":"ところで、アーニャと言えばGears of Warという、XBOX360で遊べる俺的には現時点で最高のTPSなわけだが、最近はまったく遊んでいない。 というのも、家庭の事情により据え置きゲームのしにくくなったせいだ。で、某動画の影響で[Civilization](http://ja.wikipedia.org/wiki/Civilization)を遊んでみた。 片手のマウス操作で出来て、リアルタイム性のないシミュレーションゲームならいける。いけるのだが、なにぶん面白すぎてストレスの捌け口どころか生活に支障が出そうな勢い。 数ある勝利条件に向かって、いかに自文明を発展させるか、開拓、外交、技術開発、戦争、諜報、いろんな側面で戦略を考えるのが面白く、また、その戦略の受け皿がしっかりしているので、一度終わっても、今度はああしてみよう、とか、こうしてみたらどうだろう、などと考えてしまう。 また、対戦相手となるCOMも、なかなかにプレイヤーの神経を逆なでするAIを搭載しているうえに、造形や動作も非常に腹立たしく、ついつい顔を真っ赤にしてプレイしてしまう。 麻薬と言われる所以がよく分かった。 純粋なゲームとしても面白いけど、一つの大陸に他の文明とひしめき合っている方が、ひとりぼっちの文明よりも遙かに技術が進むとか、何だかいろいろと示唆に富んでいるなあ、とも思った。  ","permalink":"https://nobwak.github.io/posts/2008-01-27-civilization_4/","summary":"ところで、アーニャと言えばGears of Warという、XBOX360で遊べる俺的には現時点で最高のTPSなわけだが、最近はまったく遊んでいない","title":"Civilization 4"},{"content":"雲もなく、乾燥して澄みきった空に、角度の低い陽が射して、家々の屋根が光る。朝の通勤電車の窓から見える景色はなかなかで、写真でも撮れればよかったのだが、混んだ車内では鞄から携帯電話を出すのも憚られた。 そんなまぶしい車窓を眺めていて思い出したのが、チェーホフの「桜の園」の一幕。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4003262255\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51ZTMB0WX0L._SL160_.jpg\u0026quot; alt=\u0026quot;桜の園 (岩波文庫)\u0026quot; title=\u0026quot;桜の園 (岩波文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; ラネーフスカヤは、結婚に失敗し、事故で息子を亡くし、逃げるようにロシアを去った先のパリではダメ男に泣かされ、すがる思いで生家に帰ってきたのだが、桜の園と呼ばれる美しい庭を持つその領地も、借金を返すために売り払われる。 なんというか、たとえてみれば潮が満ちるような、じわじわと足下に迫る、だけど明らかな不安の圧迫感というか、閉塞感。読んでて苦しい。 そして、彼女にとって最後のよりどころである庭が競り落とされたまさにその日、彼女に娘のアーニャが言う。   ママ！　……泣いてらっしゃるの、ママ？　いとしい、親切な、やさしい、ママ。わたしの大事なママ、わたしあなたを愛していますわ。……わたし、お祝いを言いたいの。桜の園は売られました、もうなくなってしまいました。それは本当よ、本当よ。でも泣かないでね、ママ、あなたには、まだ先の生活があるわ。そのやさしい、清らかな心もあるわ。……さ、一緒に行きましょう、出て行きましょうよ、ねえ、ママ、ここから！　……わたしたち、新しい庭を作りましょう、これよりずっと立派なのをね。それをごらんになったら、ああそうかと、おわかりになるわ。そして悦びが――静かな、ふかい悦びが、まるで夕方の太陽のように、あなたの胸に射しこんできて、きっとニッコリお笑いになるわ、ママ！　行きましょう、ね、大事なママ！　行きましょうよ！  なんというポジティブ。 すげーなーと思うのは、ゆくゆくは「ああそうかと、おわかりになる」そして「ふかい悦びが夕方の太陽のように、あなたの胸に射し込」むというところ。豆電球がパカッと点くような悦びじゃないってところがいいじゃないか。チェーホフはすごい。 ま、俺が眺めているのは夕日じゃなくて朝日だけどな。  ","permalink":"https://nobwak.github.io/posts/2008-01-27-%E5%86%AC%E3%81%AE%E9%99%BD%E3%81%8C%E5%B0%84%E3%81%99%E3%82%88%E3%81%86%E3%81%AB/","summary":"雲もなく、乾燥して澄みきった空に、角度の低い陽が射して、家々の屋根が光る。朝の通勤電車の窓から見える景色はなかなかで、写真でも撮れればよかっ","title":"冬の陽が射すように。"},{"content":"FreeBSDのSTABLEを追っかけたくても、PCが古くてbuildworldがつらい。 となると、1ヶ月に一度作られるsnapshotからインストールすることになるが、いちいちCDに焼いて、そこからブートするのも面倒。 ということで、ISOイメージを使って、FreeBSDを7.0-BETA4からRC1にアップグレードしたときのメモ。 無保証。 謙遜で無保証と言ってる訳でなく、本当に無保証。 これで合ってるのかどうか分からない。一応7.0current200709→current200710→BETA1→BETA2→RC1と歩いて来たけれども、マイナーバージョンアップグレードしかしてないから問題が出ていないだけの可能性も。 ◎全体のおおまかな流れ 1.ISOイメージのダウンロード 2.ISOイメージからファイルの取り出し。 3.schgフラグを外す 4.カーネルを展開 5.リブート 6./etcを除いたベースシステムを展開 7.mergemaster 8.リブート 以下、実際の作業 ◎何はともあれ、バックアップ /etc配下のファイルと、カーネルをバックアップ  # cp -pR /etc /etc.080111 # cp -pR /boot/kernel /boot/kernel.080111 ◎ISOイメージのマウント  # mdconfig -a -t vnode -f 7.0-RC1-i386-disc1.iso -u 10 # /sbin/mount_cd9660 /dev/md10 /mnt ◎必要なファイルのコピー カーネル、ユーザランド（て表現で合ってるのか？要するにworld部分）と、/etc配下ファイルのソースなど、必要なファイルをすべて抜き出しておく。これは、後でISOイメージをマウント出来るかどうか分からないため。 配布ファイルは、フロッピーディスクでインストールしていた時代の名残で1.44Mごとに分割されているため、それを連結しどこかに置いておく。 どこかとは言っても、後々、新しいカーネルでもマウントできるようなファイルシステムに置くこと。 以下の例では、マニュアルページなどもついでにコピーしている。インストールが終わったら、改めてISOイメージをマウントし、install.shでコピーする手もあるが、そこは好き好きで。  # mkdir /usr/archive # cat /mnt/7.0-RC1/base/base.?? \u0026gt; /usr/archive/base.tgz # cat /mnt/7.0-RC1/kernels/generic.?? \u0026gt; /usr/archive/generic.tgz # cat /mnt/7.0-RC1/manpages/manpages.?? \u0026gt; /usr/archive/manpages.tgz srcは下記のようにして/usr/src配下に展開しておく。  # cd /mnt/7.0-RC1/src # sh install.sh all Extracting sources into /usr/src... Extracting source component: ＜略＞ Done extracting sources. ◎schgフラグを外す システム上、重要なファイルはschgフラグがセットされ、rootであっても上書きできないようになっているので、そのフラグを外す。 なお、システムのセキュリティレベルが1以上に設定されていると、フラグは変更できないので念のため。 確認方法。詳しくはman security。  # sysctl kern.securelevel kern.securelevel: -1 まずschgフラグがセットされているファイルを探す。こんな風にしてみた。  # find / -flags schg -exec ls -lo {} \\; |cut -d \u0026#39; \u0026#39; -f 13 \u0026gt; /tmp/flaglist /tmp/flaglistの中身はこんな感じ。   /usr/bin/chpass /usr/bin/chfn /usr/bin/chsh /usr/bin/login /usr/bin/opieinfo /usr/bin/opiepasswd /usr/bin/passwd /usr/bin/rlogin /usr/bin/rsh /usr/bin/su /usr/bin/crontab /usr/lib/libkse.so.3 /usr/lib/librt.so.1 /usr/sbin/sliplogin /bin/rcp /lib/libc.so.7 /lib/libcrypt.so.4 /lib/libthr.so.3 /libexec/ld-elf.so.1 /sbin/init  中身を確認して問題なければフラグを外す。xargs使うほどの量でもないけれども。  # xargs chflags noschg \u0026amp;#60; /tmp/flaglist ていうか、/bin /usr/bin /sbin /usr/sbin/ /lib /usr/lib /libexec /usr/libexecあたりの配下ファイル全部に対してchflags noschgしちゃってもいい、というか早い。 ◎カーネルの展開 先にコピーしておいたgeneric.tgzを展開。  # cd /usr/archive # tar -Upxvzf /usr/archive/generic.tgz 念には念を入れてオリジナルのkernelをmvし、上で展開しておいた新kernelを/boot配下へ移動  # mv /boot/kernel /boot/kernel.orig # mv /usr/archive/GENERIC /boot/kernel ◎リブート 祈りつつリブートし、カーネルが正しく入れ替わっていることを確認。  # uname -a FreeBSD xxxx 7.0-RC1 FreeBSD 7.0-RC1 #0: Mon Dec 24 12:18:24 UTC 2007 root@logan.cse.buffalo.edu:/usr/obj/usr/src/sys/GENERIC i386 RC1になってる。 そもそもブートしなかったら/boot/kernel.orig/kernelから起動して、アップグレードは諦める。 ◎worldの展開 いちばん緊張するところ。 base.tgzを展開するが、気をつけないと/etcが上書きされて死亡するので、しっかり/etcをexcludeすること。  # /rescue/tar -Upxvzf /usr/archive/base.tgz -C / --exclude ./etc この後、mergemasterで新しい/etc配下ファイルとマージする。 リブートして完了。 あとは必要であればportsなど適当にアップグレード。 以上。  ","permalink":"https://nobwak.github.io/posts/2008-01-11-iso%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%AE%E3%81%BF%E3%81%A7freebsd%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89/","summary":"FreeBSDのSTABLEを追っかけたくても、PCが古くてbuildworldがつらい。 となると、1ヶ月に一度作られるsnapshotから","title":"ISOイメージのみでFreeBSDアップグレード"},{"content":"冬になり、空気が乾燥して澄み渡ると、油彩絵の具をたっぷりつけた筆で、さっと刷いたような雲が空に浮かぶようになる。 朝など、電車に乗り遅れまいと焦って駆けていても、心洗われる気持ちになって、思わず写真を撮るのだが、筆致もあらわな印象派の絵のような空は、携帯電話のしょっぱいカメラでは全く表現できないのだった。ガクリ。  ","permalink":"https://nobwak.github.io/posts/2008-01-11-%E6%B2%B9%E5%BD%A9%E3%81%AE%E7%A9%BA/","summary":"冬になり、空気が乾燥して澄み渡ると、油彩絵の具をたっぷりつけた筆で、さっと刷いたような雲が空に浮かぶようになる。 朝など、電車に乗り遅れまいと","title":"油彩の空"},{"content":"■[スカラムーシュ (創元推理文庫 513-1)](http://d.hatena.ne.jp/asin/4488513018)　サバチニ すげえ面白い。 舞台は革命直前のフランス。いつも冷めてるアンドレ・ルイだが、親友を悪の侯爵にぬっ殺されてから、侯爵との因縁が始まる。 一つのクライマックスは侯爵との舌戦。 「私の友は、あなたの卑劣な嘘で侮辱され、あなたを殴った」 「しかし今度は、私の暴いたあなたの卑劣な真実に我慢ができず、私を殴った」 「いつだって卑劣なのは、あなたなんですね」 ドーン！ カックイイ！ 細かなところでは、例えばルイが何でもさらっと出来て、ちょっと都合が良すぎないか？と思うこともあるが、一方で、最後の最後までネタが仕込んであって驚いた。 ところで。いっつも冷めてるルイが、なぜこんな侯爵と熱いやりとりをするようになったかというと、ルイにとっての「善の化身である幼なじみの女性（影が薄くて名前も速攻で忘れた）が、悪の化身である侯爵の虚飾によって貶められようとするのが耐えられない」からだそうだ。（要するにその幼なじみが悪侯爵に求婚された） ■[海底二万里 (創元SF文庫)](http://d.hatena.ne.jp/asin/4488517048) ヴェルヌ ウォクウォクした。 陸上の国の束縛から逃れ、当時最先端の技術で固めまくった潜水艦ノーチラスで自由に海を渡るネモ船長のお話。 冷静沈着にして頭脳明晰、剛毅にして部下思いだが、戦艦を見かけた時だけはブチ切れる謎の船長への興味と、要所要所で挟まれる科学的な説明が面白い（ただし博物学観点での分類談義は除く） 結局、なぜ船長が陸を捨てたか、謎の答えは垣間見えるだけで明かされずに終わる。 が、これがまた変に説明されればガッカリするので、これでいいと重う。 ■[「知」のソフトウェア (講談社現代新書 (722))](http://d.hatena.ne.jp/asin/4061457225) 立花隆 立花隆の情報のインプット/アウトプットの仕方を書いたもの。 たとえば、分類をしていて、既存のカテゴリでは分類できない要素が出てきたら、そもそもの分類方法をまったく変えてみると、思わぬ観点が生まれて良い、とか。 ■[一絃の琴 (講談社文庫)](http://d.hatena.ne.jp/asin/4061317784) 読んでてくたびれた。 何人もの女性の一生を淡々と書いててすげえと思った。何で書けるのか。 どんな経験積んだら、こんな描き分け出来るんだろう？ ■[信じることと、疑うことと (ちくま文庫)](http://d.hatena.ne.jp/asin/448003157X) この人の話は超わかりやすい。確か、高校生の時分にもこの人の本（「権威と権力」）を読んだことがあり、分かりやすくて驚いた覚えがある。 自分の思っていることを、平易な、誰でも分かる言葉で説明出来るのは大変な事だと思った。 本の中でも、頭の固そうなおじいさんとの会話が出てきたりするが、子供電話相談室で小学生と対等に議論を積み上げ、合意に至る話などは作者の面目躍如。 人と喋るときには、一人で突っ走ることのないよう、気をつけようと思った。 ■[失敗は予測できる (光文社新書)](http://d.hatena.ne.jp/asin/4334034144) ある失敗をしたときに、どれだけ抽象化して類推できるかによって、失敗が防げるかどうかが決まりますよ、というお話。 その他、失敗のパターンも書いてあって面白かった。 新書にしてもやたら薄かったけど。  ","permalink":"https://nobwak.github.io/posts/2007-12-09-%E6%9C%80%E8%BF%91%E8%AA%AD%E3%82%93%E3%81%A0%E6%9C%AC/","summary":"■[スカラムーシュ (創元推理文庫 513-1)](http://d.hatena.ne.jp/asin/4488513018) サバチニ すげえ面白い。 舞台は革命直前のフランス。いつも冷めてるアンドレ・ルイだが、親友を悪の侯爵にぬっ殺さ","title":"最近読んだ本"},{"content":"知人の家に柚子がわんさか生ったそうで、おすそ分けで大量に頂いた。 風呂に浮かべるのも、なんだかもったいない気がしたので、ネットでレシピを検索して柚子ジャム、というか柚子マーマレードを作ってみた。 うまいけど、結構手間がかかる・・・。  ","permalink":"https://nobwak.github.io/posts/2007-12-09-%E6%9F%9A%E5%AD%90%E3%82%B8%E3%83%A3%E3%83%A0/","summary":"知人の家に柚子がわんさか生ったそうで、おすそ分けで大量に頂いた。 風呂に浮かべるのも、なんだかもったいない気がしたので、ネットでレシピを検索し","title":"柚子ジャム"},{"content":"FreeBSDを長く運用していると、/usr/ports/distfiles配下に、portsで使うソースファイルがだんだんと溜まっていき、ディスク容量を圧迫する。 なので俺はportupgradeをインストールするとついてくるportscleanを、一週間に一度実行している。 具体的には、portscleanにC, D, Pオプションを与えて実行する。これらのオプションで、それぞれ下記3つの掃除をする。  で、これを定期的に実行させるわけだが、FreeBSDでは特定のディレクトリにスクリプトを置いておけば、決められた間隔ごとに実行してくれる仕組みがある。 それがperiodicで、マニュアルは[ここ](http://www.jp.freebsd.org/cgi/mroff.cgi?subdir=man\u0026amp;#038;lc=1\u0026amp;#038;cmd=\u0026amp;#038;man=periodic\u0026amp;#038;dir=jpman-6.2.2%2Fman\u0026amp;#038;sect=0)にあるが、簡単に言うと、periodicはシステムcronから呼び出されて、あるディレクトリ内にあるスクリプトを実行するシェルスクリプトである。 マニュアルにも書いてあるが、/etc/crontabにはこのような記載がある。  # do daily/weekly/monthly maintenance 0 2 * * * root periodic daily 0 3 * * 6 root periodic weekly 0 5 1 * * root periodic monthly /etc/periodic、/usr/local/etc/periodicの配下には、daily, weekly, monthlyというディレクトリがあり、periodicは日ごと、週ごと、月ごとにcronから呼び出され、それぞれdaily、weekly、monthly配下のスクリプトを実行する、という仕組み。 というわけで、/usr/local/etc/weekly/998.portscleanなどとして、下記のようなファイルを置いてみた。chmod 755しておくのを忘れずに。  #!/bin/sh if [ -x /usr/local/sbin/portsclean ]; then /usr/local/sbin/portsclean -CDP \u0026amp;\u0026amp; rc=0 || rc=1 else rc=1 fi exit $rc 正常終了時に0を、それ以外は1を返すようにしているのは、マニュアルを見ればわかるが、各スクリプトの返り値によって動作が変わるから。 なお、通常であれば実行結果はrootへmailされるが、/etc/periodic.confとして下記の内容を記載しておけば、/var/log配下にログを書き出してくれる。 これもマニュアルに記載あり。   daily_output=/var/log/daily.log weekly_output=/var/log/weekly.log monthly_output=/var/log/monthly.log  俺はこっちにしておいた。 さておき、これで一週間に一度portscleanが実行されるようになる。 注意すべきは、portsのmakeと上記の定期実行がかぶると、portsのmakeをやり直さなければならない点。 先述のcrontabをみればわかるが、毎週土曜日の午前3時に実行されるので、ここをまたいでportsのmakeをするときは、スクリプトの実行属性を落としておくなどの処置が必要。 というか、そもそもスクリプトでそのあたりを判断すればいいのだが、俺にはそんなスクリプトは書けないので。  ","permalink":"https://nobwak.github.io/posts/2007-11-27-portspackage%E5%91%A8%E3%82%8A%E3%81%AE%E5%AE%9A%E6%9C%9F%E4%BD%9C%E6%A5%AD%E3%82%92periodic%E3%81%A7/","summary":"FreeBSDを長く運用していると、/usr/ports/distfiles配下に、portsで使うソースファイルがだんだんと溜まっていき、","title":"ports/package周りの定期作業をperiodicで。"},{"content":"「FreeBSDはデスクトップ環境を構築するのは大変」 そう思っていた時期が、俺にもありました・・・。 * 2008/11追記: 過疎blogにも関わらずこの記事に限っては★をいただいているので、出来るだけ内容をアップデートします。さしあたり2008/11/8に誤記、手順誤り、補足などを追記・修正しています。 [さらにアップデート](http://d.hatena.ne.jp/flageo/20100207/p1) メタパッケージをインストールすれば問題ないはずだが、俺の場合、そこに到達するまでに、特にXを設定するあたりで何度も討ち死にしたので諦めていた。 で、OSインストール一発で何から何までやってくれるUbuntuを使っていたのだが、ふと思い立ってFreeBSDでGNOMEのインストールに再チャレンジしてみたら意外に上手くいって驚いた。 それはともかくとして、やっぱりflashを動作させるのに一工夫必要とか、GNOMEの細かな設定を自分でやらないといけないとか、Ubuntuだったら気にしなくていいような事がやっぱりあって、デスクトップ用途で気軽に使うのはやっぱりUbuntuのほうがいいなと思った。 FreeBSDにもPC-BSDとかあるが、デスクトップ環境がKDEだし・・・。 で、インストールした結果思ったのは、気のせいなのか何なのか、同じGNOMEでもUbuntuより心持ち動作が軽いような気がする。 また、CPU使用率もUbuntuより少なめ。（とはいっても、LinuxとFreeBSDではこの辺の算出方法が違うといった話を読んだことがあるので、一概に見た目のCPU使用率で判断してはいけないかも。） 以下、メモ。 ほぼ[FreeBSDハンドブック](http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/x-config.html)の手順どおり。 [日本語版](http://www.jp.freebsd.org/www.FreeBSD.org/doc/ja_JP.eucJP/books/handbook/x11-wm.html)もあるが、ちと情報が古いので、英語版を見るのがベター。 FreeBSD-7.0-BETA2にXとGNOME2のインストール。 xorgからgnomeをportsでインストールした日には何日かかるかわからないので、全部パッケージで入れることにする。   # PACKAGEROOT=\u0026quot;[ftp://ftp2.jp.freebsd.org](ftp://ftp2.jp.freebsd.org)\u0026quot;;export PACKAGEROOT # pkg_add -r xorg  とすれば、xorgに関係するパッケージを全部入れてくれる(Bシェル系の場合)。 普通にやるとftp.freebsd.orgあたりに取りに行ってしまい時間がかかるので、環境変数のPACKAGEROOTで日本のftpを指定しておく。 ただし、普段からportsディレクトリを更新していると、狙いのパッケージがまだ準備されていない場合も（けっこう）あるので注意。 なので、GNOME、Xをインストールするのは、FreeBSDリリースバージョンをインストールするときに一緒にやってしまったほうがよい。 まあ、泣きながらportsでインストールするのもありだし、メジャーバージョンリリース時のインストールCDあたりからportsディレクトリをコピーするとか、いろいろ手はあるけど…。 Xの設定 終わったらxorg.confの設定。 テキストベースの設定ツールxorgcnfigは、立て板に水状態で山盛りの質問してくるので回避。 root権限でXorg -configureとして実行すると、/rootにxorg.conf.newが出来る。 なお、Xの設定では、入力をまったく受け付けない状態になることがよくあるが、そういった場合には、あわてずCtrl+Alt+Backspaceを押すこと。 ハンドブックを参照しつつ修正してみた。 Section \u0026quot;InputDevice\u0026quot;のキーボードに青字部分を追加  Section \u0026#34;InputDevice\u0026#34; Identifier \u0026#34;Keyboard0\u0026#34; Driver \u0026#34;kbd\u0026#34; \t#日本語配列 Option \u0026#34;XkbModel\u0026#34; \u0026#34;jp106\u0026#34; Option \u0026#34;XkbLayout\u0026#34; \u0026#34;jp\u0026#34; #CTRLとCAPSLOCK入れ替え Option \u0026#34;XkbOptions\u0026#34; \u0026#34;ctrl:swapcaps\u0026#34; EndSection Section \u0026quot;Monitor\u0026quot;に追加  option \u0026#34;DPMS\u0026#34; DPMSはディスプレイ省電力。 そしたら/etc/X11/xorg.confとしてコピー。 startxでtwmの起動まで確認したら、次はgnome2。 GNOMEのインストール   # pkg_add -r gnome2  としてインストール開始。 ・・・してから気がついたんだが、gnome2-liteあたりにしておけばよかった。 再びパッケージが山盛りインストールされる。 いったんログインしてからstartxとするやり方だと、.xinitrcの設定などが面倒なので、システム起動時にgdmも起動させる。 /etc/rc.confに下記のとおり追加。   gdm_enable=\u0026quot;YES\u0026quot; gnome_enable=\u0026quot;YES\u0026quot; # dbus_enable=\u0026quot;YES\u0026quot; polkitd_enable=\u0026quot;YES\u0026quot; hald_enable=\u0026quot;YES\u0026quot; system_tools_backends_enable=\u0026quot;YES\u0026quot;  gnome_enable=\u0026quot;YES\u0026quot;とすればgnome関連デーモンの起動もしてくれる。 うまくいかない場合には3行め以降で個別に追加。（2008/11に再インストールしたときは問題なし。） インプットメソッドのインストール pkg_add -r ja-scim-anthyとしてinput methodをインストール。 2008/11追記: 現時点、つまりgnome2.20ではこういったinput methodやlocale設定に問題があるので、gdmのプルダウンメニューでJapaneseを選んで有効にする。あるいは、~/.profileに'export GDM_LANG=ja_JP.UTF-8'という一行を加える。（[http://www.freebsd.org/gnome/docs/faq2.html#q29](http://www.freebsd.org/gnome/docs/faq2.html#q29)） 終了。 FreeBSDのサウンドカードの設定 gdmが立ち上がりGNOMEも問題なく起動したが、音がならない。 これも[FreeBSDハンドブック](http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/sound-setup.html)を参照して解決。 大まかな流れ。  具体的な手順は以下のとおり。   # kldload snd_driver # kldstat （大量のメッセージ） # cat /dev/sndstat FreeBSD Audio Driver (newpcm: 32bit 2007061600/i386) Installed devices: pcm0: \u0026lt;Intel ICH3 (82801CA)\u0026gt; at io 0x1c00, 0x18c0 irq 11 bufsz　16384 kld snd_ich　[MPSAFE] (1p:1v/1r:1v channels duplex default)  ということで、snd_ichが狙いのモジュールと分かったので（上記出力のボールドは俺）、/boot/loader.confに一行追加。   snd_ich_load=\u0026quot;YES\u0026quot;  この時点でドライバはインストールされているが、GNOMEに認識させるために、一度再起動したほうがいいかも。 アプリケーションのインストール 俺の入れたソフト。   画像閲覧 comix gThumb 音楽 Audacious Rhythmbox ID3タグエディタ EasyTag 動画閲覧 MPlayer VLC フォント ja-vlgothic  ","permalink":"https://nobwak.github.io/posts/2007-11-25-freebsd%E3%81%A7%E3%81%AEgnome%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"「FreeBSDはデスクトップ環境を構築するのは大変」 そう思っていた時期が、俺にもありました・・・。 * 2008/11追記: 過疎blogにも関","title":"FreeBSDでのGNOMEインストール"},{"content":"ヴェルヌの十五少年漂流記を読んだ。 小さい頃、ちびっ子向けに訳されたものは読んだことはあるけど、きちんとしたものは始めて。 で、とても面白かった。 冒頭はいきなり大嵐から始まり、稲光で浮かび上がる船影。このあたり映画的。 で、そのマストも折れてしまったヨレヨレの船を必死に操るのはなぜか子供だけ。 そんな導入から、ひょんなことから（といってもシャレにならないが）無人島に漂着した少年十五人が、どのようにして生活してゆくか。十五人もいれば当然発生するグループ内の軋轢や、後半にかけて大きな事件が発生して、それらが読み進ませる燃料になって速攻で読み終わった。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4102044019\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51ysHKaVKfL._SL160_.jpg\u0026quot; alt=\u0026quot;十五少年漂流記 (新潮文庫)\u0026quot; title=\u0026quot;十五少年漂流記 (新潮文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; ところで、少年達はニュージーランドの同じ学校に通う生徒だが、出身国はさまざま。 イギリス人、フランス人にアメリカ人である。 そういうこともあって先述のゴタゴタがグループ内に発生してしまうわけだが、それがまた各キャラを生かしている。少なくとも主要人物だけは。 そのうちの一人、アメリカ人のゴードンは「無人島で暮らすことは、自分の力を試す絶好の機会だ」と考えてたりする。 さすがアメリカ人と感心した。 その他、印象に残ったのは皆に好かれるリーダー、フランス人のブリアンの言葉。 「なぜ僕たちは子供なんだろう。大人でなければならない時に。」 ところで、十五少年漂流記というタイトルは日本のもので、原題は「二ヶ年の休暇」というそうな。 劇中では、十五人というというよりも、十四人と一人として把握されていて、これはなぜかというと、一人は黒人のボーイであるから。生々しい。 実はこの本の前に、スチーブンソンの宝島を読んだ。 こっちは、ミステリアスな導入部とはうらはらに、のっぺりとしたストーリー展開でがっかりした。  ","permalink":"https://nobwak.github.io/posts/2007-11-19-e%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%83%B4%E3%82%A7%E3%83%AB%E3%83%8C_%E5%8D%81%E4%BA%94%E5%B0%91%E5%B9%B4%E6%BC%82%E6%B5%81%E8%A8%98/","summary":"ヴェルヌの十五少年漂流記を読んだ。 小さい頃、ちびっ子向けに訳されたものは読んだことはあるけど、きちんとしたものは始めて。 で、とても面白かった","title":"ジュール・ヴェルヌ: 十五少年漂流記"},{"content":"宮城谷昌光の重耳を読んだ。 中国は春秋時代の晋の王様の話。 跡目争いの結果、19年に渡って諸国を放浪したのち、王座に返り咲きました、という話。 だが。 一番面白かったのは、主人公重耳の祖父、武公が権謀術数で晋を統一するところ。 もともとは武力に物を言わせて暴れ回っていた彼が、急に方針転換をして搦め手であれやこれやと攻めるのがよかった。 一方で、メインといえる主人公の放浪は、一点をのぞき淡々と話が進んでつまらない。 その一点とは、重耳に夢を託し、朝日の中彼の後を追う部下のシーン。グッド。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4062633256\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51K4MR96JYL._SL160_.jpg\u0026quot; alt=\u0026quot;重耳(下) (講談社文庫)\u0026quot; title=\u0026quot;重耳(下) (講談社文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; その他に面白かったのは、各国で重職にある人間がいろんな判断を下すところ。 読んでる立場からしたら「あー。やっちゃったー」と思う場合でも、当事者となったらそうもいかないんだろうなとか、こんな微妙な判断俺だったら出来んのかとか、そう考えながら読むのがよい。  ","permalink":"https://nobwak.github.io/posts/2007-11-19-%E9%87%8D%E8%80%B3/","summary":"宮城谷昌光の重耳を読んだ。 中国は春秋時代の晋の王様の話。 跡目争いの結果、19年に渡って諸国を放浪したのち、王座に返り咲きました、という話。 だ","title":"重耳"},{"content":"SACHARのHOLESを読んだ。There's a boy in the girls' bathroomが面白かったので、作者繋がりで。 まあ、面白くはあったんだけど・・・・。 \u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/0440414806\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51Ad2LRKaVL._SL160_.jpg\u0026quot; alt=\u0026quot;Holes\u0026quot; title=\u0026quot;Holes\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt;   人生是ツキから見放されまくっている少年スタンリーは無実の罪で矯正施設に送られる。 枯れた湖にあるその施設では、なぜか少年たちに穴を掘らせている。 どうも看守長は何かを探しているようだ。  ということで、導入はよかった。 が、そういった謎が明かされて行くときに、「実は昔にこういう因縁があったのです」と話が始まるので、伏線がズバッと繋がる快感はまったくない。 そういった快感を求めると「理由後付けじゃねーかふざけんな」と頭にくるので、施設のある湖で100年前に起こった話と、今のスタンリーの話の二つが同時進行で進み、それぞれの結末を楽しみに読むのが正しいのであろう。  ","permalink":"https://nobwak.github.io/posts/2007-11-02-%E4%BF%BA%E8%A8%AD%E5%AE%9A%E3%81%AElouis_sachar_holes/","summary":"SACHARのHOLESを読んだ。There's a boy in the girls' bathroomが面白かったので、作者繋がりで。 まあ、面白くはあったんだけど・・・","title":"俺設定のLOUIS SACHAR ”HOLES”"},{"content":"Louis SacharのThere's a Boy in the girls' bathroom「女子トイレに男の子がいる」を読んだ。 すごいタイトルだが、ちびっこ向けの本なのでOK。英語もとても簡単で、速攻で読める。表紙の絵面も素敵。 クラスの嫌われ者で全くどうしようもない最低の少年ブラッドリーが、カウンセラーのカーラの助けで友達を作っていくお話だ。 興味深かったのはカーラのやり方で、ブラッドリーの言っていることは明らかに嘘と分かるのに、絶対に否定せず話を聞いていく。 カウンセリングに本当にそういう手法があるのか分からないが、読んでいるうちに、ブラッドリーの無茶苦茶な発言に対して、カーラがどんな反応をするのかと気になってくる。 その結果かどうなのか、ブラッドリーにも転機が訪れ、少しずつ変わっていくのだが、ちょっとうまく行き過ぎとちがうかと思った。 が、それはどうでもいい。印象に残ったのはカーラの言ったこと。   「人がキモいと言われつづけると、とてもひどい事が起こる」 「そのうち本人も『僕ってキモい奴』と思うようになってしまう。そうなったら最後、もう誰にも相手にしてもらえない。」  どうしたらいいか。   「とても難しいけど、まず『僕はキモくない』と思うことだ」 「だって、自分のことをキモいと思ってる奴が、人に好かれるわけないじゃない」  まあ要するに何があっても自分をあまり卑下してはいけないってことで。 なお、キモいという表現をしているところは、原文ではmonsterである。 これをそのまま「モンスター」としてもピンと来ないし、「化け物」とすると「くっ・・・俺の中の化け物が目を覚ま」といったような中二病的サウンドになってしまうので良くない。 どうしようもないのでキモいという言葉をあてた。 実は前後の話があればモンスターでもしっくり来るのだが、そこまで引用するのも大変なので。 また、上記のカーラのセリフも趣意である。  ","permalink":"https://nobwak.github.io/posts/2007-10-26-%E8%87%AA%E5%88%86%E3%81%AE%E3%81%93%E3%81%A8%E3%82%92%E3%82%AD%E3%83%A2%E3%81%84%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%A6%E3%82%8B%E5%A5%B4%E3%81%8C%E4%BA%BA%E3%81%AB%E5%A5%BD%E3%81%8B%E3%82%8C%E3%82%8B%E3%82%8F%E3%81%91%E3%81%AA%E3%81%84%E3%81%98%E3%82%83%E3%81%AA%E3%81%84/","summary":"Louis SacharのThere's a Boy in the girls' bathroom「女子トイレに男の子がいる」を読んだ。 すごいタイトルだが、ちびっこ向けの本なのでOK","title":"自分のことをキモいと思ってる奴が、人に好かれるわけ、ないじゃない"},{"content":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4062739453\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51H3HRGNAAL._SL160_.jpg\u0026quot; alt=\u0026quot;飛ぶ教室 (講談社文庫)\u0026quot; title=\u0026quot;飛ぶ教室 (講談社文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; エーリッヒ・ケストナーの「飛ぶ教室」を読んだ。 ドイツの寄宿学校に通う高校生5人のお話。 その中のあるシーン。 某生徒がいじめられているのを見たある先生は、「すべて悪いことをした場合には、それをやった者ばかりではなく、それを止めなかった者にも責任がある」といって、クラス全員に罰を与えたのだった。 出版されたのは1933年、執筆はそれに先立つ1932年と考えると、何だか微妙な響きのする台詞だった。  ","permalink":"https://nobwak.github.io/posts/2007-10-24-%E6%82%AA%E3%81%84%E3%81%93%E3%81%A8%E3%82%92%E6%AD%A2%E3%82%81%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E3%82%84%E3%81%A4/","summary":"\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4062739453\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51H3HRGNAAL._SL160_.jpg\u0026quot; alt=\u0026quot;飛ぶ教室 (講談社文庫)\u0026quot; title=\u0026quot;飛ぶ教室 (講談社文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; エーリッヒ・ケス","title":"悪いことを止めなかったやつ"},{"content":"そんなんjvimとかnviで決まりなわけだが、次の理由によりvim-liteをインストールした。 該当のFreeBSDマシンは純粋なサーバ運用で、Xorgはインストールせず、またリモートで作業するのでサーバ側で日本語入力メソッド関連も必要なし。 というわけで、XorgやCannaなどに依存していないviが欲しかった。 jvim2は現時点の7.0ではmake出来ないし、nvi-m17nは設定がよくわからず、結局editors/vim-liteでうまくいった。 ホームディレクトリの.exrcはこんな感じ。っても一行。   set fileencoding=iso-2022-jp  いまさら文字コードにEUCは嫌でUTF8にした。  ","permalink":"https://nobwak.github.io/posts/2007-10-22-%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E8%A1%A8%E7%A4%BA%E5%87%BA%E6%9D%A5%E3%82%8Bvi/","summary":"そんなんjvimとかnviで決まりなわけだが、次の理由によりvim-liteをインストールした。 該当のFreeBSDマシンは純粋なサーバ運用","title":"日本語の表示出来るvi"},{"content":"灰谷健次郎の「海の図」を読んだのは確か高校生のとき。 何気なくハードカバーの表紙に引かれて図書館で借りたんだが、文学少年であった俺様は内容に衝撃を受けて同じ作者の本を読み漁った。 小説の主人公は主に小学生から高校生くらいまでで、大抵はそれら主人公やまわりの登場人物がヘビーな状況に陥っており、最後も特別わかりやすいハッピーエンドでは終わらない。 当時の俺は、俺と同年代の奴がこんなこと考えて生きてんのかとショックを受けたのだった。 小説だけにフィクションではあるが、作者の教師としての実体験をもとに書かれている以上、ある程度の事実はあるはずなので。\u0026lt;a href=\u0026quot;http://d.hatena.ne.jp/asin/4043520131\u0026quot; class=\u0026quot;asin\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://ecx.images-amazon.com/images/I/51FQ8VNM0CL._SL160_.jpg\u0026quot; alt=\u0026quot;海の図〈上〉彷徨の海 (角川文庫)\u0026quot; title=\u0026quot;海の図〈上〉彷徨の海 (角川文庫)\u0026quot; class=\u0026quot;asin\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; いま読み直してみると、ところどころに説教臭さは感じるものの、やっぱり思うことは同じで、子供だろうが大人だろうが、悩んだり辛い目にあった奴ほど、いろんなことが分かるようになるんだなあ、ということ。 そんなわけで今日も生きていきたい所存。  ","permalink":"https://nobwak.github.io/posts/2007-10-22-%E6%B5%B7%E3%81%AE%E5%9B%B3/","summary":"灰谷健次郎の「海の図」を読んだのは確か高校生のとき。 何気なくハードカバーの表紙に引かれて図書館で借りたんだが、文学少年であった俺様は内容に衝","title":"海の図"},{"content":"supfileで指定したbaseディレクトリに、refuseとしてファイルを作成し不要なセットを書き込んでおくとcsupの対象にならない。 supfileでsrc-all, ports-allなどとしておいた上で設定する。 もちろん、refuseを使わず、supfileの側で必要なセットだけ書き込んでおく、という方法もあるが、新しく出来たり名前が変わったりした場合に対応できない。 ちょっと前portsにports-mgmtというディレクトリが出来たとき、気がつかず悩んだことがある。 サンプルファイルは/usr/share/examples/cvsup/refuse。 デフォルト設定のsupfileであれば/var/db/sup/refuseに置けばよい。 なお、portsであればcsupは使わずportsnapが時代の流れだが、portsnapて /var/db/portsnap がどんどん増えてくような。 だから俺はportsもcsupで。  ","permalink":"https://nobwak.github.io/posts/2007-10-21-csupcvsup%E3%81%A7%E4%B8%8D%E8%A6%81%E3%81%AA%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%97%E3%81%AA%E3%81%84%E6%96%B9%E6%B3%95/","summary":"supfileで指定したbaseディレクトリに、refuseとしてファイルを作成し不要なセットを書き込んでおくとcsupの対象にならない。 s","title":"csup(cvsup)で不要なファイルをダウンロードしない方法"},{"content":"が。 buildworldが10時間   World build started on Sat Oct 20 10:04:50 JST 2007 World build completed on Sat Oct 20 19:59:10 JST 2007  buildkernelが3時間   Sat Oct 20 20:57:03 JST 2007 Sun Oct 21 00:10:59 JST 2007  さすがに7,8年前のマシンでは辛くなってきた。  ","permalink":"https://nobwak.github.io/posts/2007-10-21-freebsd7.0%E3%81%8Cbeta%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A7snapshot%E3%81%8B%E3%82%89%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/","summary":"が。 buildworldが10時間 World build started on Sat Oct 20 10:04:50 JST 2007 World build completed on Sat Oct 20 19:59:10 JST 2007 buildkernelが3時間 Sat Oct 20 20:57:03 JST 2007 Sun Oct 21 00:10:59 JST 2007 さすがに7,","title":"FreeBSD7.0がBETAになったので、snapshotからインストールし、アップグレードしてみた。"},{"content":"FreeBSD7.0ではmake.confのNO_***オプションがsrc.confに。 FreeBSDはシステムを再構築する際、/etc/make.confの設定を変えることで、自分の環境では不必要なソースのコンパイルを飛ばすことができ・・た。 FreeBSDのRELENG_7が切られたので試しにインストールしてみたらexampleにあるmake.confに該当オプションがない。 軽く焦ったのだが/etc/src.confで設定することになったと/usr/src/UPDATING（20060317）に書いてあった。 書式などはsrc.confのマニュアルを参照。 俺の/etc/src.confはこんな感じ。  WITHOUT_BIND= WITHOUT_BLUETOOTH= WITHOUT_GAMES= WITHOUT_INET6= WITHOUT_IPX= WITHOUT_KERBEROS= WITHOUT_LPR= WITHOUT_NIS= WITHOUT_SENDMAIL= ","permalink":"https://nobwak.github.io/posts/2007-10-21-freebsdmake.conf%E3%81%AEno%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C/","summary":"FreeBSD7.0ではmake.confのNO_***オプションがsrc.confに。 FreeBSDはシステムを再構築する際、/etc/m","title":"FreeBSD:make.confのNOオプションが。"},{"content":"VMware Playerの入手 [http://www.vmware.com/download/player/](http://www.vmware.com/download/player/) tar.gz版をダウンロードし、perlスクリプトのインストーラを実行してインストール。 NIC関連はBridgeのみ設定してあとはスルー vmware-playerではイメージが作れないのでqemuを利用。 apt-get install qemuなどとしてインストール。 下記のようにしてディスクイメージを作成。 引数などはググれば山盛り出てくるんで省略。   qemu-img create -f vmdk fbsd.vmdk 8G  同じディレクトリに上記ディスクイメージ用の設定ファイルを作成。 拡張子を.vmxにして保存。 vmware-playerを実行して設定ファイルを選ぶだけ。 [http://sanbarrow.com/vmx.html](http://sanbarrow.com/vmx.html) などを参考にして作った俺用の設定ファイルテンプレート。 ○template.vmx  ########################### # vmxテンプレートファイル # vmware-player 2.x用 ########################### #基本設定 # config.version = \u0026#34;8\u0026#34; virtualHW.version = \u0026#34;6\u0026#34; ########################### #ディスプレイネーム # # バーチャルマシーンの名前 displayName = \u0026#34;guestOS1\u0026#34; ########################### #guestOS識別子 # #guestOS = \u0026#34;winxppro\u0026#34; guestOS = \u0026#34;freebsd\u0026#34; #guestOS = \u0026#34;freebsd-64\u0026#34; #guestOS = \u0026#34;ubuntu\u0026#34; #guestOS = \u0026#34;other24xlinux\u0026#34; #guestOS = \u0026#34;other26xlinux\u0026#34; #guestOS = \u0026#34;dos\u0026#34; #guestOS = \u0026#34;win2000pro\u0026#34; ########################### #メモリ # memsize = \u0026#34;256\u0026#34; ########################### #HDD # # vmdkファイル名は適宜書き換え ide0:0.present = \u0026#34;TRUE\u0026#34; #ide0:0.deviceType = \u0026#34;disk\u0026#34; ide0:0.filename = \u0026#34;hdd_image.vmdk\u0026#34; ########################### #CD-ROM # ide1:0.present = \u0026#34;true\u0026#34; #起動時にCDを有効にするかどうか ide1:0.startConnected = \u0026#34;TRUE\u0026#34; #イメージを使用する場合 ide1:0.deviceType = \u0026#34;cdrom-image\u0026#34; ide1:0.filename = \u0026#34;myiso.iso\u0026#34; #イメージ名は書き換える #リアルのCD-ROMドライブを使用する場合 #　ドライブ名、デバイスファイル名は適宜書き換え #ide1:0.deviceType = \u0026#34;atapi-cdrom \u0026#34; ##Windowsの場合。 #ide1:0.filename = \u0026#34;E:\u0026#34; ##UNIX系の場合 #ide1:0.filename = \u0026#34;/dev/hdc\u0026#34; ########################## #FD # floppy0.present = \u0026#34;true\u0026#34; #ノートPCなどFDのないマシンの場合には上記スイッチをfalseに #起動時にFDを有効にするかどうか #floppy0.startConnected = \u0026#34;true\u0026#34; #floppy0.autodetect = \u0026#34;false\u0026#34; ##Windows #floppy0.fileName = \u0026#34;A:\u0026#34; ##UNIX #floppy0.filename = \u0026#34;/dev/fd0\u0026#34; #リアルかイメージか #floppy0.fileType = \u0026#34;device\u0026#34; #floppy0.fileType = \u0026#34;file\u0026#34; #floppy0.fileName = \u0026#34;start.flp\u0026#34; ####################### #NIC # ethernet0.present= \u0026#34;true\u0026#34; #起動時にNICを有効にするかどうか ethernet0.startConnected = \u0026#34;true\u0026#34; # Bridgeモード ethernet0.connectionType = \u0026#34;bridged\u0026#34; #NICカード # 動かない場合にはe1000をvlanceに変更 ethernet0.virtualDev = \u0026#34;e1000\u0026#34; #ethernet0.virtualDev = \u0026#34;vlance\u0026#34; ","permalink":"https://nobwak.github.io/posts/2007-10-13-ubuntu%E4%B8%8Avmware-player%E3%81%ABfreebsd%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AE%E3%83%A1%E3%83%A2/","summary":"VMware Playerの入手 [http://www.vmware.com/download/player/](http://www.vmware.com/download/player/) tar.gz版をダウンロードし、perlスクリプトのインストーラを実行してインストール。 NIC関連はBridgeのみ設","title":"ubuntu上vmware-playerにFreeBSDをインストールしたときのメモ"},{"content":"ロマン・ロランの[ジャン・クリストフ](http://ja.wikipedia.org/wiki/%E3%82%B8%E3%83%A3%E3%83%B3%E3%83%BB%E3%82%AF%E3%83%AA%E3%82%B9%E3%83%88%E3%83%95)は、いろんな障害、困難と泥仕合のような格闘を繰り広げる音楽家の一生を書いた小説。とにかく暑苦しい話だ。 で、物語のラスト近く、老年期に入った彼は、ある女性と十数年ぶりに再会する。 そこで互いの顔に刻まれた跡を見て、「ああ、あなたは、大変に苦しまれたのですね！」と言う。 もし俺も、将来に同じようなことを言ったり言われたり出来るのであれば、どんなに辛いことも耐えられるだろうなと思った。  ","permalink":"https://nobwak.github.io/posts/2007-09-27-%E5%A4%A7%E5%A4%89%E3%81%AB%E8%8B%A6%E3%81%97%E3%81%BE%E3%82%8C%E3%81%9F%E3%81%AE%E3%81%A7%E3%81%99%E3%81%AD/","summary":"ロマン・ロランの[ジャン・クリストフ](http://ja.wikipedia.org/wiki/%E3%82%B8%E3%83%A3%E3","title":"「大変に苦しまれたのですね！」"},{"content":"コンポーネントを説明した[http://www.ubuntu.com/community/ubuntustory/components](http://www.ubuntu.com/community/ubuntustory/components)の適当訳  デフォルトでインストールされるソフトウェア。 一部のファームウェアやフォントを除きオープンソースソフトウェアである。 原則として開発者、コミュニティ、ユーザの精査を経て追加されており、セキュリティ上の問題やバグが発生した場合にもUbuntuチームによりサポートされる。  一般的に使用されるソフトウェアだが、ライセンス上、使用に制限のあるソフトウェア。 一番分かりやすい例ではバイナリで配布されるデバイスドライバなど。 何か問題が発生してもUbuntuチーム自身が対応することが出来ないが、開発元への報告は行われる。  いろんなソフトウェア（だんだん面倒くさくなってきた）。 mainコンポーネント上で問題なく動く数々のオープンソースソフトウェアが含まれるが、Ubuntuチームによるセキュリティやテクニカルサポートの保証はない。 ただ、セキュリティアップデートはコミュニティを通じて提供される。  フリーではないソフトウェアが含まれる。 したがって自分自身で各ソフトウェアのライセンスを確認して自己責任で使うこと。  ","permalink":"https://nobwak.github.io/posts/2007-09-13-sources.list%E3%81%AB%E6%9B%B8%E3%81%8B%E3%82%8C%E3%82%8Bmain_restricted%E3%81%AA%E3%81%A9%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E6%84%8F%E5%91%B3/","summary":"コンポーネントを説明した[http://www.ubuntu.com/community/ubuntustory/components](h","title":"sources.listに書かれるmain, restrictedなどのコンポーネントの意味"},{"content":"Ubuntuを7.04にアップグレードしたばかりだが、ある事情により7.10に続けてアップグレードしたその顛末。 とは言っても、[先日](http://d.hatena.ne.jp/flageo/20070906/p1)の手順での\u0026quot;Feisty\u0026quot;をそのまま\u0026quot;Gutsy\u0026quot;に変更して実施しただけ。 後述の問題を除きスムーズに終了した。 その問題とは、正式版リリース前でリポジトリが頻繁に更新されているせいなのか、チェックサム不整合でapt-get updateが正常に終了しなかったこと。 そもそもsources.listを十分に理解していかなかったので途方に暮れたのだが、Ubuntu公式をうろついて、なんとなく[ミラーサイト一覧](https://launchpad.net/ubuntu/+archivemirrors)からオリジナルサーバとの差が小さいものを選んでsources.listを書き換えたら動いた。 そのとき、[たまたま見つけたページ](http://www.ubuntu.com/community/ubuntustory/components)でコンポーネントの意味も分かったので良かった。 こういうとき、公式サイトのドキュメントがしっかりしていると助かる。 そんなわけでまとめてみた。  ","permalink":"https://nobwak.github.io/posts/2007-09-13-ubuntu_7.04_feisty%E3%81%8B%E3%82%89ubuntu_7.10_gutsy%E3%81%B8%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89/","summary":"Ubuntuを7.04にアップグレードしたばかりだが、ある事情により7.10に続けてアップグレードしたその顛末。 とは言っても、[先日](ht","title":"Ubuntu 7.04 (”Feisty”)からUbuntu 7.10 (”Gutsy”)へのアップグレード"},{"content":"[ZABBIX](http://www.zabbix.com/index.php)とはフリーの統合監視ソフト。 Webインタフェースで楽に設定できて、綺麗な表示が得られるのが特徴。 今回、Ubuntuの入ったマシンにZABBIXをインストールしようと思ったのだが、2007/9現在、ZABBIXは1.4.2が最新版であるのに対し、7.04(Feisty)で手に入るパッケージのバージョンは1.1。 どうせなら新しいのを入れたい。 [調べたところ](http://packages.ubuntu.com/cgi-bin/search_packages.pl?keywords=zabbix\u0026amp;#038;searchon=names\u0026amp;#038;subword=1\u0026amp;#038;version=all\u0026amp;#038;release=all)7.10(Gutsy)であれば1.4.1のパッケージがあるようだ。 もちろんソースからコンパイルしても良いのだが、自前インストールしたZABBIXがパッケージ管理しているソフトウェアに依存していると後々面倒なので、思い切って7.10にアップグレードした。 で、インストール。 バックエンドのデータベースにはMySQLを使用するので、下記二つのパッケージをインストールした。   zabbix-frontend-php - software for monitoring of your servers - php frontend zabbix-server-mysql - software for monitoring of your networks - server  インストールに伴う設定手順などは[ThinkIT 第1回：ZABBIXをインストール](http://www.thinkit.co.jp/free/article/0611/19/1/)が参考になる。 が、こういった記事は日が経つに従い、対象としているソフトの最新版との違いが発生してくるので、オフィシャルサイトやソフト自体に付属してくるドキュメントも確認しないと色々と問題が起こったりする。 実際、上記の記事では誤記も多かったので、オフィシャルサイトのマニュアルと見比べつつ設定をした。 特に大きな違いがあるのはWindowsにagentデーモンをサービスとして登録する方法。 記事中では単に「install」を追加すると書いてあるが、オフィシャルマニュアルでは「-install」となっており、実際に後者でないと認識されない。 v1.4ではzabbix_agentd.exe -c \u0026quot;設定ファイル\u0026quot; -installとする。 ちなみにWindows上でzabbix_agentd.exeに-hオプションを与えて実行した出力は下記の通り。 その他のオプションが表示される。  C:\\Program Files\\zabbix\u0026gt;zabbix_agentd.exe -h ZABBIX Agent Win32 (service) v1.4.2 (20 August 2007) usage: zabbix_agentd.exe [-Vhp] [-idsx] [-c \u0026amp;#60;file\u0026gt;] [-t \u0026amp;#60;metric\u0026gt;] Options: -c --config \u0026amp;#60;file\u0026gt; Specify configuration file -h --help give this help -V --version display version number -p --print print supported metrics and exit -t --test \u0026amp;#60;metric\u0026gt; test specified metric and exit Functions: -i --install install ZABIX agent as service -d --uninstall uninstall ZABIX agent from service -s --start start ZABIX agent service -x --stop stop ZABIX agent service C:\\Program Files\\zabbix\u0026gt; その他にちょっとつまづいたのは、php.iniの修正。 webインタフェースを初めて実行すると設定が始まり、場合によってphp.iniの修正を求められる。 俺がphp.iniを変更したのは下記の2行   max_execution_time = 300　（30だったのを300に修正） date.timezone = Asia/Tokyo　（追加）  php.iniを修正したらapacheの再起動を忘れずに。  ","permalink":"https://nobwak.github.io/posts/2007-09-13-zabbix%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"[ZABBIX](http://www.zabbix.com/index.php)とはフリーの統合監視ソフト。 Webインタフェースで楽に設定","title":"ZABBIXのインストール"},{"content":"俺メモ。 Ubuntu 6.10から7.04へマニュアルアップグレードしたので、その時のメモ。 といっても、Ubuntu公式サイトに書いてある通り進めるだけ。 念のため、基本的なパッケージがインストールされていることを確認。   sudo apt-get install ubuntu-minimal ubuntu-standard sudo apt-get install xubuntu-desktop  最新の状態にアップグレードされていることを確認   sudo apt-get update \u0026amp;\u0026amp; sudo apt-get  sources.listを修正   sudo sed -e -s/\\sedgy/ feisty/g' -i /etc/apt/sources.list  apache2+php5をインストールしている場合には、apache2を動作させた状態でアップグレードをすること、とサイトには書いてある。（冒頭に書いておけよ、と思った） 深呼吸してから実際のアップグレードを始める。 sudo apt-get updateとしてから、sudo apt-get dist-upgradeを「何もアップグレードするものが無くなるまで」繰り返す。 たいていは何かのアップグレードに失敗するし、場合によってapt-get -f installをしろと指示されるので、その通りに実行してまたdist-upgrade。 念には念を入れ、下記コマンドを実行。   sudo apt-get update \u0026amp;\u0026amp; sudo apt-get dist-upgrade sudo apt-get -f install sudo dpkg -configure -a  最後にサイトの注意書きを確認する。 ・/etc/groupのadminグループに自分のユーザ名が入っていること。 ・pango-libthaiがインストールされていないこと。 オッケーならリブートして終了。 問題なく動作するはずだが、俺の場合、Apache2+SSLが動かなくなった。 後述の問題を解決して、最後にsudo apt-get autoremoveして終了。 結局のところ、Ubuntuをアップグレードしたから、というよりは、apache2のバージョンアップで、設定ファイルのルールが変更されたため、エラーとなったようだ。  ","permalink":"https://nobwak.github.io/posts/2007-09-06-ubuntu_6.10_edgy_eft%E3%81%8B%E3%82%89ubuntu_7.04_feisty_fawn%E3%81%B8%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88/","summary":"俺メモ。 Ubuntu 6.10から7.04へマニュアルアップグレードしたので、その時のメモ。 といっても、Ubuntu公式サイトに書いてある通り進めるだけ","title":"Ubuntu 6.10 (”Edgy Eft”)からUbuntu 7.04 (”Feisty Fawn”)へのアップデート"},{"content":"[6.10のときにインストールしたApache2+SSL](http://d.hatena.ne.jp/flageo/20070220/p1)だが、7.04にアップグレードしたとたん、下記のメッセージが表示されてSSLが動作しない。   mixing * ports and non-* ports with a NameVirtualHost address is not supported  sites-enabled内の000-defaultで下記の記載がある。   NameVirtualHost * \u0026lt;VirtualHost *\u0026gt;  したがって、000-defaultのVirtualHost *は*:*、つまりportが*と判断され、すべてのportに適用されるため、mod-enable内のssl設定ファイルの下記記載と齟齬を来していた。   \u0026lt;VirtualHost _default_:443\u0026gt;  なので、000-defaultを下記のように修正してOK。   NameVirtualHost *:80 \u0026lt;VirtualHost *:80\u0026gt;  000-defaultを変更したくないのであれば、ssl設定ファイルのホスト名を、下記のようにIPアドレスにしてもOK   \u0026lt;VirtualHost 192.168.1.1:443\u0026gt;  ","permalink":"https://nobwak.github.io/posts/2007-09-06-ubuntu7.04%E3%81%B8%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89%E3%81%A7%E3%81%AA%E3%81%9C%E3%81%8Bapache2_ssl%E3%81%8C%E5%8B%95%E3%81%8B%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F/","summary":"[6.10のときにインストールしたApache2+SSL](http://d.hatena.ne.jp/flageo/20070220/p1","title":"Ubuntu7.04へのアップグレードでなぜかapache2 SSLが動かなくなった。"},{"content":"最近、数百円～千数百円で行けるような、アマチュアオーケストラのコンサートをよく聴きに行く。プロのオケとなると、何ヶ月も前に座席の埋まってしまうことが多いのだが、アマオケだとギリギリまで空いている事が多く、思い立ったらすぐ聴きに行ける気軽さがよい。 また、プロのオケのような技術は求められないけれども、アマチュアだからこその「俺は/私は音楽が好きなんだあ！」という勢いが感じられてとても良い。 それに、一概にプロのオケとなると聞いたこともないような曲をプログラムしているが、アマオケはメジャーな曲ばかりでその点も良い。 プロオケもメジャーどころを演奏することもあるが、大抵は速攻でチケットが売りきれる。 そんなわけで、週末に特に予定のないときは、コンサートホールの日程をツラツラ眺めて好きな曲がプログラムされているアマオケの演奏会があれば聴きに行っている。 通常のオケのコンサートといえば3曲で、軽めの曲が二つに最後が交響曲というのがパターンだ。 ラストの交響曲にはもちろん最高の演奏者を揃えてくるが(ただし曲が要求する楽器編成にもよる)、最初の二曲はそうでもないことが多い。大学オーケストラの場合は、大学あたりから楽器を始めた者など、経験の浅い演奏者の比率が高くなったりする。それは特に一曲あたり2人～数人しか出演できない管楽器に顕著だ。 結果として、前2曲では、演奏が途中で止まりそうになるなどアクシデントが多発する。とてもとても手に汗を握る。下手なアクション映画よりハラハラする。指揮者の心中を察してしまう。 かと思うと、テクニックそっちのけで勢いだけでグイグイと曲を引っ張ったりする。 絶対に退屈しない。 アマチュアオーケストラは絶対におすすめだ。  ","permalink":"https://nobwak.github.io/posts/2007-08-26-%E3%82%A2%E3%83%9E%E3%83%81%E3%83%A5%E3%82%A2%E3%82%AA%E3%83%BC%E3%82%B1%E3%82%B9%E3%83%88%E3%83%A9%E3%81%AE%E3%81%99%E3%81%99%E3%82%81/","summary":"最近、数百円～千数百円で行けるような、アマチュアオーケストラのコンサートをよく聴きに行く。プロのオケとなると、何ヶ月も前に座席の埋まってしま","title":"アマチュアオーケストラのすすめ"},{"content":"オケの話を書いて思い出した。 今年もプロムスの季節がやってきた。 プロムス音楽祭とは、ザ・プロムス（The Proms BBCプロムスとも）はイギリス・ロンドンで毎年夏開催される、8週間におよぶ一連のクラシック音楽コンサート・シリーズである。([Wikipediaより](http://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%83%A0%E3%82%B9)) 特に最後の夜に開催されるコンサート、いわゆる[ラストナイト](http://www.bbc.co.uk/proms/2007/lastnight/)はお祭りで、ブビーッと鳴る風船だろうが、クラッカーだろうが、音が出るものだって音楽を楽しむためだったら何でもあり。 ラストナイトは日本時間9/9未明。 まだ見たことのない人は、定番の威風堂々あたりから見るだけでも、クラシックコンサートに対するイメージが変わるはず。 NHKあたり中継してくれないかなー。  ","permalink":"https://nobwak.github.io/posts/2007-08-26-%E3%83%97%E3%83%AD%E3%83%A0%E3%82%B9%E9%9F%B3%E6%A5%BD%E7%A5%AD/","summary":"オケの話を書いて思い出した。 今年もプロムスの季節がやってきた。 プロムス音楽祭とは、ザ・プロムス（The Proms BBCプロムスとも）はイギリス・ロン","title":"プロムス音楽祭"},{"content":"「a,b,\u0026quot;cde,fg\u0026quot;,e」 こんなCSVをPHPで扱おうとすると、結構面倒くさい。 [ここ](http://nhh.mo-blog.jp/ttt/2007/04/php521csv_212a.html)の人と同じように結構悩んだ。 結論だけ書く。 [http://php.benscom.com/manual/ja/function.strtok.php](http://php.benscom.com/manual/ja/function.strtok.php) ここにサンプルがあったので、これを改変してこんな感じで。   test.php ＜?php $fh=fopen(\u0026quot;test.csv\u0026quot;,'r'); while(!feof($fh)){ $buffer = fgets($fh,4096); $buffer = chop($buffer); $values = tokenizeQuoted($buffer,\u0026quot;,\u0026quot;); print_r($values); } fclose($fh); //split a string into an array of space-delimited tokens, taking double-quoted strings into account function tokenizeQuoted($string,$delimitar) { for($tokens=array(), $nextToken=strtok($string, $delimitar); $nextToken!==false; $nextToken=strtok($delimitar)) { if($nextToken{0}=='\u0026quot;-) $nextToken = $nextToken{strlen($nextToken)-1}=='\u0026quot;- ? substr($nextToken, 1, -1) : substr($nextToken, 1) . $delimitar . strtok(-\u0026quot;-); $tokens[] = $nextToken; } return $tokens; } ?\u0026gt;  サンプル   nobody@localhost$ cat test.csv a,b,\u0026quot;cde,fg\u0026quot;,e nobody@localhost$ php ./test.php Array ( [0] =\u0026gt; a [1] =\u0026gt; b [2] =\u0026gt; cde,fg [3] =\u0026gt; e ) nobody@localhost$  ","permalink":"https://nobwak.github.io/posts/2007-04-25-php5.2.1%E3%81%A7csv%E3%82%92%E6%89%B1%E3%81%86%E3%81%A8%E3%81%8D%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%AB%E3%82%AB%E3%83%B3%E3%83%9E%E3%81%8C%E5%90%AB%E3%81%BE%E3%82%8C%E3%81%A6%E3%81%84%E3%81%9F%E3%82%89/","summary":"「a,b,\u0026quot;cde,fg\u0026quot;,e」 こんなCSVをPHPで扱おうとすると、結構面倒くさい。 [ここ](http://nhh.m","title":"PHP5.2.1でCSVを扱うとき、フィールドにカンマが含まれていたら"},{"content":"[lifehacker](http://lifehacker.com/software/home-remedies/cure-a-sore-throat-with-cayenne-pepper-245873.php)によれば「喉が痛いときにはカイエンペッパーを溶かした水でうがいすると効き目抜群」らしい。 嘘くせえ。 しかし、lifehackerの元ネタとなった[EathCrinic](http://www.earthclinic.com/CURES/sore_throat.html)の記事ではSUGEEE!というコメントが山盛りである。 ここで小さじ1～2杯のカイエンペッパーを、12oz(=およそ350ml)の水に溶き、うがいするといった例が紹介されている。 考えるだに恐ろしい。 いったいなぜ効くのかは、そのコメントを読んでいくと分かる。 なんでも、カプサイシンは痛み治療にも使われる物質だからだそうだ。 へぇ～、と思ってwikipediaを念のため調べてみると、[英語版wiki](http://en.wikipedia.org/wiki/Capsaicin)に記述があった。 コ難しい医学用語を訳しながら読むと、どうやらカプサイシンはその強烈な刺激で痛覚神経を麻痺させる機能があるからだとか。 確かに納得する。 ただし、利用可能なエリアは、例えば神経痛、筋肉痛、関節痛など、局所的なものである。 ということで、喉の痛みに効くとはいえ、実際は痛みを抑えているだけということに注意すればOKのようである。  ","permalink":"https://nobwak.github.io/posts/2007-03-22-%E5%96%89%E3%81%AE%E7%97%9B%E3%81%BF%E3%81%AB%E3%81%AF%E5%94%90%E8%BE%9B%E5%AD%90%E3%81%A7%E3%81%86%E3%81%8C%E3%81%84%E3%82%92/","summary":"[lifehacker](http://lifehacker.com/software/home-remedies/cure-a-sore-","title":"喉の痛みには唐辛子で「うがい」を"},{"content":"UbuntuにiTunesサーバであるmt-daapdを入れた俺メモ。 詳細はググれば大量に出てくるのでポイントだけ。 mt-daapdは、パッケージからインストールすると、というかそもそもUTF-8にしか対応しておらず、Shift-JISで投入されたID3タグが化けるので、偉い人が作ったパッチを使用しつつソースからインストール。 [http://sourceforge.net/projects/mt-daapd](http://sourceforge.net/projects/mt-daapd) ここからソースをダウンロード。 [http://www.kzsoft.to/~kazu/mt-daapd/](http://www.kzsoft.to/~kazu/mt-daapd/) ここからパッチをダウンロード。 ソースを展開し、ディレクトリに降りたら、patchコマンドへ-p1オプションに続けてパッチのファイル名を与える。 あとは$ ./configure, $ make, # make installで終了。 デフォルトのインストール先である/usr/localから変更したいとき、その他オプションを変更したいときは、./congiure -helpを参考に。 つかgccがあるのに、configureに「実行バイナリを作成することが出来ません」などと言われて頭を抱えたが、build-essentialというパッケージを入れて解決。 なお、id3tag, gdbmのヘッダも要求されたので、libgdbm-dev、libid3tag0-devも入れた。 何か足らなきゃ./configureが怒るので、そのメッセージを参考に。 デフォルト設定では/usr/local/sbinにmt-daapdがインストールされる。 また、設定ファイルは/etc/mt-daapd.conf。 変更したのはweb_root, admin_pw, mp3_dir, servernameぐらい。   $ grep ^[^\\ #] /etc/mt-daapd.conf web_root /usr/local/share/mt-daapd/admin-root port 3689 admin_pw foobar db_dir /var/cache/mt-daapd mp3_dir /export/daapdir servername foo runas nobody playlist /etc/mt-daapd.playlist extensions .mp3,.m4a,.m4p $  mp3_dirで指定したディレクトリにmp3を入れたらmt-daapdを起動。 あとはクライアント側のiTunesがサーバを勝手に見つけてくれる。 なお、設定ファイル上のrescan_intervalを有効にしておけば、ここで指定した秒数ごとにmp3_dirをチェックし、曲リストを更新してくれる。 逆に、有効にしていない場合には、mt-daapdを再起動するか、ポート3689にhttpで繋いで表示される管理画面からrescanしなければ更新されない。 せっかくなので、上記で指定したディレクトリをsambaで公開して、mp3の追加もやりやすくしておく。mp3プレーヤーでもアクセス出来るし。 これで使用してみたところ、iTunes上ではタグも化けてないようだが、不安なら[easytag](http://easytag.sourceforge.net/)などでUTF-8に変更してもいいのかも。  ","permalink":"https://nobwak.github.io/posts/2007-03-03-mt-daapd/","summary":"UbuntuにiTunesサーバであるmt-daapdを入れた俺メモ。 詳細はググれば大量に出てくるのでポイントだけ。 mt-daapdは、パッ","title":"mt-daapd"},{"content":"俺メモ ファイルの中身ではなく、ファイル名そのものの文字コードを変換するには、convmv\u0026lt;a class=\u0026quot;keyword\u0026quot; href=\u0026quot;http://d.hatena.ne.jp/keyword/convmv?mode=edit\u0026quot; rel=\u0026quot;nofollow\u0026quot;\u0026gt;?\u0026lt;/a\u0026gt;というコマンドを使う。 正直言って、コマンドの名前さえ分かれば、後はググるなりmanするなり何なりすれば万事オッケーなのだが、とりあえずメモしておく。 コマンド自体は大抵、各システムのパッケージ管理システムから問題なくインストールできるはず。 使い方は-fオプションに元の文字コードを、-tに変換先の文字コードを指定し、ファイル名を続けるだけ。 今回やりたいことの性質上、化けまくってるファイルの名前を一生懸命タイプするよりは、あるディレクトリ配下をアスタリスクで指定するのがまあ普通。 コマンド実行イメージ。   $ convmv -f euc-jp -t utf8 * (略) No changes to your files done. Use -notest to finally rename the files.  実はこれだけでは実際に変換は行われず、単に変換後のイメージを表示するだけ。実際に変換するには、メッセージの通り、-notestをつけて実行する。   $ convmv -notest -f euc-jp -t utf8 * (略)  サブディレクトリまで再帰的に実行したいときは、お決まりの-rオプションをつける。 また、convmv -listとすれば、指定できる文字コード一覧が表示される。 が、実際に使うのは下記3つだろう。   euc-jp, utf8, shiftjis  ","permalink":"https://nobwak.github.io/posts/2007-03-02-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D%E3%81%AE%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89%E5%A4%89%E6%8F%9B/","summary":"俺メモ ファイルの中身ではなく、ファイル名そのものの文字コードを変換するには、convmv\u0026lt;a class=\u0026quot;keyword\u0026quot; href=\u0026quot;http://d.hatena.ne.jp/keyword/convmv?mode=edit\u0026quot; rel=\u0026quot;nofollow\u0026","title":"ファイル名の文字コード変換"},{"content":"Ubuntu6.10(Debianも？)でのapache構築は俺の今までの経験とはちょっと経路が違ったので俺メモ ◎apache2のインストール 適当にapt-get installで。 ◎sslモジュールの設定ファイル /etc/apache2/mods-enabled/にて /etc/apache2/mods-available/配下のssl.conf、ssl.loadに 同名にてシンボリックリンクを張る。 ただ、ここのssl.confには大した事が書かれていないので、別途exampleなどから持ってくる。 例)/usr/share/doc/apache2/examples/ssl.conf.gz 注:ssl.confについては、このあと[7.10にアップグレードしたとき](http://d.hatena.ne.jp/flageo/20070906/p2)、ちょっとつまづいた。 ◎オレオレ証明書の作成 このへんを参考に作成。 [http://www.atmarkit.co.jp/flinux/rensai/linuxtips/702apachessl.html](http://www.atmarkit.co.jp/flinux/rensai/linuxtips/702apachessl.html) さらにこのへんを参考にブラウザへ証明書をインポート [http://takagi-hiromitsu.jp/diary/20050327.html](http://takagi-hiromitsu.jp/diary/20050327.html) ◎起動 問題なく起動することを確認 また下記コマンドでも接続テスト openssl s_client -connect target:443 GET / HTTP/1.0 (リターンを2回) 参考:[http://x68000.q-e-d.net/~68user/unix/pickup?openssl](http://x68000.q-e-d.net/~68user/unix/pickup?openssl)  ","permalink":"https://nobwak.github.io/posts/2007-02-20-ubuntu6.10%E3%81%A7%E3%81%AEapachessl%E6%A7%8B%E7%AF%89/","summary":"Ubuntu6.10(Debianも？)でのapache構築は俺の今までの経験とはちょっと経路が違ったので俺メモ ◎apache2のインストー","title":"Ubuntu6.10でのApache/SSL構築"},{"content":"Vaio N505A/BPにLinuxをインストールしようと思った顛末をダラダラと書く。 さっそくだが、マシンのスペックは下記の通りとても厳しい。   モバイルCelerom 366MHz メモリ128MB HDD 30G(換装済み) イーサネットは無し CD-ROMドライブ付属  CD-ROMドライブが付属しているので、一見さっくりとインストール出来そうなのだが、さにはあらじ。 PCGA-CD51という型番のこのCD-ROMは、数あるPC-UNIX, Linuxインストーラが、起動だけはするもののそれを最後にドライブを見失うという悪名高いもの。 今回試してみたいUbuntu6.10もアウト。 しかたないのでインストーラが起動した時点でネットワークインストールができないか探してみるが無し。 結局このような手を取った。 何かの付録でついてきたVineでならば実はCD-ROMからインストールが可能だったので、とりあえず最小構成でインストール。 http://ftp.ecc.u-tokyo.ac.jp/ubuntu/dists/edgy/main/installer-i386/20060711ubuntu18/images/netboot/ubuntu-installer/i386/ ここからinitrd.gz、linuxをダウンロード。 /boot/ubuntu配下あたりにコピー。 あとはここを参考にliloを設定。 [http://www.jp.debian.org/releases/stable/i386/ch05s01.html.ja#boot-initrd](http://www.jp.debian.org/releases/stable/i386/ch05s01.html.ja#boot-initrd) たとえばこう。   image=/boot/ubuntu/linux label=ubuntuinst initrd=/boot/ubuntu/initrd.gz root=/dev/ram0  で、再起動してubuntuinstを選べばネットワークインストールが始まる。 LiveCDで起動したり、あるいはインストールCDでもシェルが動いてfdiskが使えたりするならば、わざわざこんな回りくどい事をしなくてもいいのだが、最悪のケースでもVineが動くのでこうした。 とりあえずインストーラも無事に動き始めたので、ハードディスクのパーティションエディタでは、/boot以外はすべて初期化を行うようにする。 インストールする大量のパッケージをダウンロードする際、画面がまったく動かない状態になって少し焦ったが、Alt-F4で開く端末にはしっかりと経過が表示されていたので安心した。 また、途中でWMも選べるようになっており、マシンのスペックからGnomeは無理と判断してxfce、つまりxubuntuを選択して無事インストールが完了した。 ただ、これだけでは[Japanese Teamのパッケージが追加されないので](http://www.ubuntulinux.jp/download)、   deb [http://archive.ubuntulinux.jp/ubuntu-ja](http://archive.ubuntulinux.jp/ubuntu-ja) edgy/ deb [http://archive.ubuntulinux.jp/ubuntu-ja](http://archive.ubuntulinux.jp/ubuntu-ja) edgy-ja/  上記を/etc/apt/sources.lstに追記、ubuntu-ja-keyringをインストールしてからapt-get update/apt-get upgrade。 Linuxの事にはとんと疎かったのだが、何だかこれで色々と、特に起動に関する部分が分かって勉強になった。  ","permalink":"https://nobwak.github.io/posts/2007-02-17-ubuntu%E3%82%92%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"Vaio N505A/BPにLinuxをインストールしようと思った顛末をダラダラと書く。 さっそくだが、マシンのスペックは下記の通りとても厳しい。 モバ","title":"Ubuntuをネットワークインストール"},{"content":"Wiiを買った。 で、それなりに楽しんでいるのだが、ある時、突然リモコンに内蔵のモーションセンサが動作しなくなった。 ポインタやボタンは動作しているので、本体とのリンク切れではない。 本体の再起動やら何やらを試しても復帰せず、仕方なしにサポートへ電話した。 どうせ繋がるまでえらく待たされるんだろうと構えていたら、意外にもすぐに人間が出てびっくりした。 最初はアンサリングマシンだと思ってたので。 しかし担当者に言われた事にはもっと驚いた。 物腰柔らかに指定された内容は「リモコンのボタン面を下にして持ち、十字キーの部分をもう片方の手のひらに数回叩きつけろ」という過激なもの。 耳を疑って再度担当者に確認したが内容は変わらず、恐る恐るビタンビタンと叩いてみたところ効果は覿面で、モーションセンサが難なく復活した。 なんでもセンサが十字キーの裏にあり、何かのきっかけでハマってしまうケースがあるそうだ。 それはともかくとして、この時代に、調子が悪ければ叩いて直せというのを、しかも公式サポートで聞くとは思わなかった。 が、思えばしかし、確かにこのリモコンは頑丈である。 ゲームに熱中するあまり、フルスイングしたリモコンをテーブルにぶつけた事が何度かあったが、まったく平気の平左で動作している。 数々の伝説を持つ任天堂イズムを感じた出来事だった。  ","permalink":"https://nobwak.github.io/posts/2007-01-04-wii%E3%83%AA%E3%83%A2%E3%82%B3%E3%83%B3%E3%81%AB%E5%BC%B5%E3%82%8A%E6%89%8B/","summary":"Wiiを買った。 で、それなりに楽しんでいるのだが、ある時、突然リモコンに内蔵のモーションセンサが動作しなくなった。 ポインタやボタンは動作して","title":"Wiiリモコンに張り手"},{"content":"アメリカにいた頃、こういう話を聞いた。 移民1世とでもいうのか、何十年も前にアメリカに渡った日本人の話す日本語は とても美しいのだと。 アメリカで、日本からは隔絶した状態にいたからこそ、昔の日本語が保存されて いたようだ。 短いアメリカ生活では、そんな人に会う機会もなかった。 一回だけ、会社の取引銀行の副支配人がそれっぽい人であり、ワクワクしながら わざと日本語で話をしてみたのだが、忘れかけたせいで無茶苦茶になったブロー クン関西弁であり理解できず残念であった。 今更ながら「レクサスとオリーブの木」 ([http://www.amazon.co.jp/exec/obidos/ASIN/4794209460](http://www.amazon.co.jp/exec/obidos/ASIN/4794209460))を読んだ。本当は同じ人が最 近著した「フラット化する世界」 ([http://www.amazon.co.jp/exec/obidos/ASIN/4532312795](http://www.amazon.co.jp/exec/obidos/ASIN/4532312795))の方を読みたかったのだが、 果たせずこちらになった。 いわゆるグローバリゼーションを説明した本で、とても面白かったのだが、アメ リカ人以外は素直に頷けないと思う。 内容を口悪く言うと、「リッチな生活したいでしょ？ なら我がアメリカのよう に経済活動をブーストするような、効率化されたシステムを国を挙げて導入せ よ。然らずんば死。」というもの。 ただし、グローバル化の波は均質化、画一化の波、事実上はアメリカ化の波、と ほぼ同義なので、「自分たちの国や地域固有の文化、財産は大事にしようね。」 と言うのだが、まあちょっとアメリカ人が言ってもあんまり説得力がない。 さておき、この本の中では、アメリカシステムをレクサスに喩え、一方の、国や 地域固有の文化、財産をオリーブの木に喩え、それら二つの相克を、沢山のエピ ソードや引用を基に書いていてとても読みやすかった。 実はこの本は、図書館でやっと見つけて借りたのだが、その際に「国家の品格」 ([http://www.amazon.co.jp/exec/obidos/ASIN/4106101416](http://www.amazon.co.jp/exec/obidos/ASIN/4106101416))も目に入ったので借りてみた。 意図せず読んだこの本では、「レクサスとオリーブの木」と対比をなすように、 グローバル化反対、日本の伝統の復興が大事、という主張がされている。 もともと講演をベースにして書かれた本らしく、内容も薄くて速攻で読み終わっ てしまったが、残念な読後感だった。 対比という意味では面白かったのだが、論の進め方が暴走気味で、「オリーブの 木」に大した根拠もなくブシドー精神やらが出てきて吹いた。ちょっとトンデモ 気味だ。 日本のオリーブの木は、アメリカで美しい日本語を話す人のように、日本の外に ぽつんとあるのかも、と思った。  ","permalink":"https://nobwak.github.io/posts/2006-12-07-%E3%81%A9%E3%81%8F%E3%81%97%E3%82%87%E3%81%AE%E3%81%82%E3%81%8D/","summary":"アメリカにいた頃、こういう話を聞いた。 移民1世とでもいうのか、何十年も前にアメリカに渡った日本人の話す日本語は とても美しいのだと。 アメリカで","title":"どくしょのあき"},{"content":" In addition to the core GNOME ports, almost 500 ports were also touched to chase the GNOME move from X11BASE to LOCALBASE and fix build problems with the new freetype2. (太字は俺)  アッー!  ","permalink":"https://nobwak.github.io/posts/2006-10-16-ports%E7%A5%AD%E3%82%8A%E9%96%8B%E5%82%AC%E4%B8%ADfreebsd/","summary":"In addition to the core GNOME ports, almost 500 ports were also touched to chase the GNOME move from X11BASE to LOCALBASE and fix build problems with the new freetype2. (太字は俺) アッー!","title":"ports祭り開催中(FreeBSD)"},{"content":"会社のWindowsマシンでOpenSSLコマンドを使ってみた。 バイナリは([http://www.openssl.org/related/binaries.html](http://www.openssl.org/related/binaries.html))で手に入る。 俺の会社では、PCへの暗号化ソフトのインストール、およびデータの暗号化は必須である。 暗号化は大変よろしいのだが、常々思っていたのは、PCがクラッシュしたときのデータリカバリだ。 プロプライエタリな暗号化ソフトなので、有事の際にはきちんと復号出来るのか非常に不安だ。 あくまでも想像だが、一般のツールは使えず、通常はその暗号化ソフト付属のツールでしか復旧は出来ないように思える。 つい先だって、Windows2000で、NTFS上での圧縮ファイルが破損するという話があった([slashdot.jp](http://slashdot.jp/~oops/journal/) , [2ch](http://pc8.2ch.net/test/read.cgi/win/1151414872/)[dat落ちしてるかも] 今では修正パッチ提供済み)。 NTFSもプロプライエタリものだが、超メジャーであったせいで、LinuxやFreeBSDが対応しており、それらOSから復旧を試みることができた結果、偶然にもFreeBSDから壊れたファイルを読むことが出来たそうな（これは別にFreeBSDが優れているという話ではなく、あくまでたまたまOKだっただけ）。 きっとこの暗号化ソフトもメジャーであればあるほど、外部ツールは充実されるんだろうが、メジャー度は正直よく知らない。 最終的には、ソフトベンダにお金払って復旧してもらうんだろう。たぶん。 まあそんなわけで、素人の俺様が考えるに、暗号化ソフト（と言っていいのか知らんが）は、オープンかつメジャーなものが良いと思った。 翻って俺の会社の話。 業務で生成した成果物は共有のファイルサーバにアップしているので問題ないのだが、問題は業務関連だが個人用のデータ。 要するにメールのデータなどだ。 もちろん、個人のデータであっても、業務上のデータであるので、緊急時には管理者がバックドアなりマスターキーなり何なりで復号するのは当然だが、普段の話として。 一応、会社は吊しのNASに、社員ごとのフォルダを用意してくれているのだが、そこに生のデータをアップするのは抵抗がある。 かといって個人持ちの外部記憶装置は禁止なので、フラッシュメモリ、USBのHDDは使えない。 ということで、前半で述べた俺様判断の結果により、オープンかつメジャーなOpenSSLで暗号化し、その後にNASにアップすることにした。 なんかあったらWindowsだけじゃなく、LinuxやFreeBSDその他で復号出来るし。 冒頭で書いたとおり、Windows用のバイナリは([http://www.openssl.org/related/binaries.html](http://www.openssl.org/related/binaries.html))で手に入る。 c:\\OpenSSL\\binにインストールされるのでパスを通す。 OpenSSLは使えるオプションがクソ多くて混乱するが、[@IT](http://www.atmarkit.co.jp/fsecurity/rensai/securitytips/026openssl.html)に使用例が載っていた。 一応、ここにも使用例を載せておく。 書式   openssl \u0026lt;暗号化方式\u0026gt; \u0026lt;-e:暗号/-d:復号\u0026gt; -in \u0026lt;オリジナルのファイル名\u0026gt; -out \u0026lt;暗号化されたファイル名\u0026gt;  サンプル   (暗号化) openssl des -e -in test.doc -out test.doc.crypted (復号) openssl des -d -in test.doc.crypted -out test.doc  試しに暗号化されたファイルの頭をダンプしてみたらSaltedになっていた。きちんと暗号化されてるようだ。  ","permalink":"https://nobwak.github.io/posts/2006-10-16-windows%E3%81%A7%E3%82%82openssl%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E6%9A%97%E5%8F%B7%E5%8C%96%E3%82%92/","summary":"会社のWindowsマシンでOpenSSLコマンドを使ってみた。 バイナリは([http://www.openssl.org/related/","title":"WindowsでもOpenSSLでファイルの暗号化を"},{"content":"「幸せ」と「辛い」（からい、じゃないよ）という漢字は、たった一本の横棒だけが違い。 そこに何か大きな人生の秘密があるような気がして、それぞれの漢字の成り立ちを調べた高校生の頃。 そんな事を急に思い出した。 まあ、件の二つの漢字は全く別物だったわけだが。  ","permalink":"https://nobwak.github.io/posts/2006-10-03-%E5%B9%B8%E3%81%9B%E3%81%A8%E8%BE%9B%E3%81%84/","summary":"「幸せ」と「辛い」（からい、じゃないよ）という漢字は、たった一本の横棒だけが違い。 そこに何か大きな人生の秘密があるような気がして、それぞれの","title":"「幸せ」と「辛い」"},{"content":"名古屋の喫茶店は、いろんなおまけが付いてくる。 写真は350円のコーヒーについてきたトースト、スクランブルエッグ、パスタの写真。 トーストの代わりに、小倉、つまりアンパンの中身をホットドッグに詰め込んだものも頼めたのだが、今になってそっちにすれば良かったと思う。絵的に。  ","permalink":"https://nobwak.github.io/posts/2006-10-03-%E3%82%B3%E3%83%BC%E3%83%92%E3%83%BC350%E5%86%86/","summary":"名古屋の喫茶店は、いろんなおまけが付いてくる。 写真は350円のコーヒーについてきたトースト、スクランブルエッグ、パスタの写真。 トーストの代わ","title":"コーヒー350円"},{"content":"2chの[FreeBSDを語ろう](http://pc8.2ch.net/test/read.cgi/unix/1149936019/371-)スレで、pkg/ports管理ソフトウェアであるportutilが公開されていました。 現在は[sourceforge](http://sourceforge.jp/projects/portutil/)に場所を移しています。 使ってみたのですが、オプションはほぼportupgrade互換ですので、大変使いやすく、またシェルスクリプトなので、気軽に中身を見て動作を確認できます。 同様のツールで超有名なportupgradeは、とても便利なのですがrubyが必要です。 cvsupもrubyが必要でしたが（コメントを受けて修正:rubyはビルドの際にのみ必要）、今はcsupがありますので、rubyを使わない俺としては、出来ればportupgradeも別のにしてrubyを削除してしまいたいところ。 代替として有名なのはportmasterですが、portupgradeに比べてオプションが少ない上に、設定ファイルであるportmaster.rcのサンプルがない。 ググってみてもネット上にportmaster.rcのサンプルはなく、海外のMLで「基本はmake.confを使うのだ」「portconf使えば？」というつれない回答があったのみ。 これportsに入らないかなーとウォッチ中。  ","permalink":"https://nobwak.github.io/posts/2006-09-17-freebsd%E3%83%8D%E3%82%BF__portutill/","summary":"2chの[FreeBSDを語ろう](http://pc8.2ch.net/test/read.cgi/unix/1149936019/371","title":"FreeBSDネタ : portutil"},{"content":"技術者貧民街の住人が死亡遊戯を繰り広げる俺の職場のA君。 常日頃の鬱憤がたまった結果、社員向けのメーリングリストで管理職への文句をバリバリ送信しまくっていた。ご丁寧に大きな赤字ボールド（技術的に言うと＜h1＞＜b＞＜font color=red＞で括る）で強調して、である。 そうこうしているうちに夏休みシーズンとなったのだが、なんと彼は、ありったけの年休に加え、会社のあらゆる制度を駆使し、まるまる1ヶ月の休みを取った。 開発の職場にありがちだが、社員はごくわずか、あとは山盛りの協力会社の人間で仕事を回しており、そんな環境で社員一人が1ヶ月休んでしまうのは非常に大きい。 当然彼のチームはガタガタである。 どうにかこうにか仕事をこなして（こなしてなかったのかも。所詮別のチームだから知らんけど）、ついに週明けから彼が復帰するとなった8月も末の今日、職場にお土産が届いた。差出人はA君。実家からである。 ちょっと待て。職場はざわめいた。普通、お土産は自分で持ってくるべきじゃないのか。 思いついた誰かが社内システムの社員録をチェックすると、A君の名前はもうないのであった。 また一人。  ","permalink":"https://nobwak.github.io/posts/2006-08-31-%E9%80%81%E3%82%89%E3%82%8C%E3%81%A6%E3%81%8D%E3%81%9F%E3%81%8A%E5%9C%9F%E7%94%A3/","summary":"技術者貧民街の住人が死亡遊戯を繰り広げる俺の職場のA君。 常日頃の鬱憤がたまった結果、社員向けのメーリングリストで管理職への文句をバリバリ送信","title":"送られてきたお土産"},{"content":"FreeBSD-users-MLで面白い情報が流れていたのでメモ代わりに。 各UNIXにおいて、あるファイルを使用しているプロセスを探す代表的なコマンド  あるディスク、例えば外付けUSB HDDなどをumountしたいのに、Device busyで出来ない場合に重宝する。 fuserであればfuser -c に続けてマウントポイントを指定すれば、マウントポイント配下のファイルを開いているファイルの一覧を返してくれる。 FreeBSDではfuser,lsofともportsに用意されている(sysutils/fuser, sysutils/lsof)。 それぞれのコマンドをFreeBSDにインストール\u0026amp;試して気がついた点は、fstat、lsofは一般ユーザでも使用できるが、fuserは管理者権限が必要なこと。  ","permalink":"https://nobwak.github.io/posts/2006-08-30-%E3%81%82%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%82%92%E6%8E%A2%E3%81%99/","summary":"FreeBSD-users-MLで面白い情報が流れていたのでメモ代わりに。 各UNIXにおいて、あるファイルを使用しているプロセスを探す代表的","title":"あるファイル、ディスクを使用しているプロセスを探す"},{"content":"どうも日本の家具は無印良品に代表されるようなシンプル、というか機能性ばかり重視した物ばかりでバリエーションがない。近頃日本にやってきたIKEAに代表される北欧系の家具もそうだ。 で、俺のストライクゾーンといえば、[ポッタリーバーン](http://www.potterybarn.com/)などであるため日本では非常に肩身が狭い。 しかもポッタリーバーンは日本じゃ手に入らないうえに、いろいろ調べてみると巷の評価は「俗っぽくてしかも値段に比べて恐ろしく作りが甘い」んだそうだ。 自分が俗っぽいのは承知だが、高くて作りが甘いのは泣ける。 そんなこんなで、いつか買おうと思っている本棚がいつまで経っても買えないわけだが、ついに我慢の限界が来て無印系本棚の物色を始めた。もうここまで来たら機能性のみを重視と割り切って調べてみたら、そこに広がる本棚ワールドに驚いたのだった。  という命題を達成せんと日夜血道を上げている世界での、一つの理想が京極夏彦の書斎だそうで、ちょっと検索してみたところ出てきたのが、[これ](http://www.sankeipro.co.jp/female/komamura/workreport/w-b-zoom/030809.htm)。 たしかにすごい、かも。 印刷技術が発達する以前のような本の扱いである。 ま、俺はこのあたりで茶を濁す予定。 しかし紙魚という文字を見たら、諸星大二郎の「栞と紙魚子」がまた読みたくなってきた。この作者の描く謎世界は目眩がする。知らない人はどうぞ。 [諸星大二郎(Wikipedia)](http://ja.wikipedia.org/wiki/%E8%AB%B8%E6%98%9F%E5%A4%A7%E4%BA%8C%E9%83%8E) 「栞と紙魚子」の[説明(はてな)](http://d.hatena.ne.jp/keyword/%DB%D9%A4%C8%BB%E6%B5%FB%BB%D2) [「栞と紙魚子」アマゾンリンク(アフィリエイトなし)](http://www.amazon.co.jp/gp/product/4257902809) 関係ないけど、アメリカではIKEAを「アイケア」と発音します。この前、知らずに「日本にもアイケア出来たんだってねー」と言ったらポカンとされました。理由を説明したらイヤな顔をされました。「このアメリカかぶれが」だそうです。  ","permalink":"https://nobwak.github.io/posts/2006-08-26-%E6%9C%AC%E6%A3%9A%E3%83%AF%E3%83%BC%E3%83%AB%E3%83%89/","summary":"どうも日本の家具は無印良品に代表されるようなシンプル、というか機能性ばかり重視した物ばかりでバリエーションがない。近頃日本にやってきたIKE","title":"本棚ワールド"},{"content":"技術者貧民街である俺の職場からまた一人リタイアとなった。 「俺にはでっかい夢がある」と言って海外へ出て行ってしまった。 1年ほどあちこちで学んで、日本である資格を取るのだそうだ。 開発系とは無縁のその資格に、思うところがいろいろあった。 それはともかく、曲がりなりにも何年か米国で働いたせいか、英語学習の点でアドバイスを求められたので、米国にいたときに受けたセミナーで聞いた話をそのまましてあげた。 「英語で一番大事なものは発音で、その次に語彙が重要、グラマーは大して重要ではなく、一番軽視してよいのがアクセントである。」 ここで発音とアクセントの違いが分かりにくいが、アクセントは訛りと考えてもらえばよい。 すっごく簡単に言うと、バリバリの日本人訛りでも、相手が聞き取ってくれるようなレベルになっていれば全く問題ないと言うこと。 聞き手が何を発音しているかサッパリ分からないと、それはやっぱり発音に問題があるということになり、癖があるけどまあ分かるよ、という場合にはアクセントに問題があると言える。 発音に問題があるとどうにもならないが、アクセントに問題があっても会話すなわち意志の疎通に大きな支障は発生しない。 英語を学習する身としては、アクセントの優先度など最低で良いということになる。 ちなみに、なぜ発音が一番大事かというと、自分で発音出来るようになって初めて他の人の英語が理解出来るようになるからだと。 また、そうなることで、語彙や表現を増やしていくことが出来るからだそうだ。 ところで、俺が勤めていた会社には中国人がたくさんいたが、うち一人の話す英語はついに聞き取れず赴任が終了した。もう何とも表現のしようがない英語だった。 一方、取引会社のインド人は、rの巻き舌が強烈であった。たとえばcoreだと「コーッル」と聞こえる。 mixiか何かで見かけた一番恐ろしい例は「サルバルドン」である。実はこれ、「server is down」と言っているのだ。すごい。 そんな人たちでもアメリカで生活できているってことで。  ","permalink":"https://nobwak.github.io/posts/2006-08-06-%E3%82%B5%E3%83%AB%E3%83%90%E3%83%AB%E3%83%89%E3%83%B3%E3%81%AE%E8%A1%9D%E6%92%83/","summary":"技術者貧民街である俺の職場からまた一人リタイアとなった。 「俺にはでっかい夢がある」と言って海外へ出て行ってしまった。 1年ほどあちこちで学んで","title":"サルバルドンの衝撃"},{"content":"友人のすすめでダビンチコードを読んだ。 彼によると、平易な英語で書いてあるので平気、とのことだったので原書で読んだのだが、キリスト教や、それ以前の宗教(Paganism)にまつわる見たこともない単語が山盛りで疲れた。 思えば彼はエリート研究者で、英語もペラペラかつ英語による論文も大量に生産しているのであり、そんな彼の「簡単な英語で」なんて信用出来ないのであった。 それはともかく、この小説の舞台は多くフランス/ガリアであり、またキーワードの一つとなるのが紀元後～5,6世紀頃までのキリスト教である。 で、この頃、この地方で何があったかというと、ゲルマン人の大移動だ。学校で習った！ 当時のヨーロッパは、ゲルマン人の大移動で分断された状態にあり、また、ギリシア、ローマを経て蓄えられた情報も失われつつあった。 関係ないが「ルパン三世カリオストロの城」で出てくるお宝も、この時代に保存されたのであろう。 さておき、そんな状況を救ったのが、このころ急速に力を伸ばしたキリスト教で、各地に点在する修道院を足がかりに教化を進め、ガリアを再び文化的に統一した。 そして失われた情報を再び復活させてルネサンスへと至る。 こういった歴史の流れが面白くて、いろいろと勉強をしたのだが、今回、ダビンチコードを読んで、またちょっと違った側面が見えてきた。 もう一度、関連書籍を読んでみよう。 なぜなら！しばらく忙しかった仕事がやっとピークを越えたから！ しばらくITとか開発とか関係のない人文系の世界に浸りたかったから！ そう思ってウォクウォクしていたのに、つい昨日から次の開発プロジェクトの準備が始まった。 短い春だった。  ","permalink":"https://nobwak.github.io/posts/2006-07-19-%E3%83%AC%E3%82%AA%E3%83%8A%E3%83%AB%E3%83%89%E3%81%AE%E6%98%A5/","summary":"友人のすすめでダビンチコードを読んだ。 彼によると、平易な英語で書いてあるので平気、とのことだったので原書で読んだのだが、キリスト教や、それ以","title":"レオナルドの春"},{"content":"叶姉妹は実は男なんだと母親が主張する件について。  ","permalink":"https://nobwak.github.io/posts/2006-07-10-%E3%81%8A%E3%81%8B%E3%81%82%E3%81%95%E3%81%BE/","summary":"叶姉妹は実は男なんだと母親が主張する件について。","title":"おかあさま"},{"content":"人工無脳のアルゴリズムについて調べている。 趣味プログラムで人工無脳を書いているためだ。 概要を掴むにあたって、[「人工無脳は考える」](http://www.ycf.nantoka.com/~skato/muno/)がとても役に立ったが、半世紀以上も前に考えられた「マルコフ連鎖」ほか、古いアルゴリズムが未だに有効であることに驚いた。 それはさておき。 人工無脳の方向性には大きく分けて二つあることが分かった。 一つはもちろん、人工無脳に完璧な会話をさせること。 二つめは、完璧過ぎず、かといって的はずれでもない、微妙な会話をさせることだ。 一つめの方向性の先には、人間に対しての「実用的な」サービスが考えられる。 前出のウェブサイトで例に挙げられているのは道先案内だし、実際の例としては、恐ろしく強まった[IKEAのAnna様](http://www.ikea.com/ms/en_US/)がいらっしゃる。 Anna様について、詳しくは[こちら](http://www.chikawatanabe.com/blog/2006/06/ikeaanna.html)を参照してもらえればいいが、彼女がデビューしてから   それまで毎年２０％ずつ増えていたコールセンターへの電話が、７%上昇に抑えられた。  とのこと。また、具体的な数字は挙げられていないがe-mailが格段に減ったともあるし、何人かは結婚を申し込んだともある。 ただ、現時点において、完璧な会話を実現するのはとても無理なので、状況や役割を限定して応答を十分に作り込み、その上で想定外のアクションに対してはあらかじめ当たり障りのない数種類の応答を用意しておき、そこからランダムに選ぶといった手段が取られている。 上記に挙げた例でも、このような仕組みが利用されている。 二つめの方向性としての、微妙な応答を狙うというのは、これは主に娯楽のためである。 こちらからの問いかけに対して、人工無脳の応答はときに頓珍漢で人を笑わせる。 この点に特化するのが二つめの方向性だ。 具体的にはゲーム「どこでもいっしょ」など。 一つめの方向性でわざわざ「実用性」と書いたのはこのため。 応答生成にはそれほど高い精度は求められないが、あまりに支離滅裂だと前衛的な詩どころか暗号のようになってしまって意味を為さないし、あまりに真っ当な応答だと面白くない。 人の予想する範囲の、少し外ぐらいが笑いどころで、このあたりのさじ加減が肝である。 と、ここまで考えて、不気味の谷のことを思い出した。 Wikipediaの[不気味の谷現象の項](http://ja.wikipedia.org/wiki/%E4%B8%8D%E6%B0%97%E5%91%B3%E3%81%AE%E8%B0%B7%E7%8F%BE%E8%B1%A1)を見てもらえばわかるが、   人間のロボットに対する感情的反応は、ロボットがその外観や動作においてより人間らしく作られるようになるにつれ、より好感的、共感的になっていくが、ある時点で突然強い嫌悪感に変わる。人間の外観や動作と見分けがつかなくなると再びより強い好感に転じ、人間と同じような親近感を覚えるようになる。  というもの。 人工無脳の二つめの方向性において一番おいしい部分が、ロボット/CGから受ける視覚情報の点では不気味の谷に当たる部分であるというのは、ちょっと面白いなと思った。  ","permalink":"https://nobwak.github.io/posts/2006-07-10-%E3%83%9E%E3%83%AB%E3%82%B3%E3%83%95%E3%81%A8anna%E3%81%A8%E4%B8%8D%E6%B0%97%E5%91%B3%E3%81%AE%E8%B0%B7/","summary":"人工無脳のアルゴリズムについて調べている。 趣味プログラムで人工無脳を書いているためだ。 概要を掴むにあたって、[「人工無脳は考える」](htt","title":"マルコフとAnnaと不気味の谷"},{"content":"先日、アメリカに持っている口座の明細が届いた。 入出金も特になく、チラッと見て書類箱に放り込むのが常なのだが、今回はちょっと違った。 通常の明細のほかにもう一枚、見慣れない紙が入っていたのだ。 なんだこれとよーく見てみると。 「ホームレスのための慈善活動基金」という謎団体への、$450への支払いが滞っている旨の督促状であった。何じゃそりゃ。まったく身に覚えがない。 よく確認してみると、支払期限は5/25であった。その結果、延滞料金その他含め$600にふくれ上がっている。 クレジットカード番号がどこかから流出したのか、とか、この慈善団体の陰には謎の組織が、とか想像が一瞬にして広がったのだが、まずは確認しなければならない。 で、銀行からの回答。   全く関係ない他人への督促状が、誤ってあなたの明細に同封されてしまいました。すまん。  本文を引用すると\u0026quot;it was due to human error\u0026quot;.だそうである。 今回は何の被害もなく事は済んだが、human errorで大ダメージを食らうことだってある。 洒落にならないが、思えば在米中こんなことは茶飯事だった。 どんな時でも気は抜けないのである。 気を抜けないポイントはいくらだってあるが、その一つに各社からの明細は絶対にチェックしたほうがよい。ガス電気水道TVといったutilityを含め、銀行、クレジットカード、何かの購読、全てである。human errorでとんでもない請求されてる可能性があるから。 実際、ケーブルTVのチューナーが2台分チャージされていたとか、引っ越してるのに古いアパートメントでの請求書が続けて来ていたこともあった。 さらにまた、問い合わせの結果、上記のように担当者が大丈夫と言っても信用してはいけない。その担当者と督促を行う部署の連絡が上手くいかない可能性だってあるのだ。というか、むしろその方が多いんである。 今回のケースでは、とりあえず先月の明細と今月の明細をチェックし、不明な金額が引き落とされていないことを確認したが、来月の明細でも、同じく不明な金額が引き落とされていないことまで確認して、やっと安心できるのである。 日本でのぬるい生活の中、電撃のようにアメリカでの暮らしを思い出した一件だった。  ","permalink":"https://nobwak.github.io/posts/2006-07-02-%E5%91%AA%E7%B8%9B%E3%81%84%E3%81%BE%E3%81%A0/","summary":"先日、アメリカに持っている口座の明細が届いた。 入出金も特になく、チラッと見て書類箱に放り込むのが常なのだが、今回はちょっと違った。 通常の明細","title":"呪縛いまだ"},{"content":"世のUNIXアドミニストレーターを時に驚かせる伝説のスーパーハカー、Charlie Rootのひみつ。 -- Charles Henry Rootは、大リーグのシカゴカブスで1926年から1941年にわたって活躍した右投げのピッチャー。チームレコードである201勝を挙げている。 オハイオのミドルタウンに生まれ、St.Louis Brownsに入団し、1923年の4月18日からプロ野球人生を開始。1932年10月1日には、ワールドシリーズにおいてホームラン予告をしたベーブルースと対戦。 彼のベストシーズンは26勝15敗という成績を残した1927年。彼はカブスとして4度ワールドシリーズに出場したが、すべて負けている。 71歳、カリフォルニアのHolisterにてこの世を去る。 UNIXオペレーティングシステムにおいては、システムアカウントである\u0026quot;root\u0026quot;の名前として使用される。 [http://en.wikipedia.org/wiki/Charlie_Root](http://en.wikipedia.org/wiki/Charlie_Root)  ","permalink":"https://nobwak.github.io/posts/2006-06-06-%E3%82%B9%E3%83%BC%E3%83%91%E3%83%BC%E3%83%8F%E3%82%AB%E3%83%BCcharlie_root/","summary":"世のUNIXアドミニストレーターを時に驚かせる伝説のスーパーハカー、Charlie Rootのひみつ。 -- Charles Henry Rootは、大リーグのシカゴカブス","title":"スーパーハカーCharlie Root"},{"content":"3つのプロジェクトが重なって動いててどうにも身動きが取れない。  ","permalink":"https://nobwak.github.io/posts/2006-06-06-%E6%AD%BB%E4%BA%A1%E9%81%8A%E6%88%AF/","summary":"3つのプロジェクトが重なって動いててどうにも身動きが取れない。","title":"死亡遊戯"},{"content":"[先日](http://d.hatena.ne.jp/flageo/20060501#p1)の日記でも少し触れたportsnap。日記ではさらりと書いているが実はすごく苦労した。 最終的にあのような結論に至った訳だが、今回、別のマシンに6.0-RELEASEを入れて分かったことがある。もう少し早く気づけばよかった。 6.0-RELEASEのportsnapでは、認証が必要なPROXY越えは出来ない。 その後、いくつか修正が入ったものの、本当の意味で使えるようになったのは6.1-RELEASEから。 5系列では、5.4-RELEASE、および3/9より以前の5-STABLEも同様にPROXY越え不可。 6系列におけるphttpget.cのバージョンを下記に示す。 6.0-RELEASEのもの。 __FBSDID(\u0026quot;$FreeBSD: src/usr.sbin/portsnap/phttpget/phttpget.c,v 1.4.2.1 2005/08/15 20:24:08 cperciva Exp $\u0026quot;); 6.1-RELEASEのもの。 __FBSDID(\u0026quot;$FreeBSD: src/usr.sbin/portsnap/phttpget/phttpget.c,v 1.4.2.5 2006/03/09 17:08:41 ume Exp $\u0026quot;); [http://www.freebsd.org/cgi/cvsweb.cgi/src/usr.sbin/portsnap/phttpget/phttpget.c](http://www.freebsd.org/cgi/cvsweb.cgi/src/usr.sbin/portsnap/phttpget/phttpget.c) 上記リンクを参照すると分かるが、認証要PROXYに対応したのは1.4.2.2から。 ただしHTTP_PROXY_AUTHについて、誤った書式をもとに読み込んでいるため、正しく動かない。 ここを修正したのが1.4.2.5。 もちろん、1.4.2.5より前のphttpget.cでも上記の情報をもとに修正すれば問題なく動く。  ","permalink":"https://nobwak.github.io/posts/2006-05-15-portsnap%E3%81%AE%E7%BD%A0/","summary":"[先日](http://d.hatena.ne.jp/flageo/20060501#p1)の日記でも少し触れたportsnap。日記ではさ","title":"portsnapの罠"},{"content":"幾日か前に久しぶりに、本当に久しぶりにクラシックのコンサートに行った。 世はモーツァルト生誕250周年で、どのコンサートもモーツァルトの曲ばかり。 俺の行ったコンサートでも、モーツァルトのアイネ・クライネ・ナハトムジークが演奏された。メインは別の。 やはりリアルのホールの響きは素晴らしかったのだが、演奏を聴いていて、テンポが速く感じてしまった。 もうちょっとゆっくり弾けば、そこここのフレーズでもっと沢山の事が出来るのにもったいない。 自分の頭の中に、理想のフレーズ、理想の演奏があって、目の前の演奏とそれがことごとく異なる場合には、やっぱり結構なストレスになる。 録音ものにも自分の好みと似た演奏がない場合、自分で弾いてしまうか、そんな技術もない場合にはスコアや楽譜を眺めて頭の中で音を鳴らす他ない。 知り合いのピアニストは「人の演奏を聴くよりもスコアを見ている方が楽しい」と言っていた。 最近、彼の言ったことがよくわかるようになった。  ","permalink":"https://nobwak.github.io/posts/2006-05-15-%E5%B0%8F%E5%A4%9C%E6%9B%B2/","summary":"幾日か前に久しぶりに、本当に久しぶりにクラシックのコンサートに行った。 世はモーツァルト生誕250周年で、どのコンサートもモーツァルトの曲ばか","title":"小夜曲"},{"content":"何日か前にレ・ミゼラブルのミュージカルを観に行った。 有名な右の画像は例によってWikipediaのレ・ミゼラブルの項から。 1862年の初版に掲載されたEmile Bayardによる[コゼットの絵](http://en.wikipedia.org/wiki/Les_Mis%C3%A9rables) その昔、オペラといえば、音楽と美術、各エリアの粋を集めているために、時代の芸術の象徴と言ったらしいが、現代で言えばミュージカルもその一つなのだろうか。 それだけに、期待に胸躍らせて行ったのだが、残念な内容であった。 主人公ジャンバルジャンと、彼を追い続ける警視ジャベールの二人に多くスポットが当てられていたが、あれだけの長い内容を数時間のミュージカルで消化するには仕方がないことなのかもしれない。 その一方で、片思いの相手のために銃弾に斃れる女子エポニーヌが妙に強調されたり（最後天使のようになって出てきてびっくりした）、革命の戦士クールフェラックは、わざとらしく旗の下で死んだりする。オリジナルでは落城したカフェの中で堂々と死んでいくのに。 重点の置き方がよくわからない。 加えて、決まりの場面では決まった拍手があり、演ずるの方も観る方もお約束ばかりのミュージカルであるような印象を受けた。 残念。 これまた[Wikipedia](http://ja.wikipedia.org/wiki/%E3%83%AC%E3%83%BB%E3%83%9F%E3%82%BC%E3%83%A9%E3%83%96%E3%83%AB_%28%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%B8%E3%82%AB%E3%83%AB%29)によれば、一応は評価もあるミュージカルらしいのだが。 俺的には、革命のまっただなか、酔いつぶれて爆睡し、最後の最後、落城のときに起きて速攻で死ぬ革命戦士Aが大好きなのだが、ミュージカルではまったく触れられなかった。 しょんぼり。  ","permalink":"https://nobwak.github.io/posts/2006-05-10-misc._les_miserables/","summary":"何日か前にレ・ミゼラブルのミュージカルを観に行った。 有名な右の画像は例によってWikipediaのレ・ミゼラブルの項から。 1862年の初版に","title":"[misc.] Les Miserables"},{"content":"休みの人が多い5/1,5/2に敢えて出社し、モリモリ仕事を片付けて、「すごくヤバイ状況」が「かなりヤバイ状況」にまで改善されたのだが、連休明けたら「めちゃめちゃヤバイ状況」にいよいよ悪化している件について。  ","permalink":"https://nobwak.github.io/posts/2006-05-10-misc._%E3%81%8B%E3%82%8F%E3%82%89%E3%81%AA%E3%81%84%E6%97%A5%E5%B8%B8/","summary":"休みの人が多い5/1,5/2に敢えて出社し、モリモリ仕事を片付けて、「すごくヤバイ状況」が「かなりヤバイ状況」にまで改善されたのだが、連休明","title":"[misc.] かわらない日常"},{"content":"赤毛のアン（アニメ）を観ている。 微笑ましい内容だけに、殺伐とした状況にいる俺は楽しんでいる。 また、アンの心のインプットとアウトプットが予想を超えていて、彼女の心の中身がちょっとした小宇宙に思えて面白い。 隣の画像は[Wikipedia(英語)](http://en.wikipedia.org/wiki/Anne_of_Green_Gables)より。Donna Greenという人の絵。 で、観ている赤毛のアンは、ハウスの世界名作劇場の第5作として1979年に放映されたもの。 全50話。 50話と聞くと少しのけぞるが、30分番組であることを考えると、米国ドラマ24の1クールより少し長い程度である。 スタッフには宮崎駿、高畑勲、近藤喜文（「耳をすませば」の監督）、富野喜幸（ガンダムの人）など、錚々たるメンバーが並んでいて驚く。 ただし内容は原作にほぼ忠実に作られている。原題はAnne of Green Gables。作者はルーシー・モウド・モンゴメリ(Lucy Maud Montgomery)。 日本では村岡花子訳のものが有名である。俺もこれで読んだ。新潮文庫から出てる背表紙が赤いやつ。 この村岡花子という人が、アンを初めて日本に紹介した人なのだが、戦時中に訳され、戦後しばらく経ってから出版されたなど、ちょっとした紆余曲折があったようだ。内容は下記サイトに詳しい。 [http://club.pep.ne.jp/~r.miki/index_j.htm](http://club.pep.ne.jp/~r.miki/index_j.htm) ところで、普段はオープニングやエンディングにリストされる人の名前など見ない、というか飛ばしてしまうのだが、それぞれにかかる曲が不思議でじっくり聴いてしまい、それで気がついたのだ。 曲が不思議、というのは、なんかこう、聴いていて考え込んでしまうような曲としかいいようがない。 調べてみたところ、三善 晃という有名な作曲家が作ったらしい。別の機会に他の曲も調べてみようと思う。 あるカナダ人によると、「日本では赤毛のアンがすごく有名だと学校で習った」と言っているくらいで、本国よりも日本でのほうが有名らしい。 事実、[Wikipedia(英語)](http://en.wikipedia.org/wiki/Anne_of_Green_Gables)にもそのような記述がある。「日本でアンは国民のアイドル」- The novels have a huge national following in Japan, and Anne is an icon there. -（俺訳）　ちょっと言い過ぎか？ また話は変わるが、Green Gablesという言葉。小説を読んだときからの疑問であった。辞書を引くと切妻と出てくる。 で、その切妻がよく分からなかったのだが、Wikipediaは本当に便利だ。調べてみたところ、建築用語で屋根のタイプを表すもの。切妻とは簡単に言うと、本を開きページ面を下にして立てた形状のものを言う。 よってGreen Gablesは緑の切妻屋根。 おお。言われてみれば確かにアンの家は緑の切妻屋根である。 ちなみに、この家にはきちんとモデルがあって、これも[Wikipedia(英)](http://en.wikipedia.org/wiki/Green_Gables)の写真を参照してもらうとよく分かるが、作者のいとこ所有の農家である。アニメの家とそっくり、というかきちんと調べて描いているのがよくわかった。 そんなわけで、あと三十数話、じっくり観るのだ。 参考リンク [赤毛のアン(Wikipedia(日))](http://ja.wikipedia.org/wiki/%E8%B5%A4%E6%AF%9B%E3%81%AE%E3%82%A2%E3%83%B3) [赤毛のアン(アニメ)(Wikipedia(日))](http://ja.wikipedia.org/wiki/%E8%B5%A4%E6%AF%9B%E3%81%AE%E3%82%A2%E3%83%B3_%28%E3%82%A2%E3%83%8B%E3%83%A1%29)  ","permalink":"https://nobwak.github.io/posts/2006-05-08-anne_of_green_gables/","summary":"赤毛のアン（アニメ）を観ている。 微笑ましい内容だけに、殺伐とした状況にいる俺は楽しんでいる。 また、アンの心のインプットとアウトプットが予想を","title":"Anne of Green Gables"},{"content":"公式発表はまだだが、6.1-RがFTPにアップされていたのでバージョンアップした。 俺のいるのはRELENG_6だけど。 $ uname -a FreeBSD ***.* 6.1-STABLE FreeBSD 6.1-STABLE #0: Sun May 7 04:42:29 JST 2006 root@***.*:/usr/obj/usr/src/sys/GENERIC i386  ","permalink":"https://nobwak.github.io/posts/2006-05-08-freebsd_6.1-release/","summary":"公式発表はまだだが、6.1-RがFTPにアップされていたのでバージョンアップした。 俺のいるのはRELENG_6だけど。 $ uname -a FreeBSD ***.* 6.1-STABLE FreeBSD 6.1-STABLE #0: Sun May","title":"FreeBSD 6.1-RELEASE"},{"content":"認証の必要なPROXY越しのportsnapをしようとしても、必ず失敗する。 最初はportsnapサーバの調子が悪いだけかと思っていたのだが、自宅からだと認証は必要ないものの100%成功する。これは明らかにおかしいと調べたところ、何とか解決した。 先に結論:   portsnapで認証要のPROXYを突破するときは、下記環境変数を設定すること。 HTTP_PROXY=\u0026quot;http://URL:port/\u0026quot; HTTP_PROXY_AUTH=\u0026quot;basic:*:username:pass\u0026quot;  以下、顛末 このFreeBSDマシンは認証の必要なPROXYの内側にあるわけだが、もともと俺はfetchおよびwget用に環境変数HTTP_PROXYを\u0026quot;http://username:pass@URL:port/\u0026quot;という書式で設定しており、fetchとwgetの動作に特に問題は無かった。 が、portsnapだけが失敗するので今回調べてみた。 portsnapはファイルの取得にfetch等を使用せず、独自のphttpgetというプログラムを使用している。 詳しくは[Pipelined HTTP GET utility](http://www.daemonology.net/phttpget/)を参照。 ここを見ると、作者はphttpgetに自信を持っているようだが、使う側の率直な意見として、好きなのを使わせてくれてもと思う。 phttpgetはportsnapとともにFreeBSDに取り込まれているので、ソースは下記の場所にある。   /usr/src/usr/sbin/portsnap/phttpget/phttpget.c  中をのぞいて見ると、環境変数HTTP_PROXY内にユーザネーム、パスワードを入れる方法は受け付けない事が分かる。 HTTP_PROXY_AUTHに書かないといけない。また、\u0026quot;basic:*:username:pass\u0026quot;という書式を想定しているようだ。こういった環境変数の一覧どっかにないものか。 下記が該当部分   /usr/src/usr/sbin/portsnap/phttpget/phttpget.c __FBSDID(\u0026quot;$FreeBSD: /repoman/r/ncvs/src/usr.sbin/portsnap/phttpget/phttpget.c,v 1.4.2.5 2006/03/09 17:08:41 ume Exp $\u0026quot;); \u0026lt;snip\u0026gt; env_HTTP_PROXY_AUTH = getenv(\u0026quot;HTTP_PROXY_AUTH\u0026quot;); if ((env_HTTP_PROXY != NULL) \u0026amp;\u0026amp; (env_HTTP_PROXY_AUTH != NULL) \u0026amp;\u0026amp; (strncasecmp(env_HTTP_PROXY_AUTH, \u0026quot;basic:\u0026quot; , 6) == 0)) { /* Ignore authentication scheme */ (void) strsep(\u0026amp;env_HTTP_PROXY_AUTH, \u0026quot;:\u0026quot;); /* Ignore realm */ (void) strsep(\u0026amp;env_HTTP_PROXY_AUTH, \u0026quot;:\u0026quot;); /* Obtain username and password */ proxy_auth_user = strsep(\u0026amp;env_HTTP_PROXY_AUTH, \u0026quot;:\u0026quot;); proxy_auth_pass = env_HTTP_PROXY_AUTH; }  ","permalink":"https://nobwak.github.io/posts/2006-05-01-%E8%AA%8D%E8%A8%BC%E3%81%AE%E5%BF%85%E8%A6%81%E3%81%AAproxy%E8%B6%8A%E3%81%97%E3%81%AEportsnap/","summary":"認証の必要なPROXY越しのportsnapをしようとしても、必ず失敗する。 最初はportsnapサーバの調子が悪いだけかと思っていたのだが","title":"認証の必要なPROXY越しのportsnap"},{"content":"マウントにはmount_ext2fsコマンドを使用。 mountコマンドの-tオプションに与えるファイルシステムタイプにはext2fsが使用可能。 また、下記のportにe2fsck等が入っている。 sysutils/e2fsprogs  ","permalink":"https://nobwak.github.io/posts/2006-04-27-freebsd%E3%81%A7ext2%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92%E6%89%B1%E3%81%86/","summary":"マウントにはmount_ext2fsコマンドを使用。 mountコマンドの-tオプションに与えるファイルシステムタイプにはext2fsが使用可","title":"FreeBSDでext2ファイルシステムを扱う"},{"content":"・qemuのインストール portsからqemu, kqemu-kmodをインストール。   # portinstall -m-DWITH_KQEMU qemu # portinstall kqemu-kmod  kqemu-kmodはqemuのアクセラレータ。 アクセラレータを有効にするには、qemuをWITH_KQEMUでコンパイルしなければならない。このためportinstallの-mオプションで-DWITH_KQEMUをmakeに渡している。 ・モジュールの設定 また、下記のようにして、アクセラレータをロードすること。   # kldload kqemu (←モジュールのロード) # kldstat (←本当にロードされたか確認) Id Refs Address Size Name 1 7 xxxx xxxx Kernel 2 1 xxxx xxxx acpi.ko 3 1 xxxx xxxx warp_saver.ko 4 1 xxxx xxxx ext2fs.ko 5 1 xxxx xxxx kqemu.ko (←きちんとロードされている) #  このアクセラレータで動作がかなり速くなる。 ・ゲストOS用ディスクの確保   $ qemu-img create -f raw /usr/home/linux/debian.dsk 10G  として10Gを割り当て -fオプションで指定するのはイメージのファイルタイプ。 rawはその名の通りrawイメージ。シンプルであるため他のエミュレータにも転用可能。 ファイルシステムが\u0026quot;holes\u0026quot;に対応しているなら、例え100Gを確保しても、実際には使った分しか消費されない。 holesに対応しているファイルシステムの例として、ext2、ext3が挙げられているが、UFSも対応しているようだ。 他にはqcowというタイプがあり、QEMUイメージフォーマットと呼ばれるもの。 AES暗号化、zlibベースの圧縮に対応していて便利。 ・Debianのインストール DebianのインストールCDイメージをダウンロードし、下記のようにして起動。   $ qemu -kernel-kqemu -hda /usr/home/linux/debian.dsk -cdrom /usr/home/linux/debian.iso -boot d  -hdaでHDDイメージを指定、-cdromでCDROMイメージを指定、-bootで起動ディスクを指定。cならHDD、dならCDROMイメージから起動。 上記の例では、HDDイメージに/usr/home/linux/debian.dskを、CDROMイメージに/usr/home/linux/debian.iso を設定し、CDROMから起動している。 また、-kernel-kqemuでアクセラレータを有効にしている。 ・ゲストOSへの接続 起動したゲストOSは、ネットワーク的には表に出てこない。 ゲストOSから外へは繋げるものの、外からゲストOSには繋げない。   $ qemu -hda /usr/home/linux/debian.dsk -boot c -redir :8022::22  上記のように、-redirオプションの後で、:ホストOSのポート::ゲストOSのポート: と指定したうえでホストOSの8022へ繋げば、ゲストOSの22に接続できる。 ゲストOSがダイレクトに繋ぐ方法もあるが、別の機会に試す。 ・qemuの管理 Ctrl+Alt+2で管理モードに。詳細はそこでhelpなりなんなり。 Ctrl+Alt+1で元に戻る。 なお、アクセラレータが有効になっているかどうかは、下記のように確認する。   ・OKの場合 (qemu) info kqemu kqemu support: enabled for user and kernel code ・ちょっとダメ (qemu) info kqemu kqemu support: enabled for user code ・だめぽ (qemu) info kqemu kqemu support: disabled  ・スナップショット qemuに-snapshotオプションを付けて起動すると、起動する前の状態を保存したまま作業が可能。 いろいろ危険な事を試したい時には便利。 終了すれば作業した分は消えてしまうが、Ctrl+aの後にsを押せばいつでも反映可能。 また、管理モードでcommitコマンドを実行しても可。 問題は、差分がホストOSの/tmpディレクトリに保存されること。 あまり大量の作業をするとホストOSのパーティションが溢れるので注意。 qemu-imgで差分保存用のイメージを作成することも出来る。 ・メモリ用ディレクトリ kqemuは/dev/shm、/dev/shmがなければ/tmpに仮想OSのメモリを含む巨大なテンポラリファイルを作成する。 上記のスナップショットで使用するファイルと同様かどうかは試していないので分からないが、環境変数QEMU_TMPDIRでディレクトリを指定できる。 ・キーボード JISキーボードが効かない。 なぜかSHIFT+7で;が出る謎のキーマップ。 qemuのkオプションを試したりしたが断念。カスタムキーマップをわざわざ作るのも面倒くさいのでvncviewerで操作している。  ","permalink":"https://nobwak.github.io/posts/2006-04-27-debian%E3%82%92freebsd%E3%81%AEqemu%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/","summary":"・qemuのインストール portsからqemu, kqemu-kmodをインストール。 # portinstall -m-DWITH_KQEMU qemu # portinstall kqemu-kmod kqemu-kmodはqemuのアクセラレ","title":"DebianをFreeBSDのqemuにインストール。"},{"content":"\u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://mixi.jp/view_diary.pl?id=122060582\u0026amp;#038;owner_id=993047\u0026quot;\u0026gt;友人(mixi)\u0026lt;/a\u0026gt;が石垣島に行っているそうな。 しかも数回目らしい。羨ましい。 かくいう俺も高校生のころ石垣、西表島に行ったことがある。 飛行機から降りた瞬間、日本本土とは違った亜熱帯の気候に、同じ日本とは思えないと驚いたものだ。 沖縄にはニライカナイという伝承がある。はるか海の果てにある楽園のことだ。 沖縄にとっては、沖縄の外のどこかにニライカナイがあるのだろうが、本州から来た自分たちにとっては、八重山こそニライカナイであった。 南国特有の日差しの強さや、熱帯の色鮮やかな花々と海、土地の方の優しさが、そう思わせるのだが、三線の響きに悲しい響きがあると感じてしまうのはなぜだろうか。 当時の旅行でガイドをしてくださった方は、片腕が無かった。 ガイドの方に「戦争の話を、聞かせてください」と聞いてしまったのは、幼いゆえの無遠慮であったが、それでもガイドは「大きくなったら、教えてあげる」と優しく答えてくださった。 ニライカナイにはこんな話もある。 そこに行った人は、この世にこんな楽園があるのだろうかと思う。 そして当然、また来てみたいと思うのだが、果たして二度と行くことが出来ないのだと言う。 あれから何年も経って、俺は「大きくなった」のだが、結局八重山には行けないでいる。  ","permalink":"https://nobwak.github.io/posts/2006-04-25-%E3%83%8B%E3%83%A9%E3%82%A4%E3%82%AB%E3%83%8A%E3%82%A4%E3%81%AF%E4%BA%8C%E5%BA%A6%E8%A1%8C%E3%81%91%E3%81%AA%E3%81%84/","summary":"\u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://mixi.jp/view_diary.pl?id=122060582\u0026amp;#038;owner_","title":"ニライカナイは二度行けない"},{"content":"ある日会社のメールボックスに素敵なメールが届いた。 以下に引用する。   Subject: Linux いつもお世話になっております。 hoge部のfugaです Linuxで、 ユーザ情報（ユーザ名、パスワード、ＰＣ名etc）がいるのですが、 設定が分かりません。どうしたらいいか教えてください。 メールでお願いいたします。 よろしくお願いいたします。  素敵なポイントを下記に示す。 1.Subjectが「Linux」のみ。 ここで既に大物の片鱗を伺わせる。 2.ユーザ情報が「いる」という曖昧な聞き方。最高だ。訳がわからない。 PC名(hostnameのことか)はユーザ情報に含まれるのだろうか？ 3.「設定が分かりません」 この投げやりっぷりには美しさすら感じる。 4.「どうしたらいいか教えてください」 そもそもどうして欲しいのかが明確でない所にこの一文。緻密な計算である。 5.「メールでお願いいたします」 「俺様は忙しいので、回答方法はこちらで決めさせてもらうぜ」というオーラを感じさせるところが玄人の域に達している。 6.hoge部のfuga 俺は彼が誰かまったく知らない。 この、あたかもピタゴラスイッチのピタゴラそうち のように計算されまくったメールであるが、こういったメールを茶化すテンプレはネット上にいくつか転がっている。 それらを確認してみると、fuga氏のメールはテンプレをほぼ完璧に踏襲しているのが分かる。むしろテンプレを見ながら書いたのではないかと疑ってしまうほどだ。 そのテンプレを以下に二つ引用する。 （オリジナルの作成者が不詳であり、検索すると各所がヒットするため、リンクはせずに引用してます。） 「エスパーきぼんぬ」「氏ね」「(ﾟДﾟ)ﾊｧ？」等のレスを貰う八ヶ条。   1. ハードウェア、OSのバージョン等には一字一句触れない。 2. 大切な個人情報が漏れるとまずいので、己の行った操作、変更などは秘密。 3. エラーメッセージの類は決して書かない。「エラーが出るんです」で留める。 目の前で生じている現象をそのまま具体的に書くなどもっての外。 事実より俺様の脳内解釈を優先すべし。 4. 独り言文体で必勝。 「…なんだけど、どうすればいいのかなぁ」「何が悪いんだろう？」 5. 「急いでいます」「困っています」等、自分の都合を全面に押し出す。 6. もう試したことを得意げに指摘してくる奴には、厳しく対応。 「それが駄目だったから質問してるんです」「それはもう試してみて駄目でした」 \u0026quot;どう\u0026quot;だめだったのか、本当に実際それを行ったかどうかなんか問題じゃない。 7. ストレートに答えを書かないもったいぶったレスには、逆切れで対応。 「だからどうすればいいんですか？」「分からないなら引っ込んでろやｺﾞﾙｧ」 示されたURL等を参照するなんて態度は、回答者を甘やかすことに他ならないので 絶対に避ける。 8. 情報は小出しに。  教えてクン養成マニュアル   明日の「教えてクン」を目指す、若き戦士達に以下の文章を捧げる。 日々精進し、パソコンヲタクどもの親切を蹂躙してやれ。 １．努力を放棄すること いやしくも「教えてクン」たるもの、努力をしてはならない。 過去ログを読んだり、検索してはいけない。 「英語は苦手なので、分かりません。」は、高く評価できる。辞書片手にマニュアルやReadMeを読むなど、決してしてはならない。 他力本願と言われようと、自分で調べたり試行錯誤したりせず、他人の努力の結果を搾取するのが、正しい「教えてクン」である。 また、「もう何が悪いのかサッパリ分かりません。」と言ってふてくされるのも有効である。「サッパリ」という単語が「やる気の無さ」を効果的に表現している。 「原因を特定するには、何をすべきでしょうか？」と訊いてしまうと自己の積極性が現れてしまうので、「教えてクン」失格である。 ２．情報を開示しないこと 使用ＯＳや、機器構成などの必須の情報を知らせてはならない。 マザーボード名やＢＩＯＳのバージョンも同様だ。具体的なアプリ名やバージョンも隠蔽すべきだ。「ＤＶＤ再生ソフト」のように曖昧に表記しておけばよい。 反対に「前から欲しいと思っていた○○」とか「安売りされていた○○」　等の「どうでもいい情報」は、どんどん書いてやれ。 トラブルの場合は、状況を正確に記述してはならない。 「なんだかうまく動きません。」とか「エラーが出ます。」等と具体的なことは何も書かないことが重要である。 また、自分の試してみた事も具体的に書いてはいけない。考えられる組合せのマトリックスを作成し、状況を整理するなどもってのほかである。最悪の場合、それだけで問題が解決してしまうこともあるのだ。 「いろいろやってみたけど、動きません。」が理想的だ。 ３．答える人間のことを考えないこと 「教えてクン」は、孤高の戦士である。相手のことを考えるようでは教えてクン失格というものだ。 以下のような行動が、望ましい。 初心者であることを高らかに宣言し、初心者向けの丁寧で分かりやすい説明を強要する。専門用語の使用を禁じておくとさらに効果的である。簡潔な説明を禁じられたヲタクどもは、同じ内容を説明するのに、何倍もの労力を強いられる。 自分は努力せず、相手には多大な努力をさせることこそが「教えてクン」の真骨頂である。 マルチポストも有効である。そのＢＢＳを信用していないことを明確に示せる。「どうせ、お前らじゃ分からんだろう。」という意志表示として高く評価できる。もちろんマルチポストの非礼をあらかじめ詫びてはならない。それでは、単なる「急いでいる人」になってしまう。それは、教えてクンではない。 質問のタイトルは、「教えてください。」で良い。 タイトルを読んだだけでは「何に関する質問」か全く分からない。そういう努力は、答える人間にさせれば良いのだ。とにかく、答える人間が答えやすいように気を使って質問してはならない。傲慢で不遜な態度が必須である。 「聞きたいことがあります。」など、プロの仕事であろう。 最後に、言うまでも無いことだとは思うが、答えてくれた人達にお礼の言葉を返すなど言語道断である。 せっかく「教えてクン」を貫いてきたのに、最後にお礼を言っているようでは、臥竜点睛を欠いていると言わざるを得ない。 質問だけしておいて、後はシカトが基本である。 上級テクニックとして、「そんなことはもう試しました。」とか、「そこまで初心者じゃありません。」などと言って、回答者の神経を逆なでしておけば完璧である。 以上のことを踏まえて質問すれば、君も立派な「教えてクン」である。 ビバ！教えてクン！　教えてクンに栄光あれ！！  hoge部のfuga君に対しては、俺の持てる限りの想像力を動員して返信をした。 そのメールに対してもちろん返信はない。 最後までテンプレ通りだ。  ","permalink":"https://nobwak.github.io/posts/2006-04-19-%E5%A4%A9%E6%89%8D%E3%81%8B%E3%82%89%E3%81%AE%E3%83%A1%E3%83%BC%E3%83%AB/","summary":"ある日会社のメールボックスに素敵なメールが届いた。 以下に引用する。 Subject: Linux いつもお世話になっております。 hoge部のfugaです Linuxで、 ユ","title":"天才からのメール"},{"content":"受けるつもりで友人に勉強方法も聞き、参考書も買った情報処理試験。 申し込みすら忘れていたことに昨日気がついた俺が来ましたよ。 それはさておきFreeBSDの話。 freshportsで\u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://www.freshports.org/sysutils/desktopbsd-tools/\u0026quot;\u0026gt;sysutils/desktopbsd-tools\u0026lt;/a\u0026gt;を発見。 説明を読んでみると、   The DesktopBSD Tools are a collection of applications designed to make life easier and increase productivity. Even inexperienced users can easily perform administrative tasks efficiently, such as configuring wireless networks, accessing USB storage devices or installing and upgrading software. [俺訳] DesktopBSD Toolsは、生産性の向上と、快適楽々生活をもたらす様々なアプリケーションセットです。無線LANの設定、USBストレージへのアクセス、ソフトウェアのインストールやアップグレードといった管理者の作業を、たとえ素人ユーザであっても要領よく行うことができるでしょう。  おお。素敵だ。 さらにリンクをたどって開発元の\u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://desktopbsd.net/\u0026quot;\u0026gt;DesktopBSD\u0026lt;/a\u0026gt;のwebsiteを確認してみる。   DesktopBSDの狙いは、デスクトップユーザにとって安定しかつパワフルなOSであることです。 DesktopBSDとは、FreeBSDの安定性と、KDEの使いやすさと機能性、特別に開発されたソフトウェアのシンプルさを合体させて…  K D E の 使 い や す さ と 機 能 性 K　D　E　の はい。やめやめ。 KDE重すぎ。  ","permalink":"https://nobwak.github.io/posts/2006-04-17-desktopbsd/","summary":"受けるつもりで友人に勉強方法も聞き、参考書も買った情報処理試験。 申し込みすら忘れていたことに昨日気がついた俺が来ましたよ。 それはさておきFr","title":"DesktopBSD"},{"content":"京浜急行金沢八景駅から見える美容室の看板だが、およそ1年前から数ヶ月の間、HIAR DESINGという、なかなかのスペルミスをしていた。 本人達も気がついたのだろうか、HIARがHAIRに修正されたのだが、一方でDESINGは直らずそのままであった。 そしてまた数ヶ月が過ぎている。 いつ本人達が気がつくのか、くそ詰まらない通勤途中の数少ない楽しみである。 ちなみに本日の時点で\u0026quot;HAIR DESING\u0026quot;をググってみた結果は下記の通り \u0026quot;HAIR DESING\u0026quot; の検索結果 約 320 件中 1 - 10 件目 (0.40 秒) もしかして: \u0026quot;HAIR DESIGN\u0026quot; 検索結果から判断するに、ワールドワイドで見られる間違いのようだ。 一方で、HIAR DESINGをググってみたところ、本日の時点でヒットは0であった。  ","permalink":"https://nobwak.github.io/posts/2006-04-17-hiar_desing/","summary":"京浜急行金沢八景駅から見える美容室の看板だが、およそ1年前から数ヶ月の間、HIAR DESINGという、なかなかのスペルミスをしていた。 本人達","title":"HIAR DESING"},{"content":"「\u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://www.chikawatanabe.com/blog/2006/04/post_7.html\u0026quot;\u0026gt;シリコンバレーでは、ヒエラルキーの頂点にソフトウェア産業従事者が君臨している\u0026lt;/a\u0026gt;」という話。 ここだけ見ると、日本の技術者と比べてなんたる違いか、と我が身を嘆きたくなるかもしれないが、実はこの高給取り達は、本当に神様のような人たちである。 と、いうのも、同Blogの\u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://www.chikawatanabe.com/blog/2006/04/post_6.html\u0026quot;\u0026gt;前日の記事\u0026lt;/a\u0026gt;を見れば分かるが、給与は上がっても雇用は減っているという状況が一方にある。 つまり、超優秀な人を、各社が競うように雇っているのであり、ここで出てくる技術者というのは、その辺に掃いて捨てるほど居る技術者とは違うのだ。 俺はR\u0026amp;Dで言えばDで働く技術者であるが、俺のいるような開発部隊は軍隊に例えられる。 つまり、全員が開発目標に対して同じ認識を持ち、厳密な指揮系統の下、物量作戦的に突撃するものだからだ。 そのため、開発部隊の隊員は言ってみれば消耗品であって、コストが安ければ安いほど良い。いわゆる3kと言われるのも詮無いことだ。 俺の部隊でも正社員がこの4月で3人辞め、2人が戦線離脱した。部隊に常駐してくれている下請け会社の人員に至っては、もう何人消えていったか分からない。 それでも、日本語という障壁があるからこそ、インド、あるいは東欧等の安くて優秀な労働力から守られている方だと思う。（中国の労働力はここ最近、コストがガンガン上がってるそうな） 翻って、R\u0026amp;DのRでは、軍隊よりも一人の天才が求められる。 これも冒頭で記事を引用した同Blogのどこかに記事があったと思うが、頭一つ抜けた技術革新を生み出すのは、圧倒的な労働力ではなくて、一人の天才だから。 だからこそ、どんな大枚払ったって天才を探すのだ。 Matrixのモーフィアスやトリニティよろしくthe Oneを探すのである。 逆に超一流未満の技術者はいらない。なぜって海外に行けば安くて優秀な技術者がいくらでもいるから。 そんなわけで、シリコンバレーの給与水準を押し上げているのがRの人なのかDの人なのかはともかく、超優秀な人間であるのは間違いない。 シリコンバレーで神様のエンジニアは、本当に神様である。 いくら傍若無人に振る舞ったって、全然問題なし。当然。  ","permalink":"https://nobwak.github.io/posts/2006-04-14-%E3%82%B7%E3%83%AA%E3%82%B3%E3%83%B3%E3%83%90%E3%83%AC%E3%83%BC%E3%81%AE%E7%A5%9E%E6%A7%98%E3%81%A8the_one%E3%81%A8%E8%BB%8D%E9%9A%8A/","summary":"「\u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://www.chikawatanabe.com/blog/2006/04/post_7.htm","title":"シリコンバレーの神様とthe Oneと軍隊"},{"content":"仕事の助けにとSambaサーバをさせていたLinuxマシンが、異音を発し操作を受け付けなくなった。最終的に画面にDisk I/Oエラーを表示しまくってHDD死亡。 そんな時、CDブート出来るKnoppixがとても有り難かったという話。 もちろん、こんなこともあろうかと、仕事に使っていたデータは別ディスクに保存していたので、データ自体には問題ないのだが、そのディスクはext3でフォーマットされている。 そして周りには自由に使えるLinuxマシンがない。 このような、周りにWindowsしかない環境では、データ保存メディアはWindowsでも読めるようにしておくのが楽なのだが、今時FAT32は嫌だし、かといってLinuxでNTFSを扱うのは難しいし、と結局ext3でフォーマットしてしまったのだ。 結果、すぐには読み出せない。 [http://uranus.it.swin.edu.au/%7Ejn/linux/explore2fs.htm](http://uranus.it.swin.edu.au/%7Ejn/linux/explore2fs.htm) Windowsでext2/3が読めるこういうツールもあるのだが、最新のベータ版でUnicodeに対応したばかりなので、日本語ファイル名の扱いがやや不安だ。 ディスクが死んだのは終電間際。どうしよう。 そこで引き出しの中になぜか転がっていたKnoppix([http://unit.aist.go.jp/itri/knoppix/](http://web.archive.org/web/20140208094219/https://unit.aist.go.jp/itri/knoppix/))を発見し、壊れたLinuxマシンをブート。 ディスクが死んでようが、CDから起動するので、CDドライブ含め他の部分が生きていれば立ち上がる。 狙いのディスクをマウントし、konquerorで自分のマシン(Windows)の共有フォルダにコピー。 …しようと思ったが、いくつか読めないファイルがある。ディスクに問題はないので、文字コードのせいだろうか。 なので、/etc/smb.confを書き換え、マウントしたディスクをSambaで共有してWindowsからアクセスを試みる。 今度は問題なくコピーが終了した。 助かった…（家に帰れる…）。 Linuxやその他PC-UNIXが壊れたとき、代替機はなく、手近にあるのはWindowsマシンだけ、というシチュエーションは結構あるのだと思う。 そんな時、手っ取り早く起動して、手っ取り早くWindowsへデータの移し替えが出来るKnoppixはとても重宝する。(Sambaサーバ/クライアント付きで) 通常のLinux/PC-UNIXの起動CDにも、緊急作業用のオプションは付いているが、あくまで緊急作業用なので、普段と異なる手順を強いられる場合が多いし、そもそも余計なものをすっ飛ばして独立したシステムとして立ち上がってもらったほうが遙かに楽だ。 事実、Knoppixゆえの操作法に戸惑うことはあっても、「やりたいこと」は普通に出来た。 ということで、Knoppix、その他の同じようなシステム(総称してLiveCD)に俄然興味がわいてきた。 KnoppixはLinuxだが、BSD系ではFreeSBIE（[http://www.freesbie.org/](http://www.freesbie.org/)）がある。 そのほかにも色々ある。 ちょっと調べてみようと思った。  ","permalink":"https://nobwak.github.io/posts/2006-04-11-knoppix%E3%81%82%E3%82%8A%E3%81%8C%E3%81%A8%E3%81%86/","summary":"仕事の助けにとSambaサーバをさせていたLinuxマシンが、異音を発し操作を受け付けなくなった。最終的に画面にDisk I/Oエラーを表示し","title":"Knoppixありがとう。"},{"content":"InterlMacでWindowsを動かすBoot Campについてはあちこちでニュースとなっているが、Appleご当地の有名新聞、The Mercury Newsでは必ずしも好感する語調ではない。 一部引用。 「MacでWindowsを動かすには手間と金が必要だ。ユーザはまず2万円ほど払ってWindows XP SP2を買わなければならず、加えてインストールのために1,2時間程度の作業が必要になる。その上で、OSを切り替える度に再起動が必要だ。」と、いたって冷静。 この後、Boot CampがAppleの戦略上どのような位置を占めるかはまだ決まっていないこと、AppleとしてWindowsXPは売らないこと、といった中の人のコメントを載せ、発表を受けた株価の動き(爆上げらしい)、数名のアナリストによる複数の意見と続く所が、あちらの新聞らしいと言えばらしい。 [http://www.mercurynews.com/mld/mercurynews/14272655.htm](http://www.mercurynews.com/mld/mercurynews/14272655.htm) 以上。情報まで。  ","permalink":"https://nobwak.github.io/posts/2006-04-06-%E3%83%9E%E3%83%BC%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%BC%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%81%A8boot_camp/","summary":"InterlMacでWindowsを動かすBoot Campについてはあちこちでニュースとなっているが、Appleご当地の有名新聞、The Mercury N","title":"マーキュリーニュースとBoot Camp"},{"content":"4/1はエイプリルフール。 ネットでもほとんど悪ノリのネタばかりで、見かけるたびに「はいはいワロスワロス」と意にも介さなかったのですが、ふと舞い込んできたFreeBSD2.2.9-RELEASEのメールには騙されてしまった。 WindowsでいえばNTがバージョンアップしたと言えばいいのか、FreeBSDのこのバージョンはとても安定していたそうで、例えばYahoo(JP)も2.2系列を未だに使ってるとか、そういう背景もあって、ヘッダだけ見てコロリと信用してしまった。 メールをよく見れば分かるのに。 以下がアナウンスメール冒頭の訳。 ------- FreeBSD 2.2.9-RELEASEの公開をアナウンス出来ることは私にとって非常に喜ばしく、また素晴らしい特権であります。 本リリースは、FreeBSD開発者、ユーザ、彼らの子供たち、そしてペットたちの77ヶ月に渡る不断の働きの成果です。本リリースの特筆すべき機能は下記の通りです。  　最新のPCIグラフィックカードと2Dアクセラレータをサポートした業界の雄を実装。  詳細は下記を参照のこと。 [ftp://ftp.FreeBSD.org/pub/FreeBSD/releases/i386/2.2.9-RELEASE/README.TXT](ftp://ftp.FreeBSD.org/pub/FreeBSD/releases/i386/2.2.9-RELEASE/README.TXT) [ftp://ftp.FreeBSD.org/pub/FreeBSD/releases/i386/2.2.9-RELEASE/RELNOTES.TXT](ftp://ftp.FreeBSD.org/pub/FreeBSD/releases/i386/2.2.9-RELEASE/RELNOTES.TXT) ------- しかしFreeBSDのデーモン君はかわいくない。 [http://www.freebsd.org/](http://www.freebsd.org/)  ","permalink":"https://nobwak.github.io/posts/2006-04-03-%E3%82%A8%E3%82%A4%E3%83%97%E3%83%AA%E3%83%AB%E3%83%95%E3%83%BC%E3%83%AB%E3%81%A82.2.9/","summary":"4/1はエイプリルフール。 ネットでもほとんど悪ノリのネタばかりで、見かけるたびに「はいはいワロスワロス」と意にも介さなかったのですが、ふと舞","title":"エイプリルフールと2.2.9"},{"content":"明日は、緑色の服、あるいは緑色の何かを身につけていない限り、つねられても文句は言えない日である。 3月17日はSt. Patrick's Dayだ。 聖パトリックとは5世紀アイルランドの人でキリスト教を広め、3月17日に没したことから、この日が聖パトリックの日となった。 聖パトリックの日には、アイルランドや、世界各地のアイルランド移民がいろいろな催しを開いて祝うのだが、特にアメリカでは少し変わった風習がある。 曰く、緑色の服、あるいは緑色の何かを身につけていないと、人につねられてしまう、と。 米国で働いているとき、いきなり同僚につねられて何事かと思ったことがあった。 それはともかくとして、アメリカでは移民とともに持ち込まれた文化が少しずつ変化して残っているのが面白い。国としての歴史はそれほどでもないのだが。 また、そういった文化が俺のような余所者に対して目に付く形で現れるのは、聖パトリックの日の緑色の服のようなイベントだ。 たとえば聖パトリックの日の次に現れるイベントはイースターである。イースターといえばイースターエッグ。 具体的なイベントとしては、イースターの朝に綺麗に色を塗った卵（実際には卵形のチョコレートだが）を隠しておいて探すというもの。 起源を尋ねればキリスト教以前の女神に遡る説もあるらしいが、アメリカに限っていえばドイツ移民によって持ち込まれたもので、いい子にはイースターうさぎが卵をバスケットに入れておいてくれる、とされている。サンタイベントと同じである。 俺もイースターの日、アパートの共有庭を眺めていたら、可愛らしい子供達が手にバスケットを持ってうろうろしているのを見かけたことがある。 聖パトリックであるとか、イースターといった、起源が多種多様な文化に根ざすイベントが行われるのをみて、日本人としての俺も日本古来のそういったものを大事にしたいと思った。 直近では、えーと、春の七草？  ","permalink":"https://nobwak.github.io/posts/2006-03-16-%E7%B7%91%E3%81%AE%E6%9C%8D%E3%81%A8%E8%99%B9%E8%89%B2%E3%81%AE%E5%8D%B5/","summary":"明日は、緑色の服、あるいは緑色の何かを身につけていない限り、つねられても文句は言えない日である。 3月17日はSt. Patrick's Dayだ。 聖パトリックと","title":"緑の服と虹色の卵"},{"content":"初めてトラックバックをもらったので驚いて更新する。 トラックバックをもらったのは[12/26](http://d.hatena.ne.jp/flageo/20051226)の日記。 FreeBSD6.0-RELEASEで発生した、xl0が正常に動作しないバグに関するものだが、3/12にcvsupした6.1-PRERELEASEで修正されているので、6.1-RELEASEでは問題なく動作すると思われる。 実はあの日記を書いたすぐ後にパッチが公開され、HEADには入っていたのだが、STABLEに入れられるまでには時間がかかる。時間がかかるのですっかり忘れていた。 これで\u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://mixi.jp/show_friend.pl?id=993047\u0026quot;\u0026gt;友人(mixi)\u0026lt;/a\u0026gt;から借用していたed0のNICを返却できそう。  ","permalink":"https://nobwak.github.io/posts/2006-03-14-%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AE%E3%83%88%E3%83%A9%E3%83%83%E3%82%AF%E3%83%90%E3%83%83%E3%82%AF/","summary":"初めてトラックバックをもらったので驚いて更新する。 トラックバックをもらったのは[12/26](http://d.hatena.ne.jp/f","title":"初めてのトラックバック"},{"content":"「こんなとこ、来るんじゃなかったですよ！」 かに雑炊は、そう吐き捨てるように言った。 かに雑炊は、枯れ葉散る秋口に、系列の子会社から人攫い同然の状態で連れてこられた若手である。 今回、彼を含む社内の若手の代表者が、取締役との懇談会に出席することになった。よくある、会社のトップが最下層の意見を吸い上げようと設定する場である。 その場で、かに雑炊が爆発した。 「訳も分からずに連れてこられて、右も左も分からない場所に放り込まれて」 「こんなプロジェクト、計画立てた時点でコケてんのに、無理矢理期日に合わせようとボロボロになるまで働かされて、当然間に合わうわけないから評価も悪くて」 「負け馬の尻に乗らされて」 「こんなとこ、来るんじゃなかったですよ！」 乾杯から間もなく、また宴席が盛り上がる前の状態で、かに雑炊はこれらの事を素面で言い切った。 場が冷め切ったのは言うまでもない。取締役一行も無言である。 もうしばらくすると、4月。人事異動の季節である。 かに雑炊の未来に幸あれ。 ちなみにかに雑炊とは、以前の飲み会で酔っぱらって、かに雑炊の鍋に足を突っ込んだことからついたニックネームである。  ","permalink":"https://nobwak.github.io/posts/2006-01-24-%E3%81%82%E3%82%8B%E6%8A%80%E8%A1%93%E8%80%85%E8%B2%A7%E6%B0%91%E8%A1%97%E4%BD%8F%E4%BA%BA%E3%81%AE%E5%8F%AB%E3%81%B3/","summary":"「こんなとこ、来るんじゃなかったですよ！」 かに雑炊は、そう吐き捨てるように言った。 かに雑炊は、枯れ葉散る秋口に、系列の子会社から人攫い同然の","title":"ある技術者貧民街住人の叫び"},{"content":"今日は仕事納め。 通常であれば、適当に机の周りを掃除して、挨拶回りをして、納会して終了であるが、俺の職場ではそうは行かない。 正月休みのあるのが奇跡的な状況だが、休みがある以上、仕事を抱えたまま年越ししたくないのは誰でも同じ。 何が起こるかというと、俺も含めて皆、手持ちの仕事をとりあえず片づけるようになる。すると次の人にタスクが移る。その人も持ち越したくないので、さっさと片づけて次の人に渡す。 まるで導火線に火がついた爆弾を高速でパス回ししているようだ。 そんなわけで、職場は朝からピリピリしている。  ","permalink":"https://nobwak.github.io/posts/2005-12-28-%E4%BB%95%E4%BA%8B%E7%B4%8D%E3%82%81%E3%81%A8%E3%83%91%E3%82%B9%E5%9B%9E%E3%81%97/","summary":"今日は仕事納め。 通常であれば、適当に机の周りを掃除して、挨拶回りをして、納会して終了であるが、俺の職場ではそうは行かない。 正月休みのあるのが","title":"仕事納めとパス回し"},{"content":"本日はLinux, FreeBSDのお話。 Linuxの認定試験も終わったので、勉強のため古いノートPCに入れていたFedoraをさっぱり消した。 短い間だったが、Fedoraに対しては、新しい技術を取り込むのに貪欲なLinuxの中にあっても、特に急進的な印象を受けた。 技術をRedHatに実装する前に、とりあえずFedoraでやってみるとか、そういう意味合いがあるとかないとか、その辺はよく知らない。 とにかく、何か調べ物があってインターネットを渉猟しても、Fedoraが新しすぎて役に立たない事が何度かあった。 逆に、大手ベンダーが配布しているバイナリがそのまま使えるという、Linuxであることの恩恵を身いっぱいに享受できたのは幸せだった。 FreeBSDを使っていた頃は、わざわざLinuxエミュレーション上で各種プログラムを動かしていたから、なんだか複雑な気分になった。 で、空いた古いノートPCに何を入れるか、であるが、Solaris i386はさすがにキツイので、FreeBSDを入れることにした。 知らない間に6.0-RELEASEが出ていたので、ちょっとウキウキしながら試す。 Floppyで起動してネットワークインストール可能なのが嬉しい。特に古いPCにあっては。 Fedora Core 4は起動ディスクがCDかDVDのみ（USBストレージもあったかな）に限られる。 そしてあろうことか、ネットワークインストールの際には、プロキシ経由が不可だった。 このせいで、会社の古いPCをサーバにしたくて、Fedoraのインストールを試みたのだが叶わず、仕方なくその辺に転がっていた付録CDからVineを入れた。俺はどうもブドウのマークを受け付けないので、いつかTurbo, Suse, Gentooあたりに変えてやりたい。 それはさておき、FreeBSDの、愛嬌の「あ」の字も感じられない殺伐としたインストールメニューからネットワークインストールを始める。 …が、どうも上手く行かない。 結論から言うと6.0-RELEASEのバグが原因だった。ガックリ。 FreeBSD bugs list \u0026lt;freebsd-bugs@freebsd.org\u0026gt;で報告があった。 kern/87114 [xl] xl0 : watchdog timeout on 6.0 (regression) kern/90441 [xl] xl driver watchdog timeout in 3Com 3c575B Fast Et 症状としては、NICに3Com 3c575を使用した場合において、下記メッセージがコンソールに表示され、ネットワークが異常に遅くなる。 xl0: watchdog timeout 5.4-RELEASE以前は問題なく動いていたそうなので、6.0-RELEASEに移る際に混入 したバグのようだ。 かといって、俺みたいな人間にはバグに対して何も出来ない。 家の中を探してみても、PCカードのNICなど今更どこにもない。 仕方ないので問題が解決されるまで5-STABLEを使うことにした。 ただ、現時点でこの部分に7件のバグがある。直してくれるか甚だ不安だ。 3Comとか、IntelのNICなら間違いないと大枚はたいて買ったのだが、地雷を踏んでしまったらしい。とほほ。  ","permalink":"https://nobwak.github.io/posts/2005-12-26-3com%E3%81%A8%E5%9C%B0%E9%9B%B7/","summary":"本日はLinux, FreeBSDのお話。 Linuxの認定試験も終わったので、勉強のため古いノートPCに入れていたFedoraをさっぱり消した","title":"3Comと地雷"},{"content":"世の中はクリスマスだが、昨日用事があって出かけた横浜近辺の人出にウンザリして家で過ごす。 写真の整理やカメラをいじってみたりしていたのだが、そこでデジ一眼に久しぶりに単焦点レンズを付けてみたらこれが面白かった。 元々は、マニュアルカメラでマニュアル露出、マニュアルフォーカスで写真を撮ったりしていたのだが、デジ一眼と一緒にズームレンズも買ってからは、だらだらとボタンを押すだけの写真を撮るようになっていたので、新鮮な驚きであった。 驚きであったというか、要は忘れていただけであるが。 単焦点レンズというのは、作りが素直で写りがいい。そん代わりレンズの付け替えが面倒。これ。 開放F値が明るめ、レンズも軽い。安い。これ最強。 しかしレンズ一本で行くと焦点距離上、被写体がフレームに入りきらなかったり、小さくなり過ぎたりする諸刃の剣。 それはともかくとして、絞り1.4のピントの薄さとか、どうやって被写体をフレームに収めようと四苦八苦するとか、いろいろ思い出しました。 とりあえずトトロのヌイグルミを激写。 \u0026lt;a href=\u0026quot;http://f.hatena.ne.jp/flageo/20051224205012\u0026quot; class=\u0026quot;hatena-fotolife\u0026quot; target=\u0026quot;_blank\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://cdn-ak.f.st-hatena.com/images/fotolife/f/flageo/20051224/20051224205012_m.gif\u0026quot; alt=\u0026quot;f:id:flageo:20051224205012j:image:small\u0026quot; title=\u0026quot;f:id:flageo:20051224205012j:image:small\u0026quot; class=\u0026quot;hatena-fotolife\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt;  ","permalink":"https://nobwak.github.io/posts/2005-12-25-%E5%8D%98%E7%84%A6%E7%82%B9%E3%82%B9%E3%83%86%E3%82%AD%E3%83%BC%E3%83%83/","summary":"世の中はクリスマスだが、昨日用事があって出かけた横浜近辺の人出にウンザリして家で過ごす。 写真の整理やカメラをいじってみたりしていたのだが、そ","title":"単焦点ステキーッ"},{"content":"影が日に日に長くなって、冬至がやってくる。 北半球では一年で一番昼が短くなる日で、ゆず湯に入り、カボチャを食べると風邪をひかないと言われる。(\u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://ja.wikipedia.org/wiki/%E5%86%AC%E8%87%B3\u0026quot;\u0026gt;wikipedia\u0026lt;/a\u0026gt;) アメリカにいたときは、まったくそんな事など考えなかったが、あちらでは割とそういう古くからの慣習を大事にするところがあって、その影響か何かと日本の色々なことを調べるようになった。 \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://ja.wikipedia.org/wiki/%E4%BA%AC%E6%A5%B5%E5%A4%8F%E5%BD%A6\u0026quot;\u0026gt;京極夏彦\u0026lt;/a\u0026gt;の小説や、今市子の\u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://www.amazon.co.jp/exec/obidos/ASIN/4257720891\u0026quot;\u0026gt;百鬼夜行抄\u0026lt;/a\u0026gt;などでしばしば語られる、今の日本ではあまり顧みられないそういった慣習だが、アメリカでは各民族固有のしきたりが未だに守られているようだ。 ところで、在米時代の同僚（女性）の知り合いの話。 腹にはナイフのものと思われる無数の傷痕。胸にはHard to KILL（ちょっとやそっとじゃこの俺は殺せないぜ）というタトゥー。 その友人も最初はビビったのだが、喋ってみるとこれが紳士であった。 いろいろ話を聞いてみると、なんでも昔は相当の暴れん坊で、いろいろと無茶をしたらしい。その無茶に関しては、洒落にならなさそうなので俺はあまり聞きたくないし、その友人も聞かなかった。 そんなハードコアなバッドガイが、ある朝目覚めたら「ボクは生まれ変わっていたんだ。」そうだ。 その日を境にヤクザ稼業から足を洗ってカタギの職に就き、イキナリまっとうな人間へ。 それどころか娘にエンジェルと名付けるくらい信心深くなってしまった。 その友人も言っていたが、話した感じでは、昔の話が信じられないくらい温厚だったそうだ。 これは一種の神秘体験、宗教体験が彼に訪れたのだと見ることができるが、その結果として、エンジェルちゃんという名前に現れた通り、それをもたらした土壌というか、精神的バックグラウンドがあってこそなのだとも思う。 そんな事を考えつつ、ふと、冬至は減りゆく昼の時間が底をうって、夏至に向かう生まれ変わりの日なのだと思った。  ","permalink":"https://nobwak.github.io/posts/2005-12-22-%E5%86%AC%E8%87%B3%E3%81%A8%E7%A5%9E%E7%A7%98%E4%BD%93%E9%A8%93/","summary":"影が日に日に長くなって、冬至がやってくる。 北半球では一年で一番昼が短くなる日で、ゆず湯に入り、カボチャを食べると風邪をひかないと言われる。(","title":"冬至と神秘体験"},{"content":"いろいろ差別にうるさい彼の国では、近年メリークリスマスと言うのは出来るだけ避けて、Happy Holidayと言うようになっています。 この頃になると、企業としても個人としてもクリスマスカードが届き始めますが、大抵は新年の挨拶も一緒になってたりします。クリスマスから年明けまでガバっと休んじゃう人が多いからですな。 昨今では\u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://www.americangreetings.com/category.pd?path=23412\u0026quot;\u0026gt;こんな風\u0026lt;/a\u0026gt;にインターネット経由でクリスマスカードを送る事も出来るようになってます。 皆様ご友人にぜひ送ってみてはいかがでしょう。 LPICのレベル2通りました。 会社支給の報奨金で何買おうか必死で考え中。 サンタさんありがとう。  ","permalink":"https://nobwak.github.io/posts/2005-12-19-happy_holiday/","summary":"いろいろ差別にうるさい彼の国では、近年メリークリスマスと言うのは出来るだけ避けて、Happy Holidayと言うようになっています。 この頃に","title":"Happy Holiday"},{"content":"片頭痛に関する情報源。 頭痛大学 [http://homepage2.nifty.com/uoh/index.html](http://homepage2.nifty.com/uoh/index.html) 日本頭痛学会 [http://www.jhsnet.org/](http://www.jhsnet.org/) 適当にググって上位に来たやつ(英語) HealingWell.com [http://www.healingwell.com/migraines/](http://www.healingwell.com/migraines/) マッキンリーヘルスセンター http://www.mckinley.uiuc.edu/Handouts/migraine_headache.html 俺が今常用しているのは\u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;http://www.tylenol.com/\u0026quot;\u0026gt;米国版タイレノール\u0026lt;/a\u0026gt;。エクストラストロングとラベルに書いてあるちょっと怖いヤツ。 昔使っていたバファリンは優しさが半分じゃなかったので止した。 でも、タイレノールの主成分アセトアミノフェンは、片頭痛にはあまり効かないとされている。 確かに片頭痛が発症してから飲んでも大して効かないのだった。 今回はタイミングを逸して週末をまるまる潰す羽目になった。 無駄。  ","permalink":"https://nobwak.github.io/posts/2005-12-18-%E7%89%87%E9%A0%AD%E7%97%9B/","summary":"片頭痛に関する情報源。 頭痛大学 [http://homepage2.nifty.com/uoh/index.html](http://homepage2.nifty.com/uoh/index.html) 日本頭痛学会 [http://www.jhsnet.org/](http://www.jhsnet.org/) 適当にググって上位に来たやつ(英語) HealingWell.com [http://www.healingwell.com/migraines/](http://www.healingwell.com/migraines/) マッキンリーヘルスセンター http://www.mckinley.uiuc.edu/Handouts/migraine_headache.html 俺が今常用しているのは\u0026l","title":"片頭痛"},{"content":"遅くに帰宅の後、作り置きしておいたカレーを食べながら、次に受けるLPICレベル2,202試験の範囲とそれぞれの重要度を公式ページで確認する。 試験名は全部取るまで伏せるとか書いたような気がするけど、もう面倒なので忘れる。 この試験は二つ試験を受けて始めて認定となるシステムで、これと対になる試験は先週末にクリア済み。 そちらを受けた感触だと、今使ってる書籍があんまり役に立たないので、公式を改めて確認する気になった。innd（ニュースサーバ）とか出てきて泣ける。今時inndて。 何の気無しに、受験は二週間後と決めてしまったのだけど、ちょっとまずいかもしれない。 でもこの試験は4個め（レベル1で二つ受験済み）で慣れつつあったし、少々プレッシャーがあって良いのかも。 写真は小樽かどっかの宿で食べたグラタン。本文と一切関係なし。  ","permalink":"https://nobwak.github.io/posts/2005-12-05-%E6%97%A9%E3%81%BE%E3%81%A3%E3%81%9F/","summary":"遅くに帰宅の後、作り置きしておいたカレーを食べながら、次に受けるLPICレベル2,202試験の範囲とそれぞれの重要度を公式ページで確認する。","title":"早まった？"},{"content":"道を歩いているとどこからか猫の鳴き声がした。 見上げると塀の上に猫が。 道行く人が注視しても平気でニャーニャー鳴いていた。 どうしたんだろう。  ","permalink":"https://nobwak.github.io/posts/2005-12-04-a_watchcat/","summary":"道を歩いているとどこからか猫の鳴き声がした。 見上げると塀の上に猫が。 道行く人が注視しても平気でニャーニャー鳴いていた。 どうしたんだろう。","title":"a watchcat"},{"content":"某試験の三つめを本日受けて、無事通過。 あと一つでこの試験も終了だから、ゴールがやっと見えてきてホッとしている。 会場は[アールプロメトリック](http://www.prometric-jp.com/)のもので、俺の受けているような技術系試験だけではなく、さまざまな分野の試験も行っている。それだけに、いろんな人がいてちょっと面白い。大抵は俺と同じような者ばかりだが、今日は中年と思われる女性を見かけた。前回はとても若い女性。前々回はかなり年配の男性。 何の試験を受けるのだろう、とあれこれ考えたりする。 そういった様々な人々と、試験直前に定型の説明や注意事項を一緒に聞いて別室に移るのだが、後は当然ながら別行動で、各々のブースでそれぞれの試験をこなし、各自まばらに退室していく。 始まりだけ一緒で、後は各人各様、という一連の流れが、俺にはなぜだか妙に面白く感じられるのと、会場のある鄙びた雑居ビルや、会場内の、おそらく緊張した先人達の汗が染みこんだと思われる、ちょっと触感の粘っこいマウスが相まって、この試験は何だか俺の中で存在感を増してきているのであった。 あと一回で、この試験会場に来ることも無くなるなと思うと、ちょっと寂しい気もするなと、桜木町をブラブラして帰るとメールが一通、試験主催団体から来ていて、そのサブジェクトが   「受験ありとうございした」  おそらくエンコーディングのミスであろうが、外国人の喋るカタコトの日本語（例「アリガトマシター」）のようなメールを見て、ますます試験が名残惜しくなったのであった。 でも試験は落とさん。  ","permalink":"https://nobwak.github.io/posts/2005-12-03-%E5%8F%97%E9%A8%93%E3%81%82%E3%82%8A%E3%81%A8%E3%81%86%E3%81%94%E3%81%96%E3%81%84%E3%81%97%E3%81%9F/","summary":"某試験の三つめを本日受けて、無事通過。 あと一つでこの試験も終了だから、ゴールがやっと見えてきてホッとしている。 会場は[アールプロメトリック]","title":"「受験ありとうございした」"},{"content":"世はすっかりクリスマス一色だが、俺は今、クリスマスなど全く関係ない、死屍累々たる大規模開発の渦中で働いている。皆、年は越せるのかと思ってる。俺も思ってる。 職場の中はやつれた同僚と、どこから攫われてきたも分からぬ、やる気のまったく感じられない契約社員達ばかりで、かなり背筋の寒くなるような進捗の遅れの中、楽しみといえば窓から見える海ぐらいのものだ。 もっとも、その海だって、ちょっと見慣れれば、逆に「何が悲しくてこんな僻地に」と落ち込む要因になる。 そんな死亡遊戯さながらの職場にあって、ここ一ヶ月ほど、ちょっと面白いことが起こっている。 事の起こりは、壁のボードに付いている磁石。掲示板に紙とかを貼り付ける、丸いやつだ。 ある深夜、ヘロヘロになりながらボードの前を通った俺は、使う者など誰もおらず、ただうち捨てられているボードに、無造作に張り付いているそれら磁石を、何の気なしに矢印の形に並べ替えておいた。 しばらく並べ替えた事すら忘れていたのだが、ある日気が付くと、磁石がリンゴの形に並べ変えられているではないか。 それで面白くなって、数日置いて今度は魚の形に変えてみた。すると一、二週間経ったところで、魚の向きが変わっている。 こんな事が起こるとは思いもしなかった。まるで家庭の冷蔵庫の扉だ。 ちょっと嬉しい反面、複雑な気分でもあった。 よく、「冷蔵庫の扉は家族の掲示板」などと言ったりするが、あれはあくまで家族という結びつきが前提のものだ。 おそらく口もきいたことの無いような「彼」と俺の間にそんな結びつきなどあるわけもない。 そもそも、人海戦術上等な職場では、沢山人がいて、入れ替わりも激しくて、もう誰が誰だか分からない。隣のグループの事など、まったく構っている余裕なんてない。 そんな希薄な繋がりの職場で、微妙な距離、微妙な間隔でやりとりされる、磁石の並び替えに、居心地の悪さも感じていたのだ。 ところが今日、ボードの前を通ると、魚はいつのまにかクリスマスツリーに変わっていた。 限られた磁石を懸命に使って作られた不細工なツリーを見ながら、「彼」は俺みたいな嫌味な奴と違って、いい奴なのかもしれないと思った。  ","permalink":"https://nobwak.github.io/posts/2005-11-28-%E5%86%B7%E8%94%B5%E5%BA%AB%E3%81%AE%E6%89%89%E3%81%A8%E3%82%AF%E3%83%AA%E3%82%B9%E3%83%9E%E3%82%B9%E3%83%84%E3%83%AA%E3%83%BC/","summary":"世はすっかりクリスマス一色だが、俺は今、クリスマスなど全く関係ない、死屍累々たる大規模開発の渦中で働いている。皆、年は越せるのかと思ってる。","title":"冷蔵庫の扉とクリスマスツリー"},{"content":"\u0026lt;a href=\u0026quot;http://f.hatena.ne.jp/flageo/20051127134239\u0026quot; class=\u0026quot;hatena-fotolife\u0026quot; target=\u0026quot;_blank\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://cdn-ak.f.st-hatena.com/images/fotolife/f/flageo/20051127/20051127134239.jpg\u0026quot; alt=\u0026quot;f:id:flageo:20051127134239j:image\u0026quot; title=\u0026quot;f:id:flageo:20051127134239j:image\u0026quot; class=\u0026quot;hatena-fotolife\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt;　一ヶ月に一度のペースで通っているある場所。 いつもは電車で行っているその場所へ、ふと自転車で行ってみようと思い立つ。 海を見ながら、のんびり走って目的地に到着。 \u0026lt;a href=\u0026quot;http://f.hatena.ne.jp/flageo/20051127142008\u0026quot; class=\u0026quot;hatena-fotolife\u0026quot; target=\u0026quot;_blank\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://cdn-ak.f.st-hatena.com/images/fotolife/f/flageo/20051127/20051127142008_m.gif\u0026quot; alt=\u0026quot;f:id:flageo:20051127142008j:image:small\u0026quot; title=\u0026quot;f:id:flageo:20051127142008j:image:small\u0026quot; class=\u0026quot;hatena-fotolife\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; およそ40分。道を探しながら適当に走った事を差し引けば、意外にも電車で来るのとそう変わらないのは発見だった。 今日は特に用事もないので、猫と海をしばらく眺めて帰路へ。 \u0026lt;a href=\u0026quot;http://f.hatena.ne.jp/flageo/20051127141301\u0026quot; class=\u0026quot;hatena-fotolife\u0026quot; target=\u0026quot;_blank\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://cdn-ak.f.st-hatena.com/images/fotolife/f/flageo/20051127/20051127141301_m.gif\u0026quot; alt=\u0026quot;f:id:flageo:20051127141301j:image:small\u0026quot; title=\u0026quot;f:id:flageo:20051127141301j:image:small\u0026quot; class=\u0026quot;hatena-fotolife\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 家に着いて試験勉強を少しする。 現実逃避終了。 お尻痛い。  ","permalink":"https://nobwak.github.io/posts/2005-11-27-%E9%80%83%E9%81%BF%E8%A1%8C/","summary":"\u0026lt;a href=\u0026quot;http://f.hatena.ne.jp/flageo/20051127134239\u0026quot; class=\u0026quot;hatena-fotolife\u0026quot; target=\u0026quot;_blank\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://cdn-ak.f.st-hatena.com/images/fotolife/f/flageo/20051127/20051127134239.jpg\u0026quot; alt=\u0026quot;f:id:flageo:20051127134239j:image\u0026quot; title=\u0026quot;f:id:flageo:20051127134239j:image\u0026quot; class=\u0026quot;hatena-fotolife\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; 一ヶ月に一度のペースで通っているある場所。 いつもは電車で行っているその場所へ、ふと自転車で行ってみようと思い立つ。 海を見な","title":"逃避行"},{"content":"いつものように駅まで走り、いつものように電車に駆け込む。 普段と変わらない毎日のはずが、なにかが違う。 どことなく居心地の悪い違和感を感じながら、ふと気が付く。 ベルトしてくるの忘れた。 やっぱり、すっごく疲れてる。  ","permalink":"https://nobwak.github.io/posts/2005-11-24-%E9%81%95%E5%92%8C%E6%84%9F/","summary":"いつものように駅まで走り、いつものように電車に駆け込む。 普段と変わらない毎日のはずが、なにかが違う。 どことなく居心地の悪い違和感を感じながら","title":"違和感"},{"content":"日曜の昼、どうにも眠くて横になり、気が付くと夜中の12時過ぎ。 寝ぼけた頭で「明日仕事だから早く寝ないとな」と思って二度寝するともう朝だった。 寝過ぎて片頭痛発症のおまけ付き。 出がけに薬を口に放り込んで出社して、今はボーッとしながら昼休みの最中だ。 パスタ食べたい。 嫌な週のスタートだが、そう悪いことばかりでもなく、先々週末には某認定試験にさらに一つ通過して、一区切りが付いた。あと二つである。 種々の事情により、12月から試験が変わるらしく、一つ\\15000、合計\\30,000という受検費用の高さもあって、かなりのプレッシャーだったのだけど何とかなった。 厄介払いをするように、問題集をAmazonのマーケットプレイスで売り払い、残る試験用の問題集を新たに購入する。 認定ゲットだけが目的なので、出来れば余計な時間をかけず合格点スレスレで突破したいところ。 残り二つの試験も来年の4月辺りで変わるらしいのだが、今回は期限に関してそれほど気にしなくてもよさそう。 そしておもむろにアップルのiMac G5欲しい！  ","permalink":"https://nobwak.github.io/posts/2005-11-21-%E6%B6%88%E3%81%88%E3%81%9F%E6%97%A5%E6%9B%9C%E6%97%A5/","summary":"日曜の昼、どうにも眠くて横になり、気が付くと夜中の12時過ぎ。 寝ぼけた頭で「明日仕事だから早く寝ないとな」と思って二度寝するともう朝だった。","title":"消えた日曜日"},{"content":"本日某技術系ベンダー試験の一つめを受けて無事通過。 ベンダー系は受験料が冗談じゃないくらい高いので、プレッシャーもなかなかのものである。 ところで、技術系試験に思うのは、これだけネットが発達している以上、いちいち暗記しなきゃいけない知識は減っていくはず。とくにUNIX系なんか、オンラインマニュアルが充実してるんだから、分からない事があっても、ネットにすら繋がずに調べられる。 問題集の、今まで一度も使ったことのないクソマニアックなオプションとか、IRQ、IOポートの表を眺めていると、すっごく腹が立ってくるのだった。 でも、そういう文句は、試験に余裕で受かって認定を取れた人だけが言えるので、あと3つの試験を突破するまでは、現在格闘中の認定資格名は黙っておきます。  ","permalink":"https://nobwak.github.io/posts/2005-11-05-%E9%80%9A%E5%B8%B8%E3%83%91%E3%83%A9%E3%83%AC%E3%83%AB%E3%83%9D%E3%83%BC%E3%83%88%E3%81%AFirq%E3%81%AE%E4%BD%95%E7%95%AA%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%BE%E3%81%99%E3%81%8B/","summary":"本日某技術系ベンダー試験の一つめを受けて無事通過。 ベンダー系は受験料が冗談じゃないくらい高いので、プレッシャーもなかなかのものである。 ところ","title":"通常、パラレルポートはIRQの何番を使用しますか？"},{"content":"仕事がとても忙しい。たまの休みも偏頭痛で潰れたり、息継ぎの出来ない日々が続いて疲れ気味だ。 そしてこの頃、会社の資料に現れる「案」という漢字が「笑」に見えることがある。 例えば。 ■2006年 第一四半期スケジュール（笑） たぶん、すっごく疲れてる。  ","permalink":"https://nobwak.github.io/posts/2005-10-27-%E6%A1%88%E3%81%A8%E7%AC%91/","summary":"仕事がとても忙しい。たまの休みも偏頭痛で潰れたり、息継ぎの出来ない日々が続いて疲れ気味だ。 そしてこの頃、会社の資料に現れる「案」という漢字が","title":"案と笑"},{"content":"[http://www.amazon.co.jp/exec/obidos/ASIN/B00005N0V9/](http://www.amazon.co.jp/exec/obidos/ASIN/B00005N0V9/) 引っ越し荷物から出てきたGクレフのCD、ペルメル。 最近、聴いてます。 バイオリン、チェロ、ピアノのトリオで無茶な演奏をする人たち。 特に無茶なのがモンティのチャルダッシュ。 チャルダッシュとは、ハンガリー音楽の一ジャンルで、バイオリン曲としてはモンティのチャルダッシュがすごく有名である。形式は遅いパートと早いパートからなっていて、遅いパートで哀愁ただよう演歌を歌い上げ、早いパートは突っ走る。民族音楽であり演歌である。 このように、もともとこってりした曲なのだが、この人たちのチャルダッシュは過剰に濃厚だ。 なんてったって、いきなり「ぬおりゃー」という野太い男の声から始まって呆然とすると、続いて始まる粘着質なバイオリンの音色に自失しそうになる。 「俺はもっと弾きたいんだーッ！」という荒ぶる魂が一小節一小節にミッチリ詰まってるのだ。 バイオリンを習っていた学生時代、町のひなびた中古CD屋で見つけて何となく聴いたら、いたくショックを受けた覚えがある。 と、同時に吹っ切れもした。こんな風に、情念全開で弾いてもいいんだと。 まあ、クラシック的にはダメなわけですが。 どちらにしても、こういった既成概念が崩れるのはカタルシスを感じる。 久々にそういうこともないかなと、チャルダッシュを聴いているこの頃だが、朝から晩まで死亡遊戯状態の仕事ばかりで、全くそんな気配はないのであった。  ","permalink":"https://nobwak.github.io/posts/2005-10-17-%E3%83%81%E3%83%A3%E3%83%AB%E3%83%80%E3%83%83%E3%82%B7%E3%83%A5%E3%81%A7%E3%82%AB%E3%82%BF%E3%83%AB%E3%82%B7%E3%82%B9%E4%B9%9E%E3%81%84/","summary":"[http://www.amazon.co.jp/exec/obidos/ASIN/B00005N0V9/](http://www.amazon.co.jp/exec/obidos/ASIN/B00005N0V9/) 引っ越し荷物から出てきたGクレフのCD、ペルメル。 最近、聴いてます。 バイオリン、チェロ、ピアノのトリオで無茶な演奏をする人たち。 特に無茶な","title":"チャルダッシュでカタルシス乞い"},{"content":"通勤途中に何かがふっと匂って、それがキンモクセイだと理解するのに数秒。 脳内で匂いを感じる部分は、記憶を司る海馬の近くにあるから、とかその他さまざまな理由から言われている通り、匂いは過去の沢山の事を思い出させます。 甘ったるいキンモクセイの香りに結びつけられた記憶を浮かべつつ、秋だなあと思っていると、今度は混雑した電車の中で漂ってきた防虫剤の臭いに思い切りむせた、そんな日。  ","permalink":"https://nobwak.github.io/posts/2005-10-03-%E8%A1%A3%E6%9B%BF%E3%81%88/","summary":"通勤途中に何かがふっと匂って、それがキンモクセイだと理解するのに数秒。 脳内で匂いを感じる部分は、記憶を司る海馬の近くにあるから、とかその他さ","title":"衣替え"},{"content":"Microsoftのライセンスは超高い。高すぎる。じゃあLinux/Unix環境へ…。 と、IT管理者なら誰しも一度は考える。でも色々考えると心が折れてしまうのだ。 が、インドネシアの「MS Certified ProfessionalでありながらLinuxを愛してしまった男」が、それをやってのけた。 彼がその顛末をFedora Core のメーリングリストに投稿していたので、簡単に訳してみた。 原文は下記。 http://linux2.arinet.org/index.php?option=com_content\u0026amp;task=view\u0026amp;id=110\u0026amp;Itemid=2 当然のことながら、思いつきで訳したので、訳の正確さについては一切責任を持ちません。 必要なら原文をあたって下さい。 -------------------------- ■My Experience and Strategy to Migrate MS Windows to Linux この文章は、MS Windowsから、OpenOffice、Sambaサーバ、dosemu(DOSエミュレータ）を使用したLinuxへの移行計画を立案する際に、何らかの助けになることを目的にしている。 ■背景: もっともっと経済的な別の方法があるというのに、なぜ数億ルピア（数百万円）も使わなければならないのか。 激しい企業競争の時代において、あらゆる効率化が必要だと経営者は理解すべき時だ。　そして周知のように、マイクロソフト・インドネシアとBSAは、ここ数ヶ月、適切なライセンスを持たずに彼らのソフトウェアを使用している企業を追跡しようと躍起になっている。 確かに、彼らがcopyrightを持っている以上、そのような行動は理解できるし、責めることも出来ない。　だが、MS Office のベーシックタイプ（Word, Excel, Powerpointのみバンドルされているもの）は、1ライセンス約150ドル。　つまり100台のPCがある会社は、1,500ドル払わなければならないわけだ。　これに加えて、1台あたり140ドルがOS用として（WinXP)必要になる。　最終的にはPC1台あたり300ドルかかることになる。　100台のPCとなれば30,000ドルだ。　100台から300台のPCを所有している会社であれば、ライセンスだけで数十万ドルかかることもあるわけだ。 このように、費用を考えるとWindowsからLinuxに移行したくなるが、これは易しいことではない。　企業はなお、移行のコストとリターンを検討しなければならない。　それゆえ、一般的に移行計画は下記の点を含むべきだ。 PCの使用方法を分析すること。　我々は、どのプログラムが使用されていて、どのPCが管理業務にのみ-例えばワープロや表計算等-使用されているかをチェックしなければならない。　また、業務で使用しているプログラムが、どのプラットフォームの上で動作しており、どのような言語で書かれているか、またそのプログラムがインストールされているPCはどれか、等をチェックしなければならない。 集められたデータを元にして、初めて移行の展開範囲を分析することになる。　この分析であらゆる移行方法の可能性を探るのだ。  上記シナリオに基づき、さらに経営陣に報告すべきコストを見積もる。　もちろん、理想ではすべてのPCおよびアプリケーションを移行したいが、私の経験上、それはまだ不可能だ。　企業の一部業務は既にマイクロソフトやプロプライエタリな製品によって囲い込みされているからだ。　悲しいがこれは事実だ。 ■ケーススタディ: このような例を考えてみよう。 ある中規模の広告代理店が、およそ300台のPCを各地にある支店に配置している。 近頃、マイクロソフト/インドネシアよりソフトウェアライセンスの監査をせき立てる文書を受け取り、経営陣は動揺している。　簡単に調べたところ、PC1台あたりWinXPが140ドル、MS Officeが150ドルかかると分かった。　最終的に300台のPCでは約9,000ドルと、サーバおよびクライアントライセンスとして、さらに1,000ドルほど必要になる。 さて。上記の分析方法によって、経営陣は下記のデータを得た。  ここで初めて我々は「何を移行できるか」という点で検討することが出来る。　今回は時間に限りがあるため、大きな問題もなく移行可能なPCのみ対象とすべきである。 と、いうことで、VBアプリケーションが動いているPCについては忘れよう。 Officeだけを使用しているPCについては、すぐにでも移行が可能だが、PCスペックが様々であるため、下記のように、細かく移行方法を設定しなければならない。  Clipperアプリケーションを使用しているPCについては、Sambaによるファイルサーバと、dosemu(DOSエミュレータ)によって、Clipperアプリケーションを疑似することが出来る。 (訳者注: Clipperは日本ではあまりなじみがない[と思われる]ので詳細は割愛) 上記の方法により、この会社がソフトウェアライセンス費用に関して、相当量の効率化を図れる望みはある。　だが、私の経験上、移行を成功させるには、さらなる分析、検討が必要である。　それは下記の通りだ。 1. dosemuやSamba上で動くclipperアプリケーションの、さらなる総合的な互換性テスト。 いかにdosemuがDOS環境を疑似できようとも、所詮は疑似であり、私は様々なclipperアプリケーションに関して、100%の互換性を保証出来ないからだ。 2. Officeアプリに関しても同様だ。　OpenOfficeに移行出来ないような、MS Office独自の機能がないかどうか。　OpenOffice 2 beta1は非常に高いレベルでMS Officeと互換性があるが、まだ完全ではない。　もし互換性に関して問題が発生した場合には、その機能をOpenOffice上で作り直すことで解決出来るか、あるいは全く出来ないかを判断しなければならない。 3. もう一つ重要なことは、移行するすべてのファイルをバックアップすることだ。　例え問題が発生してファイルが破壊されても、ユーザはまだオリジナルを持っている。　私はこのような状況に陥ったことがある。　あるユーザがExcelファイルをOOcalcにインポートしたところ全く問題がなかったが、何度か使用しているうちに、突然ファイルを開けなくなったのだ。 4. 最後に、おそらくこれが一番重要なことだろうが、ユーザに「なぜ我々はLinuxに移行するのか」良く理解してもらうことだ。　ユーザが受け入れられる説明をしっかりと与え、移行に対して協力的になってもらうのだ。　そして、新しい環境、新しいプログラムのもと、ユーザが助けを必要とした時には、必ずそこにいること。　新旧両者の違いについて、分かりやすい説明をすること。例えば、「MS Excelではこのようにして印刷をするが、OOcalcではこのようにする」など。　そうすることで、ユーザ達は両者の同じようなところ、また違うところがハッキリと分かるようになるのだ。 以上が、私があなた方にお教えできるMS Windows環境からGNU/Linuxを基本にしたオープンソース環境への移行だ。 ポイントは、下記の一点。 論理的に明らかな解決法があるのに、なぜ数百万ルピアのお金をバラ巻かなければならないのだ？ 情報までに、公には知られておらず、まったく目立ってはいないが、何社かインドネシアの大企業がLinuxへ移行している。　静かながらオープンソースの潮流はインドネシアで受け入れられ、成長している。 この記事が、ライセンス費用に関して何か解決策を求める人々の助けになることを願っている。 v.1.0 by ari_stress またの名を tiger74 あるいはまたの名を Fajar Priyanto Jakarta, 17 September 2005. fajarpri at arinet dot org MS Certified ProfessionalでありながらLinuxを愛してしまった男。 ジャカルタで自動車関連企業に勤めてます。 Last Updated ( Sunday, 18 September 2005 ) --------------------------  ","permalink":"https://nobwak.github.io/posts/2005-09-22-%E4%BC%81%E6%A5%AD%E3%81%AEwindows%E7%92%B0%E5%A2%83%E3%82%92linux%E3%81%B8%E7%A7%BB%E8%A1%8C%E3%81%97%E3%81%9F%E3%83%9C%E3%82%AF%E3%81%AE%E4%BD%93%E9%A8%93%E8%A8%98%E7%BF%BB%E8%A8%B3/","summary":"Microsoftのライセンスは超高い。高すぎる。じゃあLinux/Unix環境へ…。 と、IT管理者なら誰しも一度は考える。でも色々考えると","title":"「企業のWindows環境をLinuxへ移行したボクの体験記」翻訳"},{"content":"会社の福利厚生の一環で人間ドックに行ってきました。 直腸検診を担当したのが若くて綺麗な女医さんだったのでショックでした。 でも毛むくじゃらで脂性のお医者さんだったらと考えると、まだいいかなと思いました。 まったく関係ありませんが、俺は以前、ゲイ\u0026amp;レズの聖地、サンフランシスコ近辺に住んでいました。 聖地の辺りはどんなところかというと。 ある日、日本の本社からのお客さん（それなりに偉い人）をホテルに送ったのですが、フロントの兄さんは僕ら二人を見ると、「ツインでの予約だけど、ダブルに変える？」と言ったのでした。 フロントの兄さんは、さり気なく気を遣ったつもりです。頭に来ますねこの野郎。 聖地サンフランシスコでは6月最終日曜日にプライドウォークという、人権団体のデモ行進があります。実際には、ゲイやレズの皆さんが権利を訴える場です。 一年に一度の祭典ですので、全米からその手の方々が集まってきます。 もちろん、その中には一夜のラブアフェアーを求めてやってくる人もいますし、パートナーを探しにやってくる人もいます。 ある時、知人（女性）がゲイの友人に悩みを相談されたとのこと。 彼も祭典でパートナーと巡り逢いたかったのでした。 が。 「彼は私の体だけが目的だったのよ！」「むしろ彼は私の心をファックしたのよ！」 サンフランシスコの恋模様。 一般的に言って、ゲイの人たちはとても繊細なのです。 一方で、一部にはアグレッシブな方も存在します。 別の知人、これまた女性ですが、友人男性と本屋に居たところ、なんと見知らぬ男性がその友人男性にアタック。 実は町のあちらこちらには、知る人ぞ知るゲイの\u0026quot;ナンパスポット\u0026quot;なるものが存在するのですが、その本屋がまさにナンパスポットだったそうな。 その女性は、「私と一緒に歩いてんのにナンパするとは何事か。」「つまり何？ 私は彼の彼女には見えなかったってこと？それとも『あの女からなら余裕で奪える』とでも思ったの？」 もちろんその女性は交際関係になかったので、別にナンパが成功しようが構わないのですが、女性としてのプライドが傷ついたらしく憤慨してました。 ちなみに、僕自身、その本屋の並びのレストランで食事をした際、ウェイターに激しく見つめられた経験があります。舐めるように、ねちっこく見るんですな。 なんとなーく、身の危険を感じたものです。 直腸検査の後の、お尻に残る異物感から以上のようなことを思い出したのでした。 余計な想像をして寒気がしたので今日は「ですます」調。  ","permalink":"https://nobwak.github.io/posts/2005-09-12-%E4%BA%BA%E9%96%93%E3%83%89%E3%83%83%E3%82%AF%E3%81%A8%E3%82%AC%E3%83%A9%E3%82%B9%E3%81%AE%E3%83%8F%E3%83%BC%E3%83%88/","summary":"会社の福利厚生の一環で人間ドックに行ってきました。 直腸検診を担当したのが若くて綺麗な女医さんだったのでショックでした。 でも毛むくじゃらで脂性","title":"人間ドックとガラスのハート"},{"content":"南の島は物価が安かった。なんてったってタクシー初乗り50円である。 ちょっとした夕日を眺めるようなレストランで、ビール飲んで色々食べても大した額にならない。 素敵だ。 でも、物価が安いってことは労働力も安いわけで、こういう国の人たちが本気になると、とってもこわい。 さんざん言われていることだけれども、シリコンバレーでは、インド系技術者の台頭が目覚ましい。なぜかと言えば、安い割に優秀だから。 「彼らの言語がプログラム言語と似ているから」、あるいは「彼らは貧乏なので潤沢なメモリを買えず、効率的なプログラムを書かざるを得ないから」、技術者として優秀なのは当然だと、自分たちの自尊心を守るような分析がされていたこともあったが、今ではもう誰もが認めている。 カレーの香りを身にまとい、サーバーダウンをサルバルドン（ルはすべて巻き舌）とか恐ろしい発音で周りの人を驚かせながら、安くて優秀な人、高くて超優秀な人が各所に進出しているのである。 そのあおりを食らうのは、元のシリコンバレー住人達。 車のディーラーに行ったら、やたら各メーカの高級車に詳しい営業がいて、話を聞いてみると「元」高給取りの技術者だった、とかいう話もある。 俺なども、あるゲイジュツの集いとやらに参加したとき、IT系企業をクビになって、肩もみ会社を興したという娘軍団に会ったことがある。（ちなみに、マッサージは下手くそだった。彼女たちの行く末は非常に不透明と言えよう。） そんなわけで、シリコンバレーでは一部のスーパー技術者/研究者を除き、中流以下の人間はもうどうにもならない状態になっているのだった。 日本はといえば、今のところ2byte文字の日本語バリアーにヌクヌクと守られている。日本語ムズカシイからな。 あるいは難解な仕様書か。 俺の勤めている会社で作成される、あるいは使用している仕様書は複雑怪奇で実態がない。俺個人はタマネギ仕様書またはマトリョーシカと呼んでいる。 分からないことがあって仕様書を開くと、「この部分の動作はコレコレこうあるべきで、その他は前決めた仕様書と同じ」と書いてある。で、その「前の仕様書」を開くと、そこも前の前の仕様書との差分しか書いてない。 賢明な読者の皆さんならもうお分かりであろうが、どこまで仕様書を追っても、結局疑問は解けない。タマネギの上っ面と、あるかないか分からないようなコンセンサスだけで開発を進めていくのだ。 インド人、あるいは他の国々の人たちが、バリアを物ともせず攻めてくる前に、肩もみの腕を磨くか、車の勉強するか、はたまた物価の安い国で日本人相手にレストランでも始めた方がいいのだろうか、と写真のレストランで日本円で百いくらの生ビールを飲みつつ俺は思ったのだった。 追記。 [http://www.itmedia.co.jp/enterprise/articles/0509/06/news093.html](http://www.itmedia.co.jp/enterprise/articles/0509/06/news093.html) オフショア市場に異変――多国籍企業との競争にさらされるインド企業(ITMedia)  ","permalink":"https://nobwak.github.io/posts/2005-09-06-%E3%82%A4%E3%83%B3%E3%83%89%E4%BA%BA%E3%81%A8%E3%83%9E%E3%83%88%E3%83%AA%E3%83%A7%E3%83%BC%E3%82%B7%E3%82%AB%E3%81%A8%E4%BB%95%E4%BA%8B%E3%81%AE%E6%84%9A%E7%97%B4/","summary":"南の島は物価が安かった。なんてったってタクシー初乗り50円である。 ちょっとした夕日を眺めるようなレストランで、ビール飲んで色々食べても大した","title":"インド人とマトリョーシカと仕事の愚痴"},{"content":"休みを取って、逃げるように南の島に行ってきました。 猥雑で清浄なところでした。 今は休みからのリハビリ中。 旅という非日常から、勤め人らしい、毎週決まったことをするルーチン的日常に戻るリハビリです。 そういえば小学生の頃の教科書で通勤電車を棺に例えたエッセイか何かを読んだ覚えがある。毎週同じ事をして暮らすうち、色々な感性が摩耗して死んでいくのだろう。 チャップリンが自伝で「この世で素敵なものベスト3」を挙げていた。第2位が詩人。 なぜかというと、詩人にとっては、すべてが、いつでも新鮮だからだそうだ。 例えば朝起きて窓の外を眺め、「空！でかい！青い！」「太陽！まぶしい！暑い！」「雲！白い！動いてる！モコモコ！」と、まるで初めて見たかのように感激をし、新しい発見ができるのだ。毎日ハイテンションで暮らしていけると言えよう。 逆に俺のような薄汚れた大人は今さら雲を見たって「雲」という記号でしか認識しない。何も視覚だけでなく、五感というI/Oデバイスから入力される外部刺激に鈍感になってるのだ。 でも、戦う勤め人達は、そうやって鈍感にならなければ、毎日やっていけないのかもしれない。 チャップリンが素敵なもの第一位に挙げたのは何か、というのは自伝をぜひ読んでください。第三位は忘れた。そもそも第三位は触れられてなかったかもしれない。  ","permalink":"https://nobwak.github.io/posts/2005-09-05-%E5%8D%97%E3%81%AE%E5%B3%B6%E3%81%A8%E6%A3%BA%E3%81%A8%E8%A9%A9%E4%BA%BA/","summary":"休みを取って、逃げるように南の島に行ってきました。 猥雑で清浄なところでした。 今は休みからのリハビリ中。 旅という非日常から、勤め人らしい、毎週","title":"南の島と棺と詩人"},{"content":"横浜のあるレストランに行った。 そこはテーブルクロスが紙で、テーブルの上にはクレヨン。 案の定、ウェイトレスが自分の名前をクロスに書いた。 そこで思ったのは、「このレストランはチップがいるのだろうか」ということ。 というのも、テーブルクロスに名前を書くのは、ウェイター/ウェイトレスが客に自分を印象づける手として使っているのを、チップ制のレストランで何度か見たことがあるから。 チップ制レストランでは、ウェイターごとに扱うテーブルが決まっており、そこに座った客には、担当のウェイターが最後まで面倒を見る。 ニンジン嫌いだから入れるなとかワガママを聞いてやりつつ注文を取り、料理を持ってきて、客が食事を始めてしばらくしたら再び顔を出し、\u0026quot;Everything is OK?\u0026quot;と聞くなりして気を遣ってるアピールをし、食後のデザートを勧めたりとか、残った料理を持って帰りたい客には箱を用意する。そういうサービスをしつつチップを得る。 チップの是非はともかくとして、チップ制サービスのキモは個別対応だと思う。 チップは「その」お客さんへのサービス対価を、直接ウェイターが受け取れるようにするもの。それによって客の千差万別にわたるワガママに対応できるようにさせているんであろう。 で、皆さんは、あるサービスの中に、自分のストライクゾーンがないことはありませんか。 俺の場合、オハヨー乳業の製品が、コンビニから凄い勢いで消えるのが不満である。[オハヨー乳業株式会社](http://www.ohayo-milk.co.jp/index.html)は、たいてい誰も知らんから説明すると、ヨーグルトとかプリンとか、乳製品かつ菓子系食品を製造していて、俺はここの味が好きなのだが、人気がないせいか数ヶ月もしないうちに店頭から消える。 さらには、あんなにある携帯端末の中で、気に入るものが一機種もないのが不満。ていうかそもそも折りたたみが嫌いなので、その時点で98%ぐらいの機種が候補から外れてしまうのだった。 今はしょうがなく買った携帯端末を、鬱憤を感じつつ使ってます。 最近の携帯端末はツーカーSとかDOLCEとか、盛んに層を絞った商品作りをしていると言うけれども、一機種あたりおよそ数億の開発費がかかり、その上でメーカから通信業者が一台一台端末を買い取り、さらに販売代理店に手数料を払うような、莫大なお金が動くシステムで、どこまで尖った端末を出せるのだろうか、と思う。 一方で、中国、韓国から端末を調達するニュースも見かけるが、それはそれで各通信事業者特有のシステムにどこまで対応しているかも分からない。 ドコモの立川前社長が、「ユーザが好きな端末を買って、好きなOS、ソフトを入れて使えるような、そういう携帯電話が夢だ。」と言っていた。俺もこういうチップ制レストランのような携帯電話が欲しいです。 で、冒頭のレストランにチップは必要なく、単にチップ制レストラン「ぽい」雰囲気を出してるだけでした。  ","permalink":"https://nobwak.github.io/posts/2005-08-22-%E3%83%81%E3%83%83%E3%83%97%E3%81%A8%E3%82%AA%E3%83%8F%E3%83%A8%E3%83%BC%E4%B9%B3%E6%A5%AD%E3%81%A8%E5%A4%A2%E3%81%AE%E6%90%BA%E5%B8%AF%E9%9B%BB%E8%A9%B1/","summary":"横浜のあるレストランに行った。 そこはテーブルクロスが紙で、テーブルの上にはクレヨン。 案の定、ウェイトレスが自分の名前をクロスに書いた。 そこで","title":"チップとオハヨー乳業と夢の携帯電話"},{"content":"業務上の必要性からLinuxを勉強しています。 BSD系、Solarisなら勝手が分かるものの、Linuxはまったく知らないので大変です。 今日の日記はただの愚痴です。 ディストリビューションはRed Hat系のFedora Core 4(FC4)を選択しました。 デフォルトのインストールでWMが選択され、しかもそれが重いGNOMEとかKDEなんてディストリは嫌なのですが、寄らば大樹の陰と嫌々ながらも選んだのでした。ネット上の情報量も多いですし。本当ならGentoo辺りに同類の香りを感じるのですが、この際仕方ないでしょう。 さて早速インストールを試みると、驚いたことに最新版の4は起動用のフロッピーイメージがなくCDかDVDのみ。CD-ROMドライブの無いノートに入れるつもりだったので難儀しました。何とかインストールも完了し、鬼門のX設定も完了、GNOMEをfluxboxに変更したところで、apacheを設定してみました。 …動かない。apacheそのものや、トップページは動くんだけど、そこに作成したディレクトリ配下、ユーザのpublic_html配下が見えない。 調べてみると、FC4ではデフォルトで動作するSELinux(Security-Enhanced Linux)モジュールのせい。要するに今までにUNIX系OSにはないセキュリティメカニズムが実装されていたためでした。 Linuxは良く言えば進取の気性に富んでおり、悪く言えば節操がない。 新しい技術を取り込むのにためらいがない。これは俺のUNIX系人生がBSDから始まったからこそ余計にそう思えるんでしょう。 とにかく、新しい仕組みが沢山入ってて、分からないことだらけだ。BSDからSolarisに移ったときより辛い。なまじ他のUNIX系OSに関する知識があるので、思わぬところで足を取られる。 そして、ふとローカルホストにsshを試みたら普通にログインが出来てしまうではないか。しかも鍵認証じゃなくパスワード認証で。 sshd動いているんならリモートから、と思ったら繋がらない。なんか別のアクセス制御がかかっているようだ。 インストール直後の時点でsshd他サービスが起動していて（しているように見える）、だけどリモートからはアクセス制限が有効になっているせいで接続できない。このアンバランスさが不思議。 慣れるには時間がかかりそうだ。  ","permalink":"https://nobwak.github.io/posts/2005-08-21-fedora_core%E3%81%A8%E6%A0%BC%E9%97%98%E4%B8%AD/","summary":"業務上の必要性からLinuxを勉強しています。 BSD系、Solarisなら勝手が分かるものの、Linuxはまったく知らないので大変です。 今日","title":"Fedora Coreと格闘中"},{"content":"外で冷たい飲み物を頼むと、オレンジジュースだろうがコーラだろうがコーヒーだろうが、たいていは氷が入っている。 実は俺はそれが大嫌い。なぜって放っておくと水っぽくなってしまうから。それを避けるには氷が溶け出す前に飲みきらなければならないが、飲み物くらい自分のペースで飲ませて欲しいのである。皆さんいかがですか。水っぽくなっても平気ですか。 そんなわけでスターバックスでアイスラテを頼むときも当然氷抜き。 日本語だと「氷を入れるな」で済むけど、英語で頼むとIce latte, but no ice pleaseとなる。すると結構な確率で店員がハァ？という顔をして固まるか、え？なんでなんで？と聞いてくる。 そのたびに、面倒くさいなあと思いながらも説明するのだ。 ある日、赤毛でソバカスなコムスメ店員がやっぱりフリーズして、またかと思いつつ同じように説明したところ、こっちを1～2秒見つめた後、\u0026quot;You, are, weird.(あんたおかしいわよ）\u0026quot;と一語一語区切りつつ抜かしやがりました。 スリッパで頭ぶん殴ってやろうかと思ったけど、そこは大人の余裕で「あ、ミルクたっぷりね」と返しておきました。 スターバックスで思いしたけど、スターバックス貯金という節約術が一時期話題になった（俺の住んでいたカリフォルニアのとある地域で）。 なんのことはない。単にスターバックスに行くのを止めればお金が貯まるというだけ。 確かに高いしのう。 で、俺は日本に帰ってからスターバックスには一度も行ってません。別に件の節約術を遂行しているわけではない。 あちらではカップのサイズがTallから始まり、Grande、Venti（いわゆるバケツサイズ）の三種類。日本ではお猪口みたいなクソ小さいSmallから始まってTall、Grandeで同じく三種類、なのだが。 実は米国で俺のいたエリアのTallと日本のSmallの値段がほぼ同じ。 そんなわけで日本でスターバックスのコーヒー飲むのが馬鹿馬鹿しくなったのであった。  ","permalink":"https://nobwak.github.io/posts/2005-08-16-ice_latte_but_no_ice_please%E3%81%A8%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%90%E3%83%83%E3%82%AF%E3%82%B9%E8%B2%AF%E9%87%91/","summary":"外で冷たい飲み物を頼むと、オレンジジュースだろうがコーラだろうがコーヒーだろうが、たいていは氷が入っている。 実は俺はそれが大嫌い。なぜって放","title":"Ice latte, but no ice pleaseとスターバックス貯金"},{"content":"相変わらず暑いけど、夜になれば虫の音が目立つようになってきた。\n「秋来ぬと目にはさやかに見えねども風の音にぞおどろかれぬる」という古今集の歌を思い出す。 これこそ日本。\n俺が2年と半ほど住んでいたカリフォルニアのとある地域では、季節は雨季と乾季の二種類しかなかった。\n3～4月頃からずーっと晴れ。晴れ。天気予報見る必要なし。\nで、11月頃から雨季に入るが、雨季と言っても日本の梅雨のようにダラダラ降るわけではなく、思い出したようにパラパラと降る。それも日本のように広範囲で同じように降るのではなく、とても局地的。ある場所では大粒だけど、ちょっと行くと霧雨、さらに進むと普通に晴れてたりする。\n天気予報ではこれを\u0026quot;Isolated shower\u0026quot;などと表現したりするが、まさにisolated(孤立した)という表現がぴったり。\nだから雨が降ったとしても、空の様子は日本のどこまでも薄暗い雨空とは違い、雲の濃淡があったり、遥か先には日が射し込んでいたりと表情豊かで見ていて飽きない。\nそれでも年に2,3回は\u0026quot;Storm\u0026quot;がやってきて、とは言っても台風を経験してれば大したことはないのだけど、まあまとまった雨が降る。まとまった雨が降ると平気で停電する。呆気ないくらい。信号とかも死亡。\nそういうときは、お巡りさんが一時停止の看板をそういった交差点に置いていく。皆慣れたもので、きっちり一時停止して互い違いに交差点を通過していく。まったく混乱は見られない。つまりチャメシゴトなんである。\n雨で停電するのはチャメシゴトなのに、なぜ手を打たないかというと、抜本的な対策するより、その場その場で対症療法的に対応したほうが安いからだそうだ。\nその是非は置くとして、俺のような技術者貧民街の住人は、停電となるとそりゃもう胃が痛くなる。\n赴任して最初の雨季でかなり痛い目に遭って、それから相当量の稼働とお金を割いてガッチリ停電対策をした。\n特にUPS。日本にいたとき、俺の中ではどっちかっていうと保険的な意味合いもあったけれど（いやもちろん大事なのは分かってましたよ）、あちらで日常必須品レベルにまで昇格しました。 UPS最高。でもバッテリーは軽くしてください。\n","permalink":"https://nobwak.github.io/posts/2005-08-15-%E5%8F%A4%E4%BB%8A%E9%9B%86%E3%81%A8isolated_shower%E3%81%A8ups/","summary":"相変わらず暑いけど、夜になれば虫の音が目立つようになってきた。 「秋来ぬと目にはさやかに見えねども風の音にぞおどろかれぬる」という古今集の歌を","title":"古今集とIsolated showerとUPS"},{"content":" # ssh 192.168.1.7 \u0026#39;zfs send -R vaults/chamber@daily-2019-12-29_03.01.00--1w1d\u0026#39; | zfs receive abyss/chamber_camazotz zfs list -t snapshot | awk \u0026#39;$2 == 0 {print $1}\u0026#39; ","permalink":"https://nobwak.github.io/posts/2019-12-30-zfs_snapshot%E3%81%AE%E8%BB%A2%E9%80%81/","summary":" # ssh 192.168.1.7 \u0026#39;zfs send -R vaults/chamber@daily-2019-12-29_03.01.00--1w1d\u0026#39; | zfs receive abyss/chamber_camazotz zfs list -t snapshot | awk \u0026#39;$2 == 0 {print $1}\u0026#39; ","title":""},{"content":"","permalink":"https://nobwak.github.io/posts/2022/2022-02-01-windows%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bpython%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89/","summary":"","title":""},{"content":"nobwaklair ","permalink":"https://nobwak.github.io/posts/readme/","summary":"nobwaklair ","title":""}]